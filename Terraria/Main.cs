using Microsoft.Win32;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using Terraria.Achievements;
using Terraria.DataStructures;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Events;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.GameContent.UI.Chat;
using Terraria.GameContent.UI.States;
using Terraria.Graphics;
using Terraria.Graphics.Capture;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Initializers;
using Terraria.IO;
using Terraria.Map;
using Terraria.Net;
using Terraria.Net.Sockets;
using Terraria.ObjectData;
using Terraria.Social;
using Terraria.Social.Base;
using Terraria.UI;
using Terraria.UI.Chat;
using Terraria.Utilities;
using Terraria.World.Generation;

namespace Terraria
{
	public class Main : Game
	{
		public const int offLimitBorderTiles = 40;

		public const int maxItemTypes = 3601;

		public const int maxProjectileTypes = 651;

		public const int maxNPCTypes = 540;

		public const int maxTileSets = 419;

		public const int maxWallTypes = 225;

		public const int maxBuffTypes = 191;

		public const int maxGlowMasks = 214;

		public const int maxExtras = 69;

		public const int maxGoreTypes = 907;

		public const int numBannerTypes = 251;

		public const int numArmorHead = 194;

		public const int numArmorBody = 195;

		public const int numArmorLegs = 135;

		public const int numAccHandsOn = 19;

		public const int numAccHandsOff = 12;

		public const int numAccNeck = 9;

		public const int numAccBack = 10;

		public const int numAccFront = 5;

		public const int numAccShoes = 18;

		public const int numAccWaist = 12;

		public const int numAccShield = 6;

		public const int numAccFace = 9;

		public const int numAccBalloon = 16;

		public const int maxWings = 37;

		public const int maxBackgrounds = 207;

		public const int numInfoIcons = 13;

		private const int MF_BYPOSITION = 1024;

		public const int sectionWidth = 200;

		public const int sectionHeight = 150;

		public const int maxDust = 6000;

		public const int maxCombatText = 100;

		public const int maxItemText = 20;

		public const int maxPlayers = 255;

		public const int maxChests = 1000;

		public const int maxItems = 400;

		public const int maxProjectiles = 1000;

		public const int maxNPCs = 200;

		private const double slimeRainMaxTime = 54000;

		private const double slimeRainMinTime = 32400;

		private const double slimeRainMaxDelay = 604800;

		private const double slimeRainMinDelay = 302400;

		private const double slimeRainChance = 1728000;

		public const int maxGore = 500;

		public const int realInventory = 50;

		public const int maxInventory = 58;

		public const int maxItemSounds = 125;

		public const int maxNPCHitSounds = 57;

		public const int maxNPCKilledSounds = 62;

		public const int maxLiquidTypes = 12;

		public const int maxMusic = 40;

		public const double dayLength = 54000;

		public const double nightLength = 32400;

		public const int maxStars = 130;

		public const int maxStarTypes = 5;

		public const int maxClouds = 200;

		public const int maxCloudTypes = 22;

		public const int maxHair = 134;

		public const int maxCharSelectHair = 51;

		public const int MaxTimeout = 120;

		public bool unityMouseOver;

		public static Main instance;

		public static int curRelease;

		public static string versionNumber;

		public static string versionNumber2;

		public static Vector2 destroyerHB;

		public static FavoritesFile LocalFavoriteData;

		public static FavoritesFile CloudFavoritesData;

		public static FileMetadata WorldFileMetadata;

		public static FileMetadata MapFileMetadata;

		private AchievementManager _achievements;

		public static UserInterface MenuUI;

		public static UserInterface InGameUI;

		private static Main.OnPlayerSelected _pendingCharacterSelect;

		public static bool drawBackGore;

		public static float expertLife;

		public static float expertDamage;

		public static float expertDebuffTime;

		public static float expertKnockBack;

		public static float expertNPCDamage;

		public static float knockBackMultiplier;

		public static float damageMultiplier;

		public WaterfallManager waterfallManager;

		public static WorldSections sectionManager;

		public static bool ServerSideCharacter;

		public static string clientUUID;

		public static bool ContentLoaded;

		public static int maxMsg;

		private static int toolTipDistance;

		public static float GlobalTime;

		public static bool GlobalTimerPaused;

		private static ulong _tileFrameSeed;

		private static ulong _drawCycleCounter;

		public static Effect screenShader;

		public static Effect pixelShader;

		public static Effect tileShader;

		public static int npcStreamSpeed;

		public static int musicError;

		public static bool dedServFPS;

		public static int dedServCount1;

		public static int dedServCount2;

		public static bool superFast;

		public static bool[] hairLoaded;

		public static bool[] wingsLoaded;

		public static bool[] goreLoaded;

		public static bool[] projectileLoaded;

		public static bool[] itemFlameLoaded;

		public static bool[] backgroundLoaded;

		public static bool[] tileSetsLoaded;

		public static bool[] wallLoaded;

		public static bool[] NPCLoaded;

		public static bool[] armorHeadLoaded;

		public static bool[] armorBodyLoaded;

		public static bool[] armorLegsLoaded;

		public static bool[] accHandsOnLoaded;

		public static bool[] accHandsOffLoaded;

		public static bool[] accBackLoaded;

		public static bool[] accFrontLoaded;

		public static bool[] accShoesLoaded;

		public static bool[] accWaistLoaded;

		public static bool[] accShieldLoaded;

		public static bool[] accNeckLoaded;

		public static bool[] accFaceLoaded;

		public static bool[] accballoonLoaded;

		public static Vector2[] OffsetsNPCOffhand;

		public static Vector2[] OffsetsPlayerOffhand;

		public static Vector2[] OffsetsPlayerOnhand;

		public static Vector2[] OffsetsPlayerHeadgear;

		public static float zoomX;

		public static float zoomY;

		public static float sunCircle;

		public static int BlackFadeIn;

		public static bool noWindowBorder;

		private Matrix Transform = Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));

		private RasterizerState Rasterizer = RasterizerState.CullCounterClockwise;

		public static int ugBack;

		public static int oldUgBack;

		public static int[] bgFrame;

		public static int[] bgFrameCounter;

		public static bool skipMenu;

		public static bool verboseNetplay;

		public static bool stopTimeOuts;

		public static bool showSpam;

		public static bool showItemOwner;

		public static bool[] nextNPC;

		public static int musicBox;

		public static int musicBox2;

		public static byte hbPosition;

		public static bool cEd;

		public static float wFrCounter;

		public static float wFrame;

		public static float upTimer;

		public static float upTimerMax;

		public static float upTimerMaxDelay;

		public static bool drawDiag;

		public static bool drawRelease;

		public static bool drawBetterDebug;

		public static bool betterDebugRelease;

		public static bool renderNow;

		public static bool drawToScreen;

		public static bool targetSet;

		public static int mouseX;

		public static int mouseY;

		public static int lastMouseX;

		public static int lastMouseY;

		public static bool mouseLeft;

		public static bool mouseRight;

		private static bool _isMouseLeftConsumedByUI;

		public static float essScale;

		public static int essDir;

		public static float[] cloudBGX;

		public static float cloudBGAlpha;

		public static float cloudBGActive;

		public static int[] cloudBG;

		public static int[] treeMntBG;

		public static int[] treeBG;

		public static int[] corruptBG;

		public static int[] jungleBG;

		public static int[] snowMntBG;

		public static int[] snowBG;

		public static int[] hallowBG;

		public static int[] crimsonBG;

		public static int[] desertBG;

		public static int oceanBG;

		public static int[] treeX;

		public static int[] treeStyle;

		public static int[] caveBackX;

		public static int[] caveBackStyle;

		public static int iceBackStyle;

		public static int hellBackStyle;

		public static int jungleBackStyle;

		public static string debugWords;

		public static bool gamePad;

		public static bool xMas;

		public static bool halloween;

		public static int snowDust;

		public static bool chTitle;

		public static bool hairWindow;

		public static bool clothesWindow;

		public static bool ingameOptionsWindow;

		public static bool achievementsWindow;

		public static int keyCount;

		public static string[] keyString;

		public static int[] keyInt;

		public static byte gFade;

		public static float gFader;

		public static byte gFadeDir;

		public static bool netDiag;

		public static int txData;

		public static int rxData;

		public static int txMsg;

		public static int rxMsg;

		public static int[] rxMsgType;

		public static int[] rxDataType;

		public static int[] txMsgType;

		public static int[] txDataType;

		public static float uCarry;

		public static bool drawSkip;

		public static int fpsCount;

		public static Stopwatch fpsTimer;

		public static Stopwatch updateTimer;

		public bool gammaTest;

		public static int fountainColor;

		public static int monolithType;

		public static bool showSplash;

		public static bool ignoreErrors;

		public static string defaultIP;

		public static int dayRate;

		public static int maxScreenW;

		public static int minScreenW;

		public static int maxScreenH;

		public static int minScreenH;

		public static float iS;

		public static bool render;

		public static int qaStyle;

		public static int zoneX;

		public static int zoneY;

		public static float harpNote;

		public static bool[] projHostile;

		public static bool[] projHook;

		public static bool[] pvpBuff;

		public static bool[] persistentBuff;

		public static bool[] vanityPet;

		public static bool[] lightPet;

		public static bool[] meleeBuff;

		public static bool[] debuff;

		public static string[] buffName;

		public static string[] buffTip;

		public static bool[] buffNoSave;

		public static bool[] buffNoTimeDisplay;

		public static bool[] buffDoubleApply;

		public static int maxMP;

		public static string[] recentWorld;

		public static string[] recentIP;

		public static int[] recentPort;

		public static bool shortRender;

		public static bool owBack;

		public static int quickBG;

		public static int bgDelay;

		public static int bgStyle;

		public static float[] bgAlpha;

		public static float[] bgAlpha2;

		public static int EquipPage;

		public static int EquipPageSelected;

		public int mouseNPC = -1;

		public static int wof;

		public static int wofT;

		public static int wofB;

		public static int wofF;

		public static int offScreenRange;

		private RenderTarget2D backWaterTarget;

		private RenderTarget2D waterTarget;

		private RenderTarget2D tileTarget;

		private RenderTarget2D blackTarget;

		private RenderTarget2D tile2Target;

		private RenderTarget2D wallTarget;

		private RenderTarget2D backgroundTarget;

		private RenderTarget2D screenTarget;

		public static int maxMapUpdates;

		public static bool refreshMap;

		public static int loadMapLastX;

		public static bool loadMapLock;

		public static bool loadMap;

		public static bool mapReady;

		public static int textureMaxWidth;

		public static int textureMaxHeight;

		public static bool updateMap;

		public static int mapMinX;

		public static int mapMaxX;

		public static int mapMinY;

		public static int mapMaxY;

		public static int mapTimeMax;

		public static int mapTime;

		public static bool clearMap;

		public static int mapTargetX;

		public static int mapTargetY;

		private static bool flameRingLoaded;

		private Texture2D flameRingTexture;

		private Texture2D mapDeathTexture;

		private RenderTarget2D[,] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];

		private RenderTarget2D mapSectionTexture;

		public static bool[,] initMap;

		public static bool[,] mapWasContentLost;

		private Texture2D[] infoIconTexture = new Texture2D[13];

		public static Texture2D[] clothesTexture;

		public static Texture2D[] mapIconTexture;

		private static Texture2D[] underworldTexture;

		public static Texture2D mapTexture;

		private Texture2D mapBG1Texture;

		private Texture2D mapBG2Texture;

		private Texture2D mapBG3Texture;

		private Texture2D mapBG4Texture;

		private Texture2D mapBG5Texture;

		private Texture2D mapBG6Texture;

		private Texture2D mapBG7Texture;

		private Texture2D mapBG8Texture;

		private Texture2D mapBG9Texture;

		private Texture2D mapBG10Texture;

		private Texture2D mapBG11Texture;

		private Texture2D mapBG12Texture;

		private Texture2D mapBG13Texture;

		private Texture2D mapBG14Texture;

		private Texture2D mapBG15Texture;

		private Texture2D hueTexture;

		public static Texture2D colorSliderTexture;

		public static Texture2D colorBarTexture;

		public static Texture2D colorBlipTexture;

		public static Texture2D smartDigTexture;

		public static Microsoft.Xna.Framework.Color OurFavoriteColor;

		public static Texture2D tileCrackTexture;

		private Texture2D iceBarrierTexture;

		public static bool mapInit;

		public static bool mapEnabled;

		public static int mapStyle;

		public static float grabMapX;

		public static float grabMapY;

		public static int miniMapX;

		public static int miniMapY;

		public static int miniMapWidth;

		public static int miniMapHeight;

		public static float mapMinimapScale;

		public static float mapMinimapAlpha;

		public static float mapOverlayScale;

		public static float mapOverlayAlpha;

		public static bool mapFullscreen;

		public static bool resetMapFull;

		public static float mapFullscreenScale;

		public static Vector2 mapFullscreenPos;

		private static bool IsEngineLoaded;

		private int firstTileX;

		private int lastTileX;

		private int firstTileY;

		private int lastTileY;

		private double bgParallax;

		private int bgStart;

		private int bgLoops;

		private int bgStartY;

		private int bgLoopsY;

		private int bgTop;

		public static int renderCount;

		public static GraphicsDeviceManager graphics;

		public static SpriteBatch spriteBatch;

		public static TileBatch tileBatch;

		private Process tServer = new Process();

		private static Stopwatch saveTime;

		public static MouseState mouseState;

		public static MouseState oldMouseState;

		public static int oldMouseWheel;

		public static KeyboardState keyState;

		public static Microsoft.Xna.Framework.Color mcColor;

		public static Microsoft.Xna.Framework.Color hcColor;

		public static Microsoft.Xna.Framework.Color highVersionColor;

		public static Microsoft.Xna.Framework.Color errorColor;

		public static Microsoft.Xna.Framework.Color bgColor;

		public static bool mouseHC;

		public static bool craftingHide;

		public static bool armorHide;

		public static float craftingAlpha;

		public static float armorAlpha;

		public static float[] buffAlpha;

		public static Item trashItem;

		public static bool hardMode;

		public float chestLootScale = 1f;

		public bool chestLootHover;

		public float chestStackScale = 1f;

		public bool chestStackHover;

		public float chestDepositScale = 1f;

		public bool chestDepositHover;

		public float chestRenameScale = 1f;

		public bool chestRenameHover;

		public float chestCancelScale = 1f;

		public bool chestCancelHover;

		public static Vector2 sceneWaterPos;

		public static Vector2 sceneTilePos;

		public static Vector2 sceneTile2Pos;

		public static Vector2 sceneWallPos;

		public static Vector2 sceneBackgroundPos;

		public static bool maxQ;

		public static float gfxQuality;

		public static float gfxRate;

		public int DiscoStyle;

		public static int DiscoR;

		public static int DiscoB;

		public static int DiscoG;

		public static int teamCooldown;

		public static int teamCooldownLen;

		public static bool gamePaused;

		public static bool gameInactive;

		public static int updateTime;

		public static int drawTime;

		public static int uCount;

		public static int updateRate;

		public static int frameRate;

		public static bool RGBRelease;

		public static bool qRelease;

		public static bool netRelease;

		public static bool frameRelease;

		public static bool showFrameRate;

		public static int magmaBGFrame;

		public static int magmaBGFrameCounter;

		public static int saveTimer;

		public static bool autoJoin;

		public static bool serverStarting;

		public static float leftWorld;

		public static float rightWorld;

		public static float topWorld;

		public static float bottomWorld;

		public static int maxTilesX;

		public static int maxTilesY;

		public static int maxSectionsX;

		public static int maxSectionsY;

		public static int numDust;

		public static int numPlayers;

		public static int maxNetPlayers;

		private static UICharacterSelect _characterSelectMenu;

		private static UIWorldSelect _worldSelectMenu;

		public static UIAchievementsMenu AchievementsMenu;

		public static int maxRain;

		public static int slimeWarningTime;

		public static int slimeWarningDelay;

		public static float slimeRainNPCSlots;

		public static bool[] slimeRainNPC;

		public static double slimeRainTime;

		public static bool slimeRain;

		public static int slimeRainKillCount;

		public int invBottom = 210;

		public static float cameraX;

		public static bool drewLava;

		public static float[] liquidAlpha;

		public static int waterStyle;

		public static int worldRate;

		public static float caveParallax;

		public static int dungeonX;

		public static int dungeonY;

		public static Liquid[] liquid;

		public static LiquidBuffer[] liquidBuffer;

		public static bool dedServ;

		public static int spamCount;

		public static int curMusic;

		public static int dayMusic;

		public static int ugMusic;

		public int newMusic;

		public static bool showItemText;

		public static bool autoSave;

		public static bool validateSaves;

		public static bool bannerMouseOver;

		public static string buffString;

		public static string libPath;

		public static int lo;

		public static int LogoA;

		public static int LogoB;

		public static bool LogoT;

		public static string statusText;

		public static string worldName;

		public static int worldID;

		public static int background;

		public static int caveBackground;

		public static float ugBackTransition;

		public static Microsoft.Xna.Framework.Color tileColor;

		public static double worldSurface;

		public static double rockLayer;

		public static Microsoft.Xna.Framework.Color[] teamColor;

		public static bool dayTime;

		public static double time;

		public static int moonPhase;

		public static short sunModY;

		public static short moonModY;

		public static bool grabSky;

		public static bool bloodMoon;

		public static bool pumpkinMoon;

		public static bool snowMoon;

		public static float cloudAlpha;

		public static float maxRaining;

		public static float oldMaxRaining;

		public static int rainTime;

		public static bool raining;

		public static bool eclipse;

		public static float eclipseLight;

		public static int checkForSpawns;

		public static int helpText;

		public static bool autoGen;

		public static bool autoPause;

		public static int[] projFrames;

		public static bool[] projPet;

		public static float demonTorch;

		public static int demonTorchDir;

		public static float martianLight;

		public static int martianLightDir;

		public static bool placementPreview;

		public static int numStars;

		public static int weatherCounter;

		public static int cloudLimit;

		public static int numClouds;

		public static int numCloudsTemp;

		public static float windSpeedTemp;

		public static float windSpeed;

		public static float windSpeedSet;

		public static float windSpeedSpeed;

		public static Cloud[] cloud;

		public static bool resetClouds;

		public static int sandTiles;

		public static int evilTiles;

		public static int shroomTiles;

		public static float shroomLight;

		public static int snowTiles;

		public static int holyTiles;

		public static int waterCandles;

		public static int peaceCandles;

		public static int meteorTiles;

		public static int bloodTiles;

		public static int jungleTiles;

		public static int dungeonTiles;

		public static bool sunflower;

		public static bool clock;

		public static bool campfire;

		public static bool starInBottle;

		public static bool heartLantern;

		public static int fadeCounter;

		public static float invAlpha;

		public static float invDir;

		[ThreadStatic]
		public static Random rand;

		public static Texture2D[] chestStackTexture;

		private static bool allChestStackHover;

		public static Texture2D[] bannerTexture;

		public static Texture2D[] npcHeadTexture;

		public static Texture2D[] npcHeadBossTexture;

		public static Texture2D[] craftToggleTexture;

		public static Texture2D craftUpButtonTexture;

		public static Texture2D craftDownButtonTexture;

		public static Texture2D scrollLeftButtonTexture;

		public static Texture2D scrollRightButtonTexture;

		public static Texture2D frozenTexture;

		public static Texture2D magicPixel;

		public static Texture2D miniMapFrameTexture;

		public static Texture2D miniMapFrame2Texture;

		public static Texture2D[] miniMapButtonTexture;

		public static Texture2D[] destTexture;

		public static Texture2D[] gemTexture;

		public static Texture2D[] rudolphMountTexture;

		public static Texture2D bunnyMountTexture;

		public static Texture2D pigronMountTexture;

		public static Texture2D slimeMountTexture;

		public static Texture2D minecartMountTexture;

		public static Texture2D turtleMountTexture;

		public static Texture2D[] beeMountTexture;

		public static Texture2D[] UFOMountTexture;

		public static Texture2D[] drillMountTexture;

		public static Texture2D[] scutlixMountTexture;

		public static Texture2D unicornMountTexture;

		public static Texture2D[] minecartMechMountTexture;

		public static Texture2D[] cuteFishronMountTexture;

		public static Texture2D minecartWoodMountTexture;

		public static Texture2D[] wingsTexture;

		public static Texture2D[] armorHeadTexture;

		public static Texture2D[] armorBodyTexture;

		public static Texture2D[] femaleBodyTexture;

		public static Texture2D[] armorArmTexture;

		public static Texture2D[] armorLegTexture;

		public static Texture2D[] accHandsOnTexture;

		public static Texture2D[] accHandsOffTexture;

		public static Texture2D[] accBackTexture;

		public static Texture2D[] accFrontTexture;

		public static Texture2D[] accShoesTexture;

		public static Texture2D[] accWaistTexture;

		public static Texture2D[] accShieldTexture;

		public static Texture2D[] accNeckTexture;

		public static Texture2D[] accFaceTexture;

		public static Texture2D[] accBalloonTexture;

		public static Texture2D pulleyTexture;

		public static Texture2D[] xmasTree;

		public static Texture2D[] FlameTexture;

		public static Texture2D timerTexture;

		public static Texture2D[] reforgeTexture;

		public static Texture2D wallOutlineTexture;

		public static Texture2D actuatorTexture;

		public static Texture2D wireTexture;

		public static Texture2D wire2Texture;

		public static Texture2D wire3Texture;

		public static Texture2D[] cameraTexture;

		public static Texture2D flyingCarpetTexture;

		public static Texture2D gridTexture;

		public static Texture2D lightDiscTexture;

		public static Texture2D EyeLaserTexture;

		public static Texture2D BoneEyesTexture;

		public static Texture2D BoneLaserTexture;

		public static Texture2D trashTexture;

		public static Texture2D fishingLineTexture;

		public static Texture2D beetleTexture;

		public static Texture2D probeTexture;

		public static Texture2D eyeLaserSmallTexture;

		public static Texture2D xmasLightTexture;

		public static Texture2D[] golemTexture;

		public static Texture2D confuseTexture;

		public static Texture2D sunOrbTexture;

		public static Texture2D sunAltarTexture;

		public static Texture2D[] chainsTexture;

		public static Texture2D chainTexture;

		public static Texture2D[] gemChainTexture;

		public static Texture2D chain2Texture;

		public static Texture2D chain3Texture;

		public static Texture2D chain4Texture;

		public static Texture2D chain5Texture;

		public static Texture2D chain6Texture;

		public static Texture2D chain7Texture;

		public static Texture2D chain8Texture;

		public static Texture2D chain9Texture;

		public static Texture2D chain10Texture;

		public static Texture2D chain11Texture;

		public static Texture2D chain12Texture;

		public static Texture2D chain13Texture;

		public static Texture2D chain14Texture;

		public static Texture2D chain15Texture;

		public static Texture2D chain16Texture;

		public static Texture2D chain17Texture;

		public static Texture2D chain18Texture;

		public static Texture2D chain19Texture;

		public static Texture2D chain20Texture;

		public static Texture2D chain21Texture;

		public static Texture2D chain22Texture;

		public static Texture2D chain23Texture;

		public static Texture2D chain24Texture;

		public static Texture2D chain25Texture;

		public static Texture2D chain26Texture;

		public static Texture2D chain27Texture;

		public static Texture2D chain28Texture;

		public static Texture2D chain29Texture;

		public static Texture2D chain30Texture;

		public static Texture2D chain31Texture;

		public static Texture2D chain32Texture;

		public static Texture2D chain33Texture;

		public static Texture2D chain34Texture;

		public static Texture2D chain35Texture;

		public static Texture2D chain36Texture;

		public static Texture2D chain37Texture;

		public static Texture2D chain38Texture;

		public static Texture2D chain39Texture;

		public static Texture2D chain40Texture;

		public static Texture2D hbTexture1;

		public static Texture2D hbTexture2;

		public static Texture2D chaosTexture;

		public static Texture2D cdTexture;

		public static Texture2D wofTexture;

		public static Texture2D boneArmTexture;

		public static Texture2D boneArm2Texture;

		public static Texture2D pumpkingArmTexture;

		public static Texture2D pumpkingCloakTexture;

		public static Texture2D[] EquipPageTexture;

		public static Texture2D[] PVPTexture;

		public static Texture2D[] npcToggleTexture;

		public static Texture2D[] HBLockTexture;

		public static Texture2D[] buffTexture;

		public static Texture2D[] itemTexture;

		public static Texture2D[] itemFlameTexture;

		public static Texture2D[] npcTexture;

		public static Texture2D[] projectileTexture;

		public static Texture2D[] goreTexture;

		public static Texture2D[] BackPackTexture;

		public static Texture2D rainTexture;

		public static Texture2D[] glowMaskTexture;

		public static Texture2D[] extraTexture;

		public static Texture2D[] coinTexture;

		public static Texture2D[] cursorTextures;

		public static Texture2D dustTexture;

		public static Texture2D sunTexture;

		public static Texture2D sun2Texture;

		public static Texture2D sun3Texture;

		public static int maxMoons;

		public static int moonType;

		public static Texture2D[] moonTexture;

		public static Texture2D pumpkinMoonTexture;

		public static Texture2D snowMoonTexture;

		public static Texture2D oneDropLogo;

		public static int numTileColors;

		public static RenderTarget2D[,] tileAltTexture;

		public static bool[,] tileAltTextureInit;

		public static bool[,] tileAltTextureDrawn;

		public static int numTreeStyles;

		public static RenderTarget2D[,] treeTopAltTexture;

		public static RenderTarget2D[,] treeBranchAltTexture;

		public static bool[,] treeAltTextureInit;

		public static bool[,] treeAltTextureDrawn;

		public static bool[,] checkTreeAlt;

		public static RenderTarget2D[,] wallAltTexture;

		public static bool[,] wallAltTextureInit;

		public static bool[,] wallAltTextureDrawn;

		public static Texture2D[] tileTexture;

		public static Texture2D blackTileTexture;

		public static Texture2D[] wallTexture;

		public static Texture2D[] backgroundTexture;

		public static Texture2D[] cloudTexture;

		public static Texture2D[] starTexture;

		public static Texture2D[] liquidTexture;

		public static Texture2D heartTexture;

		public static Texture2D heart2Texture;

		public static Texture2D manaTexture;

		public static Texture2D bubbleTexture;

		public static Texture2D flameTexture;

		public static Texture2D[] treeTopTexture;

		public static Texture2D[] treeBranchTexture;

		public static Texture2D[] woodTexture;

		public static RenderTarget2D[,] woodAltTexture;

		public static Texture2D shroomCapTexture;

		public static Texture2D inventoryBackTexture;

		public static Texture2D inventoryBack2Texture;

		public static Texture2D inventoryBack3Texture;

		public static Texture2D inventoryBack4Texture;

		public static Texture2D inventoryBack5Texture;

		public static Texture2D inventoryBack6Texture;

		public static Texture2D inventoryBack7Texture;

		public static Texture2D inventoryBack8Texture;

		public static Texture2D inventoryBack9Texture;

		public static Texture2D inventoryBack10Texture;

		public static Texture2D inventoryBack11Texture;

		public static Texture2D inventoryBack12Texture;

		public static Texture2D inventoryBack13Texture;

		public static Texture2D inventoryBack14Texture;

		public static Texture2D hairStyleBackTexture;

		public static Texture2D clothesStyleBackTexture;

		public static Texture2D inventoryTickOnTexture;

		public static Texture2D inventoryTickOffTexture;

		public static Texture2D loTexture;

		public static Texture2D logoTexture;

		public static Texture2D logo2Texture;

		public static Texture2D textBackTexture;

		public static Texture2D chatTexture;

		public static Texture2D chat2Texture;

		public static Texture2D chatBackTexture;

		public static Texture2D teamTexture;

		public static Texture2D reTexture;

		public static Texture2D raTexture;

		public static Texture2D splashTexture;

		public static Texture2D fadeTexture;

		public static Texture2D ninjaTexture;

		public static Texture2D antLionTexture;

		public static Texture2D spikeBaseTexture;

		public static Texture2D ghostTexture;

		public static Texture2D evilCactusTexture;

		public static Texture2D goodCactusTexture;

		public static Texture2D crimsonCactusTexture;

		public static Texture2D wraithEyeTexture;

		public static Texture2D fireflyTexture;

		public static Texture2D fireflyJarTexture;

		public static Texture2D lightningbugTexture;

		public static Texture2D lightningbugJarTexture;

		public static Texture2D[] jellyfishBowlTexture;

		public static Texture2D glowSnailTexture;

		public static Texture2D iceQueenTexture;

		public static Texture2D santaTankTexture;

		public static Texture2D reaperEyeTexture;

		public static Texture2D jackHatTexture;

		public static Texture2D treeFaceTexture;

		public static Texture2D pumpkingFaceTexture;

		public static Texture2D dukeFishronTexture;

		public static Texture2D miniMinotaurTexture;

		public static Texture2D[,] playerTextures;

		public static Texture2D[] playerHairTexture;

		public static Texture2D[] playerHairAltTexture;

		public static SoundEffect[] soundDrip;

		public static SoundEffectInstance[] soundInstanceDrip;

		public static SoundEffect[] soundLiquid;

		public static SoundEffectInstance[] soundInstanceLiquid;

		public static SoundEffect[] soundMech;

		public static SoundEffectInstance[] soundInstanceMech;

		public static SoundEffect[] soundDig;

		public static SoundEffectInstance[] soundInstanceDig;

		public static SoundEffect[] soundTink;

		public static SoundEffectInstance[] soundInstanceTink;

		public static SoundEffect[] soundCoin;

		public static SoundEffectInstance[] soundInstanceCoin;

		public static SoundEffect[] soundPlayerHit;

		public static SoundEffectInstance[] soundInstancePlayerHit;

		public static SoundEffect[] soundFemaleHit;

		public static SoundEffectInstance[] soundInstanceFemaleHit;

		public static SoundEffect soundPlayerKilled;

		public static SoundEffectInstance soundInstancePlayerKilled;

		public static SoundEffect soundGrass;

		public static SoundEffectInstance soundInstanceGrass;

		public static SoundEffect soundGrab;

		public static SoundEffectInstance soundInstanceGrab;

		public static SoundEffect soundPixie;

		public static SoundEffectInstance soundInstancePixie;

		public static SoundEffect[] soundItem;

		public static SoundEffectInstance[] soundInstanceItem;

		public static SoundEffect[] soundNPCHit;

		public static SoundEffectInstance[] soundInstanceNPCHit;

		public static SoundEffect[] soundNPCKilled;

		public static SoundEffectInstance[] soundInstanceNPCKilled;

		public static SoundEffectInstance soundInstanceMoonlordCry;

		public static SoundEffect soundDoorOpen;

		public static SoundEffectInstance soundInstanceDoorOpen;

		public static SoundEffect soundDoorClosed;

		public static SoundEffectInstance soundInstanceDoorClosed;

		public static SoundEffect soundMenuOpen;

		public static SoundEffectInstance soundInstanceMenuOpen;

		public static SoundEffect soundMenuClose;

		public static SoundEffectInstance soundInstanceMenuClose;

		public static SoundEffect soundMenuTick;

		public static SoundEffectInstance soundInstanceMenuTick;

		public static SoundEffect soundShatter;

		public static SoundEffectInstance soundInstanceShatter;

		public static SoundEffect soundCamera;

		public static SoundEffectInstance soundInstanceCamera;

		public static SoundEffect[] soundZombie;

		public static SoundEffectInstance[] soundInstanceZombie;

		public static SoundEffect[] soundRoar;

		public static SoundEffectInstance[] soundInstanceRoar;

		public static SoundEffect[] soundSplash;

		public static SoundEffectInstance[] soundInstanceSplash;

		public static SoundEffect soundDoubleJump;

		public static SoundEffectInstance soundInstanceDoubleJump;

		public static SoundEffect soundRun;

		public static SoundEffectInstance soundInstanceRun;

		public static SoundEffect soundCoins;

		public static SoundEffectInstance soundInstanceCoins;

		public static SoundEffect soundUnlock;

		public static SoundEffectInstance soundInstanceUnlock;

		public static SoundEffect soundChat;

		public static SoundEffectInstance soundInstanceChat;

		public static SoundEffect soundMaxMana;

		public static SoundEffectInstance soundInstanceMaxMana;

		public static SoundEffect soundDrown;

		public static SoundEffectInstance soundInstanceDrown;

		public static AudioEngine engine;

		public static SoundBank soundBank;

		public static WaveBank waveBank;

		public static Cue[] music;

		public static float[] musicFade;

		public static float musicVolume;

		public static float ambientVolume;

		public static float soundVolume;

		public static SpriteFont fontItemStack;

		public static SpriteFont fontMouseText;

		public static SpriteFont fontDeathText;

		public static SpriteFont[] fontCombatText;

		public static ServerSocialMode MenuServerMode;

		public static bool[] tileLighted;

		public static bool[] tileMergeDirt;

		public static bool[] tileCut;

		public static bool[] tileAlch;

		public static int[] tileShine;

		public static bool[] tileShine2;

		public static bool[] wallHouse;

		public static bool[] wallDungeon;

		public static bool[] wallLight;

		public static int[] wallBlend;

		public static bool[] tileStone;

		public static bool[] tileAxe;

		public static bool[] tileHammer;

		public static bool[] tileWaterDeath;

		public static bool[] tileLavaDeath;

		public static bool[] tileTable;

		public static bool[] tileBlockLight;

		public static bool[] tileNoSunLight;

		public static bool[] tileDungeon;

		public static bool[] tileSpelunker;

		public static bool[] tileSolidTop;

		public static bool[] tileSolid;

		public static bool[] tileBouncy;

		public static short[] tileValue;

		public static byte[] tileLargeFrames;

		public static byte[] wallLargeFrames;

		public static bool[] tileRope;

		public static bool[] tileBrick;

		public static bool[] tileMoss;

		public static bool[] tileNoAttach;

		public static bool[] tileNoFail;

		public static bool[] tileObsidianKill;

		public static bool[] tileFrameImportant;

		public static bool[] tilePile;

		public static bool[] tileBlendAll;

		public static short[] tileGlowMask;

		public static bool[] tileContainer;

		public static bool[] tileSign;

		public static bool[][] tileMerge;

		public static int cageFrames;

		public static bool critterCage;

		public static int[] bunnyCageFrame;

		public static int[] bunnyCageFrameCounter;

		public static int[] squirrelCageFrame;

		public static int[] squirrelCageFrameCounter;

		public static int[] squirrelCageFrameOrange;

		public static int[] squirrelCageFrameCounterOrange;

		public static int[] mallardCageFrame;

		public static int[] mallardCageFrameCounter;

		public static int[] duckCageFrame;

		public static int[] duckCageFrameCounter;

		public static int[] birdCageFrame;

		public static int[] birdCageFrameCounter;

		public static int[] redBirdCageFrame;

		public static int[] redBirdCageFrameCounter;

		public static int[] blueBirdCageFrame;

		public static int[] blueBirdCageFrameCounter;

		public static byte[,] butterflyCageMode;

		public static int[,] butterflyCageFrame;

		public static int[,] butterflyCageFrameCounter;

		public static int[,] scorpionCageFrame;

		public static int[,] scorpionCageFrameCounter;

		public static int[] snailCageFrame;

		public static int[] snailCageFrameCounter;

		public static int[] snail2CageFrame;

		public static int[] snail2CageFrameCounter;

		public static byte[] fishBowlFrameMode;

		public static int[] fishBowlFrame;

		public static int[] fishBowlFrameCounter;

		public static int[] frogCageFrame;

		public static int[] frogCageFrameCounter;

		public static int[] mouseCageFrame;

		public static int[] mouseCageFrameCounter;

		public static byte[,] jellyfishCageMode;

		public static int[,] jellyfishCageFrame;

		public static int[,] jellyfishCageFrameCounter;

		public static int[] wormCageFrame;

		public static int[] wormCageFrameCounter;

		public static int[] penguinCageFrame;

		public static int[] penguinCageFrameCounter;

		public static int[,] slugCageFrame;

		public static int[,] slugCageFrameCounter;

		public static int[] grasshopperCageFrame;

		public static int[] grasshopperCageFrameCounter;

		public static bool[] tileSand;

		public static bool[] tileFlame;

		public static bool[] npcCatchable;

		public static int[] tileFrame;

		public static int[] tileFrameCounter;

		public static byte[] wallFrame;

		public static byte[] wallFrameCounter;

		public static int[] backgroundWidth;

		public static int[] backgroundHeight;

		public static bool tilesLoaded;

		public static WorldMap Map;

		public static Tile[,] tile;

		public static Dust[] dust;

		public static Star[] star;

		public static Item[] item;

		public static int[] itemLockoutTime;

		public static NPC[] npc;

		public static Gore[] gore;

		public static Rain[] rain;

		public static Projectile[] projectile;

		public static CombatText[] combatText;

		public static ItemText[] itemText;

		public static Chest[] chest;

		public static Sign[] sign;

		public static int[] itemFrame;

		public static int[] itemFrameCounter;

		public static DrawAnimation[] itemAnimations;

		public static List<int> itemAnimationsRegistered;

		public static Vector2 screenPosition;

		public static Vector2 screenLastPosition;

		public static int screenWidth;

		public static int screenHeight;

		public static bool screenMaximized;

		public static int chatLength;

		public static bool chatMode;

		public static bool chatRelease;

		public static int showCount;

		public static int numChatLines;

		public static int startChatLine;

		public static string chatText;

		public static ChatLine[] chatLine;

		public static bool inputTextEnter;

		public static bool inputTextEscape;

		public static float[] hotbarScale;

		public static byte mouseTextColor;

		public static int mouseTextColorChange;

		public static bool mouseLeftRelease;

		public static bool mouseRightRelease;

		public static bool playerInventory;

		public static int stackSplit;

		public static int stackCounter;

		public static int stackDelay;

		public static int superFastStack;

		public static Item mouseItem;

		public static Item guideItem;

		public static Item reforgeItem;

		public static float inventoryScale;

		public static bool hasFocus;

		public static bool recFastScroll;

		public static bool recBigList;

		public static int recStart;

		public static Recipe[] recipe;

		public static int[] availableRecipe;

		public static float[] availableRecipeY;

		public static int numAvailableRecipes;

		public static int focusRecipe;

		public static int myPlayer;

		public static Player[] player;

		public static List<DrawData> playerDrawData;

		public static List<int> playerDrawDust;

		public static List<int> playerDrawGore;

		public static int spawnTileX;

		public static int spawnTileY;

		public static bool npcChatRelease;

		public static bool editSign;

		public static bool editChest;

		public static bool blockInput;

		public static Microsoft.Xna.Framework.Input.Keys blockKey;

		public static string defaultChestName;

		public static string npcChatText;

		public static bool npcChatFocus1;

		public static bool npcChatFocus2;

		public static bool npcChatFocus3;

		public static int npcShop;

		public static int numShops;

		public static int npcChatCornerItem;

		public Chest[] shop = new Chest[Main.numShops];

		public static int[] travelShop;

		public static List<string> anglerWhoFinishedToday;

		public static bool anglerQuestFinished;

		public static int anglerQuest;

		public static int[] anglerQuestItemNetIDs;

		public static bool craftGuide;

		public static bool reforge;

		public static Item toolTip;

		private static int backSpaceCount;

		public static string motd;

		public static bool toggleFullscreen;

		public static int numDisplayModes;

		public static int[] displayWidth;

		public static int[] displayHeight;

		public static bool gameMenu;

		private static int maxLoadPlayer;

		private static int maxLoadWorld;

		public static List<PlayerFileData> PlayerList;

		public static PlayerFileData ActivePlayerFileData;

		public static Player PendingPlayer;

		public static List<WorldFileData> WorldList;

		public static WorldFileData ActiveWorldFileData;

		public static string SavePath;

		public static string WorldPath;

		public static string CloudWorldPath;

		public static string PlayerPath;

		public static string CloudPlayerPath;

		public static Preferences Configuration;

		public static string[] itemName;

		public static string[] npcName;

		private static KeyboardState inputText;

		private static KeyboardState oldInputText;

		public static int PendingResolutionWidth;

		public static int PendingResolutionHeight;

		public static int invasionType;

		public static double invasionX;

		public static int invasionSize;

		public static int invasionDelay;

		public static int invasionWarn;

		public static int invasionSizeStart;

		public static bool invasionProgressNearInvasion;

		public static int invasionProgressMode;

		public static int invasionProgressIcon;

		public static int invasionProgress;

		public static int invasionProgressMax;

		public static int invasionProgressWave;

		public static int invasionProgressDisplayLeft;

		public static float invasionProgressAlpha;

		public static int[] npcFrameCount;

		public static Dictionary<int, byte> npcLifeBytes;

		private static bool mouseExit;

		private static float exitScale;

		private static bool mouseReforge;

		private static float reforgeScale;

		public static Player clientPlayer;

		public static string getIP;

		public static string getPort;

		public static bool menuMultiplayer;

		public static bool menuServer;

		public static int netMode;

		private static int _targetNetMode;

		private static bool _hasPendingNetmodeChange;

		public static int netPlayCounter;

		public static int lastNPCUpdate;

		public static int lastItemUpdate;

		public static int maxNPCUpdates;

		public static int maxItemUpdates;

		public static string cUp;

		public static string cLeft;

		public static string cDown;

		public static string cRight;

		public static string cJump;

		public static string cThrowItem;

		public static string cHeal;

		public static string cMana;

		public static string cBuff;

		public static string cHook;

		public static string cTorch;

		public static string cInv;

		public static string cSmart;

		public static string cMount;

		public static bool cSmartToggle;

		public static bool smartDigEnabled;

		public static bool smartDigShowing;

		public static int smartDigX;

		public static int smartDigY;

		public static int cursorOverride;

		public static int signHover;

		public static string cMapZoomIn;

		public static string cMapZoomOut;

		public static string cMapAlphaUp;

		public static string cMapAlphaDown;

		public static string cMapFull;

		public static string cMapStyle;

		public static Microsoft.Xna.Framework.Color mouseColor;

		public static Microsoft.Xna.Framework.Color cursorColor;

		public static int cursorColorDirection;

		public static float cursorAlpha;

		public static float cursorScale;

		public static bool signBubble;

		public static int signX;

		public static int signY;

		public static bool hideUI;

		public static bool releaseUI;

		public static bool fixedTiming;

		private int splashCounter;

		public List<int> DrawCacheNPCsMoonMoon = new List<int>(200);

		public List<int> DrawCacheNPCsOverPlayers = new List<int>(200);

		public List<int> DrawCacheProjsBackground = new List<int>(1000);

		public List<int> DrawCacheProjsWorms = new List<int>(1000);

		public List<int> DrawCacheNPCProjectiles = new List<int>(200);

		public static string oldStatusText;

		public static bool autoShutdown;

		public static bool serverGenLock;

		public static int sundialCooldown;

		public static bool fastForwardTime;

		public static float ambientWaterfallX;

		public static float ambientWaterfallY;

		public static float ambientWaterfallStrength;

		public static float ambientLavafallX;

		public static float ambientLavafallY;

		public static float ambientLavafallStrength;

		public static float ambientLavaX;

		public static float ambientLavaY;

		public static float ambientLavaStrength;

		public static int ambientCounter;

		public static int ProjectileUpdateLoopIndex;

		private static bool _largeMethodFix;

		private float logoRotation;

		private float logoRotationDirection = 1f;

		private float logoRotationSpeed = 1f;

		private float logoScale = 1f;

		private float logoScaleDirection = 1f;

		private float logoScaleSpeed = 1f;

		private static int maxMenuItems;

		private float[] menuItemScale = new float[Main.maxMenuItems];

		private int focusMenu = -1;

		private int selectedMenu = -1;

		private int selectedMenu2 = -1;

		public static int selectedPlayer;

		public static int selectedWorld;

		public static int menuMode;

		public static int menuSkip;

		private static Item cpItem;

		public int textBlinkerCount;

		public int textBlinkerState;

		public static string newWorldName;

		public static string hoverItemName;

		public static Microsoft.Xna.Framework.Color inventoryBack;

		public static bool mouseText;

		private static int mH;

		private static int sX;

		private static int starMana;

		private static float heartLife;

		private static int rare;

		private static int hairStart;

		private static int oldHairStyle;

		private static Microsoft.Xna.Framework.Color oldHairColor;

		private static int selClothes;

		private static Microsoft.Xna.Framework.Color[] oldClothesColor;

		public static int dresserX;

		public static int dresserY;

		public static Microsoft.Xna.Framework.Color selColor;

		public static int focusColor;

		public static int colorDelay;

		public static int setKey;

		public static int bgScroll;

		public static bool autoPass;

		public static int menuFocus;

		private static float hBar;

		private static float sBar;

		private static float lBar;

		private int grabColorSlider;

		public static bool blockMouse;

		private bool[] menuWide = new bool[100];

		private static string[] MonolithFilterNames;

		private static string[] MonolithSkyNames;

		private static float tranSpeed;

		private static float atmo;

		private static float bgScale;

		private static int bgW;

		private static Microsoft.Xna.Framework.Color backColor;

		private static Microsoft.Xna.Framework.Color trueBackColor;

		private float screenOff;

		private float scAdj;

		private float cTop;

		public static AchievementManager Achievements
		{
			get
			{
				return Main.instance._achievements;
			}
		}

		public static bool expertMode
		{
			get
			{
				return Main.ActiveWorldFileData.IsExpertMode;
			}
			set
			{
				Main.ActiveWorldFileData.IsExpertMode = value;
			}
		}

		public static Vector2 MouseScreen
		{
			get
			{
				return new Vector2((float)Main.mouseX, (float)Main.mouseY);
			}
		}

		public static Vector2 MouseWorld
		{
			get
			{
				Vector2 mouseScreen = Main.MouseScreen + Main.screenPosition;
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					mouseScreen.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
				}
				return mouseScreen;
			}
		}

		public static string playerPathName
		{
			get
			{
				return Main.ActivePlayerFileData.Path;
			}
		}

		public static string worldPathName
		{
			get
			{
				return Main.ActiveWorldFileData.Path;
			}
		}

		static Main()
		{
			Main.curRelease = 147;
			Main.versionNumber = "v1.3.0.2";
			Main.versionNumber2 = "v1.3.0.2";
			Main.destroyerHB = new Vector2(0f, 0f);
			object[] folderPath = new object[] { Environment.GetFolderPath(Environment.SpecialFolder.Personal), Path.DirectorySeparatorChar, "My Games", Path.DirectorySeparatorChar, "Terraria", Path.DirectorySeparatorChar, "favorites.json" };
			Main.LocalFavoriteData = new FavoritesFile(string.Concat(folderPath), false);
			Main.CloudFavoritesData = new FavoritesFile("/favorites.json", true);
			Main.MenuUI = new UserInterface();
			Main.InGameUI = new UserInterface();
			Main.drawBackGore = false;
			Main.expertLife = 2f;
			Main.expertDamage = 2f;
			Main.expertDebuffTime = 2f;
			Main.expertKnockBack = 0.9f;
			Main.expertNPCDamage = 1.5f;
			Main.knockBackMultiplier = 1f;
			Main.damageMultiplier = 1f;
			Main.ServerSideCharacter = false;
			Main.ContentLoaded = false;
			Main.maxMsg = 106;
			Main.toolTipDistance = 6;
			Main.GlobalTime = 0f;
			Main.GlobalTimerPaused = false;
			Main._tileFrameSeed = (ulong)Guid.NewGuid().GetHashCode();
			Main._drawCycleCounter = (ulong)0;
			Main.npcStreamSpeed = 60;
			Main.musicError = 0;
			Main.dedServFPS = false;
			Main.dedServCount1 = 0;
			Main.dedServCount2 = 0;
			Main.superFast = false;
			Main.hairLoaded = new bool[134];
			Main.wingsLoaded = new bool[37];
			Main.goreLoaded = new bool[907];
			Main.projectileLoaded = new bool[651];
			Main.itemFlameLoaded = new bool[3601];
			Main.backgroundLoaded = new bool[207];
			Main.tileSetsLoaded = new bool[419];
			Main.wallLoaded = new bool[225];
			Main.NPCLoaded = new bool[540];
			Main.armorHeadLoaded = new bool[194];
			Main.armorBodyLoaded = new bool[195];
			Main.armorLegsLoaded = new bool[135];
			Main.accHandsOnLoaded = new bool[19];
			Main.accHandsOffLoaded = new bool[12];
			Main.accBackLoaded = new bool[10];
			Main.accFrontLoaded = new bool[5];
			Main.accShoesLoaded = new bool[18];
			Main.accWaistLoaded = new bool[12];
			Main.accShieldLoaded = new bool[6];
			Main.accNeckLoaded = new bool[9];
			Main.accFaceLoaded = new bool[9];
			Main.accballoonLoaded = new bool[16];
			Vector2[] vector2 = new Vector2[] { new Vector2(14f, 34f), new Vector2(14f, 32f), new Vector2(14f, 26f), new Vector2(14f, 22f), new Vector2(14f, 18f) };
			Main.OffsetsNPCOffhand = vector2;
			Vector2[] vector2Array = new Vector2[] { new Vector2(14f, 20f), new Vector2(14f, 20f), new Vector2(14f, 20f), new Vector2(14f, 18f), new Vector2(14f, 20f), new Vector2(16f, 4f), new Vector2(16f, 16f), new Vector2(18f, 14f), new Vector2(18f, 14f), new Vector2(18f, 14f), new Vector2(16f, 16f), new Vector2(16f, 16f), new Vector2(16f, 16f), new Vector2(16f, 16f), new Vector2(14f, 14f), new Vector2(14f, 14f), new Vector2(12f, 14f), new Vector2(14f, 16f), new Vector2(16f, 16f), new Vector2(16f, 16f) };
			Main.OffsetsPlayerOffhand = vector2Array;
			Vector2[] vector21 = new Vector2[] { new Vector2(6f, 19f), new Vector2(5f, 10f), new Vector2(12f, 10f), new Vector2(13f, 17f), new Vector2(12f, 19f), new Vector2(5f, 10f), new Vector2(7f, 17f), new Vector2(6f, 16f), new Vector2(6f, 16f), new Vector2(6f, 16f), new Vector2(6f, 17f), new Vector2(7f, 17f), new Vector2(7f, 17f), new Vector2(7f, 17f), new Vector2(8f, 17f), new Vector2(9f, 16f), new Vector2(9f, 12f), new Vector2(8f, 17f), new Vector2(7f, 17f), new Vector2(7f, 17f) };
			Main.OffsetsPlayerOnhand = vector21;
			Vector2[] vector2Array1 = new Vector2[] { new Vector2(0f, 2f), new Vector2(0f, 2f), new Vector2(0f, 2f), new Vector2(0f, 2f), new Vector2(0f, 2f), new Vector2(0f, 2f), new Vector2(0f, 2f), new Vector2(0f, 0f), new Vector2(0f, 0f), new Vector2(0f, 0f), new Vector2(0f, 2f), new Vector2(0f, 2f), new Vector2(0f, 2f), new Vector2(0f, 2f), new Vector2(0f, 0f), new Vector2(0f, 0f), new Vector2(0f, 0f), new Vector2(0f, 2f), new Vector2(0f, 2f), new Vector2(0f, 2f) };
			Main.OffsetsPlayerHeadgear = vector2Array1;
			Main.BlackFadeIn = 0;
			Main.noWindowBorder = false;
			Main.ugBack = 0;
			Main.oldUgBack = 0;
			Main.bgFrame = new int[1];
			Main.bgFrameCounter = new int[1];
			Main.skipMenu = false;
			Main.verboseNetplay = false;
			Main.stopTimeOuts = false;
			Main.showSpam = false;
			Main.showItemOwner = false;
			Main.nextNPC = new bool[540];
			Main.musicBox = -1;
			Main.musicBox2 = -1;
			Main.hbPosition = 1;
			Main.cEd = false;
			Main.wFrCounter = 0f;
			Main.wFrame = 0f;
			Main.drawDiag = false;
			Main.drawRelease = false;
			Main.drawBetterDebug = false;
			Main.betterDebugRelease = false;
			Main.renderNow = false;
			Main.drawToScreen = false;
			Main.targetSet = false;
			Main._isMouseLeftConsumedByUI = false;
			Main.essScale = 1f;
			Main.essDir = -1;
			Main.cloudBGX = new float[2];
			Main.cloudBG = new int[] { 112, 113 };
			Main.treeMntBG = new int[2];
			Main.treeBG = new int[3];
			Main.corruptBG = new int[3];
			Main.jungleBG = new int[3];
			Main.snowMntBG = new int[2];
			Main.snowBG = new int[3];
			Main.hallowBG = new int[3];
			Main.crimsonBG = new int[3];
			Main.desertBG = new int[2];
			Main.treeX = new int[4];
			Main.treeStyle = new int[4];
			Main.caveBackX = new int[4];
			Main.caveBackStyle = new int[4];
			Main.debugWords = "";
			Main.gamePad = false;
			Main.xMas = false;
			Main.halloween = false;
			Main.snowDust = 0;
			Main.chTitle = false;
			Main.hairWindow = false;
			Main.clothesWindow = false;
			Main.ingameOptionsWindow = false;
			Main.achievementsWindow = false;
			Main.keyCount = 0;
			Main.keyString = new string[10];
			Main.keyInt = new int[10];
			Main.gFade = 0;
			Main.gFader = 0f;
			Main.gFadeDir = 1;
			Main.netDiag = false;
			Main.txData = 0;
			Main.rxData = 0;
			Main.txMsg = 0;
			Main.rxMsg = 0;
			Main.rxMsgType = new int[Main.maxMsg];
			Main.rxDataType = new int[Main.maxMsg];
			Main.txMsgType = new int[Main.maxMsg];
			Main.txDataType = new int[Main.maxMsg];
			Main.uCarry = 0f;
			Main.drawSkip = false;
			Main.fpsCount = 0;
			Main.fpsTimer = new Stopwatch();
			Main.updateTimer = new Stopwatch();
			Main.fountainColor = -1;
			Main.monolithType = -1;
			Main.showSplash = true;
			Main.ignoreErrors = true;
			Main.defaultIP = "";
			Main.dayRate = 1;
			Main.maxScreenW = 1920;
			Main.minScreenW = 800;
			Main.maxScreenH = 1200;
			Main.minScreenH = 600;
			Main.iS = 1f;
			Main.render = false;
			Main.qaStyle = 0;
			Main.zoneX = 99;
			Main.zoneY = 87;
			Main.harpNote = 0f;
			Main.projHostile = new bool[651];
			Main.projHook = new bool[651];
			Main.pvpBuff = new bool[191];
			Main.persistentBuff = new bool[191];
			Main.vanityPet = new bool[191];
			Main.lightPet = new bool[191];
			Main.meleeBuff = new bool[191];
			Main.debuff = new bool[191];
			Main.buffName = new string[191];
			Main.buffTip = new string[191];
			Main.buffNoSave = new bool[191];
			Main.buffNoTimeDisplay = new bool[191];
			Main.buffDoubleApply = new bool[191];
			Main.maxMP = 10;
			Main.recentWorld = new string[Main.maxMP];
			Main.recentIP = new string[Main.maxMP];
			Main.recentPort = new int[Main.maxMP];
			Main.shortRender = true;
			Main.owBack = true;
			Main.quickBG = 2;
			Main.bgDelay = 0;
			Main.bgStyle = 0;
			Main.bgAlpha = new float[10];
			Main.bgAlpha2 = new float[10];
			Main.EquipPage = 0;
			Main.EquipPageSelected = 0;
			Main.wof = -1;
			Main.wofF = 0;
			Main.offScreenRange = 200;
			Main.maxMapUpdates = 250000;
			Main.refreshMap = false;
			Main.loadMapLastX = 0;
			Main.loadMapLock = false;
			Main.loadMap = false;
			Main.mapReady = false;
			Main.textureMaxWidth = 2000;
			Main.textureMaxHeight = 1800;
			Main.updateMap = false;
			Main.mapMinX = 0;
			Main.mapMaxX = 0;
			Main.mapMinY = 0;
			Main.mapMaxY = 0;
			Main.mapTimeMax = 30;
			Main.mapTime = Main.mapTimeMax;
			Main.mapTargetX = 5;
			Main.mapTargetY = 2;
			Main.initMap = new bool[Main.mapTargetX, Main.mapTargetY];
			Main.mapWasContentLost = new bool[Main.mapTargetX, Main.mapTargetY];
			Main.clothesTexture = new Texture2D[4];
			Main.mapIconTexture = new Texture2D[9];
			Main.underworldTexture = new Texture2D[5];
			Main.OurFavoriteColor = new Microsoft.Xna.Framework.Color(255, 231, 69);
			Main.mapInit = false;
			Main.mapEnabled = true;
			Main.mapStyle = 1;
			Main.grabMapX = 0f;
			Main.grabMapY = 0f;
			Main.miniMapX = 0;
			Main.miniMapY = 0;
			Main.miniMapWidth = 0;
			Main.miniMapHeight = 0;
			Main.mapMinimapScale = 1.25f;
			Main.mapMinimapAlpha = 1f;
			Main.mapOverlayScale = 2.5f;
			Main.mapOverlayAlpha = 0.35f;
			Main.mapFullscreen = false;
			Main.resetMapFull = false;
			Main.mapFullscreenScale = 4f;
			Main.mapFullscreenPos = new Vector2(-1f, -1f);
			Main.IsEngineLoaded = false;
			Main.renderCount = 99;
			Main.saveTime = new Stopwatch();
			Main.mcColor = new Microsoft.Xna.Framework.Color(125, 125, 255);
			Main.hcColor = new Microsoft.Xna.Framework.Color(200, 125, 255);
			Main.highVersionColor = new Microsoft.Xna.Framework.Color(255, 255, 0);
			Main.errorColor = new Microsoft.Xna.Framework.Color(255, 0, 0);
			Main.mouseHC = false;
			Main.craftingHide = false;
			Main.armorHide = false;
			Main.craftingAlpha = 1f;
			Main.armorAlpha = 1f;
			Main.buffAlpha = new float[191];
			Main.trashItem = new Item();
			Main.hardMode = false;
			Main.sceneWaterPos = Vector2.Zero;
			Main.sceneTilePos = Vector2.Zero;
			Main.sceneTile2Pos = Vector2.Zero;
			Main.sceneWallPos = Vector2.Zero;
			Main.sceneBackgroundPos = Vector2.Zero;
			Main.maxQ = true;
			Main.gfxQuality = 1f;
			Main.gfxRate = 0.01f;
			Main.DiscoR = 255;
			Main.DiscoB = 0;
			Main.DiscoG = 0;
			Main.teamCooldown = 0;
			Main.teamCooldownLen = 300;
			Main.gamePaused = false;
			Main.gameInactive = false;
			Main.updateTime = 0;
			Main.drawTime = 0;
			Main.uCount = 0;
			Main.updateRate = 0;
			Main.frameRate = 0;
			Main.RGBRelease = false;
			Main.qRelease = false;
			Main.netRelease = false;
			Main.frameRelease = false;
			Main.showFrameRate = false;
			Main.magmaBGFrame = 0;
			Main.magmaBGFrameCounter = 0;
			Main.saveTimer = 0;
			Main.autoJoin = false;
			Main.serverStarting = false;
			Main.leftWorld = 0f;
			Main.rightWorld = 134400f;
			Main.topWorld = 0f;
			Main.bottomWorld = 38400f;
			Main.maxTilesX = (int)Main.rightWorld / 16 + 1;
			Main.maxTilesY = (int)Main.bottomWorld / 16 + 1;
			Main.maxSectionsX = Main.maxTilesX / 200;
			Main.maxSectionsY = Main.maxTilesY / 150;
			Main.numDust = 6000;
			Main.numPlayers = 0;
			Main.maxNetPlayers = 255;
			Main._characterSelectMenu = new UICharacterSelect();
			Main._worldSelectMenu = new UIWorldSelect();
			Main.AchievementsMenu = new UIAchievementsMenu();
			Main.maxRain = 750;
			Main.slimeWarningTime = 0;
			Main.slimeWarningDelay = 420;
			Main.slimeRainNPCSlots = 0.65f;
			Main.slimeRainNPC = new bool[540];
			Main.slimeRainTime = 0;
			Main.slimeRain = false;
			Main.slimeRainKillCount = 0;
			Main.cameraX = 0f;
			Main.drewLava = false;
			Main.liquidAlpha = new float[12];
			Main.waterStyle = 0;
			Main.worldRate = 1;
			Main.caveParallax = 0.88f;
			Main.liquid = new Liquid[Liquid.resLiquid];
			Main.liquidBuffer = new LiquidBuffer[10000];
			Main.dedServ = false;
			Main.spamCount = 0;
			Main.curMusic = 0;
			Main.dayMusic = 0;
			Main.ugMusic = 0;
			Main.showItemText = true;
			Main.autoSave = true;
			Main.validateSaves = true;
			Main.bannerMouseOver = false;
			Main.buffString = "";
			Main.libPath = "";
			Main.lo = 0;
			Main.LogoA = 255;
			Main.LogoB = 0;
			Main.LogoT = false;
			Main.statusText = "";
			Main.worldName = "";
			Main.background = 0;
			Main.caveBackground = 0;
			Main.ugBackTransition = 0f;
			Main.teamColor = new Microsoft.Xna.Framework.Color[6];
			Main.dayTime = true;
			Main.time = 13500;
			Main.moonPhase = 0;
			Main.sunModY = 0;
			Main.moonModY = 0;
			Main.grabSky = false;
			Main.bloodMoon = false;
			Main.pumpkinMoon = false;
			Main.snowMoon = false;
			Main.cloudAlpha = 0f;
			Main.maxRaining = 0f;
			Main.oldMaxRaining = 0f;
			Main.rainTime = 0;
			Main.raining = false;
			Main.eclipse = false;
			Main.eclipseLight = 0f;
			Main.checkForSpawns = 0;
			Main.helpText = 0;
			Main.autoGen = false;
			Main.autoPause = false;
			Main.projFrames = new int[651];
			Main.projPet = new bool[651];
			Main.demonTorch = 1f;
			Main.demonTorchDir = 1;
			Main.martianLight = 1f;
			Main.martianLightDir = 1;
			Main.placementPreview = true;
			Main.weatherCounter = 0;
			Main.cloudLimit = 200;
			Main.numClouds = Main.cloudLimit;
			Main.numCloudsTemp = Main.numClouds;
			Main.windSpeedTemp = 0f;
			Main.windSpeed = 0f;
			Main.windSpeedSet = 0f;
			Main.windSpeedSpeed = 0f;
			Main.cloud = new Cloud[200];
			Main.resetClouds = true;
			Main.fadeCounter = 0;
			Main.invAlpha = 1f;
			Main.invDir = 1f;
			Main.chestStackTexture = new Texture2D[2];
			Main.allChestStackHover = false;
			Main.bannerTexture = new Texture2D[3];
			Main.npcHeadTexture = new Texture2D[24];
			Main.npcHeadBossTexture = new Texture2D[31];
			Main.craftToggleTexture = new Texture2D[4];
			Main.miniMapButtonTexture = new Texture2D[3];
			Main.destTexture = new Texture2D[3];
			Main.gemTexture = new Texture2D[6];
			Main.rudolphMountTexture = new Texture2D[3];
			Main.beeMountTexture = new Texture2D[2];
			Main.UFOMountTexture = new Texture2D[2];
			Main.drillMountTexture = new Texture2D[6];
			Main.scutlixMountTexture = new Texture2D[3];
			Main.minecartMechMountTexture = new Texture2D[2];
			Main.cuteFishronMountTexture = new Texture2D[2];
			Main.wingsTexture = new Texture2D[37];
			Main.armorHeadTexture = new Texture2D[194];
			Main.armorBodyTexture = new Texture2D[195];
			Main.femaleBodyTexture = new Texture2D[195];
			Main.armorArmTexture = new Texture2D[195];
			Main.armorLegTexture = new Texture2D[135];
			Main.accHandsOnTexture = new Texture2D[19];
			Main.accHandsOffTexture = new Texture2D[12];
			Main.accBackTexture = new Texture2D[10];
			Main.accFrontTexture = new Texture2D[5];
			Main.accShoesTexture = new Texture2D[18];
			Main.accWaistTexture = new Texture2D[12];
			Main.accShieldTexture = new Texture2D[6];
			Main.accNeckTexture = new Texture2D[9];
			Main.accFaceTexture = new Texture2D[9];
			Main.accBalloonTexture = new Texture2D[16];
			Main.xmasTree = new Texture2D[5];
			Main.FlameTexture = new Texture2D[17];
			Main.reforgeTexture = new Texture2D[2];
			Main.cameraTexture = new Texture2D[8];
			Main.golemTexture = new Texture2D[4];
			Main.chainsTexture = new Texture2D[16];
			Main.gemChainTexture = new Texture2D[7];
			Main.EquipPageTexture = new Texture2D[11];
			Main.PVPTexture = new Texture2D[3];
			Main.npcToggleTexture = new Texture2D[2];
			Main.HBLockTexture = new Texture2D[2];
			Main.buffTexture = new Texture2D[191];
			Main.itemTexture = new Texture2D[3601];
			Main.itemFlameTexture = new Texture2D[3601];
			Main.npcTexture = new Texture2D[540];
			Main.projectileTexture = new Texture2D[651];
			Main.goreTexture = new Texture2D[907];
			Main.BackPackTexture = new Texture2D[8];
			Main.glowMaskTexture = new Texture2D[214];
			Main.extraTexture = new Texture2D[69];
			Main.coinTexture = new Texture2D[4];
			Main.cursorTextures = new Texture2D[8];
			Main.maxMoons = 3;
			Main.moonType = 0;
			Main.moonTexture = new Texture2D[Main.maxMoons];
			Main.numTileColors = 31;
			Main.tileAltTexture = new RenderTarget2D[419, Main.numTileColors];
			Main.tileAltTextureInit = new bool[419, Main.numTileColors];
			Main.tileAltTextureDrawn = new bool[419, Main.numTileColors];
			Main.numTreeStyles = 19;
			Main.treeTopAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
			Main.treeBranchAltTexture = new RenderTarget2D[Main.numTreeStyles, Main.numTileColors];
			Main.treeAltTextureInit = new bool[Main.numTreeStyles, Main.numTileColors];
			Main.treeAltTextureDrawn = new bool[Main.numTreeStyles, Main.numTileColors];
			Main.checkTreeAlt = new bool[Main.numTreeStyles, Main.numTileColors];
			Main.wallAltTexture = new RenderTarget2D[225, Main.numTileColors];
			Main.wallAltTextureInit = new bool[225, Main.numTileColors];
			Main.wallAltTextureDrawn = new bool[225, Main.numTileColors];
			Main.tileTexture = new Texture2D[419];
			Main.wallTexture = new Texture2D[225];
			Main.backgroundTexture = new Texture2D[207];
			Main.cloudTexture = new Texture2D[22];
			Main.starTexture = new Texture2D[5];
			Main.liquidTexture = new Texture2D[12];
			Main.treeTopTexture = new Texture2D[Main.numTreeStyles];
			Main.treeBranchTexture = new Texture2D[Main.numTreeStyles];
			Main.woodTexture = new Texture2D[7];
			Main.woodAltTexture = new RenderTarget2D[(int)Main.woodTexture.Length, Main.numTileColors];
			Main.jellyfishBowlTexture = new Texture2D[3];
			Main.playerHairTexture = new Texture2D[134];
			Main.playerHairAltTexture = new Texture2D[134];
			Main.soundDrip = new SoundEffect[3];
			Main.soundInstanceDrip = new SoundEffectInstance[3];
			Main.soundLiquid = new SoundEffect[2];
			Main.soundInstanceLiquid = new SoundEffectInstance[2];
			Main.soundMech = new SoundEffect[1];
			Main.soundInstanceMech = new SoundEffectInstance[1];
			Main.soundDig = new SoundEffect[3];
			Main.soundInstanceDig = new SoundEffectInstance[3];
			Main.soundTink = new SoundEffect[3];
			Main.soundInstanceTink = new SoundEffectInstance[3];
			Main.soundCoin = new SoundEffect[5];
			Main.soundInstanceCoin = new SoundEffectInstance[5];
			Main.soundPlayerHit = new SoundEffect[3];
			Main.soundInstancePlayerHit = new SoundEffectInstance[3];
			Main.soundFemaleHit = new SoundEffect[3];
			Main.soundInstanceFemaleHit = new SoundEffectInstance[3];
			Main.soundItem = new SoundEffect[126];
			Main.soundInstanceItem = new SoundEffectInstance[126];
			Main.soundNPCHit = new SoundEffect[58];
			Main.soundInstanceNPCHit = new SoundEffectInstance[58];
			Main.soundNPCKilled = new SoundEffect[63];
			Main.soundInstanceNPCKilled = new SoundEffectInstance[63];
			Main.soundZombie = new SoundEffect[106];
			Main.soundInstanceZombie = new SoundEffectInstance[106];
			Main.soundRoar = new SoundEffect[3];
			Main.soundInstanceRoar = new SoundEffectInstance[3];
			Main.soundSplash = new SoundEffect[2];
			Main.soundInstanceSplash = new SoundEffectInstance[2];
			Main.music = new Cue[40];
			Main.musicFade = new float[40];
			Main.musicVolume = 0.75f;
			Main.ambientVolume = 0.75f;
			Main.soundVolume = 1f;
			Main.fontCombatText = new SpriteFont[2];
			Main.MenuServerMode = ServerSocialMode.None;
			Main.tileLighted = new bool[419];
			Main.tileMergeDirt = new bool[419];
			Main.tileCut = new bool[419];
			Main.tileAlch = new bool[419];
			Main.tileShine = new int[419];
			Main.tileShine2 = new bool[419];
			Main.wallHouse = new bool[225];
			Main.wallDungeon = new bool[225];
			Main.wallLight = new bool[225];
			Main.wallBlend = new int[225];
			Main.tileStone = new bool[419];
			Main.tileAxe = new bool[419];
			Main.tileHammer = new bool[419];
			Main.tileWaterDeath = new bool[419];
			Main.tileLavaDeath = new bool[419];
			Main.tileTable = new bool[419];
			Main.tileBlockLight = new bool[419];
			Main.tileNoSunLight = new bool[419];
			Main.tileDungeon = new bool[419];
			Main.tileSpelunker = new bool[419];
			Main.tileSolidTop = new bool[419];
			Main.tileSolid = new bool[419];
			Main.tileBouncy = new bool[419];
			Main.tileValue = new short[419];
			Main.tileLargeFrames = new byte[419];
			Main.wallLargeFrames = new byte[225];
			Main.tileRope = new bool[419];
			Main.tileBrick = new bool[419];
			Main.tileMoss = new bool[419];
			Main.tileNoAttach = new bool[419];
			Main.tileNoFail = new bool[419];
			Main.tileObsidianKill = new bool[419];
			Main.tileFrameImportant = new bool[419];
			Main.tilePile = new bool[419];
			Main.tileBlendAll = new bool[419];
			Main.tileGlowMask = new short[419];
			Main.tileContainer = new bool[419];
			Main.tileSign = new bool[419];
			Main.tileMerge = new bool[419][];
			Main.cageFrames = 25;
			Main.critterCage = false;
			Main.bunnyCageFrame = new int[Main.cageFrames];
			Main.bunnyCageFrameCounter = new int[Main.cageFrames];
			Main.squirrelCageFrame = new int[Main.cageFrames];
			Main.squirrelCageFrameCounter = new int[Main.cageFrames];
			Main.squirrelCageFrameOrange = new int[Main.cageFrames];
			Main.squirrelCageFrameCounterOrange = new int[Main.cageFrames];
			Main.mallardCageFrame = new int[Main.cageFrames];
			Main.mallardCageFrameCounter = new int[Main.cageFrames];
			Main.duckCageFrame = new int[Main.cageFrames];
			Main.duckCageFrameCounter = new int[Main.cageFrames];
			Main.birdCageFrame = new int[Main.cageFrames];
			Main.birdCageFrameCounter = new int[Main.cageFrames];
			Main.redBirdCageFrame = new int[Main.cageFrames];
			Main.redBirdCageFrameCounter = new int[Main.cageFrames];
			Main.blueBirdCageFrame = new int[Main.cageFrames];
			Main.blueBirdCageFrameCounter = new int[Main.cageFrames];
			Main.butterflyCageMode = new byte[9, Main.cageFrames];
			Main.butterflyCageFrame = new int[9, Main.cageFrames];
			Main.butterflyCageFrameCounter = new int[9, Main.cageFrames];
			Main.scorpionCageFrame = new int[2, Main.cageFrames];
			Main.scorpionCageFrameCounter = new int[2, Main.cageFrames];
			Main.snailCageFrame = new int[Main.cageFrames];
			Main.snailCageFrameCounter = new int[Main.cageFrames];
			Main.snail2CageFrame = new int[Main.cageFrames];
			Main.snail2CageFrameCounter = new int[Main.cageFrames];
			Main.fishBowlFrameMode = new byte[Main.cageFrames];
			Main.fishBowlFrame = new int[Main.cageFrames];
			Main.fishBowlFrameCounter = new int[Main.cageFrames];
			Main.frogCageFrame = new int[Main.cageFrames];
			Main.frogCageFrameCounter = new int[Main.cageFrames];
			Main.mouseCageFrame = new int[Main.cageFrames];
			Main.mouseCageFrameCounter = new int[Main.cageFrames];
			Main.jellyfishCageMode = new byte[3, Main.cageFrames];
			Main.jellyfishCageFrame = new int[3, Main.cageFrames];
			Main.jellyfishCageFrameCounter = new int[3, Main.cageFrames];
			Main.wormCageFrame = new int[Main.cageFrames];
			Main.wormCageFrameCounter = new int[Main.cageFrames];
			Main.penguinCageFrame = new int[Main.cageFrames];
			Main.penguinCageFrameCounter = new int[Main.cageFrames];
			Main.slugCageFrame = new int[3, Main.cageFrames];
			Main.slugCageFrameCounter = new int[3, Main.cageFrames];
			Main.grasshopperCageFrame = new int[Main.cageFrames];
			Main.grasshopperCageFrameCounter = new int[Main.cageFrames];
			Main.tileSand = new bool[419];
			Main.tileFlame = new bool[419];
			Main.npcCatchable = new bool[540];
			Main.tileFrame = new int[419];
			Main.tileFrameCounter = new int[419];
			Main.wallFrame = new byte[225];
			Main.wallFrameCounter = new byte[225];
			Main.backgroundWidth = new int[207];
			Main.backgroundHeight = new int[207];
			Main.tilesLoaded = false;
			Main.Map = new WorldMap(Main.maxTilesX, Main.maxTilesY);
			Main.tile = new Tile[Main.maxTilesX, Main.maxTilesY];
			Main.dust = new Dust[6001];
			Main.star = new Star[130];
			Main.item = new Item[401];
			Main.itemLockoutTime = new int[401];
			Main.npc = new NPC[201];
			Main.gore = new Gore[501];
			Main.rain = new Rain[Main.maxRain + 1];
			Main.projectile = new Projectile[1001];
			Main.combatText = new CombatText[100];
			Main.itemText = new ItemText[20];
			Main.chest = new Chest[1000];
			Main.sign = new Sign[1000];
			Main.itemFrame = new int[401];
			Main.itemFrameCounter = new int[401];
			Main.itemAnimations = new DrawAnimation[3601];
			Main.itemAnimationsRegistered = new List<int>();
			Main.screenWidth = 1152;
			Main.screenHeight = 864;
			Main.screenMaximized = false;
			Main.chatLength = 600;
			Main.chatMode = false;
			Main.chatRelease = false;
			Main.showCount = 10;
			Main.numChatLines = 500;
			Main.startChatLine = 0;
			Main.chatText = "";
			Main.chatLine = new ChatLine[Main.numChatLines];
			Main.inputTextEnter = false;
			Main.inputTextEscape = false;
			Main.hotbarScale = new float[] { 1f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f, 0.75f };
			Main.mouseTextColor = 0;
			Main.mouseTextColorChange = 1;
			Main.mouseLeftRelease = false;
			Main.mouseRightRelease = false;
			Main.playerInventory = false;
			Main.stackCounter = 0;
			Main.stackDelay = 7;
			Main.superFastStack = 0;
			Main.mouseItem = new Item();
			Main.guideItem = new Item();
			Main.reforgeItem = new Item();
			Main.inventoryScale = 0.75f;
			Main.hasFocus = true;
			Main.recFastScroll = false;
			Main.recBigList = false;
			Main.recStart = 0;
			Main.recipe = new Recipe[Recipe.maxRecipes];
			Main.availableRecipe = new int[Recipe.maxRecipes];
			Main.availableRecipeY = new float[Recipe.maxRecipes];
			Main.myPlayer = 0;
			Main.player = new Player[256];
			Main.playerDrawData = new List<DrawData>();
			Main.playerDrawDust = new List<int>();
			Main.playerDrawGore = new List<int>();
			Main.npcChatRelease = false;
			Main.editSign = false;
			Main.editChest = false;
			Main.blockInput = false;
			Main.blockKey = Microsoft.Xna.Framework.Input.Keys.None;
			Main.defaultChestName = string.Empty;
			Main.npcChatText = "";
			Main.npcChatFocus1 = false;
			Main.npcChatFocus2 = false;
			Main.npcChatFocus3 = false;
			Main.npcShop = 0;
			Main.numShops = 21;
			Main.npcChatCornerItem = 0;
			Main.travelShop = new int[40];
			Main.anglerWhoFinishedToday = new List<string>();
			Main.anglerQuest = 0;
			Main.anglerQuestItemNetIDs = new int[] { 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488 };
			Main.craftGuide = false;
			Main.reforge = false;
			Main.toolTip = new Item();
			Main.backSpaceCount = 0;
			Main.motd = "";
			Main.numDisplayModes = 0;
			Main.displayWidth = new int[99];
			Main.displayHeight = new int[99];
			Main.gameMenu = true;
			Main.maxLoadPlayer = 1000;
			Main.maxLoadWorld = 1000;
			Main.PlayerList = new List<PlayerFileData>();
			Main.ActivePlayerFileData = new PlayerFileData();
			Main.PendingPlayer = null;
			Main.WorldList = new List<WorldFileData>();
			Main.ActiveWorldFileData = new WorldFileData();
			object[] objArray = new object[] { Environment.GetFolderPath(Environment.SpecialFolder.Personal), Path.DirectorySeparatorChar, "My Games", Path.DirectorySeparatorChar, "Terraria" };
			Main.SavePath = string.Concat(objArray);
			Main.WorldPath = string.Concat(Main.SavePath, Path.DirectorySeparatorChar, "Worlds");
			Main.CloudWorldPath = "worlds";
			Main.PlayerPath = string.Concat(Main.SavePath, Path.DirectorySeparatorChar, "Players");
			Main.CloudPlayerPath = "players";
			Main.Configuration = new Preferences(string.Concat(Main.SavePath, Path.DirectorySeparatorChar, "config.json"), false, false);
			Main.itemName = new string[3601];
			Main.npcName = new string[540];
			Main.PendingResolutionWidth = 800;
			Main.PendingResolutionHeight = 600;
			Main.invasionType = 0;
			Main.invasionX = 0;
			Main.invasionSize = 0;
			Main.invasionDelay = 0;
			Main.invasionWarn = 0;
			Main.invasionSizeStart = 0;
			Main.invasionProgressNearInvasion = false;
			Main.invasionProgressMode = 2;
			Main.invasionProgressIcon = 0;
			Main.invasionProgress = 0;
			Main.invasionProgressMax = 0;
			Main.invasionProgressWave = 0;
			Main.invasionProgressDisplayLeft = 0;
			Main.invasionProgressAlpha = 0f;
			Main.npcFrameCount = new int[] { 1, 2, 2, 3, 6, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 25, 23, 25, 21, 15, 26, 2, 10, 1, 16, 16, 16, 3, 1, 15, 3, 1, 3, 1, 1, 21, 25, 1, 1, 1, 3, 3, 15, 3, 7, 7, 4, 5, 6, 5, 3, 3, 23, 6, 3, 6, 6, 2, 5, 3, 2, 7, 7, 4, 2, 8, 1, 5, 1, 2, 4, 16, 5, 4, 4, 15, 15, 15, 15, 2, 4, 6, 6, 24, 16, 1, 1, 1, 1, 1, 1, 4, 3, 1, 1, 1, 1, 1, 1, 5, 6, 7, 16, 1, 1, 25, 23, 12, 20, 21, 1, 2, 2, 3, 6, 1, 1, 1, 15, 4, 11, 1, 23, 6, 6, 3, 1, 2, 2, 1, 3, 4, 1, 2, 1, 4, 2, 1, 15, 3, 25, 4, 5, 7, 3, 2, 12, 12, 4, 4, 4, 8, 8, 9, 5, 6, 4, 15, 23, 3, 3, 8, 5, 4, 13, 15, 12, 4, 14, 14, 3, 2, 5, 3, 2, 3, 23, 5, 14, 16, 5, 2, 2, 12, 3, 3, 3, 3, 2, 2, 2, 2, 2, 7, 14, 15, 16, 8, 3, 15, 15, 15, 2, 3, 20, 25, 23, 26, 4, 4, 16, 16, 20, 20, 20, 2, 2, 2, 2, 8, 12, 3, 4, 2, 4, 25, 26, 26, 6, 3, 3, 3, 3, 3, 3, 4, 4, 5, 4, 6, 7, 15, 4, 7, 6, 1, 1, 2, 4, 3, 5, 3, 3, 3, 4, 5, 6, 4, 2, 1, 8, 4, 4, 1, 8, 1, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3, 3, 3, 3, 3, 3, 15, 3, 6, 12, 20, 20, 20, 15, 15, 15, 5, 5, 6, 6, 5, 2, 7, 2, 6, 6, 6, 6, 6, 15, 15, 15, 15, 15, 11, 4, 2, 2, 3, 3, 3, 15, 15, 15, 10, 14, 12, 1, 10, 8, 3, 3, 2, 2, 2, 2, 7, 15, 15, 15, 6, 3, 10, 10, 6, 9, 8, 9, 8, 20, 10, 6, 23, 1, 4, 24, 2, 4, 6, 6, 10, 15, 15, 15, 15, 4, 4, 26, 23, 8, 2, 4, 4, 4, 4, 2, 2, 4, 12, 12, 9, 9, 9, 1, 9, 11, 2, 2, 9, 5, 6, 4, 18, 8, 11, 1, 4, 5, 8, 4, 1, 1, 1, 1, 4, 2, 5, 4, 11, 5, 11, 1, 1, 1, 10, 10, 15, 8, 17, 6, 6, 1, 12, 12, 13, 15, 9, 5, 10, 7, 7, 7, 7, 7, 7, 7, 4, 4, 16, 16, 25, 5, 7, 3, 10, 2, 6, 2, 19, 19, 19, 19, 26, 3, 1, 1, 1, 1, 1, 16, 21, 9, 16, 7, 6, 18, 13, 20, 12, 12, 20, 6, 14, 14, 14, 14, 6, 1, 3, 25, 19, 20, 22, 2, 4, 4, 4, 11, 9, 8, 1, 9, 1, 8, 8, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 6, 9, 1, 1, 1, 1, 1, 1, 4, 1, 10, 1, 8, 4, 1, 5, 8, 8, 8, 8, 9, 9, 5, 4, 8, 16, 8, 2, 3, 3, 6, 6 };
			Main.npcLifeBytes = new Dictionary<int, byte>();
			Main.mouseExit = false;
			Main.exitScale = 0.8f;
			Main.mouseReforge = false;
			Main.reforgeScale = 0.8f;
			Main.clientPlayer = new Player();
			Main.getIP = Main.defaultIP;
			Main.getPort = Convert.ToString(Netplay.ListenPort);
			Main.menuMultiplayer = false;
			Main.menuServer = false;
			Main.netMode = 0;
			Main._targetNetMode = 0;
			Main._hasPendingNetmodeChange = false;
			Main.maxNPCUpdates = 5;
			Main.maxItemUpdates = 5;
			Main.cUp = "W";
			Main.cLeft = "A";
			Main.cDown = "S";
			Main.cRight = "D";
			Main.cJump = "Space";
			Main.cThrowItem = "T";
			Main.cHeal = "H";
			Main.cMana = "J";
			Main.cBuff = "B";
			Main.cHook = "E";
			Main.cTorch = "LeftShift";
			Main.cInv = "Escape";
			Main.cSmart = "LeftControl";
			Main.cMount = "R";
			Main.cSmartToggle = true;
			Main.smartDigEnabled = false;
			Main.smartDigShowing = false;
			Main.cursorOverride = -1;
			Main.signHover = -1;
			Main.cMapZoomIn = "Add";
			Main.cMapZoomOut = "Subtract";
			Main.cMapAlphaUp = "PageUp";
			Main.cMapAlphaDown = "PageDown";
			Main.cMapFull = "M";
			Main.cMapStyle = "Tab";
			Main.mouseColor = new Microsoft.Xna.Framework.Color(255, 50, 95);
			Main.cursorColor = Microsoft.Xna.Framework.Color.White;
			Main.cursorColorDirection = 1;
			Main.cursorAlpha = 0f;
			Main.cursorScale = 0f;
			Main.signBubble = false;
			Main.signX = 0;
			Main.signY = 0;
			Main.hideUI = false;
			Main.releaseUI = false;
			Main.fixedTiming = true;
			Main.oldStatusText = "";
			Main.autoShutdown = false;
			Main.serverGenLock = false;
			Main.sundialCooldown = 0;
			Main.fastForwardTime = false;
			Main.ambientWaterfallX = -1f;
			Main.ambientWaterfallY = -1f;
			Main.ambientWaterfallStrength = 0f;
			Main.ambientLavafallX = -1f;
			Main.ambientLavafallY = -1f;
			Main.ambientLavafallStrength = 0f;
			Main.ambientLavaX = -1f;
			Main.ambientLavaY = -1f;
			Main.ambientLavaStrength = 0f;
			Main.ambientCounter = 0;
			Main.ProjectileUpdateLoopIndex = -1;
			Main._largeMethodFix = true;
			Main.maxMenuItems = 16;
			Main.selectedPlayer = 0;
			Main.selectedWorld = 0;
			Main.menuMode = 0;
			Main.menuSkip = 0;
			Main.cpItem = new Item();
			Main.newWorldName = "";
			Main.hoverItemName = "";
			Main.inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
			Main.mouseText = false;
			Main.mH = 0;
			Main.sX = Main.screenWidth - 800;
			Main.starMana = 20;
			Main.heartLife = 20f;
			Main.rare = 0;
			Main.hairStart = 0;
			Main.selClothes = 0;
			Main.oldClothesColor = new Microsoft.Xna.Framework.Color[4];
			Main.selColor = Microsoft.Xna.Framework.Color.White;
			Main.focusColor = 0;
			Main.colorDelay = 0;
			Main.setKey = -1;
			Main.bgScroll = 0;
			Main.autoPass = false;
			Main.menuFocus = 0;
			Main.hBar = -1f;
			Main.sBar = -1f;
			Main.lBar = 1f;
			Main.blockMouse = false;
			string[] strArrays = new string[] { "MonolithVortex", "MonolithNebula", "MonolithStardust", "MonolithSolar" };
			Main.MonolithFilterNames = strArrays;
			string[] strArrays1 = new string[] { "MonolithVortex", "MonolithNebula", "MonolithStardust", "MonolithSolar" };
			Main.MonolithSkyNames = strArrays1;
			Main.tranSpeed = 0.05f;
			Main.atmo = 0f;
			Main.bgScale = 1f;
			Main.bgW = (int)(1024f * Main.bgScale);
			Main.backColor = Microsoft.Xna.Framework.Color.White;
			Main.trueBackColor = Main.backColor;
		}

		public Main()
		{
			Main.instance = this;
			Main.graphics = new GraphicsDeviceManager(this);
			base.Content.RootDirectory = "Content";
		}

		public static void Ambience()
		{
			Main.ambientCounter = Main.ambientCounter + 1;
			if (Main.ambientCounter >= 15)
			{
				Main.ambientCounter = 0;
				Main.PlaySound(34, (int)Main.ambientWaterfallX, (int)Main.ambientWaterfallY, (int)Main.ambientWaterfallStrength);
				float single = Math.Abs(Main.ambientLavaX - (Main.screenPosition.X + (float)(Main.screenWidth / 2))) + Math.Abs(Main.ambientLavaY - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
				float single1 = Math.Abs(Main.ambientLavafallX - (Main.screenPosition.X + (float)(Main.screenWidth / 2))) + Math.Abs(Main.ambientLavafallY - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
				float single2 = Main.ambientLavaX;
				float single3 = Main.ambientLavaY;
				if (single1 < single)
				{
					single2 = Main.ambientLavafallX;
					single3 = Main.ambientLavafallY;
				}
				float single4 = Main.ambientLavafallStrength + Main.ambientLavaStrength;
				Main.PlaySound(35, (int)single2, (int)single3, (int)single4);
			}
		}

		public static void AnglerQuestSwap()
		{
			if (Main.netMode == 1)
			{
				return;
			}
			Main.anglerWhoFinishedToday.Clear();
			Main.anglerQuestFinished = false;
			bool flag = true;
			while (flag)
			{
				flag = false;
				Main.anglerQuest = Main.rand.Next((int)Main.anglerQuestItemNetIDs.Length);
				int num = Main.anglerQuestItemNetIDs[Main.anglerQuest];
				if (num == 2454 && (!Main.hardMode || WorldGen.crimson))
				{
					flag = true;
				}
				if (num == 2457 && WorldGen.crimson)
				{
					flag = true;
				}
				if (num == 2462 && !Main.hardMode)
				{
					flag = true;
				}
				if (num == 2463 && (!Main.hardMode || !WorldGen.crimson))
				{
					flag = true;
				}
				if (num == 2465 && !Main.hardMode)
				{
					flag = true;
				}
				if (num == 2468 && !Main.hardMode)
				{
					flag = true;
				}
				if (num == 2471 && !Main.hardMode)
				{
					flag = true;
				}
				if (num == 2473 && !Main.hardMode)
				{
					flag = true;
				}
				if (num == 2477 && !WorldGen.crimson)
				{
					flag = true;
				}
				if (num == 2480 && !Main.hardMode)
				{
					flag = true;
				}
				if (num == 2483 && !Main.hardMode)
				{
					flag = true;
				}
				if (num == 2484 && !Main.hardMode)
				{
					flag = true;
				}
				if (num != 2485 || !WorldGen.crimson)
				{
					continue;
				}
				flag = true;
			}
			NetMessage.SendAnglerQuest();
		}

		public void autoCreate(string newOpt)
		{
			if (newOpt == "0")
			{
				Main.autoGen = false;
				return;
			}
			if (newOpt == "1")
			{
				Main.maxTilesX = 4200;
				Main.maxTilesY = 1200;
				Main.autoGen = true;
				return;
			}
			if (newOpt == "2")
			{
				Main.maxTilesX = 6300;
				Main.maxTilesY = 1800;
				Main.autoGen = true;
				return;
			}
			if (newOpt == "3")
			{
				Main.maxTilesX = 8400;
				Main.maxTilesY = 2400;
				Main.autoGen = true;
			}
		}

		public void AutoHost()
		{
			Main.menuMultiplayer = true;
			Main.menuServer = true;
			Main.menuMode = 1;
		}

		public void AutoJoin(string IP)
		{
			Main.defaultIP = IP;
			Main.getIP = IP;
			Netplay.SetRemoteIP(Main.defaultIP);
			Main.autoJoin = true;
		}

		public void AutoPass()
		{
			Main.autoPass = true;
		}

		public void autoShut()
		{
			Main.autoShutdown = true;
		}

		private static Microsoft.Xna.Framework.Color buffColor(Microsoft.Xna.Framework.Color newColor, float R, float G, float B, float A)
		{
			newColor.R = (byte)((float)newColor.R * R);
			newColor.G = (byte)((float)newColor.G * G);
			newColor.B = (byte)((float)newColor.B * B);
			newColor.A = (byte)((float)newColor.A * A);
			return newColor;
		}

		public static void BuyHairWindow()
		{
			Main.PlaySound(18, -1, -1, 1);
			Main.hairWindow = false;
			Main.player[Main.myPlayer].talkNPC = -1;
			Main.npcChatCornerItem = 0;
			NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
		}

		protected void CacheNPCDraws()
		{
			this.DrawCacheNPCsMoonMoon.Clear();
			this.DrawCacheNPCsOverPlayers.Clear();
			this.DrawCacheNPCProjectiles.Clear();
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					if (Main.npc[i].type == 398 && Main.npc[i].ai[0] >= 0f)
					{
						int num = i;
						int num1 = -1;
						int num2 = -1;
						int num3 = -1;
						for (int j = 0; j < 200; j++)
						{
							if (Main.npc[j].active && Main.npc[j].ai[3] == (float)num)
							{
								if (num1 == -1 && Main.npc[j].type == 397 && Main.npc[j].ai[2] == 0f)
								{
									num1 = j;
								}
								if (num2 == -1 && Main.npc[j].type == 397 && Main.npc[j].ai[2] == 1f)
								{
									num2 = j;
								}
								if (num3 == -1 && Main.npc[j].type == 396)
								{
									num3 = j;
								}
								if (num1 != -1 && num2 != -1 && num3 != -1)
								{
									break;
								}
							}
						}
						if (num1 != -1 && num2 != -1 && num3 != -1)
						{
							this.DrawCacheNPCsMoonMoon.Add(num);
							if (num1 != -1)
							{
								this.DrawCacheNPCsMoonMoon.Add(num1);
							}
							if (num2 != -1)
							{
								this.DrawCacheNPCsMoonMoon.Add(num2);
							}
							if (num3 != -1)
							{
								this.DrawCacheNPCsMoonMoon.Add(num3);
							}
						}
					}
					else if (Main.npc[i].type == 421 && Main.npc[i].ai[0] == 5f)
					{
						this.DrawCacheNPCsOverPlayers.Add(i);
					}
					else if (Main.npc[i].type == 516 || Main.npc[i].type == 519)
					{
						this.DrawCacheNPCProjectiles.Add(i);
					}
				}
			}
		}

		protected void CacheProjDraws()
		{
			this.DrawCacheProjsBackground.Clear();
			this.DrawCacheProjsWorms.Clear();
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active)
				{
					if (Main.projectile[i].type == 578 || Main.projectile[i].type == 579 || Main.projectile[i].type == 641 || Main.projectile[i].type == 598 || Main.projectile[i].type == 617 || Main.projectile[i].type == 636)
					{
						this.DrawCacheProjsBackground.Add(i);
					}
					if (Main.projectile[i].type == 625 || Main.projectile[i].type == 626 || Main.projectile[i].type == 627 || Main.projectile[i].type == 628)
					{
						this.DrawCacheProjsWorms.Add(i);
					}
				}
			}
		}

		public static double CalculateDamage(int Damage, int Defense)
		{
			double damage = (double)Damage - (double)Defense * 0.5;
			if (damage < 1)
			{
				damage = 1;
			}
			return damage;
		}

		public static double CalculatePlayerDamage(int Damage, int Defense)
		{
			double damage = (double)Damage - (double)Defense * 0.5;
			if (Main.expertMode)
			{
				damage = (double)Damage - (double)Defense * 0.75;
			}
			if (damage < 1)
			{
				damage = 1;
			}
			return damage;
		}

		public static void CancelClothesWindow(bool quiet = false)
		{
			if (!Main.clothesWindow)
			{
				return;
			}
			Main.clothesWindow = false;
			if (!quiet)
			{
				Main.PlaySound(11, -1, -1, 1);
			}
			Main.player[Main.myPlayer].shirtColor = Main.oldClothesColor[0];
			Main.player[Main.myPlayer].underShirtColor = Main.oldClothesColor[1];
			Main.player[Main.myPlayer].pantsColor = Main.oldClothesColor[2];
			Main.player[Main.myPlayer].shoeColor = Main.oldClothesColor[3];
		}

		public static void CancelHairWindow()
		{
			if (!Main.hairWindow)
			{
				return;
			}
			Main.player[Main.myPlayer].hair = Main.oldHairStyle;
			Main.player[Main.myPlayer].hairColor = Main.oldHairColor;
			Main.hairWindow = false;
			if (Main.player[Main.myPlayer].talkNPC > -1 && Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
			{
				Main.player[Main.myPlayer].talkNPC = -1;
			}
			Main.PlaySound(11, -1, -1, 1);
		}

		public static bool canDrawColorTile(int i, int j)
		{
			if (Main.tile[i, j] != null && Main.tile[i, j].color() > 0 && Main.tile[i, j].color() < Main.numTileColors && Main.tileAltTextureDrawn[Main.tile[i, j].type, Main.tile[i, j].color()] && Main.tileAltTextureInit[Main.tile[i, j].type, Main.tile[i, j].color()])
			{
				return true;
			}
			return false;
		}

		public static bool canDrawColorTile(ushort type, int color)
		{
			if (color > 0 && color < Main.numTileColors && Main.tileAltTextureDrawn[type, color] && Main.tileAltTextureInit[type, color])
			{
				return true;
			}
			return false;
		}

		public static bool canDrawColorTree(int i, int j, int treeColor)
		{
			if (Main.tile[i, j] == null || Main.tile[i, j].color() <= 0 || Main.tile[i, j].color() >= Main.numTileColors || Main.woodAltTexture[treeColor, Main.tile[i, j].color()] == null)
			{
				return false;
			}
			return !Main.woodAltTexture[treeColor, Main.tile[i, j].color()].IsContentLost;
		}

		public static bool canDrawColorWall(int i, int j)
		{
			if (Main.tile[i, j] != null && Main.tile[i, j].wallColor() > 0 && Main.wallAltTextureDrawn[Main.tile[i, j].wall, Main.tile[i, j].wallColor()] && Main.wallAltTextureInit[Main.tile[i, j].wall, Main.tile[i, j].wallColor()])
			{
				return true;
			}
			return false;
		}

		public static bool CanStartInvasion(int type = 1, bool ignoreDelay = false)
		{
			if (Main.invasionType != 0)
			{
				return false;
			}
			if (Main.invasionDelay != 0 && !ignoreDelay)
			{
				return false;
			}
			int num = 0;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && Main.player[i].statLifeMax >= 200)
				{
					num++;
				}
			}
			return num > 0;
		}

		private static void ChangeRain()
		{
			if (Main.cloudBGActive >= 1f || (double)Main.numClouds > 150)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.maxRaining = (float)Main.rand.Next(20, 90) * 0.01f;
					return;
				}
				Main.maxRaining = (float)Main.rand.Next(40, 90) * 0.01f;
				return;
			}
			if ((double)Main.numClouds > 100)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.maxRaining = (float)Main.rand.Next(10, 70) * 0.01f;
					return;
				}
				Main.maxRaining = (float)Main.rand.Next(20, 60) * 0.01f;
				return;
			}
			if (Main.rand.Next(3) == 0)
			{
				Main.maxRaining = (float)Main.rand.Next(5, 40) * 0.01f;
				return;
			}
			Main.maxRaining = (float)Main.rand.Next(5, 30) * 0.01f;
		}

		protected void CheckBunny()
		{
			try
			{
				RegistryKey currentUser = Registry.CurrentUser;
				currentUser = currentUser.CreateSubKey("Software\\Terraria");
				if (currentUser != null && currentUser.GetValue("Bunny") != null && currentUser.GetValue("Bunny").ToString() == "1")
				{
					Main.cEd = true;
				}
			}
			catch
			{
				Main.cEd = false;
			}
		}

		public static void checkHalloween()
		{
			DateTime now = DateTime.Now;
			int day = now.Day;
			int month = now.Month;
			if (day >= 20 && month == 10)
			{
				Main.halloween = true;
				return;
			}
			if (day <= 10 && month == 11)
			{
				Main.halloween = true;
				return;
			}
			Main.halloween = false;
		}

		public static void CheckInvasionProgressDisplay()
		{
			if (Main.invasionProgressMode != 2)
			{
				Main.invasionProgressNearInvasion = false;
				return;
			}
			bool flag = false;
			Player player = Main.player[Main.myPlayer];
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
			int num = 5000;
			int num1 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active)
				{
					num1 = 0;
					int num2 = Main.npc[i].type;
					if (num2 > 145)
					{
						if (num2 > 350)
						{
							switch (num2)
							{
								case 381:
								case 382:
								case 383:
								case 385:
								case 386:
								case 388:
								case 389:
								case 390:
								case 391:
								case 395:
								{
									num1 = 6;
									goto Label0;
								}
								case 384:
								case 387:
								case 392:
								case 393:
								case 394:
								{
									goto Label0;
								}
								default:
								{
									if (num2 == 491)
									{
										break;
									}
									goto Label0;
								}
							}
						}
						else
						{
							switch (num2)
							{
								case 212:
								case 213:
								case 214:
								case 215:
								case 216:
								{
									break;
								}
								default:
								{
									switch (num2)
									{
										case 305:
										case 306:
										case 307:
										case 308:
										case 309:
										case 310:
										case 311:
										case 312:
										case 313:
										case 314:
										case 315:
										case 325:
										case 326:
										case 327:
										case 329:
										case 330:
										{
											num1 = 2;
											goto Label0;
										}
										case 338:
										case 339:
										case 340:
										case 341:
										case 342:
										case 343:
										case 344:
										case 345:
										case 346:
										case 347:
										case 348:
										case 349:
										case 350:
										{
											num1 = 1;
											goto Label0;
										}
										default:
										{
											goto Label0;
										}
									}
								}
							}
						}
						num1 = 5;
					}
					else
					{
						switch (num2)
						{
							case 26:
							case 27:
							case 28:
							case 29:
							{
								num1 = 3;
								break;
							}
							default:
							{
								if (num2 == 111)
								{
									goto case 29;
								}
								switch (num2)
								{
									case 143:
									case 144:
									case 145:
									{
										num1 = 4;
										break;
									}
								}
								break;
							}
						}
					}
				Label0:
					if (num1 != 0 && (num1 != 1 || (double)player.position.Y <= Main.worldSurface * 16 && !Main.dayTime && Main.snowMoon) && (num1 != 2 || (double)player.position.Y <= Main.worldSurface * 16 && !Main.dayTime && Main.pumpkinMoon) && (num1 <= 2 || (double)player.position.Y <= Main.worldSurface * 16 && Main.invasionType == num1 - 2))
					{
						Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int)(Main.npc[i].position.X + (float)(Main.npc[i].width / 2)) - num, (int)(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2)) - num, num * 2, num * 2);
						if (rectangle.Intersects(rectangle1))
						{
							flag = true;
							break;
						}
					}
				}
			}
			Main.invasionProgressNearInvasion = flag;
			if (flag && Main.invasionProgressIcon == 0)
			{
				if (Main.snowMoon)
				{
					int num3 = (new int[] { 0, 25, 15, 10, 30, 100, 160, 180, 200, 250, 300, 375, 450, 525, 675, 850, 1025, 1325, 1550, 2000, 0 })[NPC.waveCount];
					Main.ReportInvasionProgress((int)NPC.waveKills, num3, 1, NPC.waveCount);
					return;
				}
				if (Main.pumpkinMoon)
				{
					int num4 = (new int[] { 0, 25, 40, 50, 80, 100, 160, 180, 200, 250, 300, 375, 450, 525, 675, 0 })[NPC.waveCount];
					Main.ReportInvasionProgress((int)NPC.waveKills, num4, 2, NPC.waveCount);
					return;
				}
				int num5 = 1;
				if (Main.invasionType != 0 && Main.invasionSizeStart != 0)
				{
					num5 = Main.invasionSizeStart;
				}
				Main.ReportInvasionProgress(Main.invasionSizeStart - Main.invasionSize, num5, num1, 0);
			}
		}

		protected bool checkMap(int i, int j)
		{
			bool flag;
			if (!Main.initMap[i, j])
			{
				try
				{
					int num = Main.textureMaxWidth;
					int num1 = Main.textureMaxHeight;
					if (i == Main.mapTargetX - 1)
					{
						num = 400;
					}
					if (j == Main.mapTargetY - 1)
					{
						num1 = 600;
					}
					this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, num, num1, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth16, 0, RenderTargetUsage.PreserveContents);
					Main.initMap[i, j] = true;
					return true;
				}
				catch
				{
					Main.mapEnabled = false;
					for (int i1 = 0; i1 < Main.mapTargetX; i1++)
					{
						for (int j1 = 0; j1 < Main.mapTargetY; j1++)
						{
							try
							{
								Main.initMap[i1, j1] = false;
								this.mapTarget[i1, j1].Dispose();
							}
							catch (Exception ex)
							{
#if DEBUG
								Console.WriteLine(ex);
								System.Diagnostics.Debugger.Break();

#endif
							}
						}
					}
					flag = false;
				}
				return flag;
			}
			return true;
		}

		private static void CheckMonoliths()
		{
		}

		public static void checkXMas()
		{
			DateTime now = DateTime.Now;
			if (now.Day >= 15 && now.Month == 12)
			{
				Main.xMas = true;
				return;
			}
			Main.xMas = false;
		}

		public static void clrInput()
		{
			Main.keyCount = 0;
		}

		public static void CritterCages()
		{
			int num;
			if (Main.critterCage)
			{
				for (int i = 0; i < Main.cageFrames; i++)
				{
					if (Main.bunnyCageFrame[i] == 0)
					{
						Main.bunnyCageFrameCounter[i] = Main.bunnyCageFrameCounter[i] + 1;
						if (Main.bunnyCageFrameCounter[i] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.bunnyCageFrame[i] = 4;
								}
								else if (num > 2)
								{
									Main.bunnyCageFrame[i] = 1;
								}
								else
								{
									Main.bunnyCageFrame[i] = 2;
								}
							}
							Main.bunnyCageFrameCounter[i] = 0;
						}
					}
					else if (Main.bunnyCageFrame[i] == 1)
					{
						Main.bunnyCageFrameCounter[i] = Main.bunnyCageFrameCounter[i] + 1;
						if (Main.bunnyCageFrameCounter[i] >= 10)
						{
							Main.bunnyCageFrameCounter[i] = 0;
							Main.bunnyCageFrame[i] = 0;
						}
					}
					else if (Main.bunnyCageFrame[i] >= 2 && Main.bunnyCageFrame[i] <= 3)
					{
						Main.bunnyCageFrameCounter[i] = Main.bunnyCageFrameCounter[i] + 1;
						if (Main.bunnyCageFrameCounter[i] >= 10)
						{
							Main.bunnyCageFrameCounter[i] = 0;
							Main.bunnyCageFrame[i] = Main.bunnyCageFrame[i] + 1;
						}
						if (Main.bunnyCageFrame[i] > 3)
						{
							Main.bunnyCageFrame[i] = 0;
						}
					}
					else if (Main.bunnyCageFrame[i] >= 4 && Main.bunnyCageFrame[i] <= 10)
					{
						Main.bunnyCageFrameCounter[i] = Main.bunnyCageFrameCounter[i] + 1;
						if (Main.bunnyCageFrameCounter[i] >= 5)
						{
							Main.bunnyCageFrameCounter[i] = 0;
							Main.bunnyCageFrame[i] = Main.bunnyCageFrame[i] + 1;
						}
					}
					else if (Main.bunnyCageFrame[i] == 11)
					{
						Main.bunnyCageFrameCounter[i] = Main.bunnyCageFrameCounter[i] + 1;
						if (Main.bunnyCageFrameCounter[i] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								num = Main.rand.Next(7);
								if (num != 0)
								{
									Main.bunnyCageFrame[i] = 12;
								}
								else
								{
									Main.bunnyCageFrame[i] = 13;
								}
							}
							Main.bunnyCageFrameCounter[i] = 0;
						}
					}
					else if (Main.bunnyCageFrame[i] == 12)
					{
						Main.bunnyCageFrameCounter[i] = Main.bunnyCageFrameCounter[i] + 1;
						if (Main.bunnyCageFrameCounter[i] >= 10)
						{
							Main.bunnyCageFrameCounter[i] = 0;
							Main.bunnyCageFrame[i] = 11;
						}
					}
					else if (Main.bunnyCageFrame[i] >= 13)
					{
						Main.bunnyCageFrameCounter[i] = Main.bunnyCageFrameCounter[i] + 1;
						if (Main.bunnyCageFrameCounter[i] >= 5)
						{
							Main.bunnyCageFrameCounter[i] = 0;
							Main.bunnyCageFrame[i] = Main.bunnyCageFrame[i] + 1;
						}
						if (Main.bunnyCageFrame[i] > 21)
						{
							Main.bunnyCageFrame[i] = 0;
						}
					}
				}
				for (int j = 0; j < Main.cageFrames; j++)
				{
					if (Main.squirrelCageFrame[j] == 0)
					{
						Main.squirrelCageFrameCounter[j] = Main.squirrelCageFrameCounter[j] + 1;
						if (Main.squirrelCageFrameCounter[j] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.squirrelCageFrame[j] = 4;
								}
								else if (num > 2)
								{
									Main.squirrelCageFrame[j] = 1;
								}
								else
								{
									Main.squirrelCageFrame[j] = 2;
								}
							}
							Main.squirrelCageFrameCounter[j] = 0;
						}
					}
					else if (Main.squirrelCageFrame[j] == 1)
					{
						Main.squirrelCageFrameCounter[j] = Main.squirrelCageFrameCounter[j] + 1;
						if (Main.squirrelCageFrameCounter[j] >= 10)
						{
							Main.squirrelCageFrameCounter[j] = 0;
							Main.squirrelCageFrame[j] = 0;
						}
					}
					else if (Main.squirrelCageFrame[j] >= 2 && Main.squirrelCageFrame[j] <= 3)
					{
						Main.squirrelCageFrameCounter[j] = Main.squirrelCageFrameCounter[j] + 1;
						if (Main.squirrelCageFrameCounter[j] >= 5)
						{
							Main.squirrelCageFrameCounter[j] = 0;
							Main.squirrelCageFrame[j] = Main.squirrelCageFrame[j] + 1;
						}
						if (Main.squirrelCageFrame[j] > 3)
						{
							if (Main.rand.Next(5) != 0)
							{
								Main.squirrelCageFrame[j] = 2;
							}
							else
							{
								Main.squirrelCageFrame[j] = 0;
							}
						}
					}
					else if (Main.squirrelCageFrame[j] >= 4 && Main.squirrelCageFrame[j] <= 8)
					{
						Main.squirrelCageFrameCounter[j] = Main.squirrelCageFrameCounter[j] + 1;
						if (Main.squirrelCageFrameCounter[j] >= 5)
						{
							Main.squirrelCageFrameCounter[j] = 0;
							Main.squirrelCageFrame[j] = Main.squirrelCageFrame[j] + 1;
						}
					}
					else if (Main.squirrelCageFrame[j] == 9)
					{
						Main.squirrelCageFrameCounter[j] = Main.squirrelCageFrameCounter[j] + 1;
						if (Main.squirrelCageFrameCounter[j] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.squirrelCageFrame[j] = 13;
								}
								else if (num > 2)
								{
									Main.squirrelCageFrame[j] = 10;
								}
								else
								{
									Main.squirrelCageFrame[j] = 11;
								}
							}
							Main.squirrelCageFrameCounter[j] = 0;
						}
					}
					else if (Main.squirrelCageFrame[j] == 10)
					{
						Main.squirrelCageFrameCounter[j] = Main.squirrelCageFrameCounter[j] + 1;
						if (Main.squirrelCageFrameCounter[j] >= 10)
						{
							Main.squirrelCageFrameCounter[j] = 0;
							Main.squirrelCageFrame[j] = 9;
						}
					}
					else if (Main.squirrelCageFrame[j] == 11 || Main.squirrelCageFrame[j] == 12)
					{
						Main.squirrelCageFrameCounter[j] = Main.squirrelCageFrameCounter[j] + 1;
						if (Main.squirrelCageFrameCounter[j] >= 5)
						{
							Main.squirrelCageFrame[j] = Main.squirrelCageFrame[j] + 1;
							if (Main.squirrelCageFrame[j] > 12)
							{
								if (Main.rand.Next(5) == 0)
								{
									Main.squirrelCageFrame[j] = 9;
								}
								else
								{
									Main.squirrelCageFrame[j] = 11;
								}
							}
							Main.squirrelCageFrameCounter[j] = 0;
						}
					}
					else if (Main.squirrelCageFrame[j] >= 13)
					{
						Main.squirrelCageFrameCounter[j] = Main.squirrelCageFrameCounter[j] + 1;
						if (Main.squirrelCageFrameCounter[j] >= 5)
						{
							Main.squirrelCageFrameCounter[j] = 0;
							Main.squirrelCageFrame[j] = Main.squirrelCageFrame[j] + 1;
						}
						if (Main.squirrelCageFrame[j] > 17)
						{
							Main.squirrelCageFrame[j] = 0;
						}
					}
				}
				for (int k = 0; k < Main.cageFrames; k++)
				{
					if (Main.squirrelCageFrameOrange[k] == 0)
					{
						Main.squirrelCageFrameCounterOrange[k] = Main.squirrelCageFrameCounterOrange[k] + 1;
						if (Main.squirrelCageFrameCounterOrange[k] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.squirrelCageFrameOrange[k] = 4;
								}
								else if (num > 2)
								{
									Main.squirrelCageFrameOrange[k] = 1;
								}
								else
								{
									Main.squirrelCageFrameOrange[k] = 2;
								}
							}
							Main.squirrelCageFrameCounterOrange[k] = 0;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] == 1)
					{
						Main.squirrelCageFrameCounterOrange[k] = Main.squirrelCageFrameCounterOrange[k] + 1;
						if (Main.squirrelCageFrameCounterOrange[k] >= 10)
						{
							Main.squirrelCageFrameCounterOrange[k] = 0;
							Main.squirrelCageFrameOrange[k] = 0;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] >= 2 && Main.squirrelCageFrameOrange[k] <= 3)
					{
						Main.squirrelCageFrameCounterOrange[k] = Main.squirrelCageFrameCounterOrange[k] + 1;
						if (Main.squirrelCageFrameCounterOrange[k] >= 5)
						{
							Main.squirrelCageFrameCounterOrange[k] = 0;
							Main.squirrelCageFrameOrange[k] = Main.squirrelCageFrameOrange[k] + 1;
						}
						if (Main.squirrelCageFrameOrange[k] > 3)
						{
							if (Main.rand.Next(5) != 0)
							{
								Main.squirrelCageFrameOrange[k] = 2;
							}
							else
							{
								Main.squirrelCageFrameOrange[k] = 0;
							}
						}
					}
					else if (Main.squirrelCageFrameOrange[k] >= 4 && Main.squirrelCageFrameOrange[k] <= 8)
					{
						Main.squirrelCageFrameCounterOrange[k] = Main.squirrelCageFrameCounterOrange[k] + 1;
						if (Main.squirrelCageFrameCounterOrange[k] >= 5)
						{
							Main.squirrelCageFrameCounterOrange[k] = 0;
							Main.squirrelCageFrameOrange[k] = Main.squirrelCageFrameOrange[k] + 1;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] == 9)
					{
						Main.squirrelCageFrameCounterOrange[k] = Main.squirrelCageFrameCounterOrange[k] + 1;
						if (Main.squirrelCageFrameCounterOrange[k] > Main.rand.Next(30, 900))
						{
							if (Main.rand.Next(3) != 0)
							{
								num = Main.rand.Next(7);
								if (num == 0)
								{
									Main.squirrelCageFrameOrange[k] = 13;
								}
								else if (num > 2)
								{
									Main.squirrelCageFrameOrange[k] = 10;
								}
								else
								{
									Main.squirrelCageFrameOrange[k] = 11;
								}
							}
							Main.squirrelCageFrameCounterOrange[k] = 0;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] == 10)
					{
						Main.squirrelCageFrameCounterOrange[k] = Main.squirrelCageFrameCounterOrange[k] + 1;
						if (Main.squirrelCageFrameCounterOrange[k] >= 10)
						{
							Main.squirrelCageFrameCounterOrange[k] = 0;
							Main.squirrelCageFrameOrange[k] = 9;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] == 11 || Main.squirrelCageFrameOrange[k] == 12)
					{
						Main.squirrelCageFrameCounterOrange[k] = Main.squirrelCageFrameCounterOrange[k] + 1;
						if (Main.squirrelCageFrameCounterOrange[k] >= 5)
						{
							Main.squirrelCageFrameOrange[k] = Main.squirrelCageFrameOrange[k] + 1;
							if (Main.squirrelCageFrameOrange[k] > 12)
							{
								if (Main.rand.Next(5) == 0)
								{
									Main.squirrelCageFrameOrange[k] = 9;
								}
								else
								{
									Main.squirrelCageFrameOrange[k] = 11;
								}
							}
							Main.squirrelCageFrameCounterOrange[k] = 0;
						}
					}
					else if (Main.squirrelCageFrameOrange[k] >= 13)
					{
						Main.squirrelCageFrameCounterOrange[k] = Main.squirrelCageFrameCounterOrange[k] + 1;
						if (Main.squirrelCageFrameCounterOrange[k] >= 5)
						{
							Main.squirrelCageFrameCounterOrange[k] = 0;
							Main.squirrelCageFrameOrange[k] = Main.squirrelCageFrameOrange[k] + 1;
						}
						if (Main.squirrelCageFrameOrange[k] > 17)
						{
							Main.squirrelCageFrameOrange[k] = 0;
						}
					}
				}
				for (int l = 0; l < Main.cageFrames; l++)
				{
					if (Main.mallardCageFrame[l] == 0 || Main.mallardCageFrame[l] == 4)
					{
						Main.mallardCageFrameCounter[l] = Main.mallardCageFrameCounter[l] + 1;
						if (Main.mallardCageFrameCounter[l] > Main.rand.Next(45, 2700))
						{
							if (Main.mallardCageFrame[l] == 0 && Main.rand.Next(3) != 0 || Main.mallardCageFrame[l] == 4 && Main.rand.Next(5) == 0)
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.mallardCageFrame[l] = 5;
								}
								else if (Main.rand.Next(3) != 0)
								{
									Main.mallardCageFrame[l] = 1;
								}
								else if (Main.mallardCageFrame[l] != 4)
								{
									Main.mallardCageFrame[l] = 4;
								}
								else
								{
									Main.mallardCageFrame[l] = 0;
								}
							}
							Main.mallardCageFrameCounter[l] = 0;
						}
					}
					else if (Main.mallardCageFrame[l] >= 1 && Main.mallardCageFrame[l] <= 3)
					{
						Main.mallardCageFrameCounter[l] = Main.mallardCageFrameCounter[l] + 1;
						if (Main.mallardCageFrameCounter[l] >= 5)
						{
							Main.mallardCageFrameCounter[l] = 0;
							Main.mallardCageFrame[l] = Main.mallardCageFrame[l] + 1;
						}
						if (Main.mallardCageFrame[l] > 3)
						{
							if (Main.rand.Next(5) != 0)
							{
								Main.mallardCageFrame[l] = 1;
							}
							else
							{
								Main.mallardCageFrame[l] = 0;
							}
						}
					}
					else if (Main.mallardCageFrame[l] >= 5 && Main.mallardCageFrame[l] <= 11)
					{
						Main.mallardCageFrameCounter[l] = Main.mallardCageFrameCounter[l] + 1;
						if (Main.mallardCageFrameCounter[l] >= 5)
						{
							Main.mallardCageFrameCounter[l] = 0;
							Main.mallardCageFrame[l] = Main.mallardCageFrame[l] + 1;
						}
					}
					else if (Main.mallardCageFrame[l] == 12 || Main.mallardCageFrame[l] == 16)
					{
						Main.mallardCageFrameCounter[l] = Main.mallardCageFrameCounter[l] + 1;
						if (Main.mallardCageFrameCounter[l] > Main.rand.Next(45, 2700))
						{
							if (Main.mallardCageFrame[l] == 12 && Main.rand.Next(3) != 0 || Main.mallardCageFrame[l] == 16 && Main.rand.Next(5) == 0)
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.mallardCageFrame[l] = 17;
								}
								else if (Main.rand.Next(3) != 0)
								{
									Main.mallardCageFrame[l] = 13;
								}
								else if (Main.mallardCageFrame[l] != 16)
								{
									Main.mallardCageFrame[l] = 16;
								}
								else
								{
									Main.mallardCageFrame[l] = 12;
								}
							}
							Main.mallardCageFrameCounter[l] = 0;
						}
					}
					else if (Main.mallardCageFrame[l] >= 13 && Main.mallardCageFrame[l] <= 15)
					{
						Main.mallardCageFrameCounter[l] = Main.mallardCageFrameCounter[l] + 1;
						if (Main.mallardCageFrameCounter[l] >= 5)
						{
							Main.mallardCageFrame[l] = Main.mallardCageFrame[l] + 1;
							if (Main.mallardCageFrame[l] > 15)
							{
								if (Main.rand.Next(5) == 0)
								{
									Main.mallardCageFrame[l] = 13;
								}
								else
								{
									Main.mallardCageFrame[l] = 12;
								}
							}
							Main.mallardCageFrameCounter[l] = 0;
						}
					}
					else if (Main.mallardCageFrame[l] >= 17)
					{
						Main.mallardCageFrameCounter[l] = Main.mallardCageFrameCounter[l] + 1;
						if (Main.mallardCageFrameCounter[l] >= 5)
						{
							Main.mallardCageFrameCounter[l] = 0;
							Main.mallardCageFrame[l] = Main.mallardCageFrame[l] + 1;
						}
						if (Main.mallardCageFrame[l] > 23)
						{
							Main.mallardCageFrame[l] = 0;
						}
					}
				}
				for (int m = 0; m < Main.cageFrames; m++)
				{
					if (Main.duckCageFrame[m] == 0 || Main.duckCageFrame[m] == 4)
					{
						Main.duckCageFrameCounter[m] = Main.duckCageFrameCounter[m] + 1;
						if (Main.duckCageFrameCounter[m] > Main.rand.Next(45, 2700))
						{
							if (Main.duckCageFrame[m] == 0 && Main.rand.Next(3) != 0 || Main.duckCageFrame[m] == 4 && Main.rand.Next(5) == 0)
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.duckCageFrame[m] = 5;
								}
								else if (Main.rand.Next(3) != 0)
								{
									Main.duckCageFrame[m] = 1;
								}
								else if (Main.duckCageFrame[m] != 4)
								{
									Main.duckCageFrame[m] = 4;
								}
								else
								{
									Main.duckCageFrame[m] = 0;
								}
							}
							Main.duckCageFrameCounter[m] = 0;
						}
					}
					else if (Main.duckCageFrame[m] >= 1 && Main.duckCageFrame[m] <= 3)
					{
						Main.duckCageFrameCounter[m] = Main.duckCageFrameCounter[m] + 1;
						if (Main.duckCageFrameCounter[m] >= 5)
						{
							Main.duckCageFrameCounter[m] = 0;
							Main.duckCageFrame[m] = Main.duckCageFrame[m] + 1;
						}
						if (Main.duckCageFrame[m] > 3)
						{
							if (Main.rand.Next(5) != 0)
							{
								Main.duckCageFrame[m] = 1;
							}
							else
							{
								Main.duckCageFrame[m] = 0;
							}
						}
					}
					else if (Main.duckCageFrame[m] >= 5 && Main.duckCageFrame[m] <= 11)
					{
						Main.duckCageFrameCounter[m] = Main.duckCageFrameCounter[m] + 1;
						if (Main.duckCageFrameCounter[m] >= 5)
						{
							Main.duckCageFrameCounter[m] = 0;
							Main.duckCageFrame[m] = Main.duckCageFrame[m] + 1;
						}
					}
					else if (Main.duckCageFrame[m] == 12 || Main.duckCageFrame[m] == 16)
					{
						Main.duckCageFrameCounter[m] = Main.duckCageFrameCounter[m] + 1;
						if (Main.duckCageFrameCounter[m] > Main.rand.Next(45, 2700))
						{
							if (Main.duckCageFrame[m] == 12 && Main.rand.Next(3) != 0 || Main.duckCageFrame[m] == 16 && Main.rand.Next(5) == 0)
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.duckCageFrame[m] = 17;
								}
								else if (Main.rand.Next(3) != 0)
								{
									Main.duckCageFrame[m] = 13;
								}
								else if (Main.duckCageFrame[m] != 16)
								{
									Main.duckCageFrame[m] = 16;
								}
								else
								{
									Main.duckCageFrame[m] = 12;
								}
							}
							Main.duckCageFrameCounter[m] = 0;
						}
					}
					else if (Main.duckCageFrame[m] >= 13 && Main.duckCageFrame[m] <= 15)
					{
						Main.duckCageFrameCounter[m] = Main.duckCageFrameCounter[m] + 1;
						if (Main.duckCageFrameCounter[m] >= 5)
						{
							Main.duckCageFrame[m] = Main.duckCageFrame[m] + 1;
							if (Main.duckCageFrame[m] > 15)
							{
								if (Main.rand.Next(5) == 0)
								{
									Main.duckCageFrame[m] = 13;
								}
								else
								{
									Main.duckCageFrame[m] = 12;
								}
							}
							Main.duckCageFrameCounter[m] = 0;
						}
					}
					else if (Main.duckCageFrame[m] >= 17)
					{
						Main.duckCageFrameCounter[m] = Main.duckCageFrameCounter[m] + 1;
						if (Main.duckCageFrameCounter[m] >= 5)
						{
							Main.duckCageFrameCounter[m] = 0;
							Main.duckCageFrame[m] = Main.duckCageFrame[m] + 1;
						}
						if (Main.duckCageFrame[m] > 23)
						{
							Main.duckCageFrame[m] = 0;
						}
					}
				}
				for (int n = 0; n < Main.cageFrames; n++)
				{
					if (Main.birdCageFrame[n] == 0)
					{
						Main.birdCageFrameCounter[n] = Main.birdCageFrameCounter[n] + 1;
						if (Main.birdCageFrameCounter[n] > Main.rand.Next(30, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(3) == 0)
								{
									Main.birdCageFrame[n] = 1;
								}
								else
								{
									Main.birdCageFrame[n] = 2;
								}
							}
							Main.birdCageFrameCounter[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] == 1)
					{
						Main.birdCageFrameCounter[n] = Main.birdCageFrameCounter[n] + 1;
						if (Main.birdCageFrameCounter[n] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
						{
							Main.birdCageFrameCounter[n] = 0;
							Main.birdCageFrame[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] >= 2 && Main.birdCageFrame[n] <= 5)
					{
						Main.birdCageFrameCounter[n] = Main.birdCageFrameCounter[n] + 1;
						if (Main.birdCageFrameCounter[n] >= 5)
						{
							Main.birdCageFrameCounter[n] = 0;
							if (Main.birdCageFrame[n] != 3 || Main.rand.Next(3) != 0)
							{
								Main.birdCageFrame[n] = Main.birdCageFrame[n] + 1;
							}
							else
							{
								Main.birdCageFrame[n] = 13;
							}
						}
					}
					else if (Main.birdCageFrame[n] == 6)
					{
						Main.birdCageFrameCounter[n] = Main.birdCageFrameCounter[n] + 1;
						if (Main.birdCageFrameCounter[n] > Main.rand.Next(45, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.birdCageFrame[n] = 7;
								}
								else if (Main.rand.Next(6) == 0)
								{
									Main.birdCageFrame[n] = 11;
								}
							}
							Main.birdCageFrameCounter[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] >= 7 && Main.birdCageFrame[n] <= 10)
					{
						Main.birdCageFrameCounter[n] = Main.birdCageFrameCounter[n] + 1;
						if (Main.birdCageFrameCounter[n] >= 5)
						{
							Main.birdCageFrame[n] = Main.birdCageFrame[n] + 1;
							if (Main.birdCageFrame[n] > 10)
							{
								Main.birdCageFrame[n] = 0;
							}
							Main.birdCageFrameCounter[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] >= 11 && Main.birdCageFrame[n] <= 13)
					{
						Main.birdCageFrameCounter[n] = Main.birdCageFrameCounter[n] + 1;
						if (Main.birdCageFrameCounter[n] >= 5)
						{
							Main.birdCageFrame[n] = Main.birdCageFrame[n] + 1;
							Main.birdCageFrameCounter[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] == 14)
					{
						Main.birdCageFrameCounter[n] = Main.birdCageFrameCounter[n] + 1;
						if (Main.birdCageFrameCounter[n] > Main.rand.Next(5, 600))
						{
							if (Main.rand.Next(20) == 0)
							{
								Main.birdCageFrame[n] = 16;
							}
							else if (Main.rand.Next(20) != 0)
							{
								Main.birdCageFrame[n] = 15;
							}
							else
							{
								Main.birdCageFrame[n] = 4;
							}
							Main.birdCageFrameCounter[n] = 0;
						}
					}
					else if (Main.birdCageFrame[n] == 15)
					{
						Main.birdCageFrameCounter[n] = Main.birdCageFrameCounter[n] + 1;
						if (Main.birdCageFrameCounter[n] >= 10)
						{
							Main.birdCageFrameCounter[n] = 0;
							Main.birdCageFrame[n] = 14;
						}
					}
					else if (Main.birdCageFrame[n] >= 16 && Main.birdCageFrame[n] <= 18)
					{
						Main.birdCageFrameCounter[n] = Main.birdCageFrameCounter[n] + 1;
						if (Main.birdCageFrameCounter[n] >= 5)
						{
							Main.birdCageFrame[n] = Main.birdCageFrame[n] + 1;
							if (Main.birdCageFrame[n] > 18)
							{
								Main.birdCageFrame[n] = 0;
							}
							Main.birdCageFrameCounter[n] = 0;
						}
					}
				}
				for (int o = 0; o < Main.cageFrames; o++)
				{
					if (Main.blueBirdCageFrame[o] == 0)
					{
						Main.blueBirdCageFrameCounter[o] = Main.blueBirdCageFrameCounter[o] + 1;
						if (Main.blueBirdCageFrameCounter[o] > Main.rand.Next(30, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(3) == 0)
								{
									Main.blueBirdCageFrame[o] = 1;
								}
								else
								{
									Main.blueBirdCageFrame[o] = 2;
								}
							}
							Main.blueBirdCageFrameCounter[o] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[o] == 1)
					{
						Main.blueBirdCageFrameCounter[o] = Main.blueBirdCageFrameCounter[o] + 1;
						if (Main.blueBirdCageFrameCounter[o] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
						{
							Main.blueBirdCageFrameCounter[o] = 0;
							Main.blueBirdCageFrame[o] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[o] >= 2 && Main.blueBirdCageFrame[o] <= 5)
					{
						Main.blueBirdCageFrameCounter[o] = Main.blueBirdCageFrameCounter[o] + 1;
						if (Main.blueBirdCageFrameCounter[o] >= 5)
						{
							Main.blueBirdCageFrameCounter[o] = 0;
							if (Main.blueBirdCageFrame[o] != 3 || Main.rand.Next(3) != 0)
							{
								Main.blueBirdCageFrame[o] = Main.blueBirdCageFrame[o] + 1;
							}
							else
							{
								Main.blueBirdCageFrame[o] = 13;
							}
						}
					}
					else if (Main.blueBirdCageFrame[o] == 6)
					{
						Main.blueBirdCageFrameCounter[o] = Main.blueBirdCageFrameCounter[o] + 1;
						if (Main.blueBirdCageFrameCounter[o] > Main.rand.Next(45, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.blueBirdCageFrame[o] = 7;
								}
								else if (Main.rand.Next(6) == 0)
								{
									Main.blueBirdCageFrame[o] = 11;
								}
							}
							Main.blueBirdCageFrameCounter[o] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[o] >= 7 && Main.blueBirdCageFrame[o] <= 10)
					{
						Main.blueBirdCageFrameCounter[o] = Main.blueBirdCageFrameCounter[o] + 1;
						if (Main.blueBirdCageFrameCounter[o] >= 5)
						{
							Main.blueBirdCageFrame[o] = Main.blueBirdCageFrame[o] + 1;
							if (Main.blueBirdCageFrame[o] > 10)
							{
								Main.blueBirdCageFrame[o] = 0;
							}
							Main.blueBirdCageFrameCounter[o] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[o] >= 11 && Main.blueBirdCageFrame[o] <= 13)
					{
						Main.blueBirdCageFrameCounter[o] = Main.blueBirdCageFrameCounter[o] + 1;
						if (Main.blueBirdCageFrameCounter[o] >= 5)
						{
							Main.blueBirdCageFrame[o] = Main.blueBirdCageFrame[o] + 1;
							Main.blueBirdCageFrameCounter[o] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[o] == 14)
					{
						Main.blueBirdCageFrameCounter[o] = Main.blueBirdCageFrameCounter[o] + 1;
						if (Main.blueBirdCageFrameCounter[o] > Main.rand.Next(5, 600))
						{
							if (Main.rand.Next(20) == 0)
							{
								Main.blueBirdCageFrame[o] = 16;
							}
							else if (Main.rand.Next(20) != 0)
							{
								Main.blueBirdCageFrame[o] = 15;
							}
							else
							{
								Main.blueBirdCageFrame[o] = 4;
							}
							Main.blueBirdCageFrameCounter[o] = 0;
						}
					}
					else if (Main.blueBirdCageFrame[o] == 15)
					{
						Main.blueBirdCageFrameCounter[o] = Main.blueBirdCageFrameCounter[o] + 1;
						if (Main.blueBirdCageFrameCounter[o] >= 10)
						{
							Main.blueBirdCageFrameCounter[o] = 0;
							Main.blueBirdCageFrame[o] = 14;
						}
					}
					else if (Main.blueBirdCageFrame[o] >= 16 && Main.blueBirdCageFrame[o] <= 18)
					{
						Main.blueBirdCageFrameCounter[o] = Main.blueBirdCageFrameCounter[o] + 1;
						if (Main.blueBirdCageFrameCounter[o] >= 5)
						{
							Main.blueBirdCageFrame[o] = Main.blueBirdCageFrame[o] + 1;
							if (Main.blueBirdCageFrame[o] > 18)
							{
								Main.blueBirdCageFrame[o] = 0;
							}
							Main.blueBirdCageFrameCounter[o] = 0;
						}
					}
				}
				for (int p = 0; p < Main.cageFrames; p++)
				{
					if (Main.redBirdCageFrame[p] == 0)
					{
						Main.redBirdCageFrameCounter[p] = Main.redBirdCageFrameCounter[p] + 1;
						if (Main.redBirdCageFrameCounter[p] > Main.rand.Next(30, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(3) == 0)
								{
									Main.redBirdCageFrame[p] = 1;
								}
								else
								{
									Main.redBirdCageFrame[p] = 2;
								}
							}
							Main.redBirdCageFrameCounter[p] = 0;
						}
					}
					else if (Main.redBirdCageFrame[p] == 1)
					{
						Main.redBirdCageFrameCounter[p] = Main.redBirdCageFrameCounter[p] + 1;
						if (Main.redBirdCageFrameCounter[p] > Main.rand.Next(900, 18000) && Main.rand.Next(3) == 0)
						{
							Main.redBirdCageFrameCounter[p] = 0;
							Main.redBirdCageFrame[p] = 0;
						}
					}
					else if (Main.redBirdCageFrame[p] >= 2 && Main.redBirdCageFrame[p] <= 5)
					{
						Main.redBirdCageFrameCounter[p] = Main.redBirdCageFrameCounter[p] + 1;
						if (Main.redBirdCageFrameCounter[p] >= 5)
						{
							Main.redBirdCageFrameCounter[p] = 0;
							if (Main.redBirdCageFrame[p] != 3 || Main.rand.Next(3) != 0)
							{
								Main.redBirdCageFrame[p] = Main.redBirdCageFrame[p] + 1;
							}
							else
							{
								Main.redBirdCageFrame[p] = 13;
							}
						}
					}
					else if (Main.redBirdCageFrame[p] == 6)
					{
						Main.redBirdCageFrameCounter[p] = Main.redBirdCageFrameCounter[p] + 1;
						if (Main.redBirdCageFrameCounter[p] > Main.rand.Next(45, 2700))
						{
							if (Main.rand.Next(3) != 0)
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.redBirdCageFrame[p] = 7;
								}
								else if (Main.rand.Next(6) == 0)
								{
									Main.redBirdCageFrame[p] = 11;
								}
							}
							Main.redBirdCageFrameCounter[p] = 0;
						}
					}
					else if (Main.redBirdCageFrame[p] >= 7 && Main.redBirdCageFrame[p] <= 10)
					{
						Main.redBirdCageFrameCounter[p] = Main.redBirdCageFrameCounter[p] + 1;
						if (Main.redBirdCageFrameCounter[p] >= 5)
						{
							Main.redBirdCageFrame[p] = Main.redBirdCageFrame[p] + 1;
							if (Main.redBirdCageFrame[p] > 10)
							{
								Main.redBirdCageFrame[p] = 0;
							}
							Main.redBirdCageFrameCounter[p] = 0;
						}
					}
					else if (Main.redBirdCageFrame[p] >= 11 && Main.redBirdCageFrame[p] <= 13)
					{
						Main.redBirdCageFrameCounter[p] = Main.redBirdCageFrameCounter[p] + 1;
						if (Main.redBirdCageFrameCounter[p] >= 5)
						{
							Main.redBirdCageFrame[p] = Main.redBirdCageFrame[p] + 1;
							Main.redBirdCageFrameCounter[p] = 0;
						}
					}
					else if (Main.redBirdCageFrame[p] == 14)
					{
						Main.redBirdCageFrameCounter[p] = Main.redBirdCageFrameCounter[p] + 1;
						if (Main.redBirdCageFrameCounter[p] > Main.rand.Next(5, 600))
						{
							if (Main.rand.Next(20) == 0)
							{
								Main.redBirdCageFrame[p] = 16;
							}
							else if (Main.rand.Next(20) != 0)
							{
								Main.redBirdCageFrame[p] = 15;
							}
							else
							{
								Main.redBirdCageFrame[p] = 4;
							}
							Main.redBirdCageFrameCounter[p] = 0;
						}
					}
					else if (Main.redBirdCageFrame[p] == 15)
					{
						Main.redBirdCageFrameCounter[p] = Main.redBirdCageFrameCounter[p] + 1;
						if (Main.redBirdCageFrameCounter[p] >= 10)
						{
							Main.redBirdCageFrameCounter[p] = 0;
							Main.redBirdCageFrame[p] = 14;
						}
					}
					else if (Main.redBirdCageFrame[p] >= 16 && Main.redBirdCageFrame[p] <= 18)
					{
						Main.redBirdCageFrameCounter[p] = Main.redBirdCageFrameCounter[p] + 1;
						if (Main.redBirdCageFrameCounter[p] >= 5)
						{
							Main.redBirdCageFrame[p] = Main.redBirdCageFrame[p] + 1;
							if (Main.redBirdCageFrame[p] > 18)
							{
								Main.redBirdCageFrame[p] = 0;
							}
							Main.redBirdCageFrameCounter[p] = 0;
						}
					}
				}
				for (int q = 0; q < 2; q++)
				{
					for (int r = 0; r < Main.cageFrames; r++)
					{
						if (Main.scorpionCageFrame[q, r] == 0 || Main.scorpionCageFrame[q, r] == 7)
						{
							Main.scorpionCageFrameCounter[q, r] = Main.scorpionCageFrameCounter[q, r] + 1;
							if (Main.scorpionCageFrameCounter[q, r] > Main.rand.Next(30, 3600))
							{
								if (Main.scorpionCageFrame[q, r] == 7)
								{
									Main.scorpionCageFrame[q, r] = 0;
								}
								else if (Main.rand.Next(3) == 0)
								{
									if (Main.rand.Next(7) == 0)
									{
										Main.scorpionCageFrame[q, r] = 1;
									}
									else if (Main.rand.Next(4) == 0)
									{
										Main.scorpionCageFrame[q, r] = 8;
									}
									else if (Main.rand.Next(3) != 0)
									{
										Main.scorpionCageFrame[q, r] = 14;
									}
									else
									{
										Main.scorpionCageFrame[q, r] = 7;
									}
								}
								Main.scorpionCageFrameCounter[q, r] = 0;
							}
						}
						else if (Main.scorpionCageFrame[q, r] >= 1 && Main.scorpionCageFrame[q, r] <= 2)
						{
							Main.scorpionCageFrameCounter[q, r] = Main.scorpionCageFrameCounter[q, r] + 1;
							if (Main.scorpionCageFrameCounter[q, r] >= 10)
							{
								Main.scorpionCageFrameCounter[q, r] = 0;
								Main.scorpionCageFrame[q, r] = Main.scorpionCageFrame[q, r] + 1;
							}
						}
						else if (Main.scorpionCageFrame[q, r] >= 8 && Main.scorpionCageFrame[q, r] <= 10)
						{
							Main.scorpionCageFrameCounter[q, r] = Main.scorpionCageFrameCounter[q, r] + 1;
							if (Main.scorpionCageFrameCounter[q, r] >= 10)
							{
								Main.scorpionCageFrameCounter[q, r] = 0;
								Main.scorpionCageFrame[q, r] = Main.scorpionCageFrame[q, r] + 1;
							}
						}
						else if (Main.scorpionCageFrame[q, r] == 11)
						{
							Main.scorpionCageFrameCounter[q, r] = Main.scorpionCageFrameCounter[q, r] + 1;
							if (Main.scorpionCageFrameCounter[q, r] > Main.rand.Next(45, 5400))
							{
								if (Main.rand.Next(6) == 0)
								{
									Main.scorpionCageFrame[q, r] = 12;
								}
								Main.scorpionCageFrameCounter[q, r] = 0;
							}
						}
						else if (Main.scorpionCageFrame[q, r] >= 12 && Main.scorpionCageFrame[q, r] <= 13)
						{
							Main.scorpionCageFrameCounter[q, r] = Main.scorpionCageFrameCounter[q, r] + 1;
							if (Main.scorpionCageFrameCounter[q, r] >= 10)
							{
								Main.scorpionCageFrameCounter[q, r] = 0;
								Main.scorpionCageFrame[q, r] = Main.scorpionCageFrame[q, r] + 1;
								if (Main.scorpionCageFrame[q, r] > 13)
								{
									Main.scorpionCageFrame[q, r] = 0;
								}
							}
						}
						else if (Main.scorpionCageFrame[q, r] >= 14 && Main.scorpionCageFrame[q, r] <= 15)
						{
							Main.scorpionCageFrameCounter[q, r] = Main.scorpionCageFrameCounter[q, r] + 1;
							if (Main.scorpionCageFrameCounter[q, r] >= 5)
							{
								Main.scorpionCageFrameCounter[q, r] = 0;
								Main.scorpionCageFrame[q, r] = Main.scorpionCageFrame[q, r] + 1;
								if (Main.scorpionCageFrame[q, r] > 15)
								{
									Main.scorpionCageFrame[q, r] = 14;
								}
								if (Main.rand.Next(5) == 0)
								{
									Main.scorpionCageFrame[q, r] = 0;
								}
							}
						}
						else if (Main.scorpionCageFrame[q, r] == 4 || Main.scorpionCageFrame[q, r] == 3)
						{
							Main.scorpionCageFrameCounter[q, r] = Main.scorpionCageFrameCounter[q, r] + 1;
							if (Main.scorpionCageFrameCounter[q, r] > Main.rand.Next(30, 3600))
							{
								if (Main.scorpionCageFrame[q, r] == 3)
								{
									Main.scorpionCageFrame[q, r] = 4;
								}
								else if (Main.rand.Next(3) == 0)
								{
									if (Main.rand.Next(5) == 0)
									{
										Main.scorpionCageFrame[q, r] = 5;
									}
									else if (Main.rand.Next(3) != 0)
									{
										Main.scorpionCageFrame[q, r] = 16;
									}
									else
									{
										Main.scorpionCageFrame[q, r] = 3;
									}
								}
								Main.scorpionCageFrameCounter[q, r] = 0;
							}
						}
						else if (Main.scorpionCageFrame[q, r] >= 5 && Main.scorpionCageFrame[q, r] <= 6)
						{
							Main.scorpionCageFrameCounter[q, r] = Main.scorpionCageFrameCounter[q, r] + 1;
							if (Main.scorpionCageFrameCounter[q, r] >= 10)
							{
								Main.scorpionCageFrameCounter[q, r] = 0;
								Main.scorpionCageFrame[q, r] = Main.scorpionCageFrame[q, r] + 1;
								if (Main.scorpionCageFrame[q, r] > 7)
								{
									Main.scorpionCageFrame[q, r] = 0;
								}
							}
						}
						else if (Main.scorpionCageFrame[q, r] >= 16 && Main.scorpionCageFrame[q, r] <= 17)
						{
							Main.scorpionCageFrameCounter[q, r] = Main.scorpionCageFrameCounter[q, r] + 1;
							if (Main.scorpionCageFrameCounter[q, r] >= 5)
							{
								Main.scorpionCageFrameCounter[q, r] = 0;
								Main.scorpionCageFrame[q, r] = Main.scorpionCageFrame[q, r] + 1;
								if (Main.scorpionCageFrame[q, r] > 17)
								{
									Main.scorpionCageFrame[q, r] = 16;
								}
								if (Main.rand.Next(5) == 0)
								{
									Main.scorpionCageFrame[q, r] = 4;
								}
							}
						}
					}
				}
				for (int s = 0; s < Main.cageFrames; s++)
				{
					if (Main.penguinCageFrame[s] == 0)
					{
						Main.penguinCageFrameCounter[s] = Main.penguinCageFrameCounter[s] + 1;
						if (Main.penguinCageFrameCounter[s] > Main.rand.Next(30, 1800))
						{
							if (Main.rand.Next(2) == 0)
							{
								if (Main.rand.Next(10) == 0)
								{
									Main.penguinCageFrame[s] = 4;
								}
								else if (Main.rand.Next(7) == 0)
								{
									Main.penguinCageFrame[s] = 15;
								}
								else if (Main.rand.Next(3) != 0)
								{
									Main.penguinCageFrame[s] = 1;
								}
								else
								{
									Main.penguinCageFrame[s] = 2;
								}
							}
							Main.penguinCageFrameCounter[s] = 0;
						}
					}
					else if (Main.penguinCageFrame[s] == 1)
					{
						Main.penguinCageFrameCounter[s] = Main.penguinCageFrameCounter[s] + 1;
						if (Main.penguinCageFrameCounter[s] >= 10)
						{
							Main.penguinCageFrameCounter[s] = 0;
							Main.penguinCageFrame[s] = 0;
						}
					}
					else if (Main.penguinCageFrame[s] >= 2 && Main.penguinCageFrame[s] <= 3)
					{
						Main.penguinCageFrameCounter[s] = Main.penguinCageFrameCounter[s] + 1;
						if (Main.penguinCageFrameCounter[s] >= 5)
						{
							Main.penguinCageFrameCounter[s] = 0;
							Main.penguinCageFrame[s] = Main.penguinCageFrame[s] + 1;
							if (Main.penguinCageFrame[s] > 3)
							{
								if (Main.rand.Next(3) != 0)
								{
									Main.penguinCageFrame[s] = 2;
								}
								else
								{
									Main.penguinCageFrame[s] = 0;
								}
							}
						}
					}
					else if (Main.penguinCageFrame[s] >= 4 && Main.penguinCageFrame[s] <= 6)
					{
						Main.penguinCageFrameCounter[s] = Main.penguinCageFrameCounter[s] + 1;
						if (Main.penguinCageFrameCounter[s] >= 10)
						{
							Main.penguinCageFrameCounter[s] = 0;
							Main.penguinCageFrame[s] = Main.penguinCageFrame[s] + 1;
						}
					}
					else if (Main.penguinCageFrame[s] == 15)
					{
						Main.penguinCageFrameCounter[s] = Main.penguinCageFrameCounter[s] + 1;
						if (Main.penguinCageFrameCounter[s] > Main.rand.Next(10, 1800))
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.penguinCageFrame[s] = 0;
							}
							Main.penguinCageFrameCounter[s] = 0;
						}
					}
					else if (Main.penguinCageFrame[s] == 8)
					{
						Main.penguinCageFrameCounter[s] = Main.penguinCageFrameCounter[s] + 1;
						if (Main.penguinCageFrameCounter[s] > Main.rand.Next(30, 3600))
						{
							if (Main.rand.Next(2) == 0)
							{
								if (Main.rand.Next(10) == 0)
								{
									Main.penguinCageFrame[s] = 12;
								}
								else if (Main.rand.Next(7) == 0)
								{
									Main.penguinCageFrame[s] = 7;
								}
								else if (Main.rand.Next(3) != 0)
								{
									Main.penguinCageFrame[s] = 9;
								}
								else
								{
									Main.penguinCageFrame[s] = 10;
								}
							}
							Main.penguinCageFrameCounter[s] = 0;
						}
					}
					else if (Main.penguinCageFrame[s] == 9)
					{
						Main.penguinCageFrameCounter[s] = Main.penguinCageFrameCounter[s] + 1;
						if (Main.penguinCageFrameCounter[s] >= 10)
						{
							Main.penguinCageFrameCounter[s] = 0;
							Main.penguinCageFrame[s] = 8;
						}
					}
					else if (Main.penguinCageFrame[s] >= 10 && Main.penguinCageFrame[s] <= 11)
					{
						Main.penguinCageFrameCounter[s] = Main.penguinCageFrameCounter[s] + 1;
						if (Main.penguinCageFrameCounter[s] >= 5)
						{
							Main.penguinCageFrameCounter[s] = 0;
							Main.penguinCageFrame[s] = Main.penguinCageFrame[s] + 1;
							if (Main.penguinCageFrame[s] > 3)
							{
								if (Main.rand.Next(3) != 0)
								{
									Main.penguinCageFrame[s] = 10;
								}
								else
								{
									Main.penguinCageFrame[s] = 8;
								}
							}
						}
					}
					else if (Main.penguinCageFrame[s] >= 12 && Main.penguinCageFrame[s] <= 14)
					{
						Main.penguinCageFrameCounter[s] = Main.penguinCageFrameCounter[s] + 1;
						if (Main.penguinCageFrameCounter[s] >= 10)
						{
							Main.penguinCageFrameCounter[s] = 0;
							Main.penguinCageFrame[s] = Main.penguinCageFrame[s] + 1;
						}
					}
					else if (Main.penguinCageFrame[s] == 7)
					{
						Main.penguinCageFrameCounter[s] = Main.penguinCageFrameCounter[s] + 1;
						if (Main.penguinCageFrameCounter[s] > Main.rand.Next(10, 3600))
						{
							if (Main.rand.Next(2) == 0)
							{
								Main.penguinCageFrame[s] = 8;
							}
							Main.penguinCageFrameCounter[s] = 0;
						}
					}
				}
				for (int t = 0; t < Main.cageFrames; t++)
				{
					if (Main.snailCageFrame[t] >= 0 && Main.snailCageFrame[t] <= 13)
					{
						Main.snailCageFrameCounter[t] = Main.snailCageFrameCounter[t] + 1;
						if (Main.snailCageFrameCounter[t] > Main.rand.Next(45, 3600))
						{
							if (Main.snailCageFrame[t] == 8 && Main.rand.Next(2) == 0)
							{
								Main.snailCageFrame[t] = 14;
							}
							else if (Main.snailCageFrame[t] == 1 && Main.rand.Next(3) == 0)
							{
								Main.snailCageFrame[t] = 19;
							}
							else if (Main.snailCageFrame[t] != 1 || Main.rand.Next(3) != 0)
							{
								Main.snailCageFrame[t] = Main.snailCageFrame[t] + 1;
								if (Main.snailCageFrame[t] > 13)
								{
									Main.snailCageFrame[t] = 0;
								}
							}
							else
							{
								Main.snailCageFrame[t] = 20;
							}
							Main.snailCageFrameCounter[t] = 0;
						}
					}
					else if (Main.snailCageFrame[t] >= 14 && Main.snailCageFrame[t] <= 18)
					{
						Main.snailCageFrameCounter[t] = Main.snailCageFrameCounter[t] + 1;
						if (Main.snailCageFrameCounter[t] >= 5)
						{
							Main.snailCageFrameCounter[t] = 0;
							Main.snailCageFrame[t] = Main.snailCageFrame[t] + 1;
						}
						if (Main.snailCageFrame[t] > 18)
						{
							Main.snailCageFrame[t] = 20;
						}
					}
					else if (Main.snailCageFrame[t] == 19 || Main.snailCageFrame[t] == 20)
					{
						Main.snailCageFrameCounter[t] = Main.snailCageFrameCounter[t] + 1;
						if (Main.snailCageFrameCounter[t] > Main.rand.Next(60, 7200))
						{
							Main.snailCageFrameCounter[t] = 0;
							if (Main.rand.Next(4) == 0)
							{
								if (Main.rand.Next(3) == 0)
								{
									Main.snailCageFrame[t] = 2;
								}
								else if (Main.snailCageFrame[t] != 19)
								{
									Main.snailCageFrame[t] = 19;
								}
								else
								{
									Main.snailCageFrame[t] = 20;
								}
							}
						}
					}
				}
				for (int u = 0; u < Main.cageFrames; u++)
				{
					if (Main.snail2CageFrame[u] >= 0 && Main.snail2CageFrame[u] <= 13)
					{
						Main.snail2CageFrameCounter[u] = Main.snail2CageFrameCounter[u] + 1;
						if (Main.snail2CageFrameCounter[u] > Main.rand.Next(30, 2700))
						{
							if (Main.snail2CageFrame[u] == 8 && Main.rand.Next(2) == 0)
							{
								Main.snail2CageFrame[u] = 14;
							}
							else if (Main.snail2CageFrame[u] == 1 && Main.rand.Next(3) == 0)
							{
								Main.snail2CageFrame[u] = 19;
							}
							else if (Main.snail2CageFrame[u] != 1 || Main.rand.Next(3) != 0)
							{
								Main.snail2CageFrame[u] = Main.snail2CageFrame[u] + 1;
								if (Main.snail2CageFrame[u] > 13)
								{
									Main.snail2CageFrame[u] = 0;
								}
							}
							else
							{
								Main.snail2CageFrame[u] = 20;
							}
							Main.snail2CageFrameCounter[u] = 0;
						}
					}
					else if (Main.snail2CageFrame[u] >= 14 && Main.snail2CageFrame[u] <= 18)
					{
						Main.snail2CageFrameCounter[u] = Main.snail2CageFrameCounter[u] + 1;
						if (Main.snail2CageFrameCounter[u] >= 5)
						{
							Main.snail2CageFrameCounter[u] = 0;
							Main.snail2CageFrame[u] = Main.snail2CageFrame[u] + 1;
						}
						if (Main.snail2CageFrame[u] > 18)
						{
							Main.snail2CageFrame[u] = 20;
						}
					}
					else if (Main.snail2CageFrame[u] == 19 || Main.snail2CageFrame[u] == 20)
					{
						Main.snail2CageFrameCounter[u] = Main.snail2CageFrameCounter[u] + 1;
						if (Main.snail2CageFrameCounter[u] > Main.rand.Next(45, 5400))
						{
							Main.snail2CageFrameCounter[u] = 0;
							if (Main.rand.Next(4) == 0)
							{
								if (Main.rand.Next(3) == 0)
								{
									Main.snail2CageFrame[u] = 2;
								}
								else if (Main.snail2CageFrame[u] != 19)
								{
									Main.snail2CageFrame[u] = 19;
								}
								else
								{
									Main.snail2CageFrame[u] = 20;
								}
							}
						}
					}
				}
				for (int v = 0; v < Main.cageFrames; v++)
				{
					if (Main.frogCageFrame[v] == 0)
					{
						Main.frogCageFrameCounter[v] = Main.frogCageFrameCounter[v] + 1;
						if (Main.frogCageFrameCounter[v] > Main.rand.Next(45, 3600))
						{
							if (Main.rand.Next(10) != 0)
							{
								Main.frogCageFrame[v] = 12;
							}
							else
							{
								Main.frogCageFrame[v] = 1;
							}
							Main.frogCageFrameCounter[v] = 0;
						}
					}
					else if (Main.frogCageFrame[v] >= 1 && Main.frogCageFrame[v] <= 5)
					{
						Main.frogCageFrameCounter[v] = Main.frogCageFrameCounter[v] + 1;
						if (Main.frogCageFrameCounter[v] >= 5)
						{
							Main.frogCageFrame[v] = Main.frogCageFrame[v] + 1;
							Main.frogCageFrameCounter[v] = 0;
						}
					}
					else if (Main.frogCageFrame[v] >= 12 && Main.frogCageFrame[v] <= 17)
					{
						Main.frogCageFrameCounter[v] = Main.frogCageFrameCounter[v] + 1;
						if (Main.frogCageFrameCounter[v] >= 5)
						{
							Main.frogCageFrameCounter[v] = 0;
							Main.frogCageFrame[v] = Main.frogCageFrame[v] + 1;
						}
						if (Main.frogCageFrame[v] > 17)
						{
							if (Main.rand.Next(3) != 0)
							{
								Main.frogCageFrame[v] = 12;
							}
							else
							{
								Main.frogCageFrame[v] = 0;
							}
						}
					}
					else if (Main.frogCageFrame[v] == 6)
					{
						Main.frogCageFrameCounter[v] = Main.frogCageFrameCounter[v] + 1;
						if (Main.frogCageFrameCounter[v] > Main.rand.Next(45, 3600))
						{
							if (Main.rand.Next(10) != 0)
							{
								Main.frogCageFrame[v] = 18;
							}
							else
							{
								Main.frogCageFrame[v] = 7;
							}
							Main.frogCageFrameCounter[v] = 0;
						}
					}
					else if (Main.frogCageFrame[v] >= 7 && Main.frogCageFrame[v] <= 11)
					{
						Main.frogCageFrameCounter[v] = Main.frogCageFrameCounter[v] + 1;
						if (Main.frogCageFrameCounter[v] >= 5)
						{
							Main.frogCageFrame[v] = Main.frogCageFrame[v] + 1;
							Main.frogCageFrameCounter[v] = 0;
							if (Main.frogCageFrame[v] > 11)
							{
								Main.frogCageFrame[v] = 0;
							}
						}
					}
					else if (Main.frogCageFrame[v] >= 18 && Main.frogCageFrame[v] <= 23)
					{
						Main.frogCageFrameCounter[v] = Main.frogCageFrameCounter[v] + 1;
						if (Main.frogCageFrameCounter[v] >= 5)
						{
							Main.frogCageFrameCounter[v] = 0;
							Main.frogCageFrame[v] = Main.frogCageFrame[v] + 1;
						}
						if (Main.frogCageFrame[v] > 17)
						{
							if (Main.rand.Next(3) != 0)
							{
								Main.frogCageFrame[v] = 18;
							}
							else
							{
								Main.frogCageFrame[v] = 6;
							}
						}
					}
				}
				for (int w = 0; w < Main.cageFrames; w++)
				{
					if (Main.mouseCageFrame[w] >= 0 && Main.mouseCageFrame[w] <= 1)
					{
						Main.mouseCageFrameCounter[w] = Main.mouseCageFrameCounter[w] + 1;
						if (Main.mouseCageFrameCounter[w] >= 5)
						{
							Main.mouseCageFrame[w] = Main.mouseCageFrame[w] + 1;
							if (Main.mouseCageFrame[w] > 1)
							{
								Main.mouseCageFrame[w] = 0;
							}
							Main.mouseCageFrameCounter[w] = 0;
							if (Main.rand.Next(15) == 0)
							{
								Main.mouseCageFrame[w] = 4;
							}
						}
					}
					else if (Main.mouseCageFrame[w] >= 4 && Main.mouseCageFrame[w] <= 7)
					{
						Main.mouseCageFrameCounter[w] = Main.mouseCageFrameCounter[w] + 1;
						if (Main.mouseCageFrameCounter[w] >= 5)
						{
							Main.mouseCageFrameCounter[w] = 0;
							Main.mouseCageFrame[w] = Main.mouseCageFrame[w] + 1;
						}
						if (Main.mouseCageFrame[w] > 7)
						{
							Main.mouseCageFrame[w] = 2;
						}
					}
					else if (Main.mouseCageFrame[w] >= 2 && Main.mouseCageFrame[w] <= 3)
					{
						Main.mouseCageFrameCounter[w] = Main.mouseCageFrameCounter[w] + 1;
						if (Main.mouseCageFrameCounter[w] >= 5)
						{
							Main.mouseCageFrame[w] = Main.mouseCageFrame[w] + 1;
							if (Main.mouseCageFrame[w] > 3)
							{
								Main.mouseCageFrame[w] = 2;
							}
							Main.mouseCageFrameCounter[w] = 0;
							if (Main.rand.Next(15) == 0)
							{
								Main.mouseCageFrame[w] = 8;
							}
							else if (Main.rand.Next(15) == 0)
							{
								Main.mouseCageFrame[w] = 12;
							}
						}
					}
					else if (Main.mouseCageFrame[w] >= 8 && Main.mouseCageFrame[w] <= 11)
					{
						Main.mouseCageFrameCounter[w] = Main.mouseCageFrameCounter[w] + 1;
						if (Main.mouseCageFrameCounter[w] >= 5)
						{
							Main.mouseCageFrameCounter[w] = 0;
							Main.mouseCageFrame[w] = Main.mouseCageFrame[w] + 1;
						}
						if (Main.mouseCageFrame[w] > 11)
						{
							Main.mouseCageFrame[w] = 0;
						}
					}
					else if (Main.mouseCageFrame[w] >= 12 && Main.mouseCageFrame[w] <= 13)
					{
						Main.mouseCageFrameCounter[w] = Main.mouseCageFrameCounter[w] + 1;
						if (Main.mouseCageFrameCounter[w] >= 5)
						{
							Main.mouseCageFrameCounter[w] = 0;
							Main.mouseCageFrame[w] = Main.mouseCageFrame[w] + 1;
						}
					}
					else if (Main.mouseCageFrame[w] >= 14 && Main.mouseCageFrame[w] <= 17)
					{
						Main.mouseCageFrameCounter[w] = Main.mouseCageFrameCounter[w] + 1;
						if (Main.mouseCageFrameCounter[w] >= 5)
						{
							Main.mouseCageFrameCounter[w] = 0;
							Main.mouseCageFrame[w] = Main.mouseCageFrame[w] + 1;
							if (Main.mouseCageFrame[w] > 17 && Main.rand.Next(20) != 0)
							{
								Main.mouseCageFrame[w] = 14;
							}
						}
					}
					else if (Main.mouseCageFrame[w] >= 18 && Main.mouseCageFrame[w] <= 19)
					{
						Main.mouseCageFrameCounter[w] = Main.mouseCageFrameCounter[w] + 1;
						if (Main.mouseCageFrameCounter[w] >= 5)
						{
							Main.mouseCageFrameCounter[w] = 0;
							Main.mouseCageFrame[w] = Main.mouseCageFrame[w] + 1;
							if (Main.mouseCageFrame[w] > 19)
							{
								Main.mouseCageFrame[w] = 0;
							}
						}
					}
				}
				for (int x = 0; x < Main.cageFrames; x++)
				{
					Main.wormCageFrameCounter[x] = Main.wormCageFrameCounter[x] + 1;
					if (Main.wormCageFrameCounter[x] >= Main.rand.Next(30, 91))
					{
						Main.wormCageFrameCounter[x] = 0;
						if (Main.rand.Next(4) == 0)
						{
							Main.wormCageFrame[x] = Main.wormCageFrame[x] + 1;
							if (Main.wormCageFrame[x] == 9 && Main.rand.Next(2) == 0)
							{
								Main.wormCageFrame[x] = 0;
							}
							if (Main.wormCageFrame[x] > 18)
							{
								if (Main.rand.Next(2) != 0)
								{
									Main.wormCageFrame[x] = 0;
								}
								else
								{
									Main.wormCageFrame[x] = 9;
								}
							}
						}
					}
				}
				int num1 = 0;
				for (int y = 0; y < 3; y++)
				{
					switch (y)
					{
						case 0:
						{
							num1 = 24;
							break;
						}
						case 1:
						{
							num1 = 31;
							break;
						}
						case 2:
						{
							num1 = 34;
							break;
						}
					}
					for (int a = 0; a < Main.cageFrames; a++)
					{
						int num2 = Main.slugCageFrameCounter[y, a] + 1;
						int num3 = num2;
						Main.slugCageFrameCounter[y, a] = num2;
						if (num3 >= Main.rand.Next(5, 15))
						{
							Main.slugCageFrameCounter[y, a] = 0;
							int num4 = Main.slugCageFrame[y, a] + 1;
							int num5 = num4;
							Main.slugCageFrame[y, a] = num4;
							if (num5 >= num1)
							{
								Main.slugCageFrame[y, a] = 0;
							}
						}
					}
				}
				for (int b = 0; b < Main.cageFrames; b++)
				{
					if (Main.grasshopperCageFrame[b] >= 0 && Main.grasshopperCageFrame[b] <= 1)
					{
						Main.grasshopperCageFrameCounter[b] = Main.grasshopperCageFrameCounter[b] + 1;
						if (Main.grasshopperCageFrameCounter[b] >= 5)
						{
							Main.grasshopperCageFrame[b] = Main.grasshopperCageFrame[b] + 1;
							if (Main.grasshopperCageFrame[b] > 1)
							{
								Main.grasshopperCageFrame[b] = 0;
							}
							Main.grasshopperCageFrameCounter[b] = 0;
							if (Main.rand.Next(15) == 0)
							{
								Main.grasshopperCageFrame[b] = 2;
							}
						}
					}
					else if (Main.grasshopperCageFrame[b] >= 2 && Main.grasshopperCageFrame[b] <= 5)
					{
						Main.grasshopperCageFrameCounter[b] = Main.grasshopperCageFrameCounter[b] + 1;
						if (Main.grasshopperCageFrameCounter[b] >= 5)
						{
							Main.grasshopperCageFrameCounter[b] = 0;
							Main.grasshopperCageFrame[b] = Main.grasshopperCageFrame[b] + 1;
						}
						if (Main.grasshopperCageFrame[b] > 5)
						{
							Main.grasshopperCageFrame[b] = 6;
						}
					}
					else if (Main.grasshopperCageFrame[b] >= 6 && Main.grasshopperCageFrame[b] <= 7)
					{
						Main.grasshopperCageFrameCounter[b] = Main.grasshopperCageFrameCounter[b] + 1;
						if (Main.grasshopperCageFrameCounter[b] >= 5)
						{
							Main.grasshopperCageFrame[b] = Main.grasshopperCageFrame[b] + 1;
							if (Main.grasshopperCageFrame[b] > 7)
							{
								Main.grasshopperCageFrame[b] = 6;
							}
							Main.grasshopperCageFrameCounter[b] = 0;
							if (Main.rand.Next(15) == 0)
							{
								Main.grasshopperCageFrame[b] = 8;
							}
						}
					}
					else if (Main.grasshopperCageFrame[b] >= 8 && Main.grasshopperCageFrame[b] <= 11)
					{
						Main.grasshopperCageFrameCounter[b] = Main.grasshopperCageFrameCounter[b] + 1;
						if (Main.grasshopperCageFrameCounter[b] >= 5)
						{
							Main.grasshopperCageFrameCounter[b] = 0;
							Main.grasshopperCageFrame[b] = Main.grasshopperCageFrame[b] + 1;
						}
						if (Main.grasshopperCageFrame[b] > 11)
						{
							Main.grasshopperCageFrame[b] = 0;
						}
					}
				}
				for (int c = 0; c < Main.cageFrames; c++)
				{
					byte num6 = 5;
					if (Main.fishBowlFrameMode[c] == 1)
					{
						if (Main.rand.Next(900) == 0)
						{
							Main.fishBowlFrameMode[c] = (byte)Main.rand.Next((int)num6);
						}
						Main.fishBowlFrameCounter[c] = Main.fishBowlFrameCounter[c] + 1;
						if (Main.fishBowlFrameCounter[c] >= 5)
						{
							Main.fishBowlFrameCounter[c] = 0;
							if (Main.fishBowlFrame[c] != 10)
							{
								Main.fishBowlFrame[c] = Main.fishBowlFrame[c] + 1;
							}
							else if (Main.rand.Next(20) != 0)
							{
								Main.fishBowlFrame[c] = 1;
							}
							else
							{
								Main.fishBowlFrame[c] = 11;
								Main.fishBowlFrameMode[c] = 0;
							}
						}
					}
					else if (Main.fishBowlFrameMode[c] == 2)
					{
						if (Main.rand.Next(3600) == 0)
						{
							Main.fishBowlFrameMode[c] = (byte)Main.rand.Next((int)num6);
						}
						Main.fishBowlFrameCounter[c] = Main.fishBowlFrameCounter[c] + 1;
						if (Main.fishBowlFrameCounter[c] >= 20)
						{
							Main.fishBowlFrameCounter[c] = 0;
							if (Main.fishBowlFrame[c] != 10)
							{
								Main.fishBowlFrame[c] = Main.fishBowlFrame[c] + 1;
							}
							else if (Main.rand.Next(20) != 0)
							{
								Main.fishBowlFrame[c] = 1;
							}
							else
							{
								Main.fishBowlFrame[c] = 11;
								Main.fishBowlFrameMode[c] = 0;
							}
						}
					}
					else if (Main.fishBowlFrameMode[c] == 3)
					{
						if (Main.rand.Next(3600) == 0)
						{
							Main.fishBowlFrameMode[c] = (byte)Main.rand.Next((int)num6);
						}
						Main.fishBowlFrameCounter[c] = Main.fishBowlFrameCounter[c] + 1;
						if (Main.fishBowlFrameCounter[c] >= Main.rand.Next(5, 3600))
						{
							Main.fishBowlFrameCounter[c] = 0;
							if (Main.fishBowlFrame[c] != 10)
							{
								Main.fishBowlFrame[c] = Main.fishBowlFrame[c] + 1;
							}
							else if (Main.rand.Next(20) != 0)
							{
								Main.fishBowlFrame[c] = 1;
							}
							else
							{
								Main.fishBowlFrame[c] = 11;
								Main.fishBowlFrameMode[c] = 0;
							}
						}
					}
					else if (Main.fishBowlFrame[c] <= 10)
					{
						if (Main.rand.Next(3600) == 0)
						{
							Main.fishBowlFrameMode[c] = (byte)Main.rand.Next((int)num6);
						}
						Main.fishBowlFrameCounter[c] = Main.fishBowlFrameCounter[c] + 1;
						if (Main.fishBowlFrameCounter[c] >= 10)
						{
							Main.fishBowlFrameCounter[c] = 0;
							if (Main.fishBowlFrame[c] != 10)
							{
								Main.fishBowlFrame[c] = Main.fishBowlFrame[c] + 1;
							}
							else if (Main.rand.Next(12) != 0)
							{
								Main.fishBowlFrame[c] = 1;
							}
							else
							{
								Main.fishBowlFrame[c] = 11;
							}
						}
					}
					else if (Main.fishBowlFrame[c] == 12 || Main.fishBowlFrame[c] == 13)
					{
						Main.fishBowlFrameCounter[c] = Main.fishBowlFrameCounter[c] + 1;
						if (Main.fishBowlFrameCounter[c] >= 10)
						{
							Main.fishBowlFrameCounter[c] = 0;
							Main.fishBowlFrame[c] = Main.fishBowlFrame[c] + 1;
							if (Main.fishBowlFrame[c] > 13)
							{
								if (Main.rand.Next(20) != 0)
								{
									Main.fishBowlFrame[c] = 12;
								}
								else
								{
									Main.fishBowlFrame[c] = 14;
								}
							}
						}
					}
					else if (Main.fishBowlFrame[c] >= 11)
					{
						Main.fishBowlFrameCounter[c] = Main.fishBowlFrameCounter[c] + 1;
						if (Main.fishBowlFrameCounter[c] >= 10)
						{
							Main.fishBowlFrameCounter[c] = 0;
							Main.fishBowlFrame[c] = Main.fishBowlFrame[c] + 1;
							if (Main.fishBowlFrame[c] > 16)
							{
								Main.fishBowlFrame[c] = 4;
							}
						}
					}
				}
				for (int d = 0; d < 9; d++)
				{
					for (int e = 0; e < Main.cageFrames; e++)
					{
						Main.butterflyCageFrameCounter[d, e] = Main.butterflyCageFrameCounter[d, e] + 1;
						if (Main.rand.Next(3600) == 0)
						{
							Main.butterflyCageMode[d, e] = (byte)Main.rand.Next(5);
							if (Main.rand.Next(2) == 0)
							{
								Main.butterflyCageMode[d, e] = (byte)(Main.butterflyCageMode[d, e] + 10);
							}
						}
						int num7 = Main.rand.Next(3, 16);
						if (Main.butterflyCageMode[d, e] == 1 || Main.butterflyCageMode[d, e] == 11)
						{
							num7 = 3;
						}
						if (Main.butterflyCageMode[d, e] == 2 || Main.butterflyCageMode[d, e] == 12)
						{
							num7 = 5;
						}
						if (Main.butterflyCageMode[d, e] == 3 || Main.butterflyCageMode[d, e] == 13)
						{
							num7 = 10;
						}
						if (Main.butterflyCageMode[d, e] == 4 || Main.butterflyCageMode[d, e] == 14)
						{
							num7 = 15;
						}
						if (Main.butterflyCageMode[d, e] >= 10)
						{
							if (Main.butterflyCageFrame[d, e] <= 7)
							{
								if (Main.butterflyCageFrameCounter[d, e] >= num7)
								{
									Main.butterflyCageFrameCounter[d, e] = 0;
									Main.butterflyCageFrame[d, e] = Main.butterflyCageFrame[d, e] - 1;
									if (Main.butterflyCageFrame[d, e] < 0)
									{
										Main.butterflyCageFrame[d, e] = 7;
									}
									if (Main.butterflyCageFrame[d, e] == 1 || Main.butterflyCageFrame[d, e] == 4 || Main.butterflyCageFrame[d, e] == 6)
									{
										if (Main.rand.Next(20) == 0)
										{
											Main.butterflyCageFrame[d, e] = Main.butterflyCageFrame[d, e] + 8;
										}
										else if (Main.rand.Next(6) == 0)
										{
											if (Main.butterflyCageMode[d, e] < 10)
											{
												Main.butterflyCageMode[d, e] = (byte)(Main.butterflyCageMode[d, e] + 10);
											}
											else
											{
												Main.butterflyCageMode[d, e] = (byte)(Main.butterflyCageMode[d, e] - 10);
											}
										}
									}
								}
							}
							else if (Main.butterflyCageFrameCounter[d, e] >= num7)
							{
								Main.butterflyCageFrameCounter[d, e] = 0;
								Main.butterflyCageFrame[d, e] = Main.butterflyCageFrame[d, e] - 1;
								if (Main.butterflyCageFrame[d, e] < 8)
								{
									Main.butterflyCageFrame[d, e] = 14;
								}
								if (Main.butterflyCageFrame[d, e] == 9 || Main.butterflyCageFrame[d, e] == 12 || Main.butterflyCageFrame[d, e] == 14)
								{
									if (Main.rand.Next(20) == 0)
									{
										Main.butterflyCageFrame[d, e] = Main.butterflyCageFrame[d, e] - 8;
									}
									else if (Main.rand.Next(6) == 0)
									{
										if (Main.butterflyCageMode[d, e] < 10)
										{
											Main.butterflyCageMode[d, e] = (byte)(Main.butterflyCageMode[d, e] + 10);
										}
										else
										{
											Main.butterflyCageMode[d, e] = (byte)(Main.butterflyCageMode[d, e] - 10);
										}
									}
								}
							}
						}
						else if (Main.butterflyCageFrame[d, e] <= 7)
						{
							if (Main.butterflyCageFrameCounter[d, e] >= num7)
							{
								Main.butterflyCageFrameCounter[d, e] = 0;
								Main.butterflyCageFrame[d, e] = Main.butterflyCageFrame[d, e] + 1;
								if (Main.butterflyCageFrame[d, e] > 7)
								{
									Main.butterflyCageFrame[d, e] = 0;
								}
								if ((Main.butterflyCageFrame[d, e] == 1 || Main.butterflyCageFrame[d, e] == 4 || Main.butterflyCageFrame[d, e] == 6) && Main.rand.Next(10) == 0)
								{
									Main.butterflyCageFrame[d, e] = Main.butterflyCageFrame[d, e] + 8;
								}
							}
						}
						else if (Main.butterflyCageFrameCounter[d, e] >= num7)
						{
							Main.butterflyCageFrameCounter[d, e] = 0;
							Main.butterflyCageFrame[d, e] = Main.butterflyCageFrame[d, e] + 1;
							if (Main.butterflyCageFrame[d, e] > 15)
							{
								Main.butterflyCageFrame[d, e] = 8;
							}
							if ((Main.butterflyCageFrame[d, e] == 9 || Main.butterflyCageFrame[d, e] == 12 || Main.butterflyCageFrame[d, e] == 14) && Main.rand.Next(10) == 0)
							{
								Main.butterflyCageFrame[d, e] = Main.butterflyCageFrame[d, e] - 8;
							}
						}
					}
				}
				for (int f = 0; f < 3; f++)
				{
					for (int g = 0; g < Main.cageFrames; g++)
					{
						Main.jellyfishCageFrameCounter[f, g] = Main.jellyfishCageFrameCounter[f, g] + 1;
						if (Main.jellyfishCageMode[f, g] == 0 && Main.rand.Next(1800) == 0)
						{
							Main.jellyfishCageMode[f, g] = 1;
						}
						if (Main.jellyfishCageMode[f, g] == 2 && Main.rand.Next(60) == 0)
						{
							Main.jellyfishCageMode[f, g] = 3;
						}
						int num8 = 1;
						if (Main.jellyfishCageMode[f, g] == 0)
						{
							num8 = Main.rand.Next(10, 20);
						}
						if (Main.jellyfishCageMode[f, g] == 1)
						{
							num8 = Main.rand.Next(15, 25);
						}
						if (Main.jellyfishCageMode[f, g] == 2)
						{
							num8 = Main.rand.Next(4, 9);
						}
						if (Main.jellyfishCageMode[f, g] == 3)
						{
							num8 = Main.rand.Next(15, 25);
						}
						if (Main.jellyfishCageMode[f, g] == 0 && Main.jellyfishCageFrame[f, g] <= 3 && Main.jellyfishCageFrameCounter[f, g] >= num8)
						{
							Main.jellyfishCageFrameCounter[f, g] = 0;
							Main.jellyfishCageFrame[f, g] = Main.jellyfishCageFrame[f, g] + 1;
							if (Main.jellyfishCageFrame[f, g] >= 4)
							{
								Main.jellyfishCageFrame[f, g] = 0;
							}
						}
						if (Main.jellyfishCageMode[f, g] == 1 && Main.jellyfishCageFrame[f, g] <= 7 && Main.jellyfishCageFrameCounter[f, g] >= num8)
						{
							Main.jellyfishCageFrameCounter[f, g] = 0;
							Main.jellyfishCageFrame[f, g] = Main.jellyfishCageFrame[f, g] + 1;
							if (Main.jellyfishCageFrame[f, g] >= 7)
							{
								Main.jellyfishCageMode[f, g] = 2;
							}
						}
						if (Main.jellyfishCageMode[f, g] == 2 && Main.jellyfishCageFrame[f, g] <= 9 && Main.jellyfishCageFrameCounter[f, g] >= num8)
						{
							Main.jellyfishCageFrameCounter[f, g] = 0;
							Main.jellyfishCageFrame[f, g] = Main.jellyfishCageFrame[f, g] + 1;
							if (Main.jellyfishCageFrame[f, g] >= 9)
							{
								Main.jellyfishCageFrame[f, g] = 7;
							}
						}
						if (Main.jellyfishCageMode[f, g] == 3 && Main.jellyfishCageFrame[f, g] <= 10 && Main.jellyfishCageFrameCounter[f, g] >= num8)
						{
							Main.jellyfishCageFrameCounter[f, g] = 0;
							Main.jellyfishCageFrame[f, g] = Main.jellyfishCageFrame[f, g] + 1;
							if (Main.jellyfishCageFrame[f, g] >= 10)
							{
								Main.jellyfishCageFrame[f, g] = 3;
								Main.jellyfishCageMode[f, g] = 0;
							}
						}
					}
				}
			}
		}

		public static void CursorColor()
		{
			Main.cursorAlpha = Main.cursorAlpha + (float)Main.cursorColorDirection * 0.015f;
			if (Main.cursorAlpha >= 1f)
			{
				Main.cursorAlpha = 1f;
				Main.cursorColorDirection = -1;
			}
			if ((double)Main.cursorAlpha <= 0.6)
			{
				Main.cursorAlpha = 0.6f;
				Main.cursorColorDirection = 1;
			}
			float single = Main.cursorAlpha * 0.3f + 0.7f;
			byte r = (byte)((float)Main.mouseColor.R * Main.cursorAlpha);
			byte g = (byte)((float)Main.mouseColor.G * Main.cursorAlpha);
			byte b = (byte)((float)Main.mouseColor.B * Main.cursorAlpha);
			byte num = (byte)(255f * single);
			Main.cursorColor = new Microsoft.Xna.Framework.Color((int)r, (int)g, (int)b, (int)num);
			Main.cursorScale = Main.cursorAlpha * 0.3f + 0.7f + 0.1f;
		}

		public static int DamageVar(float dmg)
		{
			float single = dmg * (1f + (float)Main.rand.Next(-15, 16) * 0.01f);
			return (int)Math.Round((double)single);
		}

		public void DedServ()
		{
			string str;
			Main.rand = new Random();
			if (!Main.autoShutdown)
			{
				Console.Title = string.Concat("Terraria Server ", Main.versionNumber2);
			}
			else
			{
				string str1 = string.Concat("terraria", Main.rand.Next(2147483647));
				Console.Title = str1;
				IntPtr intPtr = Main.FindWindow(null, str1);
				if (intPtr != IntPtr.Zero)
				{
					Main.ShowWindow(intPtr, 0);
				}
			}
			Main.dedServ = true;
			Main.showSplash = false;
			this.Initialize();
			Lang.setLang(false);
			for (int i = 0; i < 540; i++)
			{
				NPC nPC = new NPC();
				nPC.SetDefaults(i, -1f);
				Main.npcName[i] = nPC.name;
			}
			while (Main.worldPathName == null || Main.worldPathName == "")
			{
				bool flag = true;
				while (flag)
				{
					Main.LoadWorlds();
					Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber2));
					Console.WriteLine("");
					for (int j = 0; j < Main.WorldList.Count; j++)
					{
						object[] name = new object[] { j + 1, '\t', '\t', Main.WorldList[j].Name };
						Console.WriteLine(string.Concat(name));
					}
					object[] objArray = new object[] { "n", '\t', '\t', "New World" };
					Console.WriteLine(string.Concat(objArray));
					Console.WriteLine(string.Concat("d <number>", '\t', "Delete World"));
					Console.WriteLine("");
					Console.Write("Choose World: ");
					string str2 = Console.ReadLine() ?? "";
					try
					{
						Console.Clear();
					}
					catch (Exception ex)
					{
#if DEBUG
						Console.WriteLine(ex);
						System.Diagnostics.Debugger.Break();

#endif
					}
					if (str2.Length >= 2 && str2.Substring(0, 2).ToLower() == "d ")
					{
						try
						{
							int num = Convert.ToInt32(str2.Substring(2)) - 1;
							if (num < Main.WorldList.Count)
							{
								Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber2));
								Console.WriteLine("");
								Console.WriteLine(string.Concat("Really delete ", Main.WorldList[num].Name, "?"));
								Console.Write("(y/n): ");
								if (Console.ReadLine().ToLower() == "y")
								{
									Main.EraseWorld(num);
								}
							}
						}
						catch (Exception ex)
						{
#if DEBUG
							Console.WriteLine(ex);
							System.Diagnostics.Debugger.Break();

#endif
						}
						try
						{
							Console.Clear();
						}
						catch (Exception ex)
						{
#if DEBUG
							Console.WriteLine(ex);
							System.Diagnostics.Debugger.Break();

#endif
						}
					}
					else if (str2 == "n" || str2 == "N")
					{
						bool flag1 = true;
						while (flag1)
						{
							Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber2));
							Console.WriteLine("");
							Console.WriteLine(string.Concat("1", '\t', "Small"));
							Console.WriteLine(string.Concat("2", '\t', "Medium"));
							Console.WriteLine(string.Concat("3", '\t', "Large"));
							Console.WriteLine("");
							Console.Write("Choose size: ");
							str = Console.ReadLine();
							try
							{
								int num1 = Convert.ToInt32(str);
								if (num1 == 1)
								{
									Main.maxTilesX = 4200;
									Main.maxTilesY = 1200;
									flag1 = false;
								}
								else if (num1 == 2)
								{
									Main.maxTilesX = 6400;
									Main.maxTilesY = 1800;
									flag1 = false;
								}
								else if (num1 == 3)
								{
									Main.maxTilesX = 8400;
									Main.maxTilesY = 2400;
									flag1 = false;
								}
							}
							catch (Exception ex)
							{
#if DEBUG
								Console.WriteLine(ex);
								System.Diagnostics.Debugger.Break();

#endif
							}
							try
							{
								Console.Clear();
							}
							catch (Exception ex)
							{
#if DEBUG
								Console.WriteLine(ex);
								System.Diagnostics.Debugger.Break();

#endif
							}
						}
						flag1 = true;
						while (flag1)
						{
							Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber2));
							Console.WriteLine("");
							Console.WriteLine(string.Concat("1", '\t', "Normal"));
							Console.WriteLine(string.Concat("2", '\t', "Expert"));
							Console.WriteLine("");
							Console.Write("Choose difficulty: ");
							str = Console.ReadLine();
							try
							{
								int num2 = Convert.ToInt32(str);
								if (num2 == 1)
								{
									Main.expertMode = false;
									flag1 = false;
								}
								else if (num2 == 2)
								{
									Main.expertMode = true;
									flag1 = false;
								}
							}
							catch (Exception ex)
							{
#if DEBUG
								Console.WriteLine(ex);
								System.Diagnostics.Debugger.Break();

#endif
							}
							try
							{
								Console.Clear();
							}
							catch (Exception ex)
							{
#if DEBUG
								Console.WriteLine(ex);
								System.Diagnostics.Debugger.Break();

#endif
							}
						}
						flag1 = true;
						while (flag1)
						{
							Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber2));
							Console.WriteLine("");
							Console.Write("Enter world name: ");
							Main.newWorldName = Console.ReadLine();
							if (Main.newWorldName != "" && Main.newWorldName != " " && Main.newWorldName != null)
							{
								flag1 = false;
							}
							try
							{
								Console.Clear();
							}
							catch (Exception ex)
							{
#if DEBUG
								Console.WriteLine(ex);
								System.Diagnostics.Debugger.Break();

#endif
							}
						}
						Main.worldName = Main.newWorldName;
						Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, (SocialAPI.Cloud == null ? false : SocialAPI.Cloud.EnabledByDefault), Main.expertMode);
						Main.menuMode = 10;
						Main.serverGenLock = true;
						GenerationProgress generationProgress = new GenerationProgress();
						WorldGen.CreateNewWorld(generationProgress);
						flag1 = false;
						while (Main.menuMode == 10)
						{
							if (Main.oldStatusText == Main.statusText)
							{
								continue;
							}
							Main.oldStatusText = Main.statusText;
							Console.WriteLine(Main.statusText);
						}
						try
						{
							Console.Clear();
						}
						catch (Exception ex)
						{
#if DEBUG
							Console.WriteLine(ex);
							System.Diagnostics.Debugger.Break();

#endif
						}
						while (Main.serverGenLock)
						{
							Main.statusText = string.Format(string.Concat("{0:0.0%} - ", generationProgress.Message, " - {1:0.0%}"), generationProgress.TotalProgress, generationProgress.Value);
							if (Main.oldStatusText == Main.statusText)
							{
								continue;
							}
							Main.oldStatusText = Main.statusText;
							Console.WriteLine(Main.statusText);
						}
					}
					else
					{
						try
						{
							int num3 = Convert.ToInt32(str2);
							num3--;
							if (num3 >= 0 && num3 < Main.WorldList.Count)
							{
								bool flag2 = true;
								while (flag2)
								{
									Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber2));
									Console.WriteLine("");
									Console.Write("Max players (press enter for 8): ");
									string str3 = Console.ReadLine();
									try
									{
										if (str3 == "")
										{
											str3 = "8";
										}
										int num4 = Convert.ToInt32(str3);
										if (num4 <= 255 && num4 >= 1)
										{
											Main.maxNetPlayers = num4;
											flag2 = false;
										}
										flag2 = false;
									}
									catch (Exception ex)
									{
#if DEBUG
										Console.WriteLine(ex);
										System.Diagnostics.Debugger.Break();

#endif
									}
									try
									{
										Console.Clear();
									}
									catch (Exception ex)
									{
#if DEBUG
										Console.WriteLine(ex);
										System.Diagnostics.Debugger.Break();

#endif
									}
								}
								flag2 = true;
								while (flag2)
								{
									Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber2));
									Console.WriteLine("");
									Console.Write("Server port (press enter for 7777): ");
									string str4 = Console.ReadLine();
									try
									{
										if (str4 == "")
										{
											str4 = "7777";
										}
										int num5 = Convert.ToInt32(str4);
										if (num5 <= 65535)
										{
											Netplay.ListenPort = num5;
											flag2 = false;
										}
									}
									catch (Exception ex)
									{
#if DEBUG
										Console.WriteLine(ex);
										System.Diagnostics.Debugger.Break();

#endif
									}
									try
									{
										Console.Clear();
									}
									catch (Exception ex)
									{
#if DEBUG
										Console.WriteLine(ex);
										System.Diagnostics.Debugger.Break();

#endif
									}
								}
								flag2 = true;
								while (flag2)
								{
									Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber2));
									Console.WriteLine("");
									Console.Write("Automatically forward port? (y/n): ");
									string str5 = Console.ReadLine();
									try
									{
										if (str5 == "" || str5.ToLower() == "y" || str5.ToLower() == "yes")
										{
											Netplay.UseUPNP = true;
											flag2 = false;
										}
										else if (str5.ToLower() == "n" || str5.ToLower() == "no")
										{
											Netplay.UseUPNP = false;
											flag2 = false;
										}
									}
									catch (Exception ex)
									{
#if DEBUG
										Console.WriteLine(ex);
										System.Diagnostics.Debugger.Break();

#endif
									}
									try
									{
										Console.Clear();
									}
									catch (Exception ex)
									{
#if DEBUG
										Console.WriteLine(ex);
										System.Diagnostics.Debugger.Break();

#endif
									}
								}
								Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber2));
								Console.WriteLine("");
								Console.Write("Server password (press enter for none): ");
								Netplay.ServerPassword = Console.ReadLine();
								Main.ActiveWorldFileData = Main.WorldList[num3];
								flag = false;
								try
								{
									Console.Clear();
								}
								catch (Exception ex)
								{
#if DEBUG
									Console.WriteLine(ex);
									System.Diagnostics.Debugger.Break();

#endif
								}
							}
						}
						catch (Exception ex)
						{
#if DEBUG
							Console.WriteLine(ex);
							System.Diagnostics.Debugger.Break();

#endif
						}
					}
				}
			}
			try
			{
				Console.Clear();
			}
			catch (Exception ex)
			{
#if DEBUG
				Console.WriteLine(ex);
				System.Diagnostics.Debugger.Break();

#endif
			}
			WorldGen.serverLoadWorld();
			Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber));
			Console.WriteLine("");
			while (!Netplay.IsServerRunning)
			{
				if (Main.oldStatusText == Main.statusText)
				{
					continue;
				}
				Main.oldStatusText = Main.statusText;
				Console.WriteLine(Main.statusText);
			}
			try
			{
				Console.Clear();
			}
			catch (Exception ex)
			{
#if DEBUG
				Console.WriteLine(ex);
				System.Diagnostics.Debugger.Break();

#endif
			}
			Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber));
			Console.WriteLine("");
			Console.WriteLine(string.Concat("Listening on port ", Netplay.ListenPort));
			Console.WriteLine("Type 'help' for a list of commands.");
			Console.WriteLine("");
			Console.Title = string.Concat("Terraria Server: ", Main.worldName);
			Stopwatch stopwatch = new Stopwatch();
			if (!Main.autoShutdown)
			{
				Main.startDedInput();
			}
			stopwatch.Start();
			double num6 = 16.6666666666667;
			double num7 = 0;
			int num8 = 0;
			(new Stopwatch()).Start();
			while (!Netplay.disconnect)
			{
				double elapsedMilliseconds = (double)stopwatch.ElapsedMilliseconds;
				if (elapsedMilliseconds + num7 >= num6)
				{
					num8++;
					num7 = num7 + (elapsedMilliseconds - num6);
					stopwatch.Reset();
					stopwatch.Start();
					if (Main.oldStatusText != Main.statusText)
					{
						Main.oldStatusText = Main.statusText;
						Console.WriteLine(Main.statusText);
					}
					if (Netplay.anyClients)
					{
						this.Update(new GameTime());
					}
					double elapsedMilliseconds1 = (double)stopwatch.ElapsedMilliseconds + num7;
					if (elapsedMilliseconds1 < num6)
					{
						int num9 = (int)(num6 - elapsedMilliseconds1) - 1;
						if (num9 > 1)
						{
							Thread.Sleep(num9 - 1);
							if (!Netplay.anyClients)
							{
								num7 = 0;
								Thread.Sleep(10);
							}
						}
					}
				}
				Thread.Sleep(0);
			}
		}

		protected override void Draw(GameTime gameTime)
		{
			int num;
			int num1;
			double num2;
			double num3;
			Microsoft.Xna.Framework.Rectangle rectangle;
			Vector2 vector2 = new Vector2();
			object[] statusText;
			if (Main._drawCycleCounter == (long)0)
			{
				Main._tileFrameSeed = Utils.RandomNextSeed(Main._tileFrameSeed);
			}
			Main._drawCycleCounter = (Main._drawCycleCounter + (long)1) % (long)5;
			Main.MenuUI.IsVisible = (!Main.gameMenu ? false : Main.menuMode == 888);
			Main.InGameUI.IsVisible = (Main.gameMenu ? false : Main.InGameUI.CurrentState != null);
			this.EnsureRenderTargetContent();
			CaptureManager.Instance.DrawTick();
			TimeLogger.NewDrawFrame();
			if (!Main.gameMenu)
			{
				this.lookForColorTiles();
			}
			TimeLogger.DetailedDrawTime(0);
			if (Main.loadMap)
			{
				Main.refreshMap = false;
				this.DrawToMap();
				TimeLogger.DetailedDrawTime(1);
			}
			if (Lighting.lightMode < 2)
			{
				Main.drawToScreen = false;
			}
			else
			{
				Main.drawToScreen = true;
			}
			if (Main.drawToScreen && Main.targetSet)
			{
				this.ReleaseTargets();
			}
			if (!Main.drawToScreen && !Main.targetSet)
			{
				this.InitTargets();
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			Main.fpsCount = Main.fpsCount + 1;
			if (!base.IsActive)
			{
				Main.maxQ = true;
			}
			Main.drawTime = Main.drawTime + 1;
			Main.screenLastPosition = Main.screenPosition;
			if (Main.stackSplit != 0)
			{
				Main.stackCounter = Main.stackCounter + 1;
				int num4 = 30;
				if (num4 == 7)
				{
					num4 = 30;
				}
				else if (Main.stackDelay == 6)
				{
					num4 = 25;
				}
				else if (Main.stackDelay == 5)
				{
					num4 = 20;
				}
				else if (Main.stackDelay != 4)
				{
					num4 = (Main.stackDelay != 3 ? 5 : 10);
				}
				else
				{
					num4 = 15;
				}
				if (Main.stackCounter >= num4)
				{
					Main.stackDelay = Main.stackDelay - 1;
					if (Main.stackDelay < 2)
					{
						Main.stackDelay = 2;
						Main.superFastStack = Main.superFastStack + 1;
					}
					Main.stackCounter = 0;
				}
			}
			else
			{
				Main.stackCounter = 0;
				Main.stackDelay = 7;
				Main.superFastStack = 0;
			}
			if (Main.myPlayer >= 0)
			{
				Main.player[Main.myPlayer].lastMouseInterface = Main.player[Main.myPlayer].mouseInterface;
				Main.player[Main.myPlayer].mouseInterface = false;
			}
			if (Main.mapTime > 0)
			{
				Main.mapTime = Main.mapTime - 1;
			}
			if (Main.gameMenu)
			{
				Main.mapTime = Main.mapTimeMax;
			}
			Main.toolTip = new Item();
			if (!Main.gameMenu && Main.netMode != 2)
			{
				int num5 = 21;
				if (Main.cameraX != 0f && !Main.player[Main.myPlayer].pulley)
				{
					Main.cameraX = 0f;
				}
				if (Main.cameraX > 0f)
				{
					Main.cameraX = Main.cameraX - 1f;
					if (Main.cameraX < 0f)
					{
						Main.cameraX = 0f;
					}
				}
				if (Main.cameraX < 0f)
				{
					Main.cameraX = Main.cameraX + 1f;
					if (Main.cameraX > 0f)
					{
						Main.cameraX = 0f;
					}
				}
				Main.screenPosition.X = Main.player[Main.myPlayer].position.X + (float)Main.player[Main.myPlayer].width * 0.5f - (float)Main.screenWidth * 0.5f + Main.cameraX;
				Main.screenPosition.Y = Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height - (float)num5 - (float)Main.screenHeight * 0.5f + Main.player[Main.myPlayer].gfxOffY;
				float single = 0f;
				float single1 = 0f;
				if (Main.player[Main.myPlayer].noThrow <= 0 && !Main.player[Main.myPlayer].lastMouseInterface || Main.zoomX != 0f || Main.zoomY != 0f)
				{
					if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.player[Main.myPlayer].scope && Main.mouseRight)
					{
						int num6 = Main.mouseX;
						int num7 = Main.mouseY;
						if (num6 > Main.screenWidth)
						{
							num6 = Main.screenWidth;
						}
						if (num6 < 0)
						{
							num6 = 0;
						}
						if (num7 > Main.screenHeight)
						{
							num7 = Main.screenHeight;
						}
						if (num7 < 0)
						{
							num7 = 0;
						}
						single = (float)(num6 - Main.screenWidth / 2) / 1.25f;
						single1 = single1 + (float)(num7 - Main.screenHeight / 2) / 1.25f;
					}
					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.mouseRight)
					{
						int num8 = Main.mouseX;
						int num9 = Main.mouseY;
						if (num8 > Main.screenWidth)
						{
							num8 = Main.screenWidth;
						}
						if (num8 < 0)
						{
							num8 = 0;
						}
						if (num9 > Main.screenHeight)
						{
							num9 = Main.screenHeight;
						}
						if (num9 < 0)
						{
							num9 = 0;
						}
						single = (float)(num8 - Main.screenWidth / 2) / 1.5f;
						single1 = single1 + (float)(num9 - Main.screenHeight / 2) / 1.5f;
					}
					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1299 && Main.player[Main.myPlayer].selectedItem != 58)
					{
						int num10 = Main.mouseX;
						int num11 = Main.mouseY;
						if (num10 > Main.screenWidth)
						{
							num10 = Main.screenWidth;
						}
						if (num10 < 0)
						{
							num10 = 0;
						}
						if (num11 > Main.screenHeight)
						{
							num11 = Main.screenHeight;
						}
						if (num11 < 0)
						{
							num11 = 0;
						}
						single = (float)(num10 - Main.screenWidth / 2) / 1.5f;
						single1 = single1 + (float)(num11 - Main.screenHeight / 2) / 1.5f;
					}
					else if (Main.player[Main.myPlayer].scope && Main.mouseRight)
					{
						int num12 = Main.mouseX;
						int num13 = Main.mouseY;
						if (num12 > Main.screenWidth)
						{
							num12 = Main.screenWidth;
						}
						if (num12 < 0)
						{
							num12 = 0;
						}
						if (num13 > Main.screenHeight)
						{
							num13 = Main.screenHeight;
						}
						if (num13 < 0)
						{
							num13 = 0;
						}
						single = (float)(num12 - Main.screenWidth / 2) / 2f;
						single1 = single1 + (float)(num13 - Main.screenHeight / 2) / 2f;
					}
				}
				float single2 = 24f;
				float single3 = single - Main.zoomX;
				float single4 = single1 - Main.zoomY;
				float single5 = (float)Math.Sqrt((double)(single3 * single3 + single4 * single4));
				single5 = (float)Math.Sqrt((double)(single3 * single3 + single4 * single4));
				if (single5 >= single2)
				{
					single5 = single2 / single5;
					single3 = single3 * single5;
					single4 = single4 * single5;
					Main.zoomX = Main.zoomX + single3;
					Main.zoomY = Main.zoomY + single4;
				}
				else
				{
					Main.zoomX = single;
					Main.zoomY = single1;
				}
				Main.screenPosition.X = Main.screenPosition.X + Main.zoomX;
				Main.screenPosition.Y = Main.screenPosition.Y + Main.zoomY * Main.player[Main.myPlayer].gravDir;
				Main.screenPosition.X = (float)((int)Main.screenPosition.X);
				Main.screenPosition.Y = (float)((int)Main.screenPosition.Y);
			}
			if (!Main.gameMenu && Main.netMode != 2)
			{
				if (Main.screenPosition.X < Main.leftWorld + 640f + 16f)
				{
					Main.screenPosition.X = Main.leftWorld + 640f + 16f;
				}
				else if (Main.screenPosition.X + (float)Main.screenWidth > Main.rightWorld - 640f - 32f)
				{
					Main.screenPosition.X = Main.rightWorld - (float)Main.screenWidth - 640f - 32f;
				}
				if (Main.screenPosition.Y < Main.topWorld + 640f + 16f)
				{
					Main.screenPosition.Y = Main.topWorld + 640f + 16f;
				}
				else if (Main.screenPosition.Y + (float)Main.screenHeight > Main.bottomWorld - 640f - 32f)
				{
					Main.screenPosition.Y = Main.bottomWorld - (float)Main.screenHeight - 640f - 32f;
				}
			}
			Main.CheckMonoliths();
			if (Main.showSplash)
			{
				this.DrawSplash(gameTime);
				TimeLogger.SplashDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				return;
			}
			Main.sunCircle = Main.sunCircle + 0.01f;
			if ((double)Main.sunCircle > 6.285)
			{
				Main.sunCircle = Main.sunCircle - 6.285f;
			}
			TimeLogger.DetailedDrawReset();
			if (!Main.gameMenu)
			{
				this.waterfallManager.FindWaterfalls(false);
				TimeLogger.DetailedDrawTime(2);
				if (!Main.renderNow)
				{
					if (Main.renderCount == 3)
					{
						this.RenderTiles();
						Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 2)
					{
						this.RenderBackground();
						Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 2)
					{
						this.RenderWalls();
						Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 3)
					{
						this.RenderTiles2();
						Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Main.renderCount == 1)
					{
						this.RenderWater();
						Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
				}
				else
				{
					Main.screenLastPosition = Main.screenPosition;
					Main.renderNow = false;
					Main.renderCount = 99;
					this.Draw(gameTime);
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
					Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
					this.RenderTiles();
					Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderBackground();
					Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderWalls();
					Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderTiles2();
					Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					this.RenderWater();
					Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
					Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					Main.renderCount = 99;
				}
				if (Main.render && !Main.gameMenu)
				{
					if (Math.Abs(Main.sceneTilePos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneTilePos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderTiles();
						Main.sceneTilePos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTilePos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneTile2Pos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneTile2Pos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderTiles2();
						Main.sceneTile2Pos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneTile2Pos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneBackgroundPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneBackgroundPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderBackground();
						Main.sceneBackgroundPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneBackgroundPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneWallPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneWallPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderWalls();
						Main.sceneWallPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWallPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
					if (Math.Abs(Main.sceneWaterPos.X - (Main.screenPosition.X - (float)Main.offScreenRange)) > (float)Main.offScreenRange || Math.Abs(Main.sceneWaterPos.Y - (Main.screenPosition.Y - (float)Main.offScreenRange)) > (float)Main.offScreenRange)
					{
						this.RenderWater();
						Main.sceneWaterPos.X = Main.screenPosition.X - (float)Main.offScreenRange;
						Main.sceneWaterPos.Y = Main.screenPosition.Y - (float)Main.offScreenRange;
					}
				}
			}
			if (!Main.loadMap)
			{
				if (!Main.gameMenu)
				{
					TimeLogger.DetailedDrawReset();
					Stopwatch stopwatch1 = new Stopwatch();
					stopwatch1.Start();
					int num14 = 0;
					while (stopwatch1.ElapsedMilliseconds < (long)5 && Main.sectionManager.GetNextMapDraw(Main.player[Main.myPlayer].position, out num, out num1))
					{
						this.DrawToMap_Section(num, num1);
						num14++;
					}
					TimeLogger.DetailedDrawTime(3);
				}
				if (Main.updateMap)
				{
					if (base.IsActive || Main.netMode == 1)
					{
						if (Main.refreshMap)
						{
							Main.refreshMap = false;
							Main.sectionManager.ClearMapDraw();
						}
						this.DrawToMap();
						Main.updateMap = false;
					}
					else if (MapHelper.numUpdateTile > 0)
					{
						this.DrawToMap();
					}
					TimeLogger.DetailedDrawTime(4);
				}
			}
			this.bgParallax = 0.1;
			this.bgStart = (int)(-Math.IEEERemainder((double)Main.screenPosition.X * this.bgParallax, (double)Main.backgroundWidth[Main.background]) - (double)(Main.backgroundWidth[Main.background] / 2));
			this.bgLoops = Main.screenWidth / Main.backgroundWidth[Main.background] + 2;
			this.bgStartY = 0;
			this.bgLoopsY = 0;
			this.bgTop = (int)((double)(-Main.screenPosition.Y) / (Main.worldSurface * 16 - 600) * 200);
			Main.bgColor = Microsoft.Xna.Framework.Color.White;
			if (Main.gameMenu || Main.netMode == 2)
			{
				this.bgTop = -200;
			}
			int width = (int)(Main.time / 54000 * (double)(Main.screenWidth + Main.sunTexture.Width * 2)) - Main.sunTexture.Width;
			int num15 = 0;
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			float single6 = 1f;
			float single7 = (float)(Main.time / 54000) * 2f - 7.3f;
			int width1 = (int)(Main.time / 32400 * (double)(Main.screenWidth + Main.moonTexture[Main.moonType].Width * 2)) - Main.moonTexture[Main.moonType].Width;
			int num16 = 0;
			Microsoft.Xna.Framework.Color r = Microsoft.Xna.Framework.Color.White;
			float single8 = 1f;
			float single9 = (float)(Main.time / 32400) * 2f - 7.3f;
			float single10 = 0f;
			if (!Main.dayTime)
			{
				if (Main.time >= 16200)
				{
					num3 = Math.Pow((Main.time / 32400 - 0.5) * 2, 2);
					num16 = (int)((double)this.bgTop + num3 * 250 + 180);
				}
				else
				{
					num3 = Math.Pow(1 - Main.time / 32400 * 2, 2);
					num16 = (int)((double)this.bgTop + num3 * 250 + 180);
				}
				single8 = (float)(1.2 - num3 * 0.4);
			}
			else
			{
				if (Main.time >= 27000)
				{
					num2 = Math.Pow((Main.time / 54000 - 0.5) * 2, 2);
					num15 = (int)((double)this.bgTop + num2 * 250 + 180);
				}
				else
				{
					num2 = Math.Pow(1 - Main.time / 54000 * 2, 2);
					num15 = (int)((double)this.bgTop + num2 * 250 + 180);
				}
				single6 = (float)(1.2 - num2 * 0.4);
			}
			if (Main.dayTime)
			{
				if (Main.time < 13500)
				{
					single10 = (float)(Main.time / 13500);
					white.R = (byte)(single10 * 200f + 55f);
					white.G = (byte)(single10 * 180f + 75f);
					white.B = (byte)(single10 * 250f + 5f);
					Main.bgColor.R = (byte)(single10 * 230f + 25f);
					Main.bgColor.G = (byte)(single10 * 220f + 35f);
					Main.bgColor.B = (byte)(single10 * 220f + 35f);
				}
				if (Main.time > 45900)
				{
					single10 = (float)(1 - (Main.time / 54000 - 0.85) * 6.66666666666667);
					white.R = (byte)(single10 * 120f + 55f);
					white.G = (byte)(single10 * 100f + 25f);
					white.B = (byte)(single10 * 120f + 55f);
					Main.bgColor.R = (byte)(single10 * 200f + 35f);
					Main.bgColor.G = (byte)(single10 * 85f + 35f);
					Main.bgColor.B = (byte)(single10 * 135f + 35f);
				}
				else if (Main.time > 37800)
				{
					single10 = (float)(1 - (Main.time / 54000 - 0.7) * 6.66666666666667);
					white.R = (byte)(single10 * 80f + 175f);
					white.G = (byte)(single10 * 130f + 125f);
					white.B = (byte)(single10 * 100f + 155f);
					Main.bgColor.R = (byte)(single10 * 20f + 235f);
					Main.bgColor.G = (byte)(single10 * 135f + 120f);
					Main.bgColor.B = (byte)(single10 * 85f + 170f);
				}
			}
			if (!Main.dayTime)
			{
				if (Main.bloodMoon)
				{
					if (Main.time < 16200)
					{
						single10 = (float)(1 - Main.time / 16200);
						r.R = (byte)(single10 * 10f + 205f);
						r.G = (byte)(single10 * 170f + 55f);
						r.B = (byte)(single10 * 200f + 55f);
						Main.bgColor.R = (byte)(40f - single10 * 40f + 35f);
						Main.bgColor.G = (byte)(single10 * 20f + 15f);
						Main.bgColor.B = (byte)(single10 * 20f + 15f);
					}
					else if (Main.time >= 16200)
					{
						single10 = (float)((Main.time / 32400 - 0.5) * 2);
						r.R = (byte)(single10 * 50f + 205f);
						r.G = (byte)(single10 * 100f + 155f);
						r.B = (byte)(single10 * 100f + 155f);
						r.R = (byte)(single10 * 10f + 205f);
						r.G = (byte)(single10 * 170f + 55f);
						r.B = (byte)(single10 * 200f + 55f);
						Main.bgColor.R = (byte)(40f - single10 * 40f + 35f);
						Main.bgColor.G = (byte)(single10 * 20f + 15f);
						Main.bgColor.B = (byte)(single10 * 20f + 15f);
					}
				}
				else if (Main.time < 16200)
				{
					single10 = (float)(1 - Main.time / 16200);
					r.R = (byte)(single10 * 10f + 205f);
					r.G = (byte)(single10 * 70f + 155f);
					r.B = (byte)(single10 * 100f + 155f);
					Main.bgColor.R = (byte)(single10 * 30f + 5f);
					Main.bgColor.G = (byte)(single10 * 30f + 5f);
					Main.bgColor.B = (byte)(single10 * 30f + 5f);
				}
				else if (Main.time >= 16200)
				{
					single10 = (float)((Main.time / 32400 - 0.5) * 2);
					r.R = (byte)(single10 * 50f + 205f);
					r.G = (byte)(single10 * 100f + 155f);
					r.B = (byte)(single10 * 100f + 155f);
					Main.bgColor.R = (byte)(single10 * 20f + 5f);
					Main.bgColor.G = (byte)(single10 * 30f + 5f);
					Main.bgColor.B = (byte)(single10 * 30f + 5f);
				}
			}
			float single11 = 0.0005f * (float)Main.dayRate;
			if (Main.gameMenu)
			{
				single11 = single11 * 20f;
			}
			if (!Main.raining)
			{
				Main.cloudAlpha = Main.cloudAlpha - single11;
				if (Main.cloudAlpha < 0f)
				{
					Main.cloudAlpha = 0f;
				}
			}
			else if (Main.cloudAlpha > Main.maxRaining)
			{
				Main.cloudAlpha = Main.cloudAlpha - single11;
				if (Main.cloudAlpha < Main.maxRaining)
				{
					Main.cloudAlpha = Main.maxRaining;
				}
			}
			else if (Main.cloudAlpha < Main.maxRaining)
			{
				Main.cloudAlpha = Main.cloudAlpha + single11;
				if (Main.cloudAlpha > Main.maxRaining)
				{
					Main.cloudAlpha = Main.maxRaining;
				}
			}
			if (Main.cloudAlpha > 0f)
			{
				float single12 = 1f - Main.cloudAlpha * 0.9f;
				Main.bgColor.R = (byte)((float)Main.bgColor.R * single12);
				Main.bgColor.G = (byte)((float)Main.bgColor.G * single12);
				Main.bgColor.B = (byte)((float)Main.bgColor.B * single12);
			}
			if (Main.gameMenu || Main.netMode == 2)
			{
				this.bgTop = 0;
				if (!Main.dayTime)
				{
					Main.bgColor.R = 35;
					Main.bgColor.G = 35;
					Main.bgColor.B = 35;
				}
			}
			if (Main.gameMenu)
			{
				Main.bgDelay = 1000;
				Main.evilTiles = (int)(Main.bgAlpha[1] * 500f);
			}
			if (Main.evilTiles > 0)
			{
				float single13 = (float)Main.evilTiles / 500f;
				if (single13 > 1f)
				{
					single13 = 1f;
				}
				int r1 = Main.bgColor.R;
				int g = Main.bgColor.G;
				int b = Main.bgColor.B;
				r1 = r1 - (int)(100f * single13 * ((float)Main.bgColor.R / 255f));
				g = g - (int)(140f * single13 * ((float)Main.bgColor.G / 255f));
				b = b - (int)(80f * single13 * ((float)Main.bgColor.B / 255f));
				if (r1 < 15)
				{
					r1 = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				Main.bgColor.R = (byte)r1;
				Main.bgColor.G = (byte)g;
				Main.bgColor.B = (byte)b;
				r1 = white.R;
				g = white.G;
				b = white.B;
				r1 = r1 - (int)(100f * single13 * ((float)white.R / 255f));
				g = g - (int)(100f * single13 * ((float)white.G / 255f));
				b = b - (int)(0f * single13 * ((float)white.B / 255f));
				if (r1 < 15)
				{
					r1 = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				white.R = (byte)r1;
				white.G = (byte)g;
				white.B = (byte)b;
				r1 = r.R;
				g = r.G;
				b = r.B;
				r1 = r1 - (int)(140f * single13 * ((float)r.R / 255f));
				g = g - (int)(190f * single13 * ((float)r.G / 255f));
				b = b - (int)(170f * single13 * ((float)r.B / 255f));
				if (r1 < 15)
				{
					r1 = 15;
				}
				if (g < 15)
				{
					g = 15;
				}
				if (b < 15)
				{
					b = 15;
				}
				r.R = (byte)r1;
				r.G = (byte)g;
				r.B = (byte)b;
			}
			if (Main.bloodTiles > 0)
			{
				float single14 = (float)Main.bloodTiles / 400f;
				if (single14 > 1f)
				{
					single14 = 1f;
				}
				int g1 = Main.bgColor.R;
				int g2 = Main.bgColor.G;
				int b1 = Main.bgColor.B;
				g1 = g1 - (int)(70f * single14 * ((float)Main.bgColor.G / 255f));
				g2 = g2 - (int)(110f * single14 * ((float)Main.bgColor.G / 255f));
				b1 = b1 - (int)(150f * single14 * ((float)Main.bgColor.B / 255f));
				if (g1 < 15)
				{
					g1 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b1 < 15)
				{
					b1 = 15;
				}
				Main.bgColor.R = (byte)g1;
				Main.bgColor.G = (byte)g2;
				Main.bgColor.B = (byte)b1;
				g1 = white.R;
				g2 = white.G;
				b1 = white.B;
				g2 = g2 - (int)(90f * single14 * ((float)white.G / 255f));
				b1 = b1 - (int)(110f * single14 * ((float)white.B / 255f));
				if (g1 < 15)
				{
					g1 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b1 < 15)
				{
					b1 = 15;
				}
				white.R = (byte)g1;
				white.G = (byte)g2;
				white.B = (byte)b1;
				g1 = r.R;
				g2 = r.G;
				b1 = r.B;
				g1 = g1 - (int)(100f * single14 * ((float)r.R / 255f));
				g2 = g2 - (int)(120f * single14 * ((float)r.G / 255f));
				b1 = b1 - (int)(180f * single14 * ((float)r.B / 255f));
				if (g1 < 15)
				{
					g1 = 15;
				}
				if (g2 < 15)
				{
					g2 = 15;
				}
				if (b1 < 15)
				{
					b1 = 15;
				}
				r.R = (byte)g1;
				r.G = (byte)g2;
				r.B = (byte)b1;
			}
			if (Main.jungleTiles > 0)
			{
				float single15 = (float)Main.jungleTiles / 200f;
				if (single15 > 1f)
				{
					single15 = 1f;
				}
				int r2 = Main.bgColor.R;
				int g3 = Main.bgColor.G;
				int b2 = Main.bgColor.B;
				r2 = r2 - (int)(40f * single15 * ((float)Main.bgColor.R / 255f));
				b2 = b2 - (int)(70f * single15 * ((float)Main.bgColor.B / 255f));
				if (g3 > 255)
				{
					g3 = 255;
				}
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (r2 > 255)
				{
					r2 = 255;
				}
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				Main.bgColor.R = (byte)r2;
				Main.bgColor.G = (byte)g3;
				Main.bgColor.B = (byte)b2;
				r2 = white.R;
				g3 = white.G;
				b2 = white.B;
				r2 = r2 - (int)(30f * single15 * ((float)white.R / 255f));
				b2 = b2 - (int)(10f * single15 * ((float)white.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				white.R = (byte)r2;
				white.G = (byte)g3;
				white.B = (byte)b2;
				r2 = r.R;
				g3 = r.G;
				b2 = r.B;
				g3 = g3 - (int)(140f * single15 * ((float)r.R / 255f));
				r2 = r2 - (int)(170f * single15 * ((float)r.G / 255f));
				b2 = b2 - (int)(190f * single15 * ((float)r.B / 255f));
				if (r2 < 15)
				{
					r2 = 15;
				}
				if (g3 < 15)
				{
					g3 = 15;
				}
				if (b2 < 15)
				{
					b2 = 15;
				}
				r.R = (byte)r2;
				r.G = (byte)g3;
				r.B = (byte)b2;
			}
			if (Main.shroomTiles <= 0)
			{
				Main.shroomLight = Main.shroomLight - 0.02f;
			}
			else
			{
				float single16 = (float)Main.shroomTiles / 160f;
				if (single16 > Main.shroomLight)
				{
					Main.shroomLight = Main.shroomLight + 0.01f;
				}
				if (single16 < Main.shroomLight)
				{
					Main.shroomLight = Main.shroomLight - 0.01f;
				}
			}
			if (Main.shroomLight < 0f)
			{
				Main.shroomLight = 0f;
			}
			if (Main.shroomLight > 1f)
			{
				Main.shroomLight = 1f;
			}
			if (Main.shroomLight > 0f)
			{
				float single17 = Main.shroomLight;
				int r3 = Main.bgColor.R;
				int g4 = Main.bgColor.G;
				int b3 = Main.bgColor.B;
				g4 = g4 - (int)(250f * single17 * ((float)Main.bgColor.G / 255f));
				r3 = r3 - (int)(250f * single17 * ((float)Main.bgColor.R / 255f));
				b3 = b3 - (int)(250f * single17 * ((float)Main.bgColor.B / 255f));
				if (g4 < 15)
				{
					g4 = 15;
				}
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				Main.bgColor.R = (byte)r3;
				Main.bgColor.G = (byte)g4;
				Main.bgColor.B = (byte)b3;
				r3 = white.R;
				g4 = white.G;
				b3 = white.B;
				g4 = g4 - (int)(10f * single17 * ((float)white.G / 255f));
				r3 = r3 - (int)(30f * single17 * ((float)white.R / 255f));
				b3 = b3 - (int)(10f * single17 * ((float)white.B / 255f));
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (g4 < 15)
				{
					g4 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				white.R = (byte)r3;
				white.G = (byte)g4;
				white.B = (byte)b3;
				r3 = r.R;
				g4 = r.G;
				b3 = r.B;
				g4 = g4 - (int)(140f * single17 * ((float)r.R / 255f));
				r3 = r3 - (int)(170f * single17 * ((float)r.G / 255f));
				b3 = b3 - (int)(190f * single17 * ((float)r.B / 255f));
				if (r3 < 15)
				{
					r3 = 15;
				}
				if (g4 < 15)
				{
					g4 = 15;
				}
				if (b3 < 15)
				{
					b3 = 15;
				}
				r.R = (byte)r3;
				r.G = (byte)g4;
				r.B = (byte)b3;
			}
			if (Lighting.lightMode >= 2)
			{
				if (Main.bgColor.R < 15)
				{
					Main.bgColor.R = 15;
				}
				if (Main.bgColor.G < 15)
				{
					Main.bgColor.G = 15;
				}
				if (Main.bgColor.B < 15)
				{
					Main.bgColor.B = 15;
				}
			}
			else
			{
				if (Main.bgColor.R < 10)
				{
					Main.bgColor.R = 10;
				}
				if (Main.bgColor.G < 10)
				{
					Main.bgColor.G = 10;
				}
				if (Main.bgColor.B < 10)
				{
					Main.bgColor.B = 10;
				}
			}
			if (Main.bloodMoon)
			{
				if (Main.bgColor.R < 25)
				{
					Main.bgColor.R = 25;
				}
				if (Main.bgColor.G < 25)
				{
					Main.bgColor.G = 25;
				}
				if (Main.bgColor.B < 25)
				{
					Main.bgColor.B = 25;
				}
			}
			if (Main.eclipse && Main.dayTime)
			{
				Main.eclipseLight = (float)(Main.time / (double)1242f);
				if (Main.eclipseLight > 1f)
				{
					Main.eclipseLight = 1f;
				}
			}
			else if (Main.eclipseLight > 0f)
			{
				Main.eclipseLight = Main.eclipseLight - 0.01f;
				if (Main.eclipseLight < 0f)
				{
					Main.eclipseLight = 0f;
				}
			}
			if (Main.eclipseLight > 0f)
			{
				float single18 = 1f - 0.925f * Main.eclipseLight;
				float single19 = 1f - 0.96f * Main.eclipseLight;
				float single20 = 1f - 1f * Main.eclipseLight;
				int r4 = (int)((float)Main.bgColor.R * single18);
				int g5 = (int)((float)Main.bgColor.G * single19);
				int b4 = (int)((float)Main.bgColor.B * single20);
				Main.bgColor.R = (byte)r4;
				Main.bgColor.G = (byte)g5;
				Main.bgColor.B = (byte)b4;
				white.R = 255;
				white.G = 127;
				white.B = 67;
				if (Main.bgColor.R < 20)
				{
					Main.bgColor.R = 20;
				}
				if (Main.bgColor.G < 10)
				{
					Main.bgColor.G = 10;
				}
				if (Lighting.lightMode >= 2)
				{
					if (Main.bgColor.R < 20)
					{
						Main.bgColor.R = 20;
					}
					if (Main.bgColor.G < 14)
					{
						Main.bgColor.G = 14;
					}
					if (Main.bgColor.B < 6)
					{
						Main.bgColor.B = 6;
					}
				}
			}
			Main.tileColor.A = 255;
			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10);
			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
			Main.tileColor.B = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10);
			Main.tileColor = SkyManager.Instance.ProcessTileColor(Main.tileColor);
			float single21 = (float)(Main.maxTilesX / 4200);
			single21 = single21 * single21;
			Main.atmo = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * single21)) / (Main.worldSurface / 5));
			if (Main.atmo < 0f)
			{
				Main.atmo = 0f;
			}
			if (Main.atmo > 1f)
			{
				Main.atmo = 1f;
			}
			if (Main.gameMenu)
			{
				Main.atmo = 1f;
			}
			Main.bgColor.R = (byte)((float)Main.bgColor.R * Main.atmo);
			Main.bgColor.G = (byte)((float)Main.bgColor.G * Main.atmo);
			Main.bgColor.B = (byte)((float)Main.bgColor.B * Main.atmo);
			if ((double)Main.atmo <= 0.05)
			{
				Main.bgColor.R = 0;
				Main.bgColor.G = 0;
				Main.bgColor.B = 0;
				Main.bgColor.A = 0;
			}
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
			base.Draw(gameTime);
			if (Main.gameMenu || Main.player[Main.myPlayer].gravDir == 1f)
			{
				this.Transform = (Matrix.CreateScale(1f, 1f, 1f) * Matrix.CreateRotationZ(0f)) * Matrix.CreateTranslation(new Vector3(0f, 0f, 0f));
				this.Rasterizer = RasterizerState.CullCounterClockwise;
			}
			else
			{
				this.Transform = (Matrix.CreateScale(1f, -1f, 1f) * Matrix.CreateRotationZ(0f)) * Matrix.CreateTranslation(new Vector3(0f, (float)Main.screenHeight, 0f));
				this.Rasterizer = RasterizerState.CullClockwise;
			}
			bool flag = (Main.drawToScreen || Main.netMode == 2 || Main.gameMenu || Main.mapFullscreen ? false : Filters.Scene.HasActiveFilter());
			if (flag)
			{
				base.GraphicsDevice.SetRenderTarget(this.screenTarget);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
			}
			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
			TimeLogger.DetailedDrawReset();
			if (!Main.mapFullscreen)
			{
				this.unityMouseOver = false;
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16 + 16)
				{
					for (int i = 0; i < this.bgLoops; i++)
					{
						Main.spriteBatch.Draw(Main.backgroundTexture[Main.background], new Microsoft.Xna.Framework.Rectangle(this.bgStart + Main.backgroundWidth[Main.background] * i, this.bgTop, Main.backgroundWidth[Main.background], Main.backgroundHeight[Main.background]), Main.bgColor);
					}
					TimeLogger.DetailedDrawTime(6);
				}
				if ((double)Main.screenPosition.Y < Main.worldSurface * 16 + 16 && 255f * (1f - Main.cloudAlpha) - (float)Main.bgColor.R - 25f > 0f && Main.netMode != 2)
				{
					for (int j = 0; j < Main.numStars; j++)
					{
						Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color();
						float single22 = (float)Main.evilTiles / 500f;
						if (single22 > 1f)
						{
							single22 = 1f;
						}
						single22 = 1f - single22 * 0.5f;
						if (Main.evilTiles <= 0)
						{
							single22 = 1f;
						}
						int r5 = (int)((float)(255 - Main.bgColor.R - 100) * Main.star[j].twinkle * single22);
						int g6 = (int)((float)(255 - Main.bgColor.G - 100) * Main.star[j].twinkle * single22);
						int b5 = (int)((float)(255 - Main.bgColor.B - 100) * Main.star[j].twinkle * single22);
						if (r5 < 0)
						{
							r5 = 0;
						}
						if (g6 < 0)
						{
							g6 = 0;
						}
						if (b5 < 0)
						{
							b5 = 0;
						}
						color.R = (byte)r5;
						color.G = (byte)((float)g6 * single22);
						color.B = (byte)((float)b5 * single22);
						float x = Main.star[j].position.X * ((float)Main.screenWidth / 800f);
						float y = Main.star[j].position.Y * ((float)Main.screenHeight / 600f);
						Main.spriteBatch.Draw(Main.starTexture[Main.star[j].type], new Vector2(x + (float)Main.starTexture[Main.star[j].type].Width * 0.5f, y + (float)Main.starTexture[Main.star[j].type].Height * 0.5f + (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.starTexture[Main.star[j].type].Width, Main.starTexture[Main.star[j].type].Height)), color, Main.star[j].rotation, new Vector2((float)Main.starTexture[Main.star[j].type].Width * 0.5f, (float)Main.starTexture[Main.star[j].type].Height * 0.5f), Main.star[j].scale * Main.star[j].twinkle, SpriteEffects.None, 0f);
					}
				}
				if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 2)
				{
					if (Main.dayTime)
					{
						single6 = single6 * 1.1f;
						if (Main.eclipse)
						{
							float single23 = 1f - Main.shroomLight;
							single23 = single23 - Main.cloudAlpha * 1.5f;
							if (single23 < 0f)
							{
								single23 = 0f;
							}
							Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color((int)(255f * single23), (int)((float)white.G * single23), (int)((float)white.B * single23), (int)(255f * single23));
							Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)((float)white.R * single23), (int)((float)white.G * single23), (int)((float)white.B * single23), (int)((float)(white.B - 60) * single23));
							Main.spriteBatch.Draw(Main.sun3Texture, new Vector2((float)width, (float)(num15 + Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sun3Texture.Width, Main.sun3Texture.Height)), color1, single7, new Vector2((float)(Main.sun3Texture.Width / 2), (float)(Main.sun3Texture.Height / 2)), single6, SpriteEffects.None, 0f);
							Main.spriteBatch.Draw(Main.sun3Texture, new Vector2((float)width, (float)(num15 + Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sun3Texture.Width, Main.sun3Texture.Height)), color2, single7, new Vector2((float)(Main.sun3Texture.Width / 2), (float)(Main.sun3Texture.Height / 2)), single6, SpriteEffects.None, 0f);
						}
						else if (Main.gameMenu || Main.player[Main.myPlayer].head != 12)
						{
							float single24 = 1f - Main.shroomLight;
							single24 = single24 - Main.cloudAlpha * 1.5f;
							if (single24 < 0f)
							{
								single24 = 0f;
							}
							Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)(255f * single24), (int)((float)white.G * single24), (int)((float)white.B * single24), (int)(255f * single24));
							Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color((int)((float)white.R * single24), (int)((float)white.G * single24), (int)((float)white.B * single24), (int)((float)white.B * single24));
							Main.spriteBatch.Draw(Main.sunTexture, new Vector2((float)width, (float)(num15 + Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sunTexture.Width, Main.sunTexture.Height)), color3, single7, new Vector2((float)(Main.sunTexture.Width / 2), (float)(Main.sunTexture.Height / 2)), single6, SpriteEffects.None, 0f);
							Main.spriteBatch.Draw(Main.sunTexture, new Vector2((float)width, (float)(num15 + Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sunTexture.Width, Main.sunTexture.Height)), color4, single7, new Vector2((float)(Main.sunTexture.Width / 2), (float)(Main.sunTexture.Height / 2)), single6, SpriteEffects.None, 0f);
						}
						else
						{
							float single25 = 1f - Main.shroomLight;
							single25 = single25 - Main.cloudAlpha * 1.5f;
							if (single25 < 0f)
							{
								single25 = 0f;
							}
							Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color((int)(255f * single25), (int)((float)white.G * single25), (int)((float)white.B * single25), (int)(255f * single25));
							Microsoft.Xna.Framework.Color color6 = new Microsoft.Xna.Framework.Color((int)((float)white.R * single25), (int)((float)white.G * single25), (int)((float)white.B * single25), (int)((float)(white.B - 60) * single25));
							Main.spriteBatch.Draw(Main.sun2Texture, new Vector2((float)width, (float)(num15 + Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sun2Texture.Width, Main.sun2Texture.Height)), color5, single7, new Vector2((float)(Main.sun2Texture.Width / 2), (float)(Main.sun2Texture.Height / 2)), single6, SpriteEffects.None, 0f);
							Main.spriteBatch.Draw(Main.sun2Texture, new Vector2((float)width, (float)(num15 + Main.sunModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.sun2Texture.Width, Main.sun2Texture.Height)), color6, single7, new Vector2((float)(Main.sun2Texture.Width / 2), (float)(Main.sun2Texture.Height / 2)), single6, SpriteEffects.None, 0f);
						}
					}
					if (!Main.dayTime)
					{
						float single26 = 1f - Main.cloudAlpha * 1.5f;
						if (single26 < 0f)
						{
							single26 = 0f;
						}
						r.R = (byte)((float)r.R * single26);
						r.G = (byte)((float)r.G * single26);
						r.B = (byte)((float)r.B * single26);
						r.A = (byte)((float)r.A * single26);
						if (Main.pumpkinMoon)
						{
							Main.spriteBatch.Draw(Main.pumpkinMoonTexture, new Vector2((float)width1, (float)(num16 + Main.moonModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.pumpkinMoonTexture.Width * Main.moonPhase, Main.pumpkinMoonTexture.Width, Main.pumpkinMoonTexture.Width)), r, single9, new Vector2((float)(Main.pumpkinMoonTexture.Width / 2), (float)(Main.pumpkinMoonTexture.Width / 2)), single8, SpriteEffects.None, 0f);
						}
						else if (!Main.snowMoon)
						{
							Main.spriteBatch.Draw(Main.moonTexture[Main.moonType], new Vector2((float)width1, (float)(num16 + Main.moonModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.moonTexture[Main.moonType].Width * Main.moonPhase, Main.moonTexture[Main.moonType].Width, Main.moonTexture[Main.moonType].Width)), r, single9, new Vector2((float)(Main.moonTexture[Main.moonType].Width / 2), (float)(Main.moonTexture[Main.moonType].Width / 2)), single8, SpriteEffects.None, 0f);
						}
						else
						{
							Main.spriteBatch.Draw(Main.snowMoonTexture, new Vector2((float)width1, (float)(num16 + Main.moonModY)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.snowMoonTexture.Width * Main.moonPhase, Main.snowMoonTexture.Width, Main.snowMoonTexture.Width)), r, single9, new Vector2((float)(Main.snowMoonTexture.Width / 2), (float)(Main.snowMoonTexture.Width / 2)), single8, SpriteEffects.None, 0f);
						}
					}
				}
				rectangle = (!Main.dayTime ? new Microsoft.Xna.Framework.Rectangle((int)((double)width1 - (double)Main.moonTexture[Main.moonType].Width * 0.5 * (double)single8), (int)((double)num16 - (double)Main.moonTexture[Main.moonType].Width * 0.5 * (double)single8 + (double)Main.moonModY), (int)((float)Main.moonTexture[Main.moonType].Width * single8), (int)((float)Main.moonTexture[Main.moonType].Width * single8)) : new Microsoft.Xna.Framework.Rectangle((int)((double)width - (double)Main.sunTexture.Width * 0.5 * (double)single6), (int)((double)num15 - (double)Main.sunTexture.Height * 0.5 * (double)single6 + (double)Main.sunModY), (int)((float)Main.sunTexture.Width * single6), (int)((float)Main.sunTexture.Width * single6)));
				Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle(Main.mouseX, Main.mouseY, 1, 1);
				Main.sunModY = (short)((double)Main.sunModY * 0.999);
				Main.moonModY = (short)((double)Main.moonModY * 0.999);
				if (Main.gameMenu && Main.netMode != 1)
				{
					if (!Main.mouseLeft || !Main.hasFocus)
					{
						Main.grabSky = false;
					}
					else if (rectangle1.Intersects(rectangle) || Main.grabSky)
					{
						if (!Main.dayTime)
						{
							Main.time = 32400 * (double)((float)(Main.mouseX + Main.moonTexture[Main.moonType].Width) / ((float)Main.screenWidth + (float)(Main.moonTexture[Main.moonType].Width * 2)));
							Main.moonModY = (short)(Main.mouseY - num16);
							if (Main.time > 32390)
							{
								Main.time = 32390;
							}
						}
						else
						{
							Main.time = 54000 * (double)((float)(Main.mouseX + Main.sunTexture.Width) / ((float)Main.screenWidth + (float)(Main.sunTexture.Width * 2)));
							Main.sunModY = (short)(Main.mouseY - num15);
							if (Main.time > 53990)
							{
								Main.time = 53990;
							}
						}
						if (Main.time < 10)
						{
							Main.time = 10;
						}
						if (Main.netMode != 0)
						{
							NetMessage.SendData(18, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
						}
						Main.grabSky = true;
					}
				}
				TimeLogger.DetailedDrawTime(7);
			}
			this.scAdj = 1f - (float)((double)(Main.screenPosition.Y + (float)Main.screenHeight) / (Main.worldSurface * 16));
			this.scAdj = (float)(Main.worldSurface * 16) / (Main.screenPosition.Y + (float)Main.screenHeight);
			float y1 = (float)Main.maxTilesY * 0.15f * 16f;
			y1 = y1 - Main.screenPosition.Y;
			if (y1 < 0f)
			{
				y1 = 0f;
			}
			y1 = y1 * 0.00025f;
			float single27 = y1 * y1;
			Main main = this;
			main.scAdj = main.scAdj * (0.45f - single27);
			if ((double)Main.maxTilesY <= 1200)
			{
				Main main1 = this;
				main1.scAdj = main1.scAdj * -500f;
			}
			else if ((double)Main.maxTilesY > 1800)
			{
				Main main2 = this;
				main2.scAdj = main2.scAdj * -150f;
			}
			else
			{
				Main main3 = this;
				main3.scAdj = main3.scAdj * -300f;
			}
			this.screenOff = (float)(Main.screenHeight - 600);
			this.bgTop = (int)((double)(-Main.screenPosition.Y + this.screenOff / 2f) / (Main.worldSurface * 16) * 1200 + 1190) + (int)this.scAdj;
			this.cTop = (float)(this.bgTop - 50);
			if (Main.resetClouds)
			{
				Cloud.resetClouds();
				Main.resetClouds = false;
			}
			Main.bgScale = 1f;
			Main.bgW = (int)((float)Main.backgroundWidth[Main.treeMntBG[0]] * Main.bgScale);
			Main.backColor = Main.bgColor;
			Main.trueBackColor = Main.backColor;
			int num17 = Main.bgStyle;
			int x1 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
			if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10 && (x1 < 380 || x1 > Main.maxTilesX - 380))
			{
				num17 = 4;
			}
			else if (Main.shroomTiles > 100)
			{
				num17 = 9;
			}
			else if (Main.sandTiles > 1000)
			{
				if (Main.player[Main.myPlayer].ZoneCorrupt)
				{
					num17 = 5;
				}
				else if (!Main.player[Main.myPlayer].ZoneCrimson)
				{
					num17 = (!Main.player[Main.myPlayer].ZoneHoly ? 2 : 5);
				}
				else
				{
					num17 = 5;
				}
			}
			else if (Main.player[Main.myPlayer].ZoneHoly)
			{
				num17 = 6;
			}
			else if (Main.player[Main.myPlayer].ZoneCorrupt)
			{
				num17 = 1;
			}
			else if (Main.player[Main.myPlayer].ZoneCrimson)
			{
				num17 = 8;
			}
			else if (!Main.player[Main.myPlayer].ZoneJungle)
			{
				num17 = (!Main.player[Main.myPlayer].ZoneSnow ? 0 : 7);
			}
			else
			{
				num17 = 3;
			}
			int num18 = 30;
			Main.tranSpeed = 0.05f;
			if (num17 == 0)
			{
				num18 = 60;
			}
			if (Main.bgDelay < 0)
			{
				Main.bgDelay = Main.bgDelay + 1;
			}
			else if (num17 != Main.bgStyle)
			{
				Main.bgDelay = Main.bgDelay + 1;
				if (Main.bgDelay > num18)
				{
					Main.bgDelay = -60;
					Main.bgStyle = num17;
					if (num17 == 0)
					{
						Main.bgDelay = 0;
					}
				}
			}
			else if (Main.bgDelay > 0)
			{
				Main.bgDelay = Main.bgDelay - 1;
			}
			if (Main.gameMenu)
			{
				Main.tranSpeed = 0.02f;
				if (Main.dayTime)
				{
					Main.bgStyle = 0;
				}
				else
				{
					Main.bgStyle = 1;
				}
				num17 = Main.bgStyle;
			}
			if (Main.quickBG > 0)
			{
				Main.quickBG = Main.quickBG - 1;
				Main.bgStyle = num17;
				Main.tranSpeed = 1f;
			}
			if (Main.bgStyle == 2)
			{
				Main.bgAlpha2[0] = Main.bgAlpha2[0] - Main.tranSpeed;
				if (Main.bgAlpha2[0] < 0f)
				{
					Main.bgAlpha2[0] = 0f;
				}
				Main.bgAlpha2[1] = Main.bgAlpha2[1] + Main.tranSpeed;
				if (Main.bgAlpha2[1] > 1f)
				{
					Main.bgAlpha2[1] = 1f;
				}
				Main.bgAlpha2[2] = Main.bgAlpha2[2] - Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] = Main.bgAlpha2[3] - Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] = Main.bgAlpha2[4] - Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] = Main.bgAlpha2[5] - Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] = Main.bgAlpha2[6] - Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else if (Main.bgStyle == 5 || Main.bgStyle == 1 || Main.bgStyle == 6)
			{
				Main.bgAlpha2[0] = Main.bgAlpha2[0] - Main.tranSpeed;
				if (Main.bgAlpha2[0] < 0f)
				{
					Main.bgAlpha2[0] = 0f;
				}
				Main.bgAlpha2[1] = Main.bgAlpha2[1] - Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] = Main.bgAlpha2[2] + Main.tranSpeed;
				if (Main.bgAlpha2[2] > 1f)
				{
					Main.bgAlpha2[2] = 1f;
				}
				Main.bgAlpha2[3] = Main.bgAlpha2[3] - Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] = Main.bgAlpha2[4] - Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] = Main.bgAlpha2[5] - Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] = Main.bgAlpha2[6] - Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else if (Main.bgStyle == 4)
			{
				Main.bgAlpha2[0] = Main.bgAlpha2[0] - Main.tranSpeed;
				if (Main.bgAlpha2[0] < 0f)
				{
					Main.bgAlpha2[0] = 0f;
				}
				Main.bgAlpha2[1] = Main.bgAlpha2[1] - Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] = Main.bgAlpha2[2] - Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] = Main.bgAlpha2[3] + Main.tranSpeed;
				if (Main.bgAlpha2[3] > 1f)
				{
					Main.bgAlpha2[3] = 1f;
				}
				Main.bgAlpha2[4] = Main.bgAlpha2[4] - Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] = Main.bgAlpha2[5] - Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] = Main.bgAlpha2[6] - Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else if (Main.bgStyle == 7)
			{
				Main.bgAlpha2[0] = Main.bgAlpha2[0] - Main.tranSpeed;
				if (Main.bgAlpha2[0] < 0f)
				{
					Main.bgAlpha2[0] = 0f;
				}
				Main.bgAlpha2[1] = Main.bgAlpha2[1] - Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] = Main.bgAlpha2[2] - Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] = Main.bgAlpha2[3] - Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] = Main.bgAlpha2[4] + Main.tranSpeed;
				if (Main.bgAlpha2[4] > 1f)
				{
					Main.bgAlpha2[4] = 1f;
				}
				Main.bgAlpha2[5] = Main.bgAlpha2[5] - Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] = Main.bgAlpha2[6] - Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else if (Main.bgStyle == 8)
			{
				Main.bgAlpha2[0] = Main.bgAlpha2[0] - Main.tranSpeed;
				if (Main.bgAlpha2[0] < 0f)
				{
					Main.bgAlpha2[0] = 0f;
				}
				Main.bgAlpha2[1] = Main.bgAlpha2[1] - Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] = Main.bgAlpha2[2] - Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] = Main.bgAlpha2[3] - Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] = Main.bgAlpha2[4] - Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] = Main.bgAlpha2[5] + Main.tranSpeed;
				if (Main.bgAlpha2[5] > 1f)
				{
					Main.bgAlpha2[5] = 1f;
				}
				Main.bgAlpha2[6] = Main.bgAlpha2[6] - Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else if (Main.bgStyle != 9)
			{
				Main.bgAlpha2[0] = Main.bgAlpha2[0] + Main.tranSpeed;
				if (Main.bgAlpha2[0] > 1f)
				{
					Main.bgAlpha2[0] = 1f;
				}
				Main.bgAlpha2[1] = Main.bgAlpha2[1] - Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] = Main.bgAlpha2[2] - Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] = Main.bgAlpha2[3] - Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] = Main.bgAlpha2[4] - Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] = Main.bgAlpha2[5] - Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] = Main.bgAlpha2[6] - Main.tranSpeed;
				if (Main.bgAlpha2[6] < 0f)
				{
					Main.bgAlpha2[6] = 0f;
				}
			}
			else
			{
				Main.bgAlpha2[0] = Main.bgAlpha2[0] + Main.tranSpeed;
				if (Main.bgAlpha2[0] > 1f)
				{
					Main.bgAlpha2[0] = 1f;
				}
				Main.bgAlpha2[1] = Main.bgAlpha2[1] - Main.tranSpeed;
				if (Main.bgAlpha2[1] < 0f)
				{
					Main.bgAlpha2[1] = 0f;
				}
				Main.bgAlpha2[2] = Main.bgAlpha2[2] - Main.tranSpeed;
				if (Main.bgAlpha2[2] < 0f)
				{
					Main.bgAlpha2[2] = 0f;
				}
				Main.bgAlpha2[3] = Main.bgAlpha2[3] - Main.tranSpeed;
				if (Main.bgAlpha2[3] < 0f)
				{
					Main.bgAlpha2[3] = 0f;
				}
				Main.bgAlpha2[4] = Main.bgAlpha2[4] - Main.tranSpeed;
				if (Main.bgAlpha2[4] < 0f)
				{
					Main.bgAlpha2[4] = 0f;
				}
				Main.bgAlpha2[5] = Main.bgAlpha2[5] - Main.tranSpeed;
				if (Main.bgAlpha2[5] < 0f)
				{
					Main.bgAlpha2[5] = 0f;
				}
				Main.bgAlpha2[6] = Main.bgAlpha2[6] + Main.tranSpeed;
				if (Main.bgAlpha2[6] > 1f)
				{
					Main.bgAlpha2[6] = 1f;
				}
			}
			if (!Main.ignoreErrors)
			{
				this.DrawSurfaceBG();
				if (Main.owBack)
				{
					this.DrawUnderworldBackground(false);
				}
			}
			else
			{
				try
				{
					this.DrawSurfaceBG();
					if (Main.owBack)
					{
						this.DrawUnderworldBackground(false);
					}
				}
				catch (Exception exception)
				{
					TimeLogger.DrawException(exception);
				}
			}
			TimeLogger.DetailedDrawTime(8);
			if (Main.gameMenu || Main.netMode == 2)
			{
				bool isActive = base.IsActive;
				Microsoft.Xna.Framework.Rectangle[] rectangleArray = new Microsoft.Xna.Framework.Rectangle[6];
				for (int k = 0; k < (int)rectangleArray.Length; k++)
				{
					rectangleArray[k] = new Microsoft.Xna.Framework.Rectangle(k * 4, 0, 2, 40);
				}
				Microsoft.Xna.Framework.Color color7 = Main.bgColor * 0.85f;
				for (int l = 0; l < Main.maxRain; l++)
				{
					if (Main.rain[l].active)
					{
						Rain rain = Main.rain[l];
						Main.spriteBatch.Draw(Main.rainTexture, rain.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(rectangleArray[rain.type]), color7, rain.rotation, Vector2.Zero, rain.scale, SpriteEffects.None, 0f);
						if (isActive)
						{
							rain.Update();
						}
					}
				}
				this.DrawMenu(gameTime);
				TimeLogger.MenuDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				return;
			}
			this.firstTileX = (int)(Main.screenPosition.X / 16f - 1f);
			this.lastTileX = (int)((Main.screenPosition.X + (float)Main.screenWidth) / 16f) + 2;
			this.firstTileY = (int)(Main.screenPosition.Y / 16f - 1f);
			this.lastTileY = (int)((Main.screenPosition.Y + (float)Main.screenHeight) / 16f) + 2;
			if (this.firstTileX < 0)
			{
				this.firstTileX = 0;
			}
			if (this.lastTileX > Main.maxTilesX)
			{
				this.lastTileX = Main.maxTilesX;
			}
			if (this.firstTileY < 0)
			{
				this.firstTileY = 0;
			}
			if (this.lastTileY > Main.maxTilesY)
			{
				this.lastTileY = Main.maxTilesY;
			}
			if (!Main.drawSkip)
			{
				Lighting.LightTiles(this.firstTileX, this.lastTileX, this.firstTileY, this.lastTileY);
			}
			TimeLogger.DetailedDrawReset();
			if (Main.mapFullscreen)
			{
				if (Main.player[Main.myPlayer].talkNPC >= 0 || Main.player[Main.myPlayer].sign >= 0 || Main.playerInventory && !CaptureManager.Instance.Active)
				{
					Main.player[Main.myPlayer].ToggleInv();
				}
				this.DrawMap();
				this.DrawFPS();
				this.DrawPlayerChat();
				TimeLogger.MapDrawTime(stopwatch.Elapsed.TotalMilliseconds);
				TimeLogger.EndDrawFrame();
				CaptureManager.Instance.Update();
				if (CaptureManager.Instance.Active)
				{
					CaptureManager.Instance.Draw(Main.spriteBatch);
				}
				Main.spriteBatch.End();
				if (Main.mouseLeft)
				{
					Main.mouseLeftRelease = false;
					return;
				}
				Main.mouseLeftRelease = true;
				return;
			}
			Microsoft.Xna.Framework.Color white1 = Microsoft.Xna.Framework.Color.White;
			if (!Main.drawToScreen)
			{
				Main.spriteBatch.Draw(this.backWaterTarget, Main.sceneBackgroundPos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
				TimeLogger.DetailedDrawTime(11);
			}
			else
			{
				this.drawWaters(true, -1, true);
			}
			float x2 = (Main.sceneBackgroundPos.X - Main.screenPosition.X + (float)Main.offScreenRange) * Main.caveParallax - (float)Main.offScreenRange;
			if (!Main.drawToScreen)
			{
				Main.spriteBatch.Draw(this.backgroundTarget, new Vector2(x2, Main.sceneBackgroundPos.Y - Main.screenPosition.Y), Microsoft.Xna.Framework.Color.White);
				TimeLogger.DetailedDrawTime(12);
			}
			else
			{
				this.DrawBackground();
			}
			ScreenDarkness.DrawBack(Main.spriteBatch);
			Main.magmaBGFrameCounter = Main.magmaBGFrameCounter + 1;
			if (Main.magmaBGFrameCounter >= 8)
			{
				Main.magmaBGFrameCounter = 0;
				Main.magmaBGFrame = Main.magmaBGFrame + 1;
				if (Main.magmaBGFrame >= 3)
				{
					Main.magmaBGFrame = 0;
				}
			}
			try
			{
				this.CacheNPCDraws();
				this.CacheProjDraws();
				this.DrawCachedNPCs(this.DrawCacheNPCsMoonMoon, true);
				if (!Main.drawToScreen)
				{
					Main.spriteBatch.Draw(this.blackTarget, Main.sceneTilePos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
					TimeLogger.DetailedDrawTime(13);
					Main.spriteBatch.Draw(this.wallTarget, Main.sceneWallPos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
					TimeLogger.DetailedDrawTime(14);
				}
				else
				{
					this.DrawBlack(false);
					this.DrawWalls();
				}
				this.DrawWoF();
				if (Main.drawBackGore)
				{
					Main.drawBackGore = false;
					if (!Main.ignoreErrors)
					{
						this.DrawGoreBehind();
					}
					else
					{
						try
						{
							this.DrawGoreBehind();
						}
						catch (Exception exception1)
						{
							TimeLogger.DrawException(exception1);
						}
					}
				}
				MoonlordDeathDrama.DrawPieces(Main.spriteBatch);
				MoonlordDeathDrama.DrawExplosions(Main.spriteBatch);
				if (!Main.player[Main.myPlayer].detectCreature)
				{
					if (!Main.drawToScreen)
					{
						Main.spriteBatch.Draw(this.tile2Target, Main.sceneTile2Pos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
						TimeLogger.DetailedDrawTime(15);
						this.waterfallManager.Draw(Main.spriteBatch);
						TimeLogger.DetailedDrawTime(16);
						Main.spriteBatch.End();
						this.DrawCachedProjs(this.DrawCacheProjsBackground);
						Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
						this.DrawNPCs(true);
						TimeLogger.DetailedDrawTime(18);
						Main.spriteBatch.Draw(this.tileTarget, Main.sceneTilePos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
						TimeLogger.DetailedDrawTime(17);
					}
					else
					{
						this.DrawTiles(false, -1);
						TimeLogger.DetailedDrawReset();
						this.waterfallManager.Draw(Main.spriteBatch);
						TimeLogger.DetailedDrawTime(16);
						Main.spriteBatch.End();
						this.DrawCachedProjs(this.DrawCacheProjsBackground);
						Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
						this.DrawNPCs(true);
						TimeLogger.DetailedDrawTime(18);
						this.DrawTiles(true, -1);
					}
					TimeLogger.DetailedDrawReset();
					this.DrawNPCs(false);
					this.DrawCachedNPCs(this.DrawCacheNPCProjectiles, false);
					TimeLogger.DetailedDrawTime(19);
				}
				else
				{
					if (!Main.drawToScreen)
					{
						Main.spriteBatch.Draw(this.tile2Target, Main.sceneTile2Pos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
						TimeLogger.DetailedDrawTime(15);
						this.waterfallManager.Draw(Main.spriteBatch);
						TimeLogger.DetailedDrawTime(16);
						Main.spriteBatch.Draw(this.tileTarget, Main.sceneTilePos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
						TimeLogger.DetailedDrawTime(17);
					}
					else
					{
						this.DrawTiles(false, -1);
						TimeLogger.DetailedDrawReset();
						this.waterfallManager.Draw(Main.spriteBatch);
						TimeLogger.DetailedDrawTime(16);
						this.DrawTiles(true, -1);
					}
					TimeLogger.DetailedDrawReset();
					Main.spriteBatch.End();
					this.DrawCachedProjs(this.DrawCacheProjsBackground);
					Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
					this.DrawNPCs(true);
					TimeLogger.DetailedDrawTime(18);
					this.DrawNPCs(false);
					this.DrawCachedNPCs(this.DrawCacheNPCProjectiles, false);
					TimeLogger.DetailedDrawTime(19);
				}
			}
			catch (Exception exception2)
			{
				TimeLogger.DrawException(exception2);
			}
			if (!Main.mapFullscreen && Main.mapStyle == 2)
			{
				if (!Main.ignoreErrors)
				{
					this.DrawMap();
				}
				else
				{
					try
					{
						this.DrawMap();
					}
					catch (Exception exception3)
					{
						TimeLogger.DrawException(exception3);
					}
				}
			}
			TimeLogger.DetailedDrawReset();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(35);
			this.SortDrawCacheWorms();
			this.DrawCachedProjs(this.DrawCacheProjsWorms);
			this.DrawProjectiles();
			this.DrawPlayers();
			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
			this.DrawCachedNPCs(this.DrawCacheNPCsOverPlayers, false);
			if (!Main.gamePaused)
			{
				Main.essScale = Main.essScale + (float)Main.essDir * 0.01f;
				if (Main.essScale > 1f)
				{
					Main.essDir = -1;
					Main.essScale = 1f;
				}
				if ((double)Main.essScale < 0.7)
				{
					Main.essDir = 1;
					Main.essScale = 0.7f;
				}
			}
			this.DrawItems();
			TimeLogger.DetailedDrawTime(22);
			this.DrawRain();
			if (!Main.ignoreErrors)
			{
				this.DrawGore();
			}
			else
			{
				try
				{
					this.DrawGore();
				}
				catch (Exception exception4)
				{
					TimeLogger.DrawException(exception4);
				}
			}
			Main.spriteBatch.End();
			this.DrawDust();
			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
			if (!Main.drawToScreen)
			{
				Main.spriteBatch.Draw(this.waterTarget, Main.sceneWaterPos - Main.screenPosition, Microsoft.Xna.Framework.Color.White);
				TimeLogger.DetailedDrawTime(26);
			}
			else
			{
				this.drawWaters(false, -1, true);
				if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].mech)
				{
					this.DrawWires();
				}
			}
			this.DrawInfernoRings();
			ScreenDarkness.DrawFront(Main.spriteBatch);
			MoonlordDeathDrama.DrawWhite(Main.spriteBatch);
			ScreenObstruction.Draw(Main.spriteBatch);
			TimeLogger.DetailedDrawReset();
			Main.spriteBatch.End();
			Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
			Overlays.Scene.Draw(Main.spriteBatch);
			Main.spriteBatch.End();
			if (flag)
			{
				base.GraphicsDevice.SetRenderTarget(null);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Black);
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.Additive);
				Filters.Scene.Apply();
				Main.spriteBatch.Draw(this.screenTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
				Main.spriteBatch.End();
			}
			TimeLogger.DetailedDrawTime(36);
			Main.spriteBatch.Begin();
			if (Main.hideUI)
			{
				Main.maxQ = true;
			}
			else
			{
				TimeLogger.DetailedDrawReset();
				for (int m = 0; m < 255; m++)
				{
					if (Main.player[m].active && Main.player[m].chatOverhead.timeLeft > 0 && !Main.player[m].dead)
					{
						Vector2 vector21 = Main.player[m].chatOverhead.messageSize;
						vector2.X = Main.player[m].position.X + (float)(Main.player[m].width / 2) - vector21.X / 2f;
						vector2.Y = Main.player[m].position.Y - vector21.Y - 2f;
						vector2.Y = vector2.Y + Main.player[m].gfxOffY;
						vector2 = vector2.Floor();
						if (Main.player[Main.myPlayer].gravDir == -1f)
						{
							vector2.Y = vector2.Y - Main.screenPosition.Y;
							vector2.Y = Main.screenPosition.Y + (float)Main.screenHeight - vector2.Y;
						}
						int num19 = 0;
						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, Main.player[m].chatOverhead.snippets, vector2 - Main.screenPosition, 0f, Vector2.Zero, Vector2.One, out num19, -1f, 2f);
					}
				}
				for (int n = 0; n < 100; n++)
				{
					if (Main.combatText[n].active)
					{
						int num20 = 0;
						if (Main.combatText[n].crit)
						{
							num20 = 1;
						}
						Vector2 vector22 = Main.fontCombatText[num20].MeasureString(Main.combatText[n].text);
						Vector2 vector23 = new Vector2(vector22.X * 0.5f, vector22.Y * 0.5f);
						float single28 = Main.combatText[n].scale;
						float r6 = (float)Main.combatText[n].color.R;
						float g7 = (float)Main.combatText[n].color.G;
						float b6 = (float)Main.combatText[n].color.B;
						float a = (float)Main.combatText[n].color.A;
						r6 = r6 * (Main.combatText[n].scale * Main.combatText[n].alpha * 0.3f);
						b6 = b6 * (Main.combatText[n].scale * Main.combatText[n].alpha * 0.3f);
						g7 = g7 * (Main.combatText[n].scale * Main.combatText[n].alpha * 0.3f);
						a = a * (Main.combatText[n].scale * Main.combatText[n].alpha);
						Microsoft.Xna.Framework.Color color8 = new Microsoft.Xna.Framework.Color((int)r6, (int)g7, (int)b6, (int)a);
						for (int o = 0; o < 5; o++)
						{
							int num21 = 0;
							int num22 = 0;
							if (o == 0)
							{
								num21--;
							}
							else if (o == 1)
							{
								num21++;
							}
							else if (o == 2)
							{
								num22--;
							}
							else if (o != 3)
							{
								r6 = (float)Main.combatText[n].color.R * Main.combatText[n].scale * Main.combatText[n].alpha;
								b6 = (float)Main.combatText[n].color.B * Main.combatText[n].scale * Main.combatText[n].alpha;
								g7 = (float)Main.combatText[n].color.G * Main.combatText[n].scale * Main.combatText[n].alpha;
								a = (float)Main.combatText[n].color.A * Main.combatText[n].scale * Main.combatText[n].alpha;
								color8 = new Microsoft.Xna.Framework.Color((int)r6, (int)g7, (int)b6, (int)a);
							}
							else
							{
								num22++;
							}
							if (Main.player[Main.myPlayer].gravDir != -1f)
							{
								Main.spriteBatch.DrawString(Main.fontCombatText[num20], Main.combatText[n].text, new Vector2(Main.combatText[n].position.X - Main.screenPosition.X + (float)num21 + vector23.X, Main.combatText[n].position.Y - Main.screenPosition.Y + (float)num22 + vector23.Y), color8, Main.combatText[n].rotation, vector23, Main.combatText[n].scale, SpriteEffects.None, 0f);
							}
							else
							{
								float y2 = Main.combatText[n].position.Y - Main.screenPosition.Y;
								y2 = (float)Main.screenHeight - y2;
								Main.spriteBatch.DrawString(Main.fontCombatText[num20], Main.combatText[n].text, new Vector2(Main.combatText[n].position.X - Main.screenPosition.X + (float)num21 + vector23.X, y2 + (float)num22 + vector23.Y), color8, Main.combatText[n].rotation, vector23, Main.combatText[n].scale, SpriteEffects.None, 0f);
							}
						}
					}
				}
				for (int p = 0; p < 20; p++)
				{
					if (Main.itemText[p].active)
					{
						string str = Main.itemText[p].name;
						if (Main.itemText[p].stack > 1)
						{
							statusText = new object[] { str, " (", Main.itemText[p].stack, ")" };
							str = string.Concat(statusText);
						}
						Vector2 vector24 = Main.fontMouseText.MeasureString(str);
						Vector2 vector25 = new Vector2(vector24.X * 0.5f, vector24.Y * 0.5f);
						float single29 = Main.itemText[p].scale;
						float r7 = (float)Main.itemText[p].color.R;
						float g8 = (float)Main.itemText[p].color.G;
						float b7 = (float)Main.itemText[p].color.B;
						float a1 = (float)Main.itemText[p].color.A;
						r7 = r7 * (Main.itemText[p].scale * Main.itemText[p].alpha * 0.3f);
						b7 = b7 * (Main.itemText[p].scale * Main.itemText[p].alpha * 0.3f);
						g8 = g8 * (Main.itemText[p].scale * Main.itemText[p].alpha * 0.3f);
						a1 = a1 * (Main.itemText[p].scale * Main.itemText[p].alpha);
						Microsoft.Xna.Framework.Color color9 = new Microsoft.Xna.Framework.Color((int)r7, (int)g8, (int)b7, (int)a1);
						for (int q = 0; q < 5; q++)
						{
							int num23 = 0;
							int num24 = 0;
							if (q == 0)
							{
								num23 = num23 - 2;
							}
							else if (q == 1)
							{
								num23 = num23 + 2;
							}
							else if (q == 2)
							{
								num24 = num24 - 2;
							}
							else if (q != 3)
							{
								r7 = (float)Main.itemText[p].color.R * Main.itemText[p].scale * Main.itemText[p].alpha;
								b7 = (float)Main.itemText[p].color.B * Main.itemText[p].scale * Main.itemText[p].alpha;
								g8 = (float)Main.itemText[p].color.G * Main.itemText[p].scale * Main.itemText[p].alpha;
								a1 = (float)Main.itemText[p].color.A * Main.itemText[p].scale * Main.itemText[p].alpha;
								color9 = new Microsoft.Xna.Framework.Color((int)r7, (int)g8, (int)b7, (int)a1);
							}
							else
							{
								num24 = num24 + 2;
							}
							if (q < 4)
							{
								a1 = (float)Main.itemText[p].color.A * Main.itemText[p].scale * Main.itemText[p].alpha;
								color9 = new Microsoft.Xna.Framework.Color(0, 0, 0, (int)a1);
							}
							float y3 = Main.itemText[p].position.Y - Main.screenPosition.Y + (float)num24;
							if (Main.player[Main.myPlayer].gravDir == -1f)
							{
								y3 = (float)Main.screenHeight - y3;
							}
							Main.spriteBatch.DrawString(Main.fontMouseText, str, new Vector2(Main.itemText[p].position.X - Main.screenPosition.X + (float)num23 + vector25.X, y3 + vector25.Y), color9, Main.itemText[p].rotation, vector25, Main.itemText[p].scale, SpriteEffects.None, 0f);
						}
					}
				}
				if (Main.netMode == 1 && Netplay.Connection.StatusText != "" && Netplay.Connection.StatusText != null)
				{
					statusText = new object[] { Netplay.Connection.StatusText, ": ", (int)((float)Netplay.Connection.StatusCount / (float)Netplay.Connection.StatusMax * 100f), "%" };
					string str1 = string.Concat(statusText);
					SpriteBatch spriteBatch = Main.spriteBatch;
					SpriteFont spriteFont = Main.fontMouseText;
					Vector2 vector26 = new Vector2(628f - Main.fontMouseText.MeasureString(str1).X * 0.5f + (float)(Main.screenWidth - 800), 84f);
					Microsoft.Xna.Framework.Color color10 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
					Vector2 vector27 = new Vector2();
					spriteBatch.DrawString(spriteFont, str1, vector26, color10, 0f, vector27, 1f, SpriteEffects.None, 0f);
				}
				if (Main.BlackFadeIn > 0)
				{
					if (Main.BlackFadeIn < 0)
					{
						Main.BlackFadeIn = 0;
					}
					int blackFadeIn = Main.BlackFadeIn;
					if (blackFadeIn > 255)
					{
						blackFadeIn = 255;
					}
					Main.BlackFadeIn = Main.BlackFadeIn - 25;
					Main.spriteBatch.Draw(Main.loTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), new Microsoft.Xna.Framework.Color(0, 0, 0, blackFadeIn));
				}
				this.DrawFPS();
				if (!Main.mapFullscreen)
				{
					if (!Main.ignoreErrors)
					{
						this.DrawInterface(gameTime);
					}
					else
					{
						try
						{
							this.DrawInterface(gameTime);
						}
						catch (Exception exception5)
						{
							TimeLogger.DrawException(exception5);
						}
					}
				}
				TimeLogger.DetailedDrawTime(27);
			}
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(37);
			if (!Main.mouseLeft)
			{
				Main.mouseLeftRelease = true;
			}
			else
			{
				Main.mouseLeftRelease = false;
			}
			if (!Main.mouseRight)
			{
				Main.mouseRightRelease = true;
			}
			else
			{
				Main.mouseRightRelease = false;
			}
			if (Main.mouseState.RightButton != Microsoft.Xna.Framework.Input.ButtonState.Pressed)
			{
				Main.stackSplit = 0;
			}
			if (Main.stackSplit > 0)
			{
				Main.stackSplit = Main.stackSplit - 1;
			}
			TimeLogger.RenderTime(Main.renderCount, stopwatch.Elapsed.TotalMilliseconds);
			TimeLogger.EndDrawFrame();
		}

		protected void DrawBackground()
		{
			vertexColors vertexColor;
			Vector2 vector2;
			if (!Main.owBack)
			{
				this.OldDrawBackground();
				return;
			}
			Microsoft.Xna.Framework.Color[] colorArray = new Microsoft.Xna.Framework.Color[9];
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			double num = (double)(Main.maxTilesY - 330);
			double num1 = (double)((int)((num - Main.worldSurface) / 6) * 6);
			num = Main.worldSurface + num1 - 5;
			int num2 = (int)(255f * (1f - Main.gfxQuality) + 140f * Main.gfxQuality);
			int num3 = (int)(200f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			int num4 = 128;
			Vector2 vector21 = (Main.drawToScreen ? Vector2.Zero : new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange));
			Vector3 vector3 = new Vector3(0.9f);
			float single = MathHelper.Clamp((Main.screenPosition.Y - (float)Main.worldSurface * 16f) / 300f, 0f, 1f);
			Lighting.brightness = Lighting.defBrightness * (1f - single) + 1f * single;
			float y = (float)((double)(Main.screenPosition.Y - (float)(Main.screenHeight / 2) + 200f) - Main.rockLayer * 16) / 300f;
			y = MathHelper.Clamp(y, 0f, 1f);
			int x = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
			int num5 = 3;
			if (x <= Main.caveBackX[0])
			{
				num5 = Main.caveBackStyle[0];
			}
			else if (x > Main.treeX[1])
			{
				num5 = (x > Main.treeX[2] ? Main.caveBackStyle[3] : Main.caveBackStyle[2]);
			}
			else
			{
				num5 = Main.caveBackStyle[1];
			}
			num5 = num5 + 3;
			if (Main.snowTiles > 300 && (Main.screenPosition.Y + (float)Main.screenHeight) / 16f < (float)(Main.maxTilesY - 250))
			{
				num5 = 1;
			}
			if (Main.jungleTiles > 80)
			{
				if (num5 != 1)
				{
					num5 = 11;
				}
				else if (Main.jungleTiles > Main.snowTiles)
				{
					num5 = 11;
				}
			}
			if ((double)(Main.screenPosition.Y / 16f) > Main.rockLayer + 60 && (double)(Main.screenPosition.Y / 16f) < num - 60)
			{
				if (Main.player[Main.myPlayer].ZoneSnow)
				{
					if (Main.player[Main.myPlayer].ZoneCorrupt)
					{
						num5 = 15;
					}
					else if (Main.player[Main.myPlayer].ZoneCrimson)
					{
						num5 = 16;
					}
					else if (Main.player[Main.myPlayer].ZoneHoly)
					{
						num5 = 17;
					}
				}
				else if (Main.player[Main.myPlayer].ZoneCorrupt)
				{
					num5 = 12;
				}
				else if (Main.player[Main.myPlayer].ZoneCrimson)
				{
					num5 = 13;
				}
				else if (Main.player[Main.myPlayer].ZoneHoly)
				{
					num5 = 14;
				}
			}
			if (Main.shroomTiles > 200)
			{
				num5 = 2;
			}
			if (num5 != Main.ugBack)
			{
				Main.oldUgBack = Main.ugBack;
				Main.ugBack = num5;
				Main.ugBackTransition = 1f;
			}
			if (Main.ugBackTransition > 0f)
			{
				Main.ugBackTransition = Main.ugBackTransition - 0.25f;
			}
			if (Main.ugBackTransition < 0f)
			{
				Main.ugBackTransition = 0f;
			}
			int[] numArray = new int[7];
			int[] numArray1 = new int[7];
			for (int i = 0; i < 2; i++)
			{
				int num6 = Main.ugBack;
				if (i == 1)
				{
					num6 = Main.oldUgBack;
				}
				int[] numArray2 = new int[7];
				if (num6 == 0)
				{
					numArray2[0] = 1;
					numArray2[1] = 2;
					numArray2[2] = 4;
					numArray2[3] = 3;
					numArray2[4] = 6;
					numArray2[5] = 5;
				}
				else if (num6 == 1)
				{
					if (Main.iceBackStyle == 0)
					{
						numArray2[1] = 33;
						numArray2[3] = 32;
						numArray2[0] = 40;
						numArray2[2] = 34;
					}
					else if (Main.iceBackStyle == 1)
					{
						numArray2[1] = 118;
						numArray2[3] = 117;
						numArray2[0] = 160;
						numArray2[2] = 161;
					}
					else if (Main.iceBackStyle != 2)
					{
						numArray2[1] = 120;
						numArray2[3] = 119;
						numArray2[0] = 162;
						numArray2[2] = 163;
					}
					else
					{
						numArray2[1] = 165;
						numArray2[3] = 167;
						numArray2[0] = 164;
						numArray2[2] = 166;
					}
					numArray2[4] = numArray2[3];
				}
				else if (num6 == 2)
				{
					numArray2[0] = 62;
					numArray2[1] = 63;
					numArray2[2] = 64;
					numArray2[3] = 65;
					numArray2[4] = 143 + Main.hellBackStyle;
				}
				else if (num6 == 3)
				{
					numArray2[0] = 66;
					numArray2[1] = 67;
					numArray2[2] = 68;
					numArray2[3] = 69;
					numArray2[4] = 128 + Main.hellBackStyle;
				}
				else if (num6 == 4)
				{
					numArray2[0] = 70;
					numArray2[1] = 71;
					numArray2[2] = 68;
					numArray2[3] = 72;
					numArray2[4] = 128 + Main.hellBackStyle;
				}
				else if (num6 == 5)
				{
					numArray2[0] = 73;
					numArray2[1] = 74;
					numArray2[2] = 75;
					numArray2[3] = 76;
					numArray2[4] = 131 + Main.hellBackStyle;
				}
				else if (num6 == 6)
				{
					numArray2[0] = 77;
					numArray2[1] = 78;
					numArray2[2] = 79;
					numArray2[3] = 80;
					numArray2[4] = 134 + Main.hellBackStyle;
				}
				else if (num6 == 7)
				{
					numArray2[0] = 77;
					numArray2[1] = 81;
					numArray2[2] = 79;
					numArray2[3] = 82;
					numArray2[4] = 134 + Main.hellBackStyle;
				}
				else if (num6 == 8)
				{
					numArray2[0] = 83;
					numArray2[1] = 84;
					numArray2[2] = 85;
					numArray2[3] = 86;
					numArray2[4] = 137 + Main.hellBackStyle;
				}
				else if (num6 == 9)
				{
					numArray2[0] = 83;
					numArray2[1] = 87;
					numArray2[2] = 88;
					numArray2[3] = 89;
					numArray2[4] = 137 + Main.hellBackStyle;
				}
				else if (num6 == 10)
				{
					numArray2[0] = 121;
					numArray2[1] = 122;
					numArray2[2] = 123;
					numArray2[3] = 124;
					numArray2[4] = 140 + Main.hellBackStyle;
				}
				else if (num6 == 11)
				{
					if (Main.jungleBackStyle != 0)
					{
						numArray2[0] = 146;
						numArray2[1] = 154;
						numArray2[2] = 155;
						numArray2[3] = 156;
						numArray2[4] = 157 + Main.hellBackStyle;
					}
					else
					{
						numArray2[0] = 153;
						numArray2[1] = 147;
						numArray2[2] = 148;
						numArray2[3] = 149;
						numArray2[4] = 150 + Main.hellBackStyle;
					}
				}
				else if (num6 >= 12 && num6 <= 14)
				{
					numArray2[0] = 66;
					numArray2[1] = 67;
					numArray2[2] = 68;
					numArray2[4] = 128 + Main.hellBackStyle;
					if (num6 == 12)
					{
						numArray2[3] = 193 + Main.worldID % 4;
					}
					else if (num6 == 13)
					{
						numArray2[3] = 188 + Main.worldID % 5;
					}
					else if (num6 == 14)
					{
						numArray2[3] = 197 + Main.worldID % 3;
					}
				}
				else if (num6 >= 15 && num6 <= 17)
				{
					numArray2[0] = 40;
					numArray2[1] = 33;
					numArray2[2] = 34;
					numArray2[4] = 128 + Main.hellBackStyle;
					if (num6 == 15)
					{
						numArray2[3] = 200;
					}
					else if (num6 == 16)
					{
						numArray2[3] = 201 + Main.worldID % 2;
					}
					else if (num6 == 17)
					{
						numArray2[3] = 203 + Main.worldID % 4;
					}
				}
				if (Main.hellBackStyle == 0)
				{
					numArray2[5] = 125;
				}
				if (Main.hellBackStyle == 1)
				{
					numArray2[5] = 126;
				}
				if (Main.hellBackStyle == 2)
				{
					numArray2[5] = 127;
				}
				numArray2[6] = 185 + Main.hellBackStyle;
				this.LoadBackground(numArray2[0]);
				this.LoadBackground(numArray2[1]);
				this.LoadBackground(numArray2[2]);
				this.LoadBackground(numArray2[3]);
				this.LoadBackground(numArray2[4]);
				this.LoadBackground(numArray2[5]);
				this.LoadBackground(numArray2[6]);
				if (i != 0)
				{
					for (int j = 0; j < 7; j++)
					{
						numArray1[j] = numArray2[j];
					}
				}
				else
				{
					for (int k = 0; k < 7; k++)
					{
						numArray[k] = numArray2[k];
					}
				}
			}
			Lighting.defBrightness = 1.2f - 0.2f * y;
			float x1 = vector3.X;
			float y1 = vector3.Y;
			float z = vector3.Z;
			this.bgParallax = (double)Main.caveParallax;
			this.bgStart = (int)(-Math.IEEERemainder((double)num4 + (double)Main.screenPosition.X * this.bgParallax, (double)num4) - (double)(num4 / 2)) - (int)vector21.X;
			this.bgLoops = Main.screenWidth / num4 + 2;
			this.bgTop = (int)((float)((int)Main.worldSurface * 16 - 16) - Main.screenPosition.Y + 16f);
			for (int l = 0; l < this.bgLoops; l++)
			{
				for (int m = 0; m < num4 / 16; m++)
				{
					float single1 = (float)this.bgStart + Main.screenPosition.X;
					single1 = -(float)Math.IEEERemainder((double)single1, 16);
					int num7 = (int)((float)Math.Round((double)single1));
					if (num7 == -8)
					{
						num7 = 8;
					}
					float single2 = (float)(this.bgStart + num4 * l + m * 16 + 8);
					float single3 = (float)this.bgTop;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((single2 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + single3) / 16f));
					color.R = (byte)((float)color.R * x1);
					color.G = (byte)((float)color.G * y1);
					color.B = (byte)((float)color.B * z);
					Main.spriteBatch.Draw(Main.backgroundTexture[numArray[0]], new Vector2((float)(this.bgStart + num4 * l + 16 * m + num7), (float)this.bgTop) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num7 + 16, 0, 16, 16)), color);
					if (Main.ugBackTransition > 0f)
					{
						Microsoft.Xna.Framework.Color r = color;
						r.R = (byte)((float)r.R * Main.ugBackTransition);
						r.G = (byte)((float)r.G * Main.ugBackTransition);
						r.B = (byte)((float)r.B * Main.ugBackTransition);
						r.A = (byte)((float)r.A * Main.ugBackTransition);
						Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[0]], new Vector2((float)(this.bgStart + num4 * l + 16 * m + num7), (float)this.bgTop) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num7 + 16, 0, 16, 16)), r);
					}
				}
			}
			bool flag = false;
			bool flag1 = false;
			this.bgTop = (int)((float)((int)Main.worldSurface * 16) - Main.screenPosition.Y + 16f);
			if (Main.worldSurface * 16 <= (double)(Main.screenPosition.Y + (float)Main.screenHeight + (float)Main.offScreenRange))
			{
				this.bgParallax = (double)Main.caveParallax;
				this.bgStart = (int)(-Math.IEEERemainder((double)num4 + (double)Main.screenPosition.X * this.bgParallax, (double)num4) - (double)(num4 / 2)) - (int)vector21.X;
				this.bgLoops = (Main.screenWidth + (int)vector21.X * 2) / num4 + 2;
				if (Main.worldSurface * 16 >= (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)vector21.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)vector21.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (Main.rockLayer * 16 < (double)(Main.screenPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(Main.rockLayer * 16 - (double)Main.screenPosition.Y + 600 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag1 = true;
				}
				float x2 = (float)this.bgStart + Main.screenPosition.X;
				x2 = -(float)Math.IEEERemainder((double)x2, 16);
				int num8 = (int)((float)Math.Round((double)x2));
				if (num8 == -8)
				{
					num8 = 8;
				}
				for (int n = 0; n < this.bgLoops; n++)
				{
					for (int o = 0; o < this.bgLoopsY; o++)
					{
						for (int p = 0; p < num4 / 16; p++)
						{
							for (int q = 0; q < 6; q++)
							{
								float single4 = (float)(this.bgStartY + o * 96 + q * 16 + 8);
								float single5 = (float)(this.bgStart + num4 * n + p * 16 + 8);
								int x3 = (int)((single5 + Main.screenPosition.X) / 16f);
								int y2 = (int)((single4 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color g = Lighting.GetColor(x3, y2);
								if (Main.tile[x3, y2] == null)
								{
									Main.tile[x3, y2] = new Tile();
								}
								if (g.R <= 0 && g.G <= 0 && g.B <= 0)
								{
									g.R = (byte)((float)g.R * x1);
									g.G = (byte)((float)g.G * y1);
									g.B = (byte)((float)g.B * z);
									Main.spriteBatch.Draw(Main.backgroundTexture[numArray[1]], new Vector2((float)(this.bgStart + num4 * n + 16 * p + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray[1]] * o + 16 * q)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num8 + 16, 16 * q, 16, 16)), g);
								}
								else if ((g.R > num2 || (double)g.G > (double)num2 * 1.1 || (double)g.B > (double)num2 * 1.2) && !Main.tile[x3, y2].active() && Main.wallLight[Main.tile[x3, y2].wall] && Main.ugBackTransition == 0f)
								{
									Lighting.GetColor9Slice(x3, y2, ref colorArray);
									try
									{
										for (int r1 = 0; r1 < 9; r1++)
										{
											int num9 = 0;
											int num10 = 0;
											int num11 = 4;
											int num12 = 4;
											Microsoft.Xna.Framework.Color b = g;
											Microsoft.Xna.Framework.Color color1 = g;
											switch (r1)
											{
												case 0:
												{
													if (Main.tile[x3 - 1, y2 - 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 1:
												{
													num11 = 8;
													num9 = 4;
													if (Main.tile[x3, y2 - 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 2:
												{
													num9 = 12;
													if (Main.tile[x3 + 1, y2 - 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 3:
												{
													num12 = 8;
													num10 = 4;
													if (Main.tile[x3 - 1, y2].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 4:
												{
													num11 = 8;
													num12 = 8;
													num9 = 4;
													num10 = 4;
													break;
												}
												case 5:
												{
													num9 = 12;
													num10 = 4;
													num12 = 8;
													if (Main.tile[x3 + 1, y2].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 6:
												{
													num10 = 12;
													if (Main.tile[x3 - 1, y2 + 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 7:
												{
													num11 = 8;
													num12 = 4;
													num9 = 4;
													num10 = 12;
													if (Main.tile[x3, y2 + 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 8:
												{
													num9 = 12;
													num10 = 12;
													if (Main.tile[x3 + 1, y2 + 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
											}
											b.R = (byte)((g.R + color1.R) / 2);
											b.G = (byte)((g.G + color1.G) / 2);
											b.B = (byte)((g.B + color1.B) / 2);
											b.R = (byte)((float)b.R * x1);
											b.G = (byte)((float)b.G * y1);
											b.B = (byte)((float)b.B * z);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray[1]], new Vector2((float)(this.bgStart + num4 * n + 16 * p + num9 + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray[1]] * o + 16 * q + num10)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num9 + num8 + 16, 16 * q + num10, num11, num12)), b);
											if (Main.ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color a = b;
												a.R = (byte)((float)a.R * Main.ugBackTransition);
												a.G = (byte)((float)a.G * Main.ugBackTransition);
												a.B = (byte)((float)a.B * Main.ugBackTransition);
												a.A = (byte)((float)a.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[1]], new Vector2((float)(this.bgStart + num4 * n + 16 * p + num9 + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray1[1]] * o + 16 * q + num10)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num9 + num8 + 16, 16 * q + num10, num11, num12)), a);
											}
										}
									}
									catch
									{
										g.R = (byte)((float)g.R * x1);
										g.G = (byte)((float)g.G * y1);
										g.B = (byte)((float)g.B * z);
										Main.spriteBatch.Draw(Main.backgroundTexture[numArray[1]], new Vector2((float)(this.bgStart + num4 * n + 16 * p + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray[1]] * o + 16 * q)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num8 + 16, 16 * q, 16, 16)), g);
									}
								}
								else if ((g.R > num3 || (double)g.G > (double)num3 * 1.1 || (double)g.B > (double)num3 * 1.2) && Main.ugBackTransition == 0f)
								{
									Lighting.GetColor4Slice(x3, y2, ref colorArray);
									for (int s = 0; s < 4; s++)
									{
										int num13 = 0;
										int num14 = 0;
										Microsoft.Xna.Framework.Color g1 = g;
										Microsoft.Xna.Framework.Color color2 = colorArray[s];
										switch (s)
										{
											case 1:
											{
												num13 = 8;
												break;
											}
											case 2:
											{
												num14 = 8;
												break;
											}
											case 3:
											{
												num13 = 8;
												num14 = 8;
												break;
											}
										}
										g1.R = (byte)((g.R + color2.R) / 2);
										g1.G = (byte)((g.G + color2.G) / 2);
										g1.B = (byte)((g.B + color2.B) / 2);
										g1.R = (byte)((float)g1.R * x1);
										g1.G = (byte)((float)g1.G * y1);
										g1.B = (byte)((float)g1.B * z);
										Main.spriteBatch.Draw(Main.backgroundTexture[numArray[1]], new Vector2((float)(this.bgStart + num4 * n + 16 * p + num13 + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray[1]] * o + 16 * q + num14)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num13 + num8 + 16, 16 * q + num14, 8, 8)), g1);
										if (Main.ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color b1 = g1;
											b1.R = (byte)((float)b1.R * Main.ugBackTransition);
											b1.G = (byte)((float)b1.G * Main.ugBackTransition);
											b1.B = (byte)((float)b1.B * Main.ugBackTransition);
											b1.A = (byte)((float)b1.A * Main.ugBackTransition);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[1]], new Vector2((float)(this.bgStart + num4 * n + 16 * p + num13 + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray1[1]] * o + 16 * q + num14)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num13 + num8 + 16, 16 * q + num14, 8, 8)), b1);
										}
									}
								}
								else
								{
									g.R = (byte)((float)g.R * x1);
									g.G = (byte)((float)g.G * y1);
									g.B = (byte)((float)g.B * z);
									Main.spriteBatch.Draw(Main.backgroundTexture[numArray[1]], new Vector2((float)(this.bgStart + num4 * n + 16 * p + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray[1]] * o + 16 * q)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num8 + 16, 16 * q, 16, 16)), g);
									if (Main.ugBackTransition > 0f)
									{
										Microsoft.Xna.Framework.Color a1 = g;
										a1.R = (byte)((float)a1.R * Main.ugBackTransition);
										a1.G = (byte)((float)a1.G * Main.ugBackTransition);
										a1.B = (byte)((float)a1.B * Main.ugBackTransition);
										a1.A = (byte)((float)a1.A * Main.ugBackTransition);
										Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[1]], new Vector2((float)(this.bgStart + num4 * n + 16 * p + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray1[1]] * o + 16 * q)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num8 + 16, 16 * q, 16, 16)), a1);
									}
								}
							}
						}
					}
				}
				if (Main.ugBackTransition > 0f)
				{
					for (int t = 0; t < this.bgLoops; t++)
					{
						for (int u = 0; u < this.bgLoopsY; u++)
						{
							for (int v = 0; v < num4 / 16; v++)
							{
								for (int w = 0; w < 6; w++)
								{
									float single6 = (float)(this.bgStartY + u * 96 + w * 16 + 8);
									float single7 = (float)(this.bgStart + num4 * t + v * 16 + 8);
									int x4 = (int)((single7 + Main.screenPosition.X) / 16f);
									int y3 = (int)((single6 + Main.screenPosition.Y) / 16f);
									Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(x4, y3);
									if (Main.tile[x4, y3] == null)
									{
										Main.tile[x4, y3] = new Tile();
									}
									if (color3.R > 0 || color3.G > 0 || color3.B > 0)
									{
										Lighting.GetColor4Slice_New(x4, y3, out vertexColor, Main.ugBackTransition);
										byte num15 = (byte)(255f * Main.ugBackTransition);
										vertexColor.bottomLeftColor.A = num15;
										vertexColor.BottomRightColor.A = num15;
										vertexColor.TopLeftColor.A = num15;
										vertexColor.TopRightColor.A = num15;
										Main.tileBatch.Draw(Main.backgroundTexture[numArray1[1]], new Vector2((float)(this.bgStart + num4 * t + 16 * v + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray1[1]] * u + 16 * w)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * v + num8 + 16, 16 * w, 16, 16)), vertexColor, Vector2.Zero, 1f, SpriteEffects.None);
									}
								}
							}
						}
					}
				}
				if (flag1)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num4 + (double)Main.screenPosition.X * this.bgParallax, (double)num4) - (double)(num4 / 2)) - (int)vector21.X;
					this.bgLoops = (Main.screenWidth + (int)vector21.X * 2) / num4 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					if (this.bgTop > -32)
					{
						for (int x5 = 0; x5 < this.bgLoops; x5++)
						{
							for (int y4 = 0; y4 < num4 / 16; y4++)
							{
								float single8 = (float)(this.bgStart + num4 * x5 + y4 * 16 + 8);
								float single9 = (float)this.bgTop;
								Microsoft.Xna.Framework.Color r2 = Lighting.GetColor((int)((single8 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + single9) / 16f));
								r2.R = (byte)((float)r2.R * x1);
								r2.G = (byte)((float)r2.G * y1);
								r2.B = (byte)((float)r2.B * z);
								Main.spriteBatch.Draw(Main.backgroundTexture[numArray[2]], new Vector2((float)(this.bgStart + num4 * x5 + 16 * y4 + num8), (float)this.bgTop) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * y4 + num8 + 16, 0, 16, 16)), r2);
								if (Main.ugBackTransition > 0f)
								{
									Microsoft.Xna.Framework.Color g2 = r2;
									g2.R = (byte)((float)g2.R * Main.ugBackTransition);
									g2.G = (byte)((float)g2.G * Main.ugBackTransition);
									g2.B = (byte)((float)g2.B * Main.ugBackTransition);
									g2.A = (byte)((float)g2.A * Main.ugBackTransition);
									Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[2]], new Vector2((float)(this.bgStart + num4 * x5 + 16 * y4 + num8), (float)this.bgTop) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * y4 + num8 + 16, 0, 16, 16)), g2);
								}
							}
						}
					}
				}
			}
			this.bgTop = (int)((float)((int)Main.rockLayer * 16) - Main.screenPosition.Y + 16f + 600f - 8f);
			if (Main.rockLayer * 16 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgParallax = (double)Main.caveParallax;
				this.bgStart = (int)(-Math.IEEERemainder((double)num4 + (double)Main.screenPosition.X * this.bgParallax, (double)num4) - (double)(num4 / 2)) - (int)vector21.X;
				this.bgLoops = (Main.screenWidth + (int)vector21.X * 2) / num4 + 2;
				if (Main.rockLayer * 16 + (double)Main.screenHeight >= (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)vector21.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[3]) - (double)Main.backgroundHeight[3]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)vector21.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (num * 16 < (double)(Main.screenPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(num * 16 - (double)Main.screenPosition.Y + 600 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag = true;
				}
				float x6 = (float)this.bgStart + Main.screenPosition.X;
				x6 = -(float)Math.IEEERemainder((double)x6, 16);
				int num16 = (int)((float)Math.Round((double)x6));
				if (num16 == -8)
				{
					num16 = 8;
				}
				for (int a2 = 0; a2 < this.bgLoops; a2++)
				{
					for (int b2 = 0; b2 < this.bgLoopsY; b2++)
					{
						for (int c = 0; c < num4 / 16; c++)
						{
							for (int d = 0; d < 6; d++)
							{
								float single10 = (float)(this.bgStartY + b2 * 96 + d * 16 + 8);
								float single11 = (float)(this.bgStart + num4 * a2 + c * 16 + 8);
								int x7 = (int)((single11 + Main.screenPosition.X) / 16f);
								int y5 = (int)((single10 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color r3 = Lighting.GetColor(x7, y5);
								if (Main.tile[x7, y5] == null)
								{
									Main.tile[x7, y5] = new Tile();
								}
								bool flag2 = false;
								if (Main.caveParallax != 0f)
								{
									if (Main.tile[x7 - 1, y5] == null)
									{
										Main.tile[x7 - 1, y5] = new Tile();
									}
									if (Main.tile[x7 + 1, y5] == null)
									{
										Main.tile[x7 + 1, y5] = new Tile();
									}
									if (Main.wallLight[Main.tile[x7, y5].wall] || Main.wallLight[Main.tile[x7 - 1, y5].wall] || Main.wallLight[Main.tile[x7 + 1, y5].wall])
									{
										flag2 = true;
									}
								}
								else if (Main.wallLight[Main.tile[x7, y5].wall])
								{
									flag2 = true;
								}
								if ((flag2 || r3.R == 0 || r3.G == 0 || r3.B == 0) && (r3.R > 0 || r3.G > 0 || r3.B > 0) && (Main.wallLight[Main.tile[x7, y5].wall] || Main.caveParallax != 0f))
								{
									if (Lighting.lightMode >= 2 || r3.R >= 230 || r3.G >= 230 || r3.B >= 230 || Main.ugBackTransition != 0f)
									{
										r3.R = (byte)((float)r3.R * x1);
										r3.G = (byte)((float)r3.G * y1);
										r3.B = (byte)((float)r3.B * z);
										Main.spriteBatch.Draw(Main.backgroundTexture[numArray[3]], new Vector2((float)(this.bgStart + num4 * a2 + 16 * c + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray[3]] * b2 + 16 * d)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num16 + 16, 16 * d, 16, 16)), r3);
										if (Main.ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color g3 = r3;
											g3.R = (byte)((float)g3.R * Main.ugBackTransition);
											g3.G = (byte)((float)g3.G * Main.ugBackTransition);
											g3.B = (byte)((float)g3.B * Main.ugBackTransition);
											g3.A = (byte)((float)g3.A * Main.ugBackTransition);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[3]], new Vector2((float)(this.bgStart + num4 * a2 + 16 * c + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray1[3]] * b2 + 16 * d)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num16 + 16, 16 * d, 16, 16)), g3);
										}
									}
									else if ((r3.R > num2 || (double)r3.G > (double)num2 * 1.1 || (double)r3.B > (double)num2 * 1.2) && !Main.tile[x7, y5].active())
									{
										Lighting.GetColor9Slice(x7, y5, ref colorArray);
										for (int e = 0; e < 9; e++)
										{
											int num17 = 0;
											int num18 = 0;
											int num19 = 4;
											int num20 = 4;
											Microsoft.Xna.Framework.Color b3 = r3;
											Microsoft.Xna.Framework.Color color4 = r3;
											switch (e)
											{
												case 0:
												{
													if (Main.tile[x7 - 1, y5 - 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 1:
												{
													num19 = 8;
													num17 = 4;
													if (Main.tile[x7, y5 - 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 2:
												{
													num17 = 12;
													if (Main.tile[x7 + 1, y5 - 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 3:
												{
													num20 = 8;
													num18 = 4;
													if (Main.tile[x7 - 1, y5].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 4:
												{
													num19 = 8;
													num20 = 8;
													num17 = 4;
													num18 = 4;
													break;
												}
												case 5:
												{
													num17 = 12;
													num18 = 4;
													num20 = 8;
													if (Main.tile[x7 + 1, y5].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 6:
												{
													num18 = 12;
													if (Main.tile[x7 - 1, y5 + 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 7:
												{
													num19 = 8;
													num20 = 4;
													num17 = 4;
													num18 = 12;
													if (Main.tile[x7, y5 + 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 8:
												{
													num17 = 12;
													num18 = 12;
													if (Main.tile[x7 + 1, y5 + 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
											}
											b3.R = (byte)((r3.R + color4.R) / 2);
											b3.G = (byte)((r3.G + color4.G) / 2);
											b3.B = (byte)((r3.B + color4.B) / 2);
											b3.R = (byte)((float)b3.R * x1);
											b3.G = (byte)((float)b3.G * y1);
											b3.B = (byte)((float)b3.B * z);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray[3]], new Vector2((float)(this.bgStart + num4 * a2 + 16 * c + num17 + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray[3]] * b2 + 16 * d + num18)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num17 + num16 + 16, 16 * d + num18, num19, num20)), b3);
											if (Main.ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color a3 = b3;
												a3.R = (byte)((float)a3.R * Main.ugBackTransition);
												a3.G = (byte)((float)a3.G * Main.ugBackTransition);
												a3.B = (byte)((float)a3.B * Main.ugBackTransition);
												a3.A = (byte)((float)a3.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[3]], new Vector2((float)(this.bgStart + num4 * a2 + 16 * c + num17 + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray1[3]] * b2 + 16 * d + num18)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num17 + num16 + 16, 16 * d + num18, num19, num20)), a3);
											}
										}
									}
									else if (r3.R > num3 || (double)r3.G > (double)num3 * 1.1 || (double)r3.B > (double)num3 * 1.2)
									{
										Lighting.GetColor4Slice(x7, y5, ref colorArray);
										for (int f = 0; f < 4; f++)
										{
											int num21 = 0;
											int num22 = 0;
											Microsoft.Xna.Framework.Color r4 = r3;
											Microsoft.Xna.Framework.Color color5 = colorArray[f];
											switch (f)
											{
												case 1:
												{
													num21 = 8;
													break;
												}
												case 2:
												{
													num22 = 8;
													break;
												}
												case 3:
												{
													num21 = 8;
													num22 = 8;
													break;
												}
											}
											r4.R = (byte)((r3.R + color5.R) / 2);
											r4.G = (byte)((r3.G + color5.G) / 2);
											r4.B = (byte)((r3.B + color5.B) / 2);
											r4.R = (byte)((float)r4.R * x1);
											r4.G = (byte)((float)r4.G * y1);
											r4.B = (byte)((float)r4.B * z);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray[3]], new Vector2((float)(this.bgStart + num4 * a2 + 16 * c + num21 + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray[3]] * b2 + 16 * d + num22)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num21 + num16 + 16, 16 * d + num22, 8, 8)), r4);
											if (Main.ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color g4 = r4;
												g4.R = (byte)((float)g4.R * Main.ugBackTransition);
												g4.G = (byte)((float)g4.G * Main.ugBackTransition);
												g4.B = (byte)((float)g4.B * Main.ugBackTransition);
												g4.A = (byte)((float)g4.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[3]], new Vector2((float)(this.bgStart + num4 * a2 + 16 * c + num21 + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray1[3]] * b2 + 16 * d + num22)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num21 + num16 + 16, 16 * d + num22, 8, 8)), g4);
											}
										}
									}
									else
									{
										r3.R = (byte)((float)r3.R * x1);
										r3.G = (byte)((float)r3.G * y1);
										r3.B = (byte)((float)r3.B * z);
										Main.spriteBatch.Draw(Main.backgroundTexture[numArray[3]], new Vector2((float)(this.bgStart + num4 * a2 + 16 * c + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray[3]] * b2 + 16 * d)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num16 + 16, 16 * d, 16, 16)), r3);
										if (Main.ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color b4 = r3;
											b4.R = (byte)((float)b4.R * Main.ugBackTransition);
											b4.G = (byte)((float)b4.G * Main.ugBackTransition);
											b4.B = (byte)((float)b4.B * Main.ugBackTransition);
											b4.A = (byte)((float)b4.A * Main.ugBackTransition);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[3]], new Vector2((float)(this.bgStart + num4 * a2 + 16 * c + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray1[3]] * b2 + 16 * d)) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num16 + 16, 16 * d, 16, 16)), b4);
										}
									}
								}
							}
						}
					}
				}
				num4 = 128;
				if (flag)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num4 + (double)Main.screenPosition.X * this.bgParallax, (double)num4) - (double)(num4 / 2)) - (int)vector21.X;
					this.bgLoops = (Main.screenWidth + (int)vector21.X * 2) / num4 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					for (int g5 = 0; g5 < this.bgLoops; g5++)
					{
						for (int h = 0; h < num4 / 16; h++)
						{
							float single12 = (float)(this.bgStart + num4 * g5 + h * 16 + 8);
							float single13 = (float)this.bgTop;
							Microsoft.Xna.Framework.Color r5 = Lighting.GetColor((int)((single12 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + single13) / 16f));
							r5.R = (byte)((float)r5.R * x1);
							r5.G = (byte)((float)r5.G * y1);
							r5.B = (byte)((float)r5.B * z);
							Main.spriteBatch.Draw(Main.backgroundTexture[numArray[4]], new Vector2((float)(this.bgStart + num4 * g5 + 16 * h + num16), (float)this.bgTop) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * h + num16 + 16, Main.magmaBGFrame * 16, 16, 16)), r5);
							if (Main.ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color a4 = r5;
								a4.R = (byte)((float)a4.R * Main.ugBackTransition);
								a4.G = (byte)((float)a4.G * Main.ugBackTransition);
								a4.B = (byte)((float)a4.B * Main.ugBackTransition);
								a4.A = (byte)((float)a4.A * Main.ugBackTransition);
								Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[4]], new Vector2((float)(this.bgStart + num4 * g5 + 16 * h + num16), (float)this.bgTop) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * h + num16 + 16, Main.magmaBGFrame * 16, 16, 16)), a4);
							}
						}
					}
				}
			}
			this.bgTop = (int)((float)((int)num * 16) - Main.screenPosition.Y + 16f + 600f) - 8;
			bool flag3 = false;
			if (num * 16 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgStart = (int)(-Math.IEEERemainder((double)num4 + (double)Main.screenPosition.X * this.bgParallax, (double)num4) - (double)(num4 / 2)) - (int)vector21.X;
				this.bgLoops = (Main.screenWidth + (int)vector21.X * 2) / num4 + 2;
				if (num * 16 + (double)Main.screenHeight >= (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)vector21.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)vector21.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if ((float)(Main.maxTilesY - 200) * 16f < Main.screenPosition.Y + (float)Main.screenHeight)
				{
					this.bgLoopsY = (int)Math.Ceiling((double)(((float)(Main.maxTilesY - 200) * 16f - Main.screenPosition.Y - (float)this.bgStartY) / (float)Main.backgroundHeight[2]));
					flag3 = true;
				}
				num2 = (int)((double)num2 * 1.5);
				num3 = (int)((double)num3 * 1.5);
				float x8 = (float)this.bgStart + Main.screenPosition.X;
				x8 = -(float)Math.IEEERemainder((double)x8, 16);
				int num23 = (int)((float)Math.Round((double)x8));
				if (num23 == -8)
				{
					num23 = 8;
				}
				for (int i1 = 0; i1 < this.bgLoops; i1++)
				{
					for (int j1 = 0; j1 < this.bgLoopsY; j1++)
					{
						for (int k1 = 0; k1 < num4 / 16; k1++)
						{
							for (int l1 = 0; l1 < 6; l1++)
							{
								float single14 = (float)(this.bgStartY + j1 * 96 + l1 * 16 + 8);
								float single15 = (float)(this.bgStart + num4 * i1 + k1 * 16 + 8);
								int x9 = (int)((single15 + Main.screenPosition.X) / 16f);
								int y6 = (int)((single14 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color b5 = Lighting.GetColor(x9, y6);
								if (Main.tile[x9, y6] == null)
								{
									Main.tile[x9, y6] = new Tile();
								}
								bool flag4 = false;
								if (Main.caveParallax != 0f)
								{
									if (Main.tile[x9 - 1, y6] == null)
									{
										Main.tile[x9 - 1, y6] = new Tile();
									}
									if (Main.tile[x9 + 1, y6] == null)
									{
										Main.tile[x9 + 1, y6] = new Tile();
									}
									if (Main.wallLight[Main.tile[x9, y6].wall] || Main.wallLight[Main.tile[x9 - 1, y6].wall] || Main.wallLight[Main.tile[x9 + 1, y6].wall])
									{
										flag4 = true;
									}
								}
								else if (Main.wallLight[Main.tile[x9, y6].wall])
								{
									flag4 = true;
								}
								if ((flag4 || b5.R == 0 || b5.G == 0 || b5.B == 0) && (b5.R > 0 || b5.G > 0 || b5.B > 0 || y6 > Main.maxTilesY - 300) && (Main.wallLight[Main.tile[x9, y6].wall] || Main.caveParallax != 0f))
								{
									if (Lighting.lightMode >= 2 || b5.R >= 230 || b5.G >= 230 || b5.B >= 230)
									{
										b5.R = (byte)((float)b5.R * x1);
										b5.G = (byte)((float)b5.G * y1);
										b5.B = (byte)((float)b5.B * z);
										SpriteBatch spriteBatch = Main.spriteBatch;
										Texture2D texture2D = Main.backgroundTexture[numArray[5]];
										Vector2 vector22 = new Vector2((float)(this.bgStart + num4 * i1 + 16 * k1 + num23), (float)(this.bgStartY + Main.backgroundHeight[2] * j1 + 16 * l1)) + vector21;
										Microsoft.Xna.Framework.Rectangle? nullable = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * k1 + num23 + 16, 16 * l1 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16));
										vector2 = new Vector2();
										spriteBatch.Draw(texture2D, vector22, nullable, b5, 0f, vector2, 1f, SpriteEffects.None, 0f);
									}
									else if ((b5.R > num2 || (double)b5.G > (double)num2 * 1.1 || (double)b5.B > (double)num2 * 1.2) && !Main.tile[x9, y6].active())
									{
										Lighting.GetColor9Slice(x9, y6, ref colorArray);
										for (int m1 = 0; m1 < 9; m1++)
										{
											int num24 = 0;
											int num25 = 0;
											int num26 = 4;
											int num27 = 4;
											Microsoft.Xna.Framework.Color r6 = b5;
											Microsoft.Xna.Framework.Color color6 = b5;
											switch (m1)
											{
												case 0:
												{
													if (Main.tile[x9 - 1, y6 - 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 1:
												{
													num26 = 8;
													num24 = 4;
													if (Main.tile[x9, y6 - 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 2:
												{
													num24 = 12;
													if (Main.tile[x9 + 1, y6 - 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 3:
												{
													num27 = 8;
													num25 = 4;
													if (Main.tile[x9 - 1, y6].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 4:
												{
													num26 = 8;
													num27 = 8;
													num24 = 4;
													num25 = 4;
													break;
												}
												case 5:
												{
													num24 = 12;
													num25 = 4;
													num27 = 8;
													if (Main.tile[x9 + 1, y6].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 6:
												{
													num25 = 12;
													if (Main.tile[x9 - 1, y6 + 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 7:
												{
													num26 = 8;
													num27 = 4;
													num24 = 4;
													num25 = 12;
													if (Main.tile[x9, y6 + 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 8:
												{
													num24 = 12;
													num25 = 12;
													if (Main.tile[x9 + 1, y6 + 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
											}
											r6.R = (byte)((b5.R + color6.R) / 2);
											r6.G = (byte)((b5.G + color6.G) / 2);
											r6.B = (byte)((b5.B + color6.B) / 2);
											r6.R = (byte)((float)r6.R * x1);
											r6.G = (byte)((float)r6.G * y1);
											r6.B = (byte)((float)r6.B * z);
											SpriteBatch spriteBatch1 = Main.spriteBatch;
											Texture2D texture2D1 = Main.backgroundTexture[numArray[5]];
											Vector2 vector23 = new Vector2((float)(this.bgStart + num4 * i1 + 16 * k1 + num24 + num23), (float)(this.bgStartY + Main.backgroundHeight[2] * j1 + 16 * l1 + num25)) + vector21;
											Microsoft.Xna.Framework.Rectangle? nullable1 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * k1 + num24 + num23 + 16, 16 * l1 + Main.backgroundHeight[2] * Main.magmaBGFrame + num25, num26, num27));
											vector2 = new Vector2();
											spriteBatch1.Draw(texture2D1, vector23, nullable1, r6, 0f, vector2, 1f, SpriteEffects.None, 0f);
										}
									}
									else if (b5.R > num3 || (double)b5.G > (double)num3 * 1.1 || (double)b5.B > (double)num3 * 1.2)
									{
										Lighting.GetColor4Slice(x9, y6, ref colorArray);
										for (int n1 = 0; n1 < 4; n1++)
										{
											int num28 = 0;
											int num29 = 0;
											Microsoft.Xna.Framework.Color g6 = b5;
											Microsoft.Xna.Framework.Color color7 = colorArray[n1];
											switch (n1)
											{
												case 1:
												{
													num28 = 8;
													break;
												}
												case 2:
												{
													num29 = 8;
													break;
												}
												case 3:
												{
													num28 = 8;
													num29 = 8;
													break;
												}
											}
											g6.R = (byte)((b5.R + color7.R) / 2);
											g6.G = (byte)((b5.G + color7.G) / 2);
											g6.B = (byte)((b5.B + color7.B) / 2);
											g6.R = (byte)((float)g6.R * x1);
											g6.G = (byte)((float)g6.G * y1);
											g6.B = (byte)((float)g6.B * z);
											SpriteBatch spriteBatch2 = Main.spriteBatch;
											Texture2D texture2D2 = Main.backgroundTexture[numArray[5]];
											Vector2 vector24 = new Vector2((float)(this.bgStart + num4 * i1 + 16 * k1 + num28 + num23), (float)(this.bgStartY + Main.backgroundHeight[2] * j1 + 16 * l1 + num29)) + vector21;
											Microsoft.Xna.Framework.Rectangle? nullable2 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * k1 + num28 + num23 + 16, 16 * l1 + Main.backgroundHeight[2] * Main.magmaBGFrame + num29, 8, 8));
											vector2 = new Vector2();
											spriteBatch2.Draw(texture2D2, vector24, nullable2, g6, 0f, vector2, 1f, SpriteEffects.None, 0f);
										}
									}
									else
									{
										b5.R = (byte)((float)b5.R * x1);
										b5.G = (byte)((float)b5.G * y1);
										b5.B = (byte)((float)b5.B * z);
										SpriteBatch spriteBatch3 = Main.spriteBatch;
										Texture2D texture2D3 = Main.backgroundTexture[numArray[5]];
										Vector2 vector25 = new Vector2((float)(this.bgStart + num4 * i1 + 16 * k1 + num23), (float)(this.bgStartY + Main.backgroundHeight[2] * j1 + 16 * l1)) + vector21;
										Microsoft.Xna.Framework.Rectangle? nullable3 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * k1 + num23 + 16, 16 * l1 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16));
										vector2 = new Vector2();
										spriteBatch3.Draw(texture2D3, vector25, nullable3, b5, 0f, vector2, 1f, SpriteEffects.None, 0f);
									}
								}
							}
						}
					}
				}
				if (flag3)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num4 + (double)Main.screenPosition.X * this.bgParallax, (double)num4) - (double)(num4 / 2)) - (int)vector21.X;
					this.bgLoops = (Main.screenWidth + (int)vector21.X * 2) / num4 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					for (int o1 = 0; o1 < this.bgLoops; o1++)
					{
						for (int p1 = 0; p1 < num4 / 16; p1++)
						{
							float single16 = (float)(this.bgStart + num4 * o1 + p1 * 16 + 8);
							float single17 = (float)this.bgTop;
							Microsoft.Xna.Framework.Color b6 = Lighting.GetColor((int)((single16 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + single17) / 16f));
							b6.R = (byte)((float)b6.R * x1);
							b6.G = (byte)((float)b6.G * y1);
							b6.B = (byte)((float)b6.B * z);
							Main.spriteBatch.Draw(Main.backgroundTexture[numArray[6]], new Vector2((float)(this.bgStart + num4 * o1 + 16 * p1 + num23), (float)this.bgTop) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p1 + num23 + 16, Main.magmaBGFrame * 16, 16, 16)), b6);
							if (Main.ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color a5 = b6;
								a5.R = (byte)((float)a5.R * Main.ugBackTransition);
								a5.G = (byte)((float)a5.G * Main.ugBackTransition);
								a5.B = (byte)((float)a5.B * Main.ugBackTransition);
								a5.A = (byte)((float)a5.A * Main.ugBackTransition);
								Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[6]], new Vector2((float)(this.bgStart + num4 * o1 + 16 * p1 + num23), (float)this.bgTop) + vector21, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p1 + num23 + 16, Main.magmaBGFrame * 16, 16, 16)), a5);
							}
						}
					}
				}
			}
			Lighting.brightness = Lighting.defBrightness;
			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
		}

		protected void DrawBlack(bool force = false)
		{
		}

		private static void DrawBreath(int heartCount)
		{
			bool flag = false;
			if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && Main.player[Main.myPlayer].lavaWet)
			{
				flag = true;
			}
			else if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && Main.player[Main.myPlayer].breath == Main.player[Main.myPlayer].breathMax)
			{
				flag = true;
			}
			Vector2 top = (Main.player[Main.myPlayer].Top + new Vector2(0f, Main.player[Main.myPlayer].gfxOffY)) - Main.screenPosition;
			Vector2 vector2 = new Vector2(-125f, -100f);
			if (Main.playerInventory && Main.screenHeight < 1000)
			{
				vector2.Y = (float)(Main.player[Main.myPlayer].height - 20);
			}
			if (Main.player[Main.myPlayer].breath < Main.player[Main.myPlayer].breathMax && !Main.player[Main.myPlayer].ghost && !flag)
			{
				int num = Main.player[Main.myPlayer].breathMax / 20;
				int num1 = 20;
				for (int i = 1; i < Main.player[Main.myPlayer].breathMax / num1 + 1; i++)
				{
					int num2 = 255;
					float single = 1f;
					if (Main.player[Main.myPlayer].breath < i * num1)
					{
						float single1 = (float)(Main.player[Main.myPlayer].breath - (i - 1) * num1) / (float)num1;
						num2 = (int)(30f + 225f * single1);
						if (num2 < 30)
						{
							num2 = 30;
						}
						single = single1 / 4f + 0.75f;
						if ((double)single < 0.75)
						{
							single = 0.75f;
						}
					}
					else
					{
						num2 = 255;
					}
					int num3 = 0;
					int num4 = 0;
					if (i > 10)
					{
						num3 = num3 - 260;
						num4 = num4 + 26;
					}
					SpriteBatch spriteBatch = Main.spriteBatch;
					Texture2D texture2D = Main.bubbleTexture;
					Vector2 vector21 = (top + vector2) + new Vector2((float)(26 * (i - 1) + num3), 32f + ((float)Main.bubbleTexture.Height - (float)Main.bubbleTexture.Height * single) / 2f + (float)num4);
					Microsoft.Xna.Framework.Rectangle? nullable = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.bubbleTexture.Width, Main.bubbleTexture.Height));
					Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(num2, num2, num2, num2);
					Vector2 vector22 = new Vector2();
					spriteBatch.Draw(texture2D, vector21, nullable, color, 0f, vector22, single, SpriteEffects.None, 0f);
				}
			}
			if (Main.player[Main.myPlayer].lavaTime < Main.player[Main.myPlayer].lavaMax && !Main.player[Main.myPlayer].ghost && flag)
			{
				int num5 = Main.player[Main.myPlayer].lavaMax / 10;
				int num6 = Main.player[Main.myPlayer].breathMax / num5;
				for (int j = 1; j < Main.player[Main.myPlayer].lavaMax / num5 + 1; j++)
				{
					int num7 = 255;
					float single2 = 1f;
					if (Main.player[Main.myPlayer].lavaTime < j * num5)
					{
						float single3 = (float)(Main.player[Main.myPlayer].lavaTime - (j - 1) * num5) / (float)num5;
						num7 = (int)(30f + 225f * single3);
						if (num7 < 30)
						{
							num7 = 30;
						}
						single2 = single3 / 4f + 0.75f;
						if ((double)single2 < 0.75)
						{
							single2 = 0.75f;
						}
					}
					else
					{
						num7 = 255;
					}
					int num8 = 0;
					int num9 = 0;
					if (j > 10)
					{
						num8 = num8 - 260;
						num9 = num9 + 26;
					}
					SpriteBatch spriteBatch1 = Main.spriteBatch;
					Texture2D texture2D1 = Main.flameTexture;
					Vector2 vector23 = (top + vector2) + new Vector2((float)(26 * (j - 1) + num8), 32f + ((float)Main.flameTexture.Height - (float)Main.flameTexture.Height * single2) / 2f + (float)num9);
					Microsoft.Xna.Framework.Rectangle? nullable1 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.bubbleTexture.Width, Main.bubbleTexture.Height));
					Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color(num7, num7, num7, num7);
					Vector2 vector24 = new Vector2();
					spriteBatch1.Draw(texture2D1, vector23, nullable1, color1, 0f, vector24, single2, SpriteEffects.None, 0f);
				}
			}
		}

		protected void DrawCachedNPCs(List<int> npcCache, bool behindTiles)
		{
			for (int i = 0; i < npcCache.Count; i++)
			{
				try
				{
					this.DrawNPC(npcCache[i], behindTiles);
				}
				catch
				{
					Main.npc[npcCache[i]].active = false;
				}
			}
		}

		protected void DrawCachedProjs(List<int> projCache)
		{
			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, this.Rasterizer, null, this.Transform);
			for (int i = 0; i < projCache.Count; i++)
			{
				try
				{
					this.DrawProj(projCache[i]);
				}
				catch (Exception exception)
				{
					TimeLogger.DrawException(exception);
					Main.projectile[projCache[i]].active = false;
				}
			}
			Main.spriteBatch.End();
		}

		public void DrawCapture(Microsoft.Xna.Framework.Rectangle area, CaptureSettings settings)
		{
		}

		protected void DrawClothesWindow()
		{
			if (Main.npcChatText != "" || Main.playerInventory || Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC != -1 || Main.craftGuide)
			{
				Main.CancelClothesWindow(false);
				return;
			}
			int x = (int)(((double)Main.player[Main.myPlayer].position.X + (double)Main.player[Main.myPlayer].width * 0.5) / 16);
			int y = (int)(((double)Main.player[Main.myPlayer].position.Y + (double)Main.player[Main.myPlayer].height * 0.5) / 16);
			if (x < Main.dresserX - 5 || x > Main.dresserX + 6 || y < Main.dresserY - 4 || y > Main.dresserY + 5 || !Main.tile[Main.dresserX, Main.dresserY].active())
			{
				Main.CancelClothesWindow(false);
				return;
			}
			int num = Main.screenHeight / 2 + 60;
			int width = Main.screenWidth / 2 - Main.clothesStyleBackTexture.Width / 2;
			int num1 = num + 32;
			int num2 = width + 22;
			int num3 = width + 234;
			int num4 = num + 18;
			if (Main.selClothes == 0)
			{
				Main.selColor = Main.player[Main.myPlayer].shirtColor;
			}
			if (Main.selClothes == 1)
			{
				Main.selColor = Main.player[Main.myPlayer].underShirtColor;
			}
			if (Main.selClothes == 2)
			{
				Main.selColor = Main.player[Main.myPlayer].pantsColor;
			}
			if (Main.selClothes == 3)
			{
				Main.selColor = Main.player[Main.myPlayer].shoeColor;
			}
			SpriteBatch spriteBatch = Main.spriteBatch;
			Texture2D texture2D = Main.clothesStyleBackTexture;
			Vector2 vector2 = new Vector2((float)width, (float)num);
			Microsoft.Xna.Framework.Rectangle? nullable = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.clothesStyleBackTexture.Width, Main.clothesStyleBackTexture.Height));
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
			Vector2 vector21 = new Vector2();
			spriteBatch.Draw(texture2D, vector2, nullable, color, 0f, vector21, 1f, SpriteEffects.None, 0f);
			if (Main.mouseX > width && Main.mouseX < width + Main.clothesStyleBackTexture.Width && Main.mouseY > num && Main.mouseY < num + Main.clothesStyleBackTexture.Height)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			int num5 = (Main.mouseTextColor * 2 + 255) / 3;
			Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color(num5, (int)((double)num5 / 1.1), num5 / 2, num5);
			float single = 0.9f;
			string str = "Change";
			int num6 = width + 256;
			int num7 = num + 94;
			bool flag = false;
			if (Main.oldClothesColor[0] != Main.player[Main.myPlayer].shirtColor || Main.oldClothesColor[1] != Main.player[Main.myPlayer].underShirtColor || Main.oldClothesColor[2] != Main.player[Main.myPlayer].pantsColor || Main.oldClothesColor[3] != Main.player[Main.myPlayer].shoeColor)
			{
				flag = true;
			}
			if (!flag || Main.mouseX <= num6 || (float)Main.mouseX >= (float)num6 + Main.fontMouseText.MeasureString(str).X || Main.mouseY <= num7 || (float)Main.mouseY >= (float)num7 + Main.fontMouseText.MeasureString(str).Y)
			{
				if (Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = false;
			}
			else
			{
				single = 1.1f;
				if (!Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			for (int i = 0; i < 5; i++)
			{
				int num8 = num6;
				int num9 = num7;
				Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
				if (i == 0)
				{
					num8 = num8 - 2;
				}
				if (i == 1)
				{
					num8 = num8 + 2;
				}
				if (i == 2)
				{
					num9 = num9 - 2;
				}
				if (i == 3)
				{
					num9 = num9 + 2;
				}
				if (i == 4)
				{
					black = (flag ? color1 : new Microsoft.Xna.Framework.Color(100, 100, 100));
				}
				Vector2 vector22 = Main.fontMouseText.MeasureString(str);
				vector22 = vector22 * 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, str, new Vector2((float)num8 + vector22.X, (float)num9 + vector22.Y), black, 0f, vector22, single, SpriteEffects.None, 0f);
			}
			single = 0.9f;
			string str1 = "Cancel";
			num6 = num6 + 130;
			if (Main.mouseX <= num6 || (float)Main.mouseX >= (float)num6 + Main.fontMouseText.MeasureString(str1).X || Main.mouseY <= num7 || (float)Main.mouseY >= (float)num7 + Main.fontMouseText.MeasureString(str1).Y)
			{
				if (Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = false;
			}
			else
			{
				single = 1.1f;
				if (!Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			for (int j = 0; j < 5; j++)
			{
				int num10 = num6;
				int num11 = num7;
				Microsoft.Xna.Framework.Color black1 = Microsoft.Xna.Framework.Color.Black;
				if (j == 0)
				{
					num10 = num10 - 2;
				}
				if (j == 1)
				{
					num10 = num10 + 2;
				}
				if (j == 2)
				{
					num11 = num11 - 2;
				}
				if (j == 3)
				{
					num11 = num11 + 2;
				}
				if (j == 4)
				{
					black1 = color1;
				}
				Vector2 vector23 = Main.fontMouseText.MeasureString(str1);
				vector23 = vector23 * 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, str1, new Vector2((float)num10 + vector23.X, (float)num11 + vector23.Y), black1, 0f, vector23, single, SpriteEffects.None, 0f);
			}
			if (Main.mouseLeft && Main.mouseLeftRelease)
			{
				if (Main.npcChatFocus1)
				{
					Main.SaveClothesWindow();
					return;
				}
				if (Main.npcChatFocus2)
				{
					Main.CancelClothesWindow(false);
					return;
				}
			}
			if (!Main.mouseLeft)
			{
				this.grabColorSlider = 0;
				Main.blockMouse = false;
			}
			int num12 = 167;
			Vector3 hsl = Main.rgbToHsl(Main.selColor);
			float x1 = hsl.X;
			float y1 = hsl.Y;
			float z = hsl.Z;
			if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f)
			{
				Main.hBar = x1;
				Main.sBar = y1;
				Main.lBar = z;
			}
			else
			{
				x1 = Main.hBar;
				y1 = Main.sBar;
				z = Main.lBar;
			}
			Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num2, (float)num1), Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num2 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num1 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if ((Main.mouseX > num2 - 4 && Main.mouseX < num2 + this.hueTexture.Width + 4 && Main.mouseY > num1 - 4 && Main.mouseY < num1 + this.hueTexture.Height + 4 || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 1;
				x1 = (float)(Main.mouseX - num2);
				x1 = x1 / (float)this.hueTexture.Width;
				if (x1 < 0f)
				{
					x1 = 0f;
				}
				if (x1 > 1f)
				{
					x1 = 1f;
				}
				Main.hBar = x1;
			}
			num1 = num1 + 26;
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num2, (float)num1), Microsoft.Xna.Framework.Color.White);
			for (int k = 0; k <= num12; k++)
			{
				float single1 = (float)k / (float)num12;
				Microsoft.Xna.Framework.Color rgb = Main.hslToRgb(x1, single1, z);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num2 + k + 5), (float)(num1 + 4)), rgb);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num2 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num1 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if ((Main.mouseX > num2 - 4 && Main.mouseX < num2 + this.hueTexture.Width + 4 && Main.mouseY > num1 - 4 && Main.mouseY < num1 + this.hueTexture.Height + 4 || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 2;
				y1 = (float)(Main.mouseX - num2);
				y1 = y1 / (float)this.hueTexture.Width;
				if (y1 < 0f)
				{
					y1 = 0f;
				}
				if (y1 > 1f)
				{
					y1 = 1f;
				}
				Main.sBar = y1;
			}
			num1 = num1 + 26;
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num2, (float)num1), Microsoft.Xna.Framework.Color.White);
			float single2 = 0.15f;
			for (int l = 0; l <= num12; l++)
			{
				float single3 = (float)l / (float)num12;
				Microsoft.Xna.Framework.Color rgb1 = Main.hslToRgb(x1, y1, single3);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num2 + l + 5), (float)(num1 + 4)), rgb1);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num2 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - single2) / (1f - single2)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num1 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if ((Main.mouseX > num2 - 4 && Main.mouseX < num2 + this.hueTexture.Width + 4 && Main.mouseY > num1 - 4 && Main.mouseY < num1 + this.hueTexture.Height + 4 || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 3;
				z = (float)(Main.mouseX - num2);
				z = z / (float)this.hueTexture.Width;
				if (z < 0f)
				{
					z = 0f;
				}
				if (z > 1f)
				{
					z = 1f;
				}
				z = z * (1f - single2) + single2;
				Main.lBar = z;
			}
			Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
			if (Main.selClothes == 0)
			{
				Main.player[Main.myPlayer].shirtColor = Main.selColor;
			}
			if (Main.selClothes == 1)
			{
				Main.player[Main.myPlayer].underShirtColor = Main.selColor;
			}
			if (Main.selClothes == 2)
			{
				Main.player[Main.myPlayer].pantsColor = Main.selColor;
			}
			if (Main.selClothes == 3)
			{
				Main.player[Main.myPlayer].shoeColor = Main.selColor;
			}
			int num13 = num3;
			int num14 = num4;
			for (int m = 0; m < 4; m++)
			{
				if (Main.selClothes != m)
				{
					SpriteBatch spriteBatch1 = Main.spriteBatch;
					Texture2D texture2D1 = Main.inventoryBack8Texture;
					Vector2 vector24 = new Vector2((float)num13, (float)num14);
					Microsoft.Xna.Framework.Rectangle? nullable1 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height));
					Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
					Vector2 vector25 = new Vector2();
					spriteBatch1.Draw(texture2D1, vector24, nullable1, color2, 0f, vector25, 1f, SpriteEffects.None, 0f);
				}
				else
				{
					SpriteBatch spriteBatch2 = Main.spriteBatch;
					Texture2D texture2D2 = Main.inventoryBack14Texture;
					Vector2 vector26 = new Vector2((float)num13, (float)num14);
					Microsoft.Xna.Framework.Rectangle? nullable2 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height));
					Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
					Vector2 vector27 = new Vector2();
					spriteBatch2.Draw(texture2D2, vector26, nullable2, color3, 0f, vector27, 1f, SpriteEffects.None, 0f);
				}
				if (Main.mouseX > num13 && Main.mouseX < num13 + Main.inventoryBackTexture.Width && Main.mouseY > num14 && Main.mouseY < num14 + Main.inventoryBackTexture.Height && Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.mouseLeftRelease = false;
					Main.selClothes = m;
					Main.PlaySound(12, -1, -1, 1);
					Main.hBar = -1f;
					Main.lBar = -1f;
					Main.sBar = -1f;
				}
				float width1 = (float)(num13 + Main.inventoryBackTexture.Width / 2 - Main.clothesTexture[m].Width / 2);
				float height = (float)(num14 + Main.inventoryBackTexture.Height / 2 - Main.clothesTexture[m].Height / 2);
				Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
				if (m == 0)
				{
					white = Main.player[Main.myPlayer].shirtColor;
				}
				if (m == 1)
				{
					white = Main.player[Main.myPlayer].underShirtColor;
				}
				if (m == 2)
				{
					white = Main.player[Main.myPlayer].pantsColor;
				}
				if (m == 3)
				{
					white = Main.player[Main.myPlayer].shoeColor;
				}
				SpriteBatch spriteBatch3 = Main.spriteBatch;
				Texture2D texture2D3 = Main.clothesTexture[m];
				Vector2 vector28 = new Vector2(width1, height);
				Microsoft.Xna.Framework.Rectangle? nullable3 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.clothesTexture[m].Width, Main.clothesTexture[m].Height));
				Vector2 vector29 = new Vector2();
				spriteBatch3.Draw(texture2D3, vector28, nullable3, white, 0f, vector29, 1f, SpriteEffects.None, 0f);
				num13 = num13 + 56;
			}
		}

		protected void DrawDust()
		{
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X - 500, (int)Main.screenPosition.Y - 50, Main.screenWidth + 1000, Main.screenHeight + 100);
			rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X - 1000, (int)Main.screenPosition.Y - 1050, Main.screenWidth + 2000, Main.screenHeight + 2100);
			Microsoft.Xna.Framework.Rectangle rectangle1 = rectangle;
			rectangle = rectangle1;
			Microsoft.Xna.Framework.Rectangle rectangle2 = rectangle1;
			ArmorShaderData armorShaderDatum = null;
			Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, this.Transform);
			for (int i = 0; i < Main.numDust; i++)
			{
				Dust dust = Main.dust[i];
				if (dust.active)
				{
					if (dust.type >= 130 && dust.type <= 134 || dust.type >= 219 && dust.type <= 223 || dust.type == 226)
					{
						rectangle = rectangle2;
					}
					if (!(new Microsoft.Xna.Framework.Rectangle((int)dust.position.X, (int)dust.position.Y, 4, 4)).Intersects(rectangle))
					{
						dust.active = false;
					}
					else
					{
						float single = dust.scale;
						if (dust.shader != armorShaderDatum)
						{
							Main.spriteBatch.End();
							armorShaderDatum = dust.shader;
							if (armorShaderDatum != null)
							{
								Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, this.Transform);
								dust.shader.Apply(null, null);
							}
							else
							{
								Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, DepthStencilState.None, RasterizerState.CullNone, null, this.Transform);
							}
						}
						if (dust.type >= 130 && dust.type <= 134)
						{
							float single1 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							single1 = single1 * 0.3f;
							single1 = single1 * 10f;
							if (single1 > 10f)
							{
								single1 = 10f;
							}
							for (int j = 0; (float)j < single1; j++)
							{
								Vector2 vector2 = dust.velocity;
								Vector2 vector21 = dust.position - (vector2 * (float)j);
								float single2 = dust.scale * (1f - (float)j / 10f);
								Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((double)dust.position.X + 4) / 16, (int)((double)dust.position.Y + 4) / 16);
								color = dust.GetAlpha(color);
								Main.spriteBatch.Draw(Main.dustTexture, vector21 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color, dust.rotation, new Vector2(4f, 4f), single2, SpriteEffects.None, 0f);
							}
						}
						else if (dust.type >= 219 && dust.type <= 223 && dust.fadeIn == 0f)
						{
							float single3 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							single3 = single3 * 0.3f;
							single3 = single3 * 10f;
							if (single3 > 10f)
							{
								single3 = 10f;
							}
							for (int k = 0; (float)k < single3; k++)
							{
								Vector2 vector22 = dust.velocity;
								Vector2 vector23 = dust.position - (vector22 * (float)k);
								float single4 = dust.scale * (1f - (float)k / 10f);
								Microsoft.Xna.Framework.Color alpha = Lighting.GetColor((int)((double)dust.position.X + 4) / 16, (int)((double)dust.position.Y + 4) / 16);
								alpha = dust.GetAlpha(alpha);
								Main.spriteBatch.Draw(Main.dustTexture, vector23 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), alpha, dust.rotation, new Vector2(4f, 4f), single4, SpriteEffects.None, 0f);
							}
						}
						else if (dust.type == 264 && dust.fadeIn == 0f)
						{
							float single5 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							single5 = single5 * 10f;
							if (single5 > 10f)
							{
								single5 = 10f;
							}
							for (int l = 0; (float)l < single5; l++)
							{
								Vector2 vector24 = dust.velocity;
								Vector2 vector25 = dust.position - (vector24 * (float)l);
								float single6 = dust.scale * (1f - (float)l / 10f);
								Microsoft.Xna.Framework.Color color1 = Lighting.GetColor((int)((double)dust.position.X + 4) / 16, (int)((double)dust.position.Y + 4) / 16);
								color1 = dust.GetAlpha(color1) * 0.3f;
								Main.spriteBatch.Draw(Main.dustTexture, vector25 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color1, dust.rotation, new Vector2(5f), single6, SpriteEffects.None, 0f);
								color1 = dust.GetColor(color1);
								Main.spriteBatch.Draw(Main.dustTexture, vector25 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color1, dust.rotation, new Vector2(5f), single6, SpriteEffects.None, 0f);
							}
						}
						else if (dust.type == 226 && dust.fadeIn == 0f)
						{
							float single7 = Math.Abs(dust.velocity.X) + Math.Abs(dust.velocity.Y);
							single7 = single7 * 0.3f;
							single7 = single7 * 10f;
							if (single7 > 10f)
							{
								single7 = 10f;
							}
							for (int m = 0; (float)m < single7; m++)
							{
								Vector2 vector26 = dust.velocity;
								Vector2 vector27 = dust.position - (vector26 * (float)m);
								float single8 = dust.scale * (1f - (float)m / 10f);
								Microsoft.Xna.Framework.Color alpha1 = Lighting.GetColor((int)((double)dust.position.X + 4) / 16, (int)((double)dust.position.Y + 4) / 16);
								alpha1 = dust.GetAlpha(alpha1);
								Main.spriteBatch.Draw(Main.dustTexture, vector27 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), alpha1, dust.rotation, new Vector2(4f, 4f), single8, SpriteEffects.None, 0f);
							}
						}
						Microsoft.Xna.Framework.Color white = Lighting.GetColor((int)((double)dust.position.X + 4) / 16, (int)((double)dust.position.Y + 4) / 16);
						if (dust.type == 6 || dust.type == 15 || dust.noLight && dust.type < 86 && dust.type > 91 || dust.type >= 59 && dust.type <= 64)
						{
							white = Microsoft.Xna.Framework.Color.White;
						}
						white = dust.GetAlpha(white);
						if (dust.type == 213)
						{
							single = 1f;
						}
						Main.spriteBatch.Draw(Main.dustTexture, dust.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), white, dust.rotation, new Vector2(4f, 4f), single, SpriteEffects.None, 0f);
						if (dust.color != new Microsoft.Xna.Framework.Color())
						{
							Main.spriteBatch.Draw(Main.dustTexture, dust.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), dust.GetColor(white), dust.rotation, new Vector2(4f, 4f), single, SpriteEffects.None, 0f);
						}
						if (white == Microsoft.Xna.Framework.Color.Black)
						{
							dust.active = false;
						}
					}
				}
			}
			Main.spriteBatch.End();
			Main.pixelShader.CurrentTechnique.Passes[0].Apply();
			TimeLogger.DetailedDrawTime(25);
		}

		protected void DrawFPS()
		{
			if (Main.showFrameRate)
			{
				string str = string.Concat(Main.frameRate);
				object obj = str;
				object[] objArray = new object[] { obj, " (", Liquid.numLiquid + LiquidBuffer.numLiquidBuffer, ")" };
				str = string.Concat(objArray);
				object obj1 = str;
				object[] objArray1 = new object[] { obj1, " (", (int)(Main.gfxQuality * 100f), "%)" };
				str = string.Concat(objArray1);
				int num = 4;
				if (!Main.gameMenu)
				{
					num = Main.screenHeight - 24;
				}
				SpriteBatch spriteBatch = Main.spriteBatch;
				SpriteFont spriteFont = Main.fontMouseText;
				string str1 = string.Concat(str, " ", Main.debugWords);
				Vector2 vector2 = new Vector2(4f, (float)num);
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
				Vector2 vector21 = new Vector2();
				spriteBatch.DrawString(spriteFont, str1, vector2, color, 0f, vector21, 1f, SpriteEffects.None, 0f);
			}
		}

		protected void DrawGhost(Player drawPlayer, Vector2 Position, float shadow = 0f)
		{
			SpriteEffects spriteEffect = SpriteEffects.None;
			spriteEffect = (drawPlayer.direction != 1 ? SpriteEffects.FlipHorizontally : SpriteEffects.None);
			Microsoft.Xna.Framework.Color immuneAlpha = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)drawPlayer.position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)drawPlayer.position.Y + (double)drawPlayer.height * 0.5) / 16, new Microsoft.Xna.Framework.Color(Main.mouseTextColor / 2 + 100, Main.mouseTextColor / 2 + 100, Main.mouseTextColor / 2 + 100, Main.mouseTextColor / 2 + 100)), shadow);
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, Main.ghostTexture.Height / 4 * drawPlayer.ghostFrame, Main.ghostTexture.Width, Main.ghostTexture.Height / 4);
			Vector2 vector2 = new Vector2((float)rectangle.Width * 0.5f, (float)rectangle.Height * 0.5f);
			Main.spriteBatch.Draw(Main.ghostTexture, new Vector2((float)((int)(drawPlayer.position.X - Main.screenPosition.X + (float)(rectangle.Width / 2))), (float)((int)(drawPlayer.position.Y - Main.screenPosition.Y + (float)(rectangle.Height / 2)))), new Microsoft.Xna.Framework.Rectangle?(rectangle), immuneAlpha, 0f, vector2, 1f, spriteEffect, 0f);
		}

		protected void DrawGore()
		{
			Main.drawBackGore = false;
			for (int i = 0; i < 500; i++)
			{
				if (Main.gore[i].active && Main.gore[i].type > 0)
				{
					if (Main.gore[i].type < 706 || Main.gore[i].type > 717 || Main.gore[i].frame >= 7 && Main.gore[i].frame <= 9)
					{
						this.LoadGore(Main.gore[i].type);
						if (Main.gore[i].numFrames <= 1)
						{
							Microsoft.Xna.Framework.Color alpha = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)Main.goreTexture[Main.gore[i].type].Height * 0.5) / 16)));
							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.goreTexture[Main.gore[i].type].Width, Main.goreTexture[Main.gore[i].type].Height)), alpha, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
						}
						else
						{
							int height = Main.goreTexture[Main.gore[i].type].Height / Main.gore[i].numFrames;
							Microsoft.Xna.Framework.Color color = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)height * 0.5) / 16)));
							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(height / 2) - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, height * Main.gore[i].frame, Main.goreTexture[Main.gore[i].type].Width, height)), color, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(height / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
						}
					}
					else
					{
						Main.drawBackGore = true;
					}
				}
			}
			TimeLogger.DetailedDrawTime(24);
		}

		protected void DrawGoreBehind()
		{
			for (int i = 0; i < 500; i++)
			{
				if (Main.gore[i].active && Main.gore[i].type > 0 && Main.gore[i].type >= 706 && Main.gore[i].type <= 717 && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
				{
					this.LoadGore(Main.gore[i].type);
					if (Main.gore[i].numFrames <= 1)
					{
						Microsoft.Xna.Framework.Color alpha = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)Main.goreTexture[Main.gore[i].type].Height * 0.5) / 16)));
						Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.goreTexture[Main.gore[i].type].Width, Main.goreTexture[Main.gore[i].type].Height)), alpha, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
					}
					else
					{
						int height = Main.goreTexture[Main.gore[i].type].Height / Main.gore[i].numFrames;
						Microsoft.Xna.Framework.Color color = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)height * 0.5) / 16)));
						Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(height / 2) - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, height * Main.gore[i].frame, Main.goreTexture[Main.gore[i].type].Width, height)), color, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(height / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
					}
				}
			}
		}

		protected void DrawHairWindow()
		{
			object obj;
			object[] objArray;
			if (Main.npcChatText != "" || Main.playerInventory || Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.craftGuide)
			{
				Main.CancelHairWindow();
				return;
			}
			int num = 123;
			if (NPC.downedMartians)
			{
				num = num + 10;
			}
			if (NPC.downedMartians && NPC.downedMoonlord)
			{
				num++;
			}
			int num1 = Main.screenHeight / 2 + 60;
			int width = Main.screenWidth / 2 - Main.hairStyleBackTexture.Width / 2;
			int num2 = num1 + 42;
			int num3 = width + 22;
			int num4 = width + 234;
			int num5 = num1 + 18;
			Main.selColor = Main.player[Main.myPlayer].hairColor;
			SpriteBatch spriteBatch = Main.spriteBatch;
			Texture2D texture2D = Main.hairStyleBackTexture;
			Vector2 vector2 = new Vector2((float)width, (float)num1);
			Microsoft.Xna.Framework.Rectangle? nullable = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.hairStyleBackTexture.Width, Main.hairStyleBackTexture.Height));
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
			Vector2 vector21 = new Vector2();
			spriteBatch.Draw(texture2D, vector2, nullable, color, 0f, vector21, 1f, SpriteEffects.None, 0f);
			if ((new Microsoft.Xna.Framework.Rectangle(width, num1, Main.hairStyleBackTexture.Width, Main.hairStyleBackTexture.Height)).Contains(Main.MouseScreen.ToPoint()))
			{
				int scrollWheelValue = (Main.mouseState.ScrollWheelValue - Main.oldMouseWheel) / 120;
				scrollWheelValue = -scrollWheelValue;
				int num6 = Math.Sign(scrollWheelValue);
				while (scrollWheelValue != 0)
				{
					if (scrollWheelValue >= 0)
					{
						Main.hairStart = Main.hairStart + 5;
						Main.PlaySound(12, -1, -1, 1);
					}
					else
					{
						Main.hairStart = Main.hairStart - 5;
						Main.PlaySound(12, -1, -1, 1);
					}
					scrollWheelValue = scrollWheelValue - num6;
				}
			}
			if (Main.mouseX > width && Main.mouseX < width + Main.hairStyleBackTexture.Width && Main.mouseY > num1 && Main.mouseY < num1 + Main.hairStyleBackTexture.Height)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			int num7 = num4 - 18;
			int num8 = num5 + 74;
			if (Main.hairStart > 1)
			{
				if (Main.mouseX >= num7 && Main.mouseX <= num7 + Main.craftUpButtonTexture.Width && Main.mouseY >= num8 && Main.mouseY <= num8 + Main.craftUpButtonTexture.Height)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Main.hairStart = Main.hairStart - 15;
						Main.PlaySound(12, -1, -1, 1);
					}
				}
				SpriteBatch spriteBatch1 = Main.spriteBatch;
				Texture2D texture2D1 = Main.scrollLeftButtonTexture;
				Vector2 vector22 = new Vector2((float)num7, (float)num8);
				Microsoft.Xna.Framework.Rectangle? nullable1 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height));
				Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
				Vector2 vector23 = new Vector2();
				spriteBatch1.Draw(texture2D1, vector22, nullable1, color1, 0f, vector23, 1f, SpriteEffects.None, 0f);
			}
			if (Main.hairStart + 15 < num)
			{
				num7 = num7 + 296;
				if (Main.mouseX >= num7 && Main.mouseX <= num7 + Main.craftUpButtonTexture.Width && Main.mouseY >= num8 && Main.mouseY <= num8 + Main.craftUpButtonTexture.Height)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Main.hairStart = Main.hairStart + 15;
						Main.PlaySound(12, -1, -1, 1);
					}
				}
				SpriteBatch spriteBatch2 = Main.spriteBatch;
				Texture2D texture2D2 = Main.scrollRightButtonTexture;
				Vector2 vector24 = new Vector2((float)num7, (float)num8);
				Microsoft.Xna.Framework.Rectangle? nullable2 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height));
				Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
				Vector2 vector25 = new Vector2();
				spriteBatch2.Draw(texture2D2, vector24, nullable2, color2, 0f, vector25, 1f, SpriteEffects.None, 0f);
			}
			if (Main.hairStart + 15 >= num)
			{
				Main.hairStart = num - 15;
			}
			if (Main.hairStart < 0)
			{
				Main.hairStart = 0;
			}
			int num9 = 0;
			if (Main.oldHairStyle != Main.player[Main.myPlayer].hair)
			{
				num9 = (Main.player[Main.myPlayer].hair <= 51 ? num9 + 10000 : num9 + 50000);
			}
			if (Main.oldHairColor != Main.player[Main.myPlayer].hairColor)
			{
				num9 = num9 + 10000;
			}
			string str = "";
			string str1 = "";
			int num10 = 0;
			int num11 = 0;
			int num12 = 0;
			int num13 = 0;
			int num14 = num9;
			if (num14 < 0)
			{
				num14 = 0;
			}
			num9 = num14;
			if (num14 >= 1000000)
			{
				num10 = num14 / 1000000;
				num14 = num14 - num10 * 1000000;
			}
			if (num14 >= 10000)
			{
				num11 = num14 / 10000;
				num14 = num14 - num11 * 10000;
			}
			if (num14 >= 100)
			{
				num12 = num14 / 100;
				num14 = num14 - num12 * 100;
			}
			if (num14 >= 1)
			{
				num13 = num14;
			}
			if (num10 > 0)
			{
				obj = str1;
				objArray = new object[] { obj, num10, " ", Lang.inter[15], " " };
				str1 = string.Concat(objArray);
			}
			if (num11 > 0)
			{
				obj = str1;
				objArray = new object[] { obj, num11, " ", Lang.inter[16], " " };
				str1 = string.Concat(objArray);
			}
			if (num12 > 0)
			{
				obj = str1;
				objArray = new object[] { obj, num12, " ", Lang.inter[17], " " };
				str1 = string.Concat(objArray);
			}
			if (num13 > 0)
			{
				obj = str1;
				objArray = new object[] { obj, num13, " ", Lang.inter[18], " " };
				str1 = string.Concat(objArray);
			}
			str = string.Concat("Buy (", str1, ")");
			if (num9 == 0)
			{
				str = "Buy";
			}
			int num15 = (Main.mouseTextColor * 2 + 255) / 3;
			Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color(num15, (int)((double)num15 / 1.1), num15 / 2, num15);
			float single = 0.9f;
			string str2 = str;
			int num16 = width + 18;
			int num17 = num1 + 156;
			if (num9 > 0)
			{
				ItemSlot.DrawSavings(Main.spriteBatch, (float)num16, (float)(num17 - 70), true);
			}
			if (num9 <= 0 || Main.mouseX <= num16 || (float)Main.mouseX >= (float)num16 + Main.fontMouseText.MeasureString(str2).X || Main.mouseY <= num17 || (float)Main.mouseY >= (float)num17 + Main.fontMouseText.MeasureString(str2).Y)
			{
				if (Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = false;
			}
			else
			{
				single = 1.1f;
				if (!Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			for (int i = 0; i < 5; i++)
			{
				int num18 = num16;
				int num19 = num17;
				Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
				if (i == 0)
				{
					num18 = num18 - 2;
				}
				if (i == 1)
				{
					num18 = num18 + 2;
				}
				if (i == 2)
				{
					num19 = num19 - 2;
				}
				if (i == 3)
				{
					num19 = num19 + 2;
				}
				if (i == 4)
				{
					black = (num9 != 0 ? color3 : new Microsoft.Xna.Framework.Color(100, 100, 100));
				}
				Vector2 vector26 = Main.fontMouseText.MeasureString(str2);
				vector26 = vector26 * 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, str2, new Vector2((float)num18 + vector26.X, (float)num19 + vector26.Y), black, 0f, vector26, single, SpriteEffects.None, 0f);
			}
			single = 0.9f;
			string str3 = "Cancel";
			num16 = num16 + 130;
			if (Main.mouseX <= num16 || (float)Main.mouseX >= (float)num16 + Main.fontMouseText.MeasureString(str3).X || Main.mouseY <= num17 || (float)Main.mouseY >= (float)num17 + Main.fontMouseText.MeasureString(str3).Y)
			{
				if (Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = false;
			}
			else
			{
				single = 1.1f;
				if (!Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			for (int j = 0; j < 5; j++)
			{
				int num20 = num16;
				int num21 = num17;
				Microsoft.Xna.Framework.Color black1 = Microsoft.Xna.Framework.Color.Black;
				if (j == 0)
				{
					num20 = num20 - 2;
				}
				if (j == 1)
				{
					num20 = num20 + 2;
				}
				if (j == 2)
				{
					num21 = num21 - 2;
				}
				if (j == 3)
				{
					num21 = num21 + 2;
				}
				if (j == 4)
				{
					black1 = color3;
				}
				Vector2 vector27 = Main.fontMouseText.MeasureString(str3);
				vector27 = vector27 * 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, str3, new Vector2((float)num20 + vector27.X, (float)num21 + vector27.Y), black1, 0f, vector27, single, SpriteEffects.None, 0f);
			}
			if (Main.mouseLeft && Main.mouseLeftRelease)
			{
				if (Main.npcChatFocus1)
				{
					if (Main.player[Main.myPlayer].BuyItem(num9))
					{
						Main.BuyHairWindow();
						return;
					}
				}
				else if (Main.npcChatFocus2)
				{
					Main.CancelHairWindow();
					return;
				}
			}
			if (!Main.mouseLeft)
			{
				this.grabColorSlider = 0;
				Main.blockMouse = false;
			}
			int num22 = 167;
			Vector3 hsl = Main.rgbToHsl(Main.selColor);
			float x = hsl.X;
			float y = hsl.Y;
			float z = hsl.Z;
			if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f)
			{
				Main.hBar = x;
				Main.sBar = y;
				Main.lBar = z;
			}
			else
			{
				x = Main.hBar;
				y = Main.sBar;
				z = Main.lBar;
			}
			Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)num3, (float)num2), Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num3 + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num2 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if ((Main.mouseX > num3 - 4 && Main.mouseX < num3 + this.hueTexture.Width + 4 && Main.mouseY > num2 - 4 && Main.mouseY < num2 + this.hueTexture.Height + 4 || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 1;
				x = (float)(Main.mouseX - num3);
				x = x / (float)this.hueTexture.Width;
				if (x < 0f)
				{
					x = 0f;
				}
				if (x > 1f)
				{
					x = 1f;
				}
				Main.hBar = x;
			}
			num2 = num2 + 26;
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num3, (float)num2), Microsoft.Xna.Framework.Color.White);
			for (int k = 0; k <= num22; k++)
			{
				float single1 = (float)k / (float)num22;
				Microsoft.Xna.Framework.Color rgb = Main.hslToRgb(x, single1, z);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num3 + k + 5), (float)(num2 + 4)), rgb);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num3 + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num2 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if ((Main.mouseX > num3 - 4 && Main.mouseX < num3 + this.hueTexture.Width + 4 && Main.mouseY > num2 - 4 && Main.mouseY < num2 + this.hueTexture.Height + 4 || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 2;
				y = (float)(Main.mouseX - num3);
				y = y / (float)this.hueTexture.Width;
				if (y < 0f)
				{
					y = 0f;
				}
				if (y > 1f)
				{
					y = 1f;
				}
				Main.sBar = y;
			}
			num2 = num2 + 26;
			Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)num3, (float)num2), Microsoft.Xna.Framework.Color.White);
			float single2 = 0.15f;
			for (int l = 0; l <= num22; l++)
			{
				float single3 = (float)l / (float)num22;
				Microsoft.Xna.Framework.Color rgb1 = Main.hslToRgb(x, y, single3);
				Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(num3 + l + 5), (float)(num2 + 4)), rgb1);
			}
			Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)num3 + (float)(this.hueTexture.Width - 2) * ((Main.lBar - single2) / (1f - single2)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num2 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
			if ((Main.mouseX > num3 - 4 && Main.mouseX < num3 + this.hueTexture.Width + 4 && Main.mouseY > num2 - 4 && Main.mouseY < num2 + this.hueTexture.Height + 4 || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
			{
				this.grabColorSlider = 3;
				z = (float)(Main.mouseX - num3);
				z = z / (float)this.hueTexture.Width;
				if (z < 0f)
				{
					z = 0f;
				}
				if (z > 1f)
				{
					z = 1f;
				}
				z = z * (1f - single2) + single2;
				Main.lBar = z;
			}
			Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
			Main.player[Main.myPlayer].hairColor = Main.selColor;
			int num23 = num4;
			int num24 = num5;
			int num25 = Main.hairStart;
			int num26 = 0;
			int num27 = 0;
			for (int m = 0; m < 15; m++)
			{
				int num28 = Main.hairStart + m;
				if (Main.player[Main.myPlayer].hair != num28)
				{
					SpriteBatch spriteBatch3 = Main.spriteBatch;
					Texture2D texture2D3 = Main.inventoryBack8Texture;
					Vector2 vector28 = new Vector2((float)num23, (float)num24);
					Microsoft.Xna.Framework.Rectangle? nullable3 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height));
					Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
					vector21 = new Vector2();
					spriteBatch3.Draw(texture2D3, vector28, nullable3, color4, 0f, vector21, 1f, SpriteEffects.None, 0f);
				}
				else
				{
					SpriteBatch spriteBatch4 = Main.spriteBatch;
					Texture2D texture2D4 = Main.inventoryBack14Texture;
					Vector2 vector29 = new Vector2((float)num23, (float)num24);
					Microsoft.Xna.Framework.Rectangle? nullable4 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height));
					Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
					vector21 = new Vector2();
					spriteBatch4.Draw(texture2D4, vector29, nullable4, color5, 0f, vector21, 1f, SpriteEffects.None, 0f);
				}
				if (Main.mouseX > num23 && Main.mouseX < num23 + Main.inventoryBackTexture.Width && Main.mouseY > num24 && Main.mouseY < num24 + Main.inventoryBackTexture.Height && Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.mouseLeftRelease = false;
					Main.player[Main.myPlayer].hair = num28;
					Main.PlaySound(12, -1, -1, 1);
				}
				this.LoadHair(num28);
				float width1 = (float)(num23 + Main.inventoryBackTexture.Width / 2 - Main.playerHairTexture[num28].Width / 2);
				float single4 = (float)(num24 + 4);
				SpriteBatch spriteBatch5 = Main.spriteBatch;
				Texture2D texture2D5 = Main.playerTextures[num26, 0];
				Vector2 vector210 = new Vector2(width1, single4);
				Microsoft.Xna.Framework.Rectangle? nullable5 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.playerHairTexture[num28].Width, 56));
				Microsoft.Xna.Framework.Color color6 = Main.player[Main.myPlayer].skinColor;
				vector21 = new Vector2();
				spriteBatch5.Draw(texture2D5, vector210, nullable5, color6, 0f, vector21, 1f, SpriteEffects.None, 0f);
				SpriteBatch spriteBatch6 = Main.spriteBatch;
				Texture2D texture2D6 = Main.playerTextures[num26, 1];
				Vector2 vector211 = new Vector2(width1, single4);
				Microsoft.Xna.Framework.Rectangle? nullable6 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.playerHairTexture[num28].Width, 56));
				Microsoft.Xna.Framework.Color color7 = new Microsoft.Xna.Framework.Color(255, 255, 255, 255);
				vector21 = new Vector2();
				spriteBatch6.Draw(texture2D6, vector211, nullable6, color7, 0f, vector21, 1f, SpriteEffects.None, 0f);
				SpriteBatch spriteBatch7 = Main.spriteBatch;
				Texture2D texture2D7 = Main.playerTextures[num26, 2];
				Vector2 vector212 = new Vector2(width1, single4);
				Microsoft.Xna.Framework.Rectangle? nullable7 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.playerHairTexture[num28].Width, 56));
				Microsoft.Xna.Framework.Color color8 = Main.player[Main.myPlayer].eyeColor;
				vector21 = new Vector2();
				spriteBatch7.Draw(texture2D7, vector212, nullable7, color8, 0f, vector21, 1f, SpriteEffects.None, 0f);
				SpriteBatch spriteBatch8 = Main.spriteBatch;
				Texture2D texture2D8 = Main.playerHairTexture[num28];
				Vector2 vector213 = new Vector2(width1, single4);
				Microsoft.Xna.Framework.Rectangle? nullable8 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.playerHairTexture[num28].Width, 56));
				Microsoft.Xna.Framework.Color color9 = Main.selColor;
				vector21 = new Vector2();
				spriteBatch8.Draw(texture2D8, vector213, nullable8, color9, 0f, vector21, 1f, SpriteEffects.None, 0f);
				num27++;
				num23 = num23 + 56;
				if (num27 >= 5)
				{
					num27 = 0;
					num23 = num4;
					num24 = num24 + 56;
				}
			}
		}

		protected void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
		{
			if (Health <= 0)
			{
				return;
			}
			float health = (float)Health / (float)MaxHealth;
			if (health > 1f)
			{
				health = 1f;
			}
			int num = (int)(36f * health);
			float x = X - 18f * scale;
			float y = Y;
			if (Main.player[Main.myPlayer].gravDir == -1f)
			{
				y = y - Main.screenPosition.Y;
				y = Main.screenPosition.Y + (float)Main.screenHeight - y;
			}
			float single = 0f;
			float single1 = 0f;
			float single2 = 0f;
			float single3 = 255f;
			health = health - 0.1f;
			if ((double)health <= 0.5)
			{
				single1 = 255f * health * 2f;
				single = 255f;
			}
			else
			{
				single1 = 255f;
				single = 255f * (1f - health) * 2f;
			}
			float single4 = 0.95f;
			single = single * alpha * single4;
			single1 = single1 * alpha * single4;
			single3 = single3 * alpha * single4;
			if (single < 0f)
			{
				single = 0f;
			}
			if (single > 255f)
			{
				single = 255f;
			}
			if (single1 < 0f)
			{
				single1 = 0f;
			}
			if (single1 > 255f)
			{
				single1 = 255f;
			}
			if (single3 < 0f)
			{
				single3 = 0f;
			}
			if (single3 > 255f)
			{
				single3 = 255f;
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)single, (int)single1, (int)single2, (int)single3);
			if (num < 3)
			{
				num = 3;
			}
			if (num >= 34)
			{
				if (num < 36)
				{
					Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(x - Main.screenPosition.X + (float)num * scale, y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num, 0, 36 - num, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				}
				Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(x - Main.screenPosition.X, y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, num, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
				return;
			}
			if (num < 36)
			{
				Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(x - Main.screenPosition.X + (float)num * scale, y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(2, 0, 2, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
			}
			if (num < 34)
			{
				Main.spriteBatch.Draw(Main.hbTexture2, new Vector2(x - Main.screenPosition.X + (float)(num + 2) * scale, y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num + 2, 0, 36 - num - 2, Main.hbTexture2.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
			}
			if (num > 2)
			{
				Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(x - Main.screenPosition.X, y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, num - 2, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
			}
			Main.spriteBatch.Draw(Main.hbTexture1, new Vector2(x - Main.screenPosition.X + (float)(num - 2) * scale, y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(32, 0, 2, Main.hbTexture1.Height)), color, 0f, new Vector2(0f, 0f), scale, SpriteEffects.None, 0f);
		}

		public void DrawInfernoRings()
		{
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].outOfRange && Main.player[i].inferno && !Main.player[i].dead)
				{
					this.LoadFlameRing();
					float single = 1f;
					float single1 = 0.1f;
					float single2 = 0.9f;
					if (!Main.gamePaused && base.IsActive)
					{
						Player player = Main.player[i];
						player.flameRingScale = player.flameRingScale + 0.004f;
					}
					if (Main.player[i].flameRingScale >= 1f)
					{
						Main.player[i].flameRingScale = 0.8f;
						single = Main.player[i].flameRingScale;
					}
					else
					{
						single = Main.player[i].flameRingScale;
					}
					if (!Main.gamePaused && base.IsActive)
					{
						Player player1 = Main.player[i];
						player1.flameRingRot = player1.flameRingRot + 0.05f;
					}
					if (Main.player[i].flameRingRot > 6.28318548f)
					{
						Player player2 = Main.player[i];
						player2.flameRingRot = player2.flameRingRot - 6.28318548f;
					}
					if (Main.player[i].flameRingRot < -6.28318548f)
					{
						Player player3 = Main.player[i];
						player3.flameRingRot = player3.flameRingRot + 6.28318548f;
					}
					for (int j = 0; j < 3; j++)
					{
						float single3 = single + single1 * (float)j;
						if (single3 > 1f)
						{
							single3 = single3 - single1 * 2f;
						}
						float single4 = MathHelper.Lerp(0.8f, 0f, Math.Abs(single3 - single2) * 10f);
						Main.spriteBatch.Draw(this.flameRingTexture, Main.player[i].Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 400 * j, 400, 400)), new Microsoft.Xna.Framework.Color(single4, single4, single4, single4 / 2f), Main.player[i].flameRingRot + 1.04719758f * (float)j, new Vector2(200f, 200f), single3, SpriteEffects.None, 0f);
					}
				}
			}
		}

		private void DrawInfoAccs()
		{
			int num;
			int num1;
			object[] objArray;
			object obj;
			Vector2 vector2;
			if ((Main.npcChatText == null || Main.npcChatText == "") && Main.player[Main.myPlayer].sign < 0)
			{
				bool flag = false;
				bool flag1 = false;
				bool flag2 = false;
				bool flag3 = false;
				bool flag4 = false;
				bool flag5 = false;
				bool flag6 = false;
				bool flag7 = false;
				bool flag8 = false;
				bool flag9 = false;
				bool flag10 = false;
				bool flag11 = false;
				int num2 = -1;
				int num3 = -10;
				int num4 = 0;
				string str = "";
				for (int i = 0; i < 12; i++)
				{
					string str1 = "";
					string str2 = "";
					if (Main.player[Main.myPlayer].accWatch > 0 && !flag && (!Main.player[Main.myPlayer].hideInfo[0] || Main.playerInventory))
					{
						num2 = 0;
						str2 = Lang.inter[95];
						string str3 = "AM";
						double num5 = Main.time;
						if (!Main.dayTime)
						{
							num5 = num5 + 54000;
						}
						num5 = num5 / 86400 * 24;
						num5 = num5 - 7.5 - 12;
						if (num5 < 0)
						{
							num5 = num5 + 24;
						}
						if (num5 >= 12)
						{
							str3 = "PM";
						}
						int num6 = (int)num5;
						double num7 = num5 - (double)num6;
						num7 = (double)((int)(num7 * 60));
						string str4 = string.Concat(num7);
						if (num7 < 10)
						{
							str4 = string.Concat("0", str4);
						}
						if (num6 > 12)
						{
							num6 = num6 - 12;
						}
						if (num6 == 0)
						{
							num6 = 12;
						}
						if (Main.player[Main.myPlayer].accWatch == 1)
						{
							str4 = "00";
						}
						else if (Main.player[Main.myPlayer].accWatch == 2)
						{
							str4 = (num7 >= 30 ? "30" : "00");
						}
						objArray = new object[] { num6, ":", str4, " ", str3 };
						str1 = string.Concat(objArray);
						flag = true;
					}
					else if (Main.player[Main.myPlayer].accWeatherRadio && !flag4 && (!Main.player[Main.myPlayer].hideInfo[1] || Main.playerInventory))
					{
						num2 = 1;
						str2 = Lang.inter[96];
						string str5 = "";
						if ((double)Main.maxRaining > 0.6)
						{
							str5 = "Heavy Rain";
						}
						else if ((double)Main.maxRaining >= 0.2)
						{
							str5 = "Rain";
						}
						else if (Main.maxRaining > 0f)
						{
							str5 = "Light Rain";
						}
						else if (Main.cloudBGActive > 0f)
						{
							str5 = "Overcast";
						}
						else if (Main.numClouds > 120)
						{
							str5 = "Mostly Cloudy";
						}
						else if (Main.numClouds <= 80)
						{
							str5 = (Main.numClouds <= 20 ? "Clear" : "Partly Cloudy");
						}
						else
						{
							str5 = "Cloudy";
						}
						str1 = str5;
						int num8 = (int)(Main.windSpeed * 100f);
						if (num8 < 0)
						{
							obj = str1;
							objArray = new object[] { obj, " (", Math.Abs(num8), " mph W)" };
							str1 = string.Concat(objArray);
						}
						else if (num8 > 0)
						{
							obj = str1;
							objArray = new object[] { obj, " (", num8, " mph E)" };
							str1 = string.Concat(objArray);
						}
						flag4 = true;
					}
					else if (Main.player[Main.myPlayer].accCalendar && !flag7 && (!Main.player[Main.myPlayer].hideInfo[7] || Main.playerInventory))
					{
						if (!Main.bloodMoon || Main.dayTime)
						{
							num2 = (!Main.eclipse || !Main.dayTime ? 7 : 8);
						}
						else
						{
							num2 = 8;
						}
						str2 = Lang.inter[102];
						if (Main.moonPhase == 0)
						{
							str1 = "Full Moon";
						}
						else if (Main.moonPhase == 1)
						{
							str1 = "Waning Gibbous";
						}
						else if (Main.moonPhase == 2)
						{
							str1 = "Third Quarter";
						}
						else if (Main.moonPhase == 3)
						{
							str1 = "Waning Crescent";
						}
						else if (Main.moonPhase == 4)
						{
							str1 = "New Moon";
						}
						else if (Main.moonPhase == 5)
						{
							str1 = "Waxing Crescent";
						}
						else if (Main.moonPhase == 6)
						{
							str1 = "First Quarter";
						}
						else if (Main.moonPhase == 7)
						{
							str1 = "Waxing Gibbous";
						}
						flag7 = true;
					}
					else if (Main.player[Main.myPlayer].accFishFinder && !flag3 && (!Main.player[Main.myPlayer].hideInfo[2] || Main.playerInventory))
					{
						bool flag12 = false;
						num2 = 2;
						str2 = Lang.inter[97];
						int num9 = 0;
						while (num9 < 1000)
						{
							if (!Main.projectile[num9].active || Main.projectile[num9].owner != Main.myPlayer || !Main.projectile[num9].bobber)
							{
								num9++;
							}
							else
							{
								flag12 = true;
								break;
							}
						}
						if (!flag12)
						{
							int num10 = Main.player[Main.myPlayer].FishingLevel();
							if (num10 != -1)
							{
								Player player = Main.player[Main.myPlayer];
								string str6 = string.Concat(num10, " Fishing Power");
								string str7 = str6;
								player.displayedFishingInfo = str6;
								str1 = str7;
							}
							else
							{
								str1 = "Warning!";
							}
						}
						else
						{
							str1 = Main.player[Main.myPlayer].displayedFishingInfo;
						}
						flag3 = true;
					}
					else if (Main.player[Main.myPlayer].accOreFinder && !flag9 && (!Main.player[Main.myPlayer].hideInfo[10] || Main.playerInventory))
					{
						num2 = 10;
						str2 = Lang.inter[104];
						str1 = (Main.player[Main.myPlayer].bestOre > 0 ? string.Concat(Lang.mapLegend[MapHelper.TileToLookup(Main.player[Main.myPlayer].bestOre, 0)], " detected nearby!") : "No treasure nearby");
						flag9 = true;
					}
					else if (Main.player[Main.myPlayer].accCritterGuide && !flag10 && (!Main.player[Main.myPlayer].hideInfo[11] || Main.playerInventory))
					{
						flag10 = true;
						num2 = 11;
						str2 = Lang.inter[105];
						int num11 = 1300;
						int num12 = 0;
						int num13 = -1;
						if (Main.player[Main.myPlayer].accCritterGuideCounter > 0)
						{
							Player player1 = Main.player[Main.myPlayer];
							player1.accCritterGuideCounter = (byte)(player1.accCritterGuideCounter - 1);
							num13 = Main.player[Main.myPlayer].accCritterGuideNumber;
						}
						else
						{
							Main.player[Main.myPlayer].accCritterGuideCounter = 15;
							for (int j = 0; j < 200; j++)
							{
								if (Main.npc[j].active && Main.npc[j].rarity > num12)
								{
									num12 = Main.npc[j].rarity;
									if ((Main.npc[j].Center - Main.player[Main.myPlayer].Center).Length() < (float)num11)
									{
										num13 = j;
									}
								}
							}
							Main.player[Main.myPlayer].accCritterGuideNumber = (byte)num13;
						}
						str1 = (num13 < 0 || num13 >= 200 || !Main.npc[num13].active || Main.npc[num13].rarity <= 0 ? "No rare creatures nearby" : Main.npc[num13].displayName);
					}
					else if (Main.player[Main.myPlayer].accThirdEye && !flag5 && (!Main.player[Main.myPlayer].hideInfo[5] || Main.playerInventory))
					{
						flag5 = true;
						num2 = 5;
						str2 = Lang.inter[100];
						int num14 = 2000;
						if (Main.player[Main.myPlayer].accThirdEyeCounter != 0)
						{
							Player player2 = Main.player[Main.myPlayer];
							player2.accThirdEyeCounter = (byte)(player2.accThirdEyeCounter - 1);
						}
						else
						{
							Main.player[Main.myPlayer].accThirdEyeNumber = 0;
							Main.player[Main.myPlayer].accThirdEyeCounter = 15;
							for (int k = 0; k < 200; k++)
							{
								if (Main.npc[k].active && !Main.npc[k].friendly && Main.npc[k].damage > 0 && Main.npc[k].lifeMax > 5 && !Main.npc[k].dontCountMe)
								{
									int num15 = Main.npc[k].type;
									if ((Main.npc[k].Center - Main.player[Main.myPlayer].Center).Length() < (float)num14)
									{
										Player player3 = Main.player[Main.myPlayer];
										player3.accThirdEyeNumber = (byte)(player3.accThirdEyeNumber + 1);
									}
								}
							}
						}
						if (Main.player[Main.myPlayer].accThirdEyeNumber != 0)
						{
							str1 = (Main.player[Main.myPlayer].accThirdEyeNumber != 1 ? string.Concat(Main.player[Main.myPlayer].accThirdEyeNumber, " enemies nearby!") : "1 enemy nearby!");
						}
						else
						{
							str1 = "No enemies nearby";
						}
					}
					else if (Main.player[Main.myPlayer].accJarOfSouls && !flag6 && (!Main.player[Main.myPlayer].hideInfo[6] || Main.playerInventory))
					{
						flag6 = true;
						num2 = 6;
						str2 = Lang.inter[101];
						int num16 = Main.player[Main.myPlayer].lastCreatureHit;
						str1 = (num16 > 0 ? string.Concat(Lang.npcName(Item.BannerToNPC(num16), false), ": ", NPC.killCount[num16]) : "Kill count unavailable");
					}
					else if (Main.player[Main.myPlayer].accDreamCatcher && !flag11 && (!Main.player[Main.myPlayer].hideInfo[12] || Main.playerInventory))
					{
						num2 = 12;
						str2 = Lang.inter[106];
						Main.player[Main.myPlayer].checkDPSTime();
						int dPS = Main.player[Main.myPlayer].getDPS();
						flag11 = true;
						str1 = (dPS != 0 ? string.Concat(Main.player[Main.myPlayer].getDPS(), " damage per second") : "N/A");
					}
					else if (Main.player[Main.myPlayer].accStopwatch && !flag8 && (!Main.player[Main.myPlayer].hideInfo[9] || Main.playerInventory))
					{
						num2 = 9;
						str2 = Lang.inter[103];
						int length = (int)(1f + Main.player[Main.myPlayer].velocity.Length() * 6f);
						if (length > (int)Main.player[Main.myPlayer].speedSlice.Length)
						{
							length = (int)Main.player[Main.myPlayer].speedSlice.Length;
						}
						float single = 0f;
						for (int l = length - 1; l > 0; l--)
						{
							Main.player[Main.myPlayer].speedSlice[l] = Main.player[Main.myPlayer].speedSlice[l - 1];
						}
						Main.player[Main.myPlayer].speedSlice[0] = Main.player[Main.myPlayer].velocity.Length();
						for (int m = 0; m < (int)Main.player[Main.myPlayer].speedSlice.Length; m++)
						{
							if (m >= length)
							{
								Main.player[Main.myPlayer].speedSlice[m] = single / (float)length;
							}
							else
							{
								single = single + Main.player[Main.myPlayer].speedSlice[m];
							}
						}
						single = single / (float)length;
						float single1 = single * (float)216000 / (float)42240;
						str1 = string.Concat(Math.Round((double)single1), " mph");
						flag8 = true;
					}
					else if (Main.player[Main.myPlayer].accCompass > 0 && !flag2 && (!Main.player[Main.myPlayer].hideInfo[3] || Main.playerInventory))
					{
						num2 = 3;
						str2 = Lang.inter[98];
						int x = (int)((Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2)) * 2f / 16f - (float)Main.maxTilesX);
						if (x <= 0)
						{
							str1 = (x >= 0 ? "Center" : string.Concat(-x, "' West"));
						}
						else
						{
							str1 = string.Concat(x, "' East");
						}
						flag2 = true;
					}
					else if (Main.player[Main.myPlayer].accDepthMeter > 0 && !flag1 && (!Main.player[Main.myPlayer].hideInfo[4] || Main.playerInventory))
					{
						num2 = 4;
						str2 = Lang.inter[99];
						int y = (int)((double)((Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height) * 2f / 16f) - Main.worldSurface * 2);
						string str8 = "";
						float single2 = (float)(Main.maxTilesX / 4200);
						single2 = single2 * single2;
						int num17 = 1080;
						float y1 = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * single2)) / (Main.worldSurface / 5));
						if (Main.player[Main.myPlayer].position.Y > (float)((Main.maxTilesY - 204) * 16))
						{
							str8 = "Underworld";
						}
						else if ((double)Main.player[Main.myPlayer].position.Y > Main.rockLayer * 16 + (double)(num17 / 2) + 16)
						{
							str8 = "Caverns";
						}
						else if (y <= 0)
						{
							str8 = (y1 < 1f ? "Space" : "Surface");
						}
						else
						{
							str8 = "Underground";
						}
						string str9 = "";
						if (y < 0)
						{
							y = y * -1;
						}
						str9 = (y != 0 ? string.Concat(y, "'") : "Level");
						str1 = string.Concat(str9, " ", str8);
						flag1 = true;
					}
					if (str1 != "")
					{
						if (Main.playerInventory)
						{
							bool flag13 = true;
							if (Main.mapStyle == 1 && Main.mapEnabled && Main.screenHeight < 820)
							{
								flag13 = false;
							}
							if (Main.mapStyle != 1 && Main.screenWidth < 855)
							{
								flag13 = false;
							}
							if (!flag13)
							{
								int num18 = (int)(52f * Main.inventoryScale);
								num = 697 - num18 * 4 + Main.screenWidth - 800 + 20 * (num4 % 2);
								num1 = 114 + Main.mH + num18 * 7 + num18 / 2 + 20 * (num4 / 2) + 8 * (num4 / 4) - 20;
								if (Main.EquipPage == 2)
								{
									num = num + num18 + num18 / 2;
									num1 = num1 - num18;
								}
							}
							else
							{
								num = Main.screenWidth - 280 + 20 * num4 - 10;
								num1 = 94;
								if (Main.mapStyle == 1 && Main.mapEnabled)
								{
									num1 = num1 + 254;
								}
							}
						}
						else
						{
							num = Main.screenWidth - 280;
							num1 = -32;
							if (Main.mapStyle == 1 && Main.mapEnabled)
							{
								num1 = num1 + 254;
							}
						}
						if (num2 >= 0)
						{
							num4++;
							int num19 = 22;
							if (Main.screenHeight < 650)
							{
								num19 = 20;
							}
							Vector2 vector21 = new Vector2((float)num, (float)(num1 + 74 + num19 * i + 52));
							int num20 = num2;
							if (num20 == 8)
							{
								num20 = 7;
							}
							Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
							if (Main.playerInventory)
							{
								vector21 = new Vector2((float)num, (float)num1);
								if ((float)Main.mouseX >= vector21.X && (float)Main.mouseY >= vector21.Y && (float)Main.mouseX <= vector21.X + (float)this.infoIconTexture[num2].Width && (float)Main.mouseY <= vector21.Y + (float)this.infoIconTexture[num2].Height)
								{
									Main.player[Main.myPlayer].mouseInterface = true;
									if (Main.mouseLeft && Main.mouseLeftRelease)
									{
										Main.PlaySound(12, -1, -1, 1);
										Main.mouseLeftRelease = false;
										Main.player[Main.myPlayer].hideInfo[num20] = !Main.player[Main.myPlayer].hideInfo[num20];
									}
									if (!Main.mouseText)
									{
										str = str2;
										Main.mouseText = true;
									}
								}
								if (Main.player[Main.myPlayer].hideInfo[num20])
								{
									white = new Microsoft.Xna.Framework.Color(80, 80, 80, 70);
								}
							}
							else if ((float)Main.mouseX >= vector21.X && (float)Main.mouseY >= vector21.Y && (float)Main.mouseX <= vector21.X + (float)this.infoIconTexture[num2].Width && (float)Main.mouseY <= vector21.Y + (float)this.infoIconTexture[num2].Height && !Main.mouseText && Lang.lang <= 1)
							{
								num3 = i;
								str = str2;
								Main.mouseText = true;
							}
							SpriteBatch spriteBatch = Main.spriteBatch;
							Texture2D texture2D = this.infoIconTexture[num2];
							Microsoft.Xna.Framework.Rectangle? nullable = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, this.infoIconTexture[num2].Width, this.infoIconTexture[num2].Height));
							vector2 = new Vector2();
							spriteBatch.Draw(texture2D, vector21, nullable, white, 0f, vector2, 1f, SpriteEffects.None, 0f);
							num = num + 20;
						}
						if (!Main.playerInventory)
						{
							for (int n = 0; n < 5; n++)
							{
								int num21 = 0;
								int num22 = 0;
								Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
								if (n == 0)
								{
									num21 = -2;
								}
								if (n == 1)
								{
									num21 = 2;
								}
								if (n == 2)
								{
									num22 = -2;
								}
								if (n == 3)
								{
									num22 = 2;
								}
								if (n == 4)
								{
									black = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
								}
								if (i > num3 && i < num3 + 2)
								{
									black = new Microsoft.Xna.Framework.Color(black.R / 3, black.G / 3, black.B / 3, black.A / 3);
								}
								int num23 = 22;
								if (Main.screenHeight < 650)
								{
									num23 = 20;
								}
								SpriteBatch spriteBatch1 = Main.spriteBatch;
								SpriteFont spriteFont = Main.fontMouseText;
								Vector2 vector22 = new Vector2((float)(num + num21), (float)(num1 + 74 + num23 * i + num22 + 48));
								vector2 = new Vector2();
								spriteBatch1.DrawString(spriteFont, str1, vector22, black, 0f, vector2, 1f, SpriteEffects.None, 0f);
							}
						}
					}
				}
				if (!string.IsNullOrEmpty(str))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					this.MouseText(str, 0, 0);
				}
			}
		}

		protected void DrawInterface(GameTime gameTime)
		{
			float single;
			float single1;
			Vector2 vector2;
			Microsoft.Xna.Framework.Rectangle? nullable;
			Microsoft.Xna.Framework.Color color;
			EmoteBubble.DrawAll(Main.spriteBatch);
			if (Main.smartDigShowing && !Main.player[Main.myPlayer].dead)
			{
				Vector2 y = new Vector2((float)Main.smartDigX, (float)Main.smartDigY) * 16f;
				Vector2 vector21 = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
				bool flag = Main.drawToScreen;
				y = y - Main.screenPosition;
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					y.Y = (float)Main.screenHeight - y.Y - 16f;
				}
				Microsoft.Xna.Framework.Color color1 = Lighting.GetColor(Main.smartDigX, Main.smartDigY) * 1f;
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1);
				float single2 = 1f;
				float single3 = 0.9f;
				float single4 = 0.1f;
				float single5 = 1f;
				float single6 = 0.6f;
				Main.spriteBatch.Draw(Main.magicPixel, y, new Microsoft.Xna.Framework.Rectangle?(rectangle), Main.buffColor(color1, single2, single3, single4, single5) * single6, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, y + (Vector2.UnitX * 8f), new Microsoft.Xna.Framework.Rectangle?(rectangle), Main.buffColor(color1, single2, single3, single4, single5) * single6, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, y + (Vector2.UnitY * 8f), new Microsoft.Xna.Framework.Rectangle?(rectangle), Main.buffColor(color1, single2, single3, single4, single5) * single6, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, y + (Vector2.One * 8f), new Microsoft.Xna.Framework.Rectangle?(rectangle), Main.buffColor(color1, single2, single3, single4, single5) * single6, 0f, Vector2.Zero, 8f, SpriteEffects.None, 0f);
				single4 = 0.3f;
				single3 = 0.95f;
				float single7 = 1f;
				single6 = single7;
				single5 = single7;
				Main.spriteBatch.Draw(Main.magicPixel, y + (Vector2.UnitX * -2f), new Microsoft.Xna.Framework.Rectangle?(rectangle), Main.buffColor(color1, single2, single3, single4, single5) * single6, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, y + (Vector2.UnitX * 16f), new Microsoft.Xna.Framework.Rectangle?(rectangle), Main.buffColor(color1, single2, single3, single4, single5) * single6, 0f, Vector2.Zero, new Vector2(2f, 16f), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, y + (Vector2.UnitY * -2f), new Microsoft.Xna.Framework.Rectangle?(rectangle), Main.buffColor(color1, single2, single3, single4, single5) * single6, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, y + (Vector2.UnitY * 16f), new Microsoft.Xna.Framework.Rectangle?(rectangle), Main.buffColor(color1, single2, single3, single4, single5) * single6, 0f, Vector2.Zero, new Vector2(16f, 2f), SpriteEffects.None, 0f);
			}
			if (Main.player[Main.myPlayer].rulerGrid)
			{
				float single8 = Main.player[Main.myPlayer].velocity.Length();
				single8 = Vector2.Distance(Main.player[Main.myPlayer].position, Main.player[Main.myPlayer].shadowPos[2]);
				float single9 = 6f;
				Texture2D texture2D = Main.extraTexture[68];
				float single10 = MathHelper.Lerp(0.2f, 0.7f, MathHelper.Clamp(1f - single8 / single9, 0f, 1f));
				Vector2 one = Main.screenPosition;
				one = one + new Vector2(-50f);
				one = one.ToTileCoordinates().ToVector2() * 16f;
				int num = (Main.screenWidth + 100) / 16;
				int num1 = (Main.screenHeight + 100) / 16;
				Microsoft.Xna.Framework.Point tileCoordinates = Main.MouseWorld.ToTileCoordinates();
				tileCoordinates.X = tileCoordinates.X - (int)one.X / 16;
				tileCoordinates.Y = tileCoordinates.Y - (int)one.Y / 16;
				Microsoft.Xna.Framework.Color color2 = (new Microsoft.Xna.Framework.Color(0.24f, 0.8f, 0.9f, 0.5f) * 0.4f) * single10;
				Microsoft.Xna.Framework.Color color3 = (new Microsoft.Xna.Framework.Color(1f, 0.8f, 0.9f, 0.5f) * 0.5f) * single10;
				Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle(0, 18, 18, 18);
				one = one - Vector2.One;
				for (int i = 0; i < num; i++)
				{
					for (int j = 0; j < num1; j++)
					{
						Microsoft.Xna.Framework.Color color4 = color2;
						Vector2 zero = Vector2.Zero;
						if (i != tileCoordinates.X && j != tileCoordinates.Y)
						{
							if (i == tileCoordinates.X + 1)
							{
								rectangle1.X = 2;
								rectangle1.Width = 14;
								zero.X = 2f;
							}
							else
							{
								rectangle1.X = 0;
								rectangle1.Width = 16;
							}
							if (j == tileCoordinates.Y + 1)
							{
								rectangle1.Y = 2;
								rectangle1.Height = 14;
								zero.Y = 2f;
							}
							else
							{
								rectangle1.Y = 18;
								rectangle1.Height = 16;
							}
							Main.spriteBatch.Draw(texture2D, Main.ReverseGravitySupport((((new Vector2((float)i, (float)j) * 16f) - Main.screenPosition) + one) + zero, 16f), new Microsoft.Xna.Framework.Rectangle?(rectangle1), color4, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						}
					}
				}
				rectangle1 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 18);
				for (int k = 0; k < num; k++)
				{
					if (k != tileCoordinates.X)
					{
						Main.spriteBatch.Draw(texture2D, Main.ReverseGravitySupport(((new Vector2((float)k, (float)tileCoordinates.Y) * 16f) - Main.screenPosition) + one, 16f), new Microsoft.Xna.Framework.Rectangle?(rectangle1), color3, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(texture2D, Main.ReverseGravitySupport(((new Vector2((float)k, (float)tileCoordinates.Y) * 16f) - Main.screenPosition) + one, 16f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16)), color3, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
				}
				rectangle1 = new Microsoft.Xna.Framework.Rectangle(0, 0, 18, 16);
				for (int l = 0; l < num1; l++)
				{
					if (l != tileCoordinates.Y)
					{
						Main.spriteBatch.Draw(texture2D, Main.ReverseGravitySupport(((new Vector2((float)tileCoordinates.X, (float)l) * 16f) - Main.screenPosition) + one, 16f), new Microsoft.Xna.Framework.Rectangle?(rectangle1), color3, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
					}
				}
			}
			if (Main.player[Main.myPlayer].rulerLine)
			{
				float single11 = Main.player[Main.myPlayer].velocity.Length();
				float single12 = 6f;
				float single13 = 2f;
				if (single11 <= single12)
				{
					float single14 = 1f;
					if (single11 >= single13)
					{
						single14 = 1f - (single11 - single13) / single12;
					}
					int num2 = 1;
					if ((float)Main.mouseX + Main.screenPosition.X < Main.player[Main.myPlayer].Center.X)
					{
						num2 = -1;
					}
					int x = (int)(Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) + (float)(num2 * 4)) / 16;
					int y1 = (int)(Main.player[Main.myPlayer].position.Y + (float)Main.player[Main.myPlayer].height - 2f) / 16;
					if (Main.player[Main.myPlayer].gravDir == -1f)
					{
						y1--;
					}
					x = x + num2;
					Vector2 mouseWorld = Main.MouseWorld;
					if (Main.player[Main.myPlayer].gravDir == -1f)
					{
						mouseWorld.Y = mouseWorld.Y + 16f;
					}
					mouseWorld = mouseWorld / 16f;
					Vector2 vector22 = new Vector2((float)x, (float)y1);
					int x1 = (int)mouseWorld.X - x;
					int y2 = (int)mouseWorld.Y - y1;
					int num3 = Math.Abs(x1) + 1;
					int num4 = Math.Abs(y2) + 1;
					if (x1 != 0 || y2 != 0)
					{
						Texture2D texture2D1 = Main.extraTexture[2];
						Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16);
						int num5 = x;
						int num6 = y1;
						if (Main.player[Main.myPlayer].gravDir == -1f)
						{
							num6--;
						}
						float single15 = 0.24f;
						float single16 = 0.8f;
						float single17 = 0.9f;
						float single18 = 1f;
						float single19 = 0.8f;
						Microsoft.Xna.Framework.Color color5 = (new Microsoft.Xna.Framework.Color(single15, single16, single17, single18) * single19) * single14;
						Main.spriteBatch.Draw(texture2D1, Main.ReverseGravitySupport((new Vector2((float)num5, (float)num6) * 16f) - Main.screenPosition, 16f), new Microsoft.Xna.Framework.Rectangle?(rectangle2), color5, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
						if (x1 != 0)
						{
							int num7 = Math.Sign(x1);
							rectangle2.Y = (num7 == 1 ? 16 : 32);
							while (x1 != 0)
							{
								x1 = x1 - num7;
								num5 = num5 + num7;
								if (x1 == 0)
								{
									rectangle2.Y = 0;
								}
								color5 = (new Microsoft.Xna.Framework.Color(single15, single16, single17, single18) * single19) * single14;
								Main.spriteBatch.Draw(texture2D1, Main.ReverseGravitySupport((new Vector2((float)num5, (float)num6) * 16f) - Main.screenPosition, 16f), new Microsoft.Xna.Framework.Rectangle?(rectangle2), color5, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							}
						}
						if (y2 != 0)
						{
							int num8 = Math.Sign(y2);
							rectangle2.Y = (num8 == 1 ? 48 : 64);
							while (y2 != 0)
							{
								y2 = y2 - num8;
								num6 = num6 + num8;
								if (y2 == 0)
								{
									rectangle2.Y = 0;
								}
								color5 = (new Microsoft.Xna.Framework.Color(single15, single16, single17, single18) * single19) * single14;
								Main.spriteBatch.Draw(texture2D1, Main.ReverseGravitySupport((new Vector2((float)num5, (float)num6) * 16f) - Main.screenPosition, 16f), new Microsoft.Xna.Framework.Rectangle?(rectangle2), color5, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
							}
						}
						Utils.DrawBorderString(Main.spriteBatch, string.Concat(num3.ToString(), "x", num4.ToString()), new Vector2((float)(Main.mouseX + 16), (float)Main.mouseY), new Microsoft.Xna.Framework.Color(single15, single16, single17, single18), 1f, 0f, 0.8f, -1);
					}
				}
			}
			if (Main.EquipPage == 1)
			{
				if (!Main.ignoreErrors)
				{
					this.DrawNPCHouse();
				}
				else
				{
					try
					{
						this.DrawNPCHouse();
					}
					catch (Exception exception)
					{
						TimeLogger.DrawException(exception);
					}
				}
			}
			if (Main.player[Main.myPlayer].selectedItem == 58 && Main.player[Main.myPlayer].itemAnimation > 0)
			{
				Main.mouseLeftRelease = false;
			}
			Main.mouseHC = false;
			if (Main.hideUI)
			{
				Main.maxQ = true;
				return;
			}
			CaptureManager.Instance.Update();
			if (CaptureManager.Instance.Active)
			{
				CaptureManager.Instance.Draw(Main.spriteBatch);
				return;
			}
			if (Main.ingameOptionsWindow)
			{
				IngameOptions.Draw(this, Main.spriteBatch);
				return;
			}
			Main.InGameUI.Draw(Main.spriteBatch, gameTime);
			if (Main.achievementsWindow)
			{
				AchievementsUI.Draw(Main.spriteBatch, gameTime);
				return;
			}
			AchievementCompleteUI.Draw(Main.spriteBatch);
			if (Main.hbPosition != 0)
			{
				bool flag1 = false;
				for (int m = 199; m >= 0; m--)
				{
					if (Main.npc[m].active && Main.npc[m].type > 0 && Main.npc[m].life != Main.npc[m].lifeMax && !Main.npc[m].dontTakeDamage)
					{
						float single20 = 1f;
						int num9 = Main.npc[m].type;
						if (num9 == 4)
						{
							single20 = 1.5f;
						}
						if (num9 == 35)
						{
							single20 = 1.5f;
						}
						if (num9 == 36)
						{
							single20 = 1.5f;
						}
						if (num9 == 50)
						{
							single20 = 1.5f;
						}
						if (num9 == 113)
						{
							single20 = 1.5f;
						}
						if (num9 == 114)
						{
							single20 = 1.5f;
						}
						if (num9 == 125)
						{
							single20 = 1.5f;
						}
						if (num9 == 126)
						{
							single20 = 1.5f;
						}
						if (num9 == 127)
						{
							single20 = 1.5f;
						}
						if (num9 == 128)
						{
							single20 = 1.5f;
						}
						if (num9 == 129)
						{
							single20 = 1.5f;
						}
						if (num9 == 130)
						{
							single20 = 1.5f;
						}
						if (num9 == 131)
						{
							single20 = 1.5f;
						}
						if (num9 == 222)
						{
							single20 = 1.5f;
						}
						if (num9 >= 245 && num9 <= 249)
						{
							single20 = 1.5f;
						}
						if (num9 == 262)
						{
							single20 = 1.5f;
						}
						if (num9 == 266)
						{
							single20 = 1.5f;
						}
						if (num9 == 87)
						{
							single20 = 1.5f;
						}
						if (num9 == 510 || num9 == 454)
						{
							single20 = 1.5f;
						}
						if (num9 == 439 || num9 == 370)
						{
							single20 = 1.5f;
						}
						if ((!Main.expertMode || num9 != 266) && (num9 != 439 && num9 != 440 || Main.npc[m].ai[0] != 5f))
						{
							if (num9 >= 134 && num9 <= 136)
							{
								single20 = 1.5f;
								if (!flag1)
								{
									flag1 = true;
									Vector2 vector23 = new Vector2();
									float single21 = 999999f;
									for (int n = 0; n < 200; n++)
									{
										if (Main.npc[n].active && Main.npc[n].type >= 134 && Main.npc[n].type <= 136)
										{
											Vector2 center = Main.player[Main.myPlayer].Center - Main.npc[n].Center;
											if (center.Length() < single21 && Collision.CanHit(Main.player[Main.myPlayer].Center, 1, 1, Main.npc[n].Center, 1, 1))
											{
												single21 = center.Length();
												vector23 = Main.npc[n].position;
											}
										}
									}
									if (single21 >= (float)Main.screenWidth)
									{
										Main.destroyerHB = new Vector2(0f, 0f);
									}
									else
									{
										if (Main.destroyerHB.X >= 100f || Main.destroyerHB.Y >= 100f)
										{
											Main.destroyerHB = ((Main.destroyerHB * 49f) + vector23) / 50f;
										}
										else
										{
											Main.destroyerHB = vector23;
										}
										vector23 = Main.destroyerHB;
										int num10 = m;
										if (num9 != 134 && Main.npc[m].realLife != -1)
										{
											num10 = Main.npc[m].realLife;
										}
										float single22 = Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f));
										single22 = (single22 + 1f) / 2f;
										this.DrawHealthBar(vector23.X + (float)(Main.npc[m].width / 2), vector23.Y + (float)(Main.npc[m].height / 2), Main.npc[num10].life, Main.npc[num10].lifeMax, single22, single20);
									}
								}
							}
							else if (num9 == 7)
							{
								Vector2 vector24 = Main.npc[m].position;
								int num11 = -1;
								for (int o = 0; o < 200; o++)
								{
									if (Main.npc[o].active && Main.npc[o].type == 9)
									{
										num11 = o;
									}
								}
								if (num11 >= 0)
								{
									vector24 = vector24 + Main.npc[num11].position;
									vector24 = vector24 / 2f;
									this.DrawHealthBar(vector24.X + (float)(Main.npc[m].width / 2), vector24.Y + (float)(Main.npc[m].height / 2), Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
								}
							}
							else if (num9 != 8 && num9 != 9)
							{
								if (num9 == 95)
								{
									Vector2 vector25 = Main.npc[m].position;
									int num12 = -1;
									for (int p = 0; p < 200; p++)
									{
										if (Main.npc[p].active && Main.npc[p].type == 97)
										{
											num12 = p;
										}
									}
									if (num12 >= 0)
									{
										vector25 = vector25 + Main.npc[num12].position;
										vector25 = vector25 / 2f;
										this.DrawHealthBar(vector25.X + (float)(Main.npc[m].width / 2), vector25.Y + (float)(Main.npc[m].height / 2), Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
									}
								}
								else if (num9 != 96 && num9 != 97)
								{
									if (num9 == 10)
									{
										Vector2 vector26 = Main.npc[m].position;
										int num13 = -1;
										for (int q = 0; q < 200; q++)
										{
											if (Main.npc[q].active && Main.npc[q].type == 12)
											{
												num13 = q;
											}
										}
										if (num13 >= 0)
										{
											vector26 = vector26 + Main.npc[num13].position;
											vector26 = vector26 / 2f;
											this.DrawHealthBar(vector26.X + (float)(Main.npc[m].width / 2), vector26.Y + (float)(Main.npc[m].height / 2), Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
										}
									}
									else if (num9 != 11 && num9 != 12)
									{
										if (num9 == 87)
										{
											Vector2 vector27 = Main.npc[m].position;
											int num14 = -1;
											for (int r = 0; r < 200; r++)
											{
												if (Main.npc[r].active && Main.npc[r].type == 92)
												{
													num14 = r;
												}
											}
											if (num14 >= 0)
											{
												vector27 = vector27 + Main.npc[num14].position;
												vector27 = vector27 / 2f;
												this.DrawHealthBar(vector27.X + (float)(Main.npc[m].width / 2), vector27.Y + (float)(Main.npc[m].height / 2), Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
											}
										}
										else if (num9 == 412)
										{
											Vector2 vector28 = Main.npc[m].position;
											int num15 = m;
											while (num15 > 0 && num15 < 200 && Main.npc[num15].ai[0] > 0f)
											{
												num15 = (int)Main.npc[num15].ai[0];
											}
											if (num15 >= 0)
											{
												vector28 = vector28 + Main.npc[num15].position;
												vector28 = vector28 / 2f;
												this.DrawHealthBar(vector28.X + (float)(Main.npc[m].width / 2), vector28.Y + (float)(Main.npc[m].height / 2), Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
											}
										}
										else if (num9 != 414 && num9 != 413 && (num9 < 88 || num9 > 92))
										{
											if (num9 == 39)
											{
												Vector2 vector29 = Main.npc[m].position;
												int num16 = -1;
												for (int s = 0; s < 200; s++)
												{
													if (Main.npc[s].active && Main.npc[s].type == 41)
													{
														num16 = s;
													}
												}
												if (num16 >= 0)
												{
													vector29 = vector29 + Main.npc[num16].position;
													vector29 = vector29 / 2f;
													this.DrawHealthBar(vector29.X + (float)(Main.npc[m].width / 2), vector29.Y + (float)(Main.npc[m].height / 2), Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
												}
											}
											else if (num9 != 40 && num9 != 41)
											{
												if (num9 == 98)
												{
													Vector2 vector210 = Main.npc[m].position;
													int num17 = -1;
													for (int t = 0; t < 200; t++)
													{
														if (Main.npc[t].active && Main.npc[t].type == 100)
														{
															num17 = t;
														}
													}
													if (num17 >= 0)
													{
														vector210 = vector210 + Main.npc[num17].position;
														vector210 = vector210 / 2f;
														this.DrawHealthBar(vector210.X + (float)(Main.npc[m].width / 2), vector210.Y + (float)(Main.npc[m].height / 2), Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
													}
												}
												else if (num9 != 99 && num9 != 100)
												{
													if (num9 == 454)
													{
														Vector2 vector211 = Main.npc[m].position;
														int num18 = -1;
														for (int u = 0; u < 200; u++)
														{
															if (Main.npc[u].active && Main.npc[u].type == 459)
															{
																num18 = u;
															}
														}
														if (num18 >= 0)
														{
															vector211 = vector211 + Main.npc[num18].position;
															vector211 = vector211 / 2f;
															this.DrawHealthBar(vector211.X + (float)(Main.npc[m].width / 2), vector211.Y + (float)(Main.npc[m].height / 2), Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
														}
													}
													else if (num9 < 455 || num9 > 459)
													{
														if (num9 == 510)
														{
															Vector2 vector212 = Main.npc[m].position;
															int num19 = -1;
															for (int v = 0; v < 200; v++)
															{
																if (Main.npc[v].active && Main.npc[v].type == 512)
																{
																	num19 = v;
																}
															}
															if (num19 >= 0)
															{
																vector212 = vector212 + Main.npc[num19].position;
																vector212 = vector212 / 2f;
																this.DrawHealthBar(vector212.X + (float)(Main.npc[m].width / 2), vector212.Y + (float)(Main.npc[m].height / 2), Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
															}
														}
														else if (num9 != 511 && num9 != 512)
														{
															if (num9 == 513)
															{
																Vector2 vector213 = Main.npc[m].position;
																int num20 = -1;
																for (int w = 0; w < 200; w++)
																{
																	if (Main.npc[w].active && Main.npc[w].type == 515)
																	{
																		num20 = w;
																	}
																}
																if (num20 >= 0)
																{
																	vector213 = vector213 + Main.npc[num20].position;
																	vector213 = vector213 / 2f;
																	this.DrawHealthBar(vector213.X + (float)(Main.npc[m].width / 2), vector213.Y + (float)(Main.npc[m].height / 2), Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
																}
															}
															else if (num9 != 514 && num9 != 515)
															{
																if (num9 == 117)
																{
																	Vector2 vector214 = Main.npc[m].position;
																	int num21 = -1;
																	for (int x2 = 0; x2 < 200; x2++)
																	{
																		if (Main.npc[x2].active && Main.npc[x2].type == 119)
																		{
																			num21 = x2;
																		}
																	}
																	if (num21 >= 0)
																	{
																		vector214 = vector214 + Main.npc[num21].position;
																		vector214 = vector214 / 2f;
																		this.DrawHealthBar(vector214.X + (float)(Main.npc[m].width / 2), vector214.Y + (float)(Main.npc[m].height / 2), Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
																	}
																}
																else if (num9 != 118 && num9 != 119)
																{
																	if (Main.hbPosition == 1)
																	{
																		float single23 = 10f + Main.NPCAddHeight(m);
																		this.DrawHealthBar(Main.npc[m].position.X + (float)(Main.npc[m].width / 2), Main.npc[m].position.Y + (float)Main.npc[m].height + single23 + Main.npc[m].gfxOffY, Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
																	}
																	else if (Main.hbPosition == 2)
																	{
																		float single24 = -24f - Main.NPCAddHeight(m) / 2f;
																		this.DrawHealthBar(Main.npc[m].position.X + (float)(Main.npc[m].width / 2), Main.npc[m].position.Y + single24 + Main.npc[m].gfxOffY, Main.npc[m].life, Main.npc[m].lifeMax, Lighting.Brightness((int)((Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f), (int)((Main.npc[m].position.Y + (float)(Main.npc[m].height / 2) + Main.npc[m].gfxOffY) / 16f)), single20);
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				for (int y3 = 0; y3 < 255; y3++)
				{
					if (y3 != Main.myPlayer && Main.player[y3].active && !Main.player[y3].ghost && !Main.player[y3].dead && Main.player[y3].statLife != Main.player[y3].statLifeMax2)
					{
						if (Main.hbPosition == 1)
						{
							int num22 = 10;
							this.DrawHealthBar(Main.player[y3].position.X + (float)(Main.player[y3].width / 2), Main.player[y3].position.Y + (float)Main.player[y3].height + (float)num22 + Main.player[y3].gfxOffY, Main.player[y3].statLife, Main.player[y3].statLifeMax2, Lighting.Brightness((int)((Main.player[y3].position.X + (float)(Main.player[y3].width / 2)) / 16f), (int)((Main.player[y3].position.Y + (float)(Main.player[y3].height / 2) + Main.player[y3].gfxOffY) / 16f)), 1f);
						}
						else if (Main.hbPosition == 2)
						{
							int num23 = -20;
							this.DrawHealthBar(Main.player[y3].position.X + (float)(Main.player[y3].width / 2), Main.player[y3].position.Y + (float)num23 + Main.player[y3].gfxOffY, Main.player[y3].statLife, Main.player[y3].statLifeMax2, Lighting.Brightness((int)((Main.player[y3].position.X + (float)(Main.player[y3].width / 2)) / 16f), (int)((Main.player[y3].position.Y + (float)(Main.player[y3].height / 2) + Main.player[y3].gfxOffY) / 16f)), 1f);
						}
					}
				}
			}
			Main.DrawInvasionProgress();
			Main.mH = 0;
			if (Main.mapEnabled)
			{
				if (!Main.mapFullscreen && Main.mapStyle == 1)
				{
					Main.mH = 256;
					if (!Main.ignoreErrors)
					{
						this.DrawMap();
					}
					else
					{
						try
						{
							this.DrawMap();
						}
						catch (Exception exception1)
						{
							TimeLogger.DrawException(exception1);
						}
					}
				}
				if (Main.mH + 600 > Main.screenHeight)
				{
					Main.mH = Main.screenHeight - 600;
				}
			}
			if (Main.netDiag)
			{
				for (int a = 0; a < 4; a++)
				{
					string str = "";
					int num24 = 20;
					int num25 = 220;
					if (a == 0)
					{
						str = string.Concat("RX Msgs: ", string.Format("{0:0,0}", Main.rxMsg));
						num25 = num25 + a * 20;
					}
					else if (a == 1)
					{
						str = string.Concat("RX Bytes: ", string.Format("{0:0,0}", Main.rxData));
						num25 = num25 + a * 20;
					}
					else if (a == 2)
					{
						str = string.Concat("TX Msgs: ", string.Format("{0:0,0}", Main.txMsg));
						num25 = num25 + a * 20;
					}
					else if (a == 3)
					{
						str = string.Concat("TX Bytes: ", string.Format("{0:0,0}", Main.txData));
						num25 = num25 + a * 20;
					}
					SpriteBatch spriteBatch = Main.spriteBatch;
					SpriteFont spriteFont = Main.fontMouseText;
					Vector2 vector215 = new Vector2((float)num24, (float)num25);
					Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch.DrawString(spriteFont, str, vector215, white, 0f, vector2, 1f, SpriteEffects.None, 0f);
				}
				for (int b = 0; b < Main.maxMsg; b++)
				{
					float single25 = 0.7f;
					string str1 = "";
					int num26 = 200;
					int num27 = 120;
					int num28 = b / 50;
					num26 = num26 + num28 * 400;
					num27 = num27 + (b - num28 * 50) * 13;
					str1 = string.Concat(b, ": ");
					SpriteBatch spriteBatch1 = Main.spriteBatch;
					SpriteFont spriteFont1 = Main.fontMouseText;
					Vector2 vector216 = new Vector2((float)num26, (float)num27);
					Microsoft.Xna.Framework.Color white1 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch1.DrawString(spriteFont1, str1, vector216, white1, 0f, vector2, single25, SpriteEffects.None, 0f);
					num26 = num26 + 30;
					str1 = string.Concat("rx:", string.Format("{0:0,0}", Main.rxMsgType[b]));
					SpriteBatch spriteBatch2 = Main.spriteBatch;
					SpriteFont spriteFont2 = Main.fontMouseText;
					Vector2 vector217 = new Vector2((float)num26, (float)num27);
					Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch2.DrawString(spriteFont2, str1, vector217, white2, 0f, vector2, single25, SpriteEffects.None, 0f);
					num26 = num26 + 70;
					str1 = string.Format("{0:0,0}", Main.rxDataType[b]);
					SpriteBatch spriteBatch3 = Main.spriteBatch;
					SpriteFont spriteFont3 = Main.fontMouseText;
					Vector2 vector218 = new Vector2((float)num26, (float)num27);
					Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch3.DrawString(spriteFont3, str1, vector218, white3, 0f, vector2, single25, SpriteEffects.None, 0f);
					num26 = num26 + 70;
					str1 = string.Concat(b, ": ");
					SpriteBatch spriteBatch4 = Main.spriteBatch;
					SpriteFont spriteFont4 = Main.fontMouseText;
					Vector2 vector219 = new Vector2((float)num26, (float)num27);
					Microsoft.Xna.Framework.Color white4 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch4.DrawString(spriteFont4, str1, vector219, white4, 0f, vector2, single25, SpriteEffects.None, 0f);
					num26 = num26 + 30;
					str1 = string.Concat("tx:", string.Format("{0:0,0}", Main.txMsgType[b]));
					SpriteBatch spriteBatch5 = Main.spriteBatch;
					SpriteFont spriteFont5 = Main.fontMouseText;
					Vector2 vector220 = new Vector2((float)num26, (float)num27);
					Microsoft.Xna.Framework.Color white5 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch5.DrawString(spriteFont5, str1, vector220, white5, 0f, vector2, single25, SpriteEffects.None, 0f);
					num26 = num26 + 70;
					str1 = string.Format("{0:0,0}", Main.txDataType[b]);
					SpriteBatch spriteBatch6 = Main.spriteBatch;
					SpriteFont spriteFont6 = Main.fontMouseText;
					Vector2 vector221 = new Vector2((float)num26, (float)num27);
					Microsoft.Xna.Framework.Color white6 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch6.DrawString(spriteFont6, str1, vector221, white6, 0f, vector2, single25, SpriteEffects.None, 0f);
				}
			}
			if (Main.drawDiag)
			{
				for (int c = 0; c < 7; c++)
				{
					string str2 = "";
					int num29 = 20;
					int num30 = 220;
					num30 = num30 + c * 16;
					if (c == 0)
					{
						str2 = "Solid Tiles:";
					}
					if (c == 1)
					{
						str2 = "Misc. Tiles:";
					}
					if (c == 2)
					{
						str2 = "Walls Tiles:";
					}
					if (c == 3)
					{
						str2 = "Background Tiles:";
					}
					if (c == 4)
					{
						str2 = "Water Tiles:";
					}
					if (c == 5)
					{
						str2 = "Black Tiles:";
					}
					if (c == 6)
					{
						str2 = "Total Render:";
					}
					SpriteBatch spriteBatch7 = Main.spriteBatch;
					SpriteFont spriteFont7 = Main.fontMouseText;
					Vector2 vector222 = new Vector2((float)num29, (float)num30);
					Microsoft.Xna.Framework.Color color6 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch7.DrawString(spriteFont7, str2, vector222, color6, 0f, vector2, 1f, SpriteEffects.None, 0f);
				}
				for (int d = 0; d < 7; d++)
				{
					string str3 = "";
					int num31 = 180;
					int num32 = 220;
					num32 = num32 + d * 16;
					single = (d != 6 ? TimeLogger.GetDrawTime(d) : TimeLogger.GetDrawTotal());
					str3 = string.Format("{0:F2}ms", single);
					SpriteBatch spriteBatch8 = Main.spriteBatch;
					SpriteFont spriteFont8 = Main.fontMouseText;
					Vector2 vector223 = new Vector2((float)num31, (float)num32);
					Microsoft.Xna.Framework.Color white7 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch8.DrawString(spriteFont8, str3, vector223, white7, 0f, vector2, 1f, SpriteEffects.None, 0f);
				}
				for (int e = 0; e < 6; e++)
				{
					string str4 = "";
					int num33 = 20;
					int num34 = 346;
					num34 = num34 + e * 16;
					if (e == 0)
					{
						str4 = "Lighting Init:";
					}
					if (e == 1)
					{
						str4 = "Lighting Phase #1:";
					}
					if (e == 2)
					{
						str4 = "Lighting Phase #2:";
					}
					if (e == 3)
					{
						str4 = "Lighting Phase #3";
					}
					if (e == 4)
					{
						str4 = "Lighting Phase #4";
					}
					if (e == 5)
					{
						str4 = "Total Lighting:";
					}
					SpriteBatch spriteBatch9 = Main.spriteBatch;
					SpriteFont spriteFont9 = Main.fontMouseText;
					Vector2 vector224 = new Vector2((float)num33, (float)num34);
					Microsoft.Xna.Framework.Color color7 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch9.DrawString(spriteFont9, str4, vector224, color7, 0f, vector2, 1f, SpriteEffects.None, 0f);
				}
				for (int f = 0; f < 6; f++)
				{
					string str5 = "";
					int num35 = 180;
					int num36 = 346;
					num36 = num36 + f * 16;
					single1 = (f != 5 ? TimeLogger.GetLightingTime(f) : TimeLogger.GetLightingTotal());
					str5 = string.Format("{0:F2}ms", single1);
					SpriteBatch spriteBatch10 = Main.spriteBatch;
					SpriteFont spriteFont10 = Main.fontMouseText;
					Vector2 vector225 = new Vector2((float)num35, (float)num36);
					Microsoft.Xna.Framework.Color white8 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch10.DrawString(spriteFont10, str5, vector225, white8, 0f, vector2, 1f, SpriteEffects.None, 0f);
				}
				int num37 = 5;
				for (int g = 0; g < num37; g++)
				{
					string str6 = "";
					int num38 = 20;
					int num39 = 456 + g * 16;
					str6 = string.Concat("Render #", g, ":");
					SpriteBatch spriteBatch11 = Main.spriteBatch;
					SpriteFont spriteFont11 = Main.fontMouseText;
					Vector2 vector226 = new Vector2((float)num38, (float)num39);
					Microsoft.Xna.Framework.Color color8 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch11.DrawString(spriteFont11, str6, vector226, color8, 0f, vector2, 1f, SpriteEffects.None, 0f);
				}
				for (int h = 0; h < num37; h++)
				{
					string str7 = "";
					int num40 = 180;
					int num41 = 456 + h * 16;
					str7 = string.Format("{0:F2}ms", TimeLogger.GetRenderTime(h));
					SpriteBatch spriteBatch12 = Main.spriteBatch;
					SpriteFont spriteFont12 = Main.fontMouseText;
					Vector2 vector227 = new Vector2((float)num40, (float)num41);
					Microsoft.Xna.Framework.Color white9 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch12.DrawString(spriteFont12, str7, vector227, white9, 0f, vector2, 1f, SpriteEffects.None, 0f);
				}
				for (int i1 = 0; i1 < num37; i1++)
				{
					string str8 = "";
					int num42 = 230;
					int num43 = 456 + i1 * 16;
					num42 = num42 + 10;
					str8 = string.Format("{0:F2}ms", TimeLogger.GetRenderMax(i1));
					SpriteBatch spriteBatch13 = Main.spriteBatch;
					SpriteFont spriteFont13 = Main.fontMouseText;
					Vector2 vector228 = new Vector2((float)num42, (float)num43);
					Microsoft.Xna.Framework.Color color9 = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch13.DrawString(spriteFont13, str8, vector228, color9, 0f, vector2, 1f, SpriteEffects.None, 0f);
				}
				string str9 = "";
				int num44 = 20;
				int num45 = 456 + 16 * num37 + 16;
				str9 = "Update:";
				SpriteBatch spriteBatch14 = Main.spriteBatch;
				SpriteFont spriteFont14 = Main.fontMouseText;
				Vector2 vector229 = new Vector2((float)num44, (float)num45);
				Microsoft.Xna.Framework.Color white10 = Microsoft.Xna.Framework.Color.White;
				vector2 = new Vector2();
				spriteBatch14.DrawString(spriteFont14, str9, vector229, white10, 0f, vector2, 1f, SpriteEffects.None, 0f);
				str9 = "";
				num44 = 180;
				str9 = string.Format("{0:F2}ms", Main.upTimer);
				SpriteBatch spriteBatch15 = Main.spriteBatch;
				SpriteFont spriteFont15 = Main.fontMouseText;
				Vector2 vector230 = new Vector2((float)num44, (float)num45);
				Microsoft.Xna.Framework.Color color10 = Microsoft.Xna.Framework.Color.White;
				vector2 = new Vector2();
				spriteBatch15.DrawString(spriteFont15, str9, vector230, color10, 0f, vector2, 1f, SpriteEffects.None, 0f);
				str9 = "";
				num44 = 240;
				str9 = string.Format("{0:F2}ms", Main.upTimerMax);
				SpriteBatch spriteBatch16 = Main.spriteBatch;
				SpriteFont spriteFont16 = Main.fontMouseText;
				Vector2 vector231 = new Vector2((float)num44, (float)num45);
				Microsoft.Xna.Framework.Color white11 = Microsoft.Xna.Framework.Color.White;
				vector2 = new Vector2();
				spriteBatch16.DrawString(spriteFont16, str9, vector231, white11, 0f, vector2, 1f, SpriteEffects.None, 0f);
			}
			if (Main.signBubble)
			{
				int width = (int)((float)Main.signX - Main.screenPosition.X);
				int y4 = (int)((float)Main.signY - Main.screenPosition.Y);
				if (Main.player[Main.myPlayer].gravDir == -1f)
				{
					y4 = Main.screenHeight - (int)((float)Main.signY - Main.screenPosition.Y) - 32;
				}
				SpriteEffects spriteEffect = SpriteEffects.None;
				if ((float)Main.signX <= Main.player[Main.myPlayer].position.X + (float)Main.player[Main.myPlayer].width)
				{
					width = width + 8;
				}
				else
				{
					spriteEffect = SpriteEffects.FlipHorizontally;
					width = width + (-8 - Main.chat2Texture.Width);
				}
				y4 = y4 - 22;
				SpriteBatch spriteBatch17 = Main.spriteBatch;
				Texture2D texture2D2 = Main.chat2Texture;
				Vector2 vector232 = new Vector2((float)width, (float)y4);
				Microsoft.Xna.Framework.Rectangle? nullable1 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chat2Texture.Width, Main.chat2Texture.Height));
				Microsoft.Xna.Framework.Color color11 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
				vector2 = new Vector2();
				spriteBatch17.Draw(texture2D2, vector232, nullable1, color11, 0f, vector2, 1f, spriteEffect, 0f);
				Main.signBubble = false;
			}
			for (int j1 = 0; j1 < 255; j1++)
			{
				if (Main.player[j1].active && Main.myPlayer != j1 && !Main.player[j1].dead)
				{
					Microsoft.Xna.Framework.Rectangle rectangle3 = new Microsoft.Xna.Framework.Rectangle((int)((double)Main.player[j1].position.X + (double)Main.player[j1].width * 0.5 - 16), (int)(Main.player[j1].position.Y + (float)Main.player[j1].height - 48f), 32, 48);
					if (Main.player[Main.myPlayer].team > 0 && Main.player[Main.myPlayer].team == Main.player[j1].team)
					{
						Microsoft.Xna.Framework.Rectangle rectangle4 = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
						string str10 = Main.player[j1].name;
						if (Main.player[j1].statLife < Main.player[j1].statLifeMax2)
						{
							object obj = str10;
							object[] objArray = new object[] { obj, ": ", Main.player[j1].statLife, "/", Main.player[j1].statLifeMax2 };
							str10 = string.Concat(objArray);
						}
						Vector2 x3 = Main.fontMouseText.MeasureString(str10);
						float y5 = 0f;
						if (Main.player[j1].chatOverhead.timeLeft > 0)
						{
							y5 = -x3.Y;
						}
						float single26 = 0f;
						float single27 = (float)Main.mouseTextColor / 255f;
						Microsoft.Xna.Framework.Color color12 = new Microsoft.Xna.Framework.Color((int)((float)Main.teamColor[Main.player[j1].team].R * single27), (int)((float)Main.teamColor[Main.player[j1].team].G * single27), (int)((float)Main.teamColor[Main.player[j1].team].B * single27), (int)Main.mouseTextColor);
						Vector2 vector233 = new Vector2((float)(Main.screenWidth / 2) + Main.screenPosition.X, (float)(Main.screenHeight / 2) + Main.screenPosition.Y);
						float x4 = Main.player[j1].position.X + (float)(Main.player[j1].width / 2) - vector233.X;
						float y6 = Main.player[j1].position.Y - x3.Y - 2f + y5 - vector233.Y;
						float single28 = (float)Math.Sqrt((double)(x4 * x4 + y6 * y6));
						int num46 = Main.screenHeight;
						if (Main.screenHeight > Main.screenWidth)
						{
							num46 = Main.screenWidth;
						}
						num46 = num46 / 2 - 30;
						if (num46 < 100)
						{
							num46 = 100;
						}
						if (single28 >= (float)num46)
						{
							single26 = single28;
							single28 = (float)num46 / single28;
							x3.X = (float)(Main.screenWidth / 2) + x4 * single28 - x3.X / 2f;
							x3.Y = (float)(Main.screenHeight / 2) + y6 * single28;
						}
						else
						{
							x3.X = Main.player[j1].position.X + (float)(Main.player[j1].width / 2) - x3.X / 2f - Main.screenPosition.X;
							x3.Y = Main.player[j1].position.Y - x3.Y - 2f + y5 - Main.screenPosition.Y;
						}
						if (Main.player[Main.myPlayer].gravDir == -1f)
						{
							x3.Y = (float)Main.screenHeight - x3.Y;
						}
						if (single26 > 0f)
						{
							string str11 = string.Concat("(", (int)(single26 / 16f * 2f), " ft)");
							Vector2 x5 = Main.fontMouseText.MeasureString(str11);
							x5.X = x3.X + Main.fontMouseText.MeasureString(str10).X / 2f - x5.X / 2f;
							x5.Y = x3.Y + Main.fontMouseText.MeasureString(str10).Y / 2f - x5.Y / 2f - 20f;
							SpriteBatch spriteBatch18 = Main.spriteBatch;
							SpriteFont spriteFont17 = Main.fontMouseText;
							Vector2 vector234 = new Vector2(x5.X - 2f, x5.Y);
							Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
							vector2 = new Vector2();
							spriteBatch18.DrawString(spriteFont17, str11, vector234, black, 0f, vector2, 1f, SpriteEffects.None, 0f);
							SpriteBatch spriteBatch19 = Main.spriteBatch;
							SpriteFont spriteFont18 = Main.fontMouseText;
							Vector2 vector235 = new Vector2(x5.X + 2f, x5.Y);
							Microsoft.Xna.Framework.Color black1 = Microsoft.Xna.Framework.Color.Black;
							vector2 = new Vector2();
							spriteBatch19.DrawString(spriteFont18, str11, vector235, black1, 0f, vector2, 1f, SpriteEffects.None, 0f);
							SpriteBatch spriteBatch20 = Main.spriteBatch;
							SpriteFont spriteFont19 = Main.fontMouseText;
							Vector2 vector236 = new Vector2(x5.X, x5.Y - 2f);
							Microsoft.Xna.Framework.Color black2 = Microsoft.Xna.Framework.Color.Black;
							vector2 = new Vector2();
							spriteBatch20.DrawString(spriteFont19, str11, vector236, black2, 0f, vector2, 1f, SpriteEffects.None, 0f);
							SpriteBatch spriteBatch21 = Main.spriteBatch;
							SpriteFont spriteFont20 = Main.fontMouseText;
							Vector2 vector237 = new Vector2(x5.X, x5.Y + 2f);
							Microsoft.Xna.Framework.Color black3 = Microsoft.Xna.Framework.Color.Black;
							vector2 = new Vector2();
							spriteBatch21.DrawString(spriteFont20, str11, vector237, black3, 0f, vector2, 1f, SpriteEffects.None, 0f);
							SpriteBatch spriteBatch22 = Main.spriteBatch;
							SpriteFont spriteFont21 = Main.fontMouseText;
							vector2 = new Vector2();
							spriteBatch22.DrawString(spriteFont21, str11, x5, color12, 0f, vector2, 1f, SpriteEffects.None, 0f);
						}
						SpriteBatch spriteBatch23 = Main.spriteBatch;
						SpriteFont spriteFont22 = Main.fontMouseText;
						Vector2 vector238 = new Vector2(x3.X - 2f, x3.Y);
						Microsoft.Xna.Framework.Color black4 = Microsoft.Xna.Framework.Color.Black;
						vector2 = new Vector2();
						spriteBatch23.DrawString(spriteFont22, str10, vector238, black4, 0f, vector2, 1f, SpriteEffects.None, 0f);
						SpriteBatch spriteBatch24 = Main.spriteBatch;
						SpriteFont spriteFont23 = Main.fontMouseText;
						Vector2 vector239 = new Vector2(x3.X + 2f, x3.Y);
						Microsoft.Xna.Framework.Color black5 = Microsoft.Xna.Framework.Color.Black;
						vector2 = new Vector2();
						spriteBatch24.DrawString(spriteFont23, str10, vector239, black5, 0f, vector2, 1f, SpriteEffects.None, 0f);
						SpriteBatch spriteBatch25 = Main.spriteBatch;
						SpriteFont spriteFont24 = Main.fontMouseText;
						Vector2 vector240 = new Vector2(x3.X, x3.Y - 2f);
						Microsoft.Xna.Framework.Color black6 = Microsoft.Xna.Framework.Color.Black;
						vector2 = new Vector2();
						spriteBatch25.DrawString(spriteFont24, str10, vector240, black6, 0f, vector2, 1f, SpriteEffects.None, 0f);
						SpriteBatch spriteBatch26 = Main.spriteBatch;
						SpriteFont spriteFont25 = Main.fontMouseText;
						Vector2 vector241 = new Vector2(x3.X, x3.Y + 2f);
						Microsoft.Xna.Framework.Color black7 = Microsoft.Xna.Framework.Color.Black;
						vector2 = new Vector2();
						spriteBatch26.DrawString(spriteFont25, str10, vector241, black7, 0f, vector2, 1f, SpriteEffects.None, 0f);
						SpriteBatch spriteBatch27 = Main.spriteBatch;
						SpriteFont spriteFont26 = Main.fontMouseText;
						vector2 = new Vector2();
						spriteBatch27.DrawString(spriteFont26, str10, x3, color12, 0f, vector2, 1f, SpriteEffects.None, 0f);
					}
				}
			}
			if (Main.hairWindow)
			{
				this.DrawHairWindow();
			}
			if (Main.clothesWindow)
			{
				this.DrawClothesWindow();
			}
			this.GUIChatDraw();
			Main.inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
			Main.invAlpha = Main.invAlpha + Main.invDir * 0.2f;
			if (Main.invAlpha > 240f)
			{
				Main.invAlpha = 240f;
				Main.invDir = -1f;
			}
			if (Main.invAlpha < 180f)
			{
				Main.invAlpha = 180f;
				Main.invDir = 1f;
			}
			Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)Main.invAlpha, (int)Main.invAlpha, (int)Main.invAlpha, (int)Main.invAlpha);
			Main.mouseText = false;
			Main.rare = 0;
			this.GUIBarsDraw();
			if (Main.player[Main.myPlayer].dead)
			{
				Main.playerInventory = false;
			}
			if (!Main.playerInventory)
			{
				Main.player[Main.myPlayer].chest = -1;
				if (Main.craftGuide)
				{
					Main.craftGuide = false;
				}
				Recipe.FindRecipes();
				Main.reforge = false;
			}
			Main.hoverItemName = "";
			if (!Main.playerInventory)
			{
				Main.recFastScroll = true;
				this.mouseNPC = -1;
				Main.EquipPage = 0;
			}
			else if (!Main.ignoreErrors)
			{
				this.DrawInventory();
			}
			else
			{
				try
				{
					this.DrawInventory();
				}
				catch (Exception exception2)
				{
					TimeLogger.DrawException(exception2);
				}
			}
			this.DrawInfoAccs();
			if (Main.playerInventory || Main.player[Main.myPlayer].ghost)
			{
				string str12 = Lang.inter[62];
				Vector2 vector242 = Main.fontMouseText.MeasureString("Settings");
				Vector2 vector243 = Main.fontMouseText.MeasureString(Lang.inter[62]);
				Vector2 vector244 = Main.fontDeathText.MeasureString(str12);
				int num47 = Main.screenWidth - 110;
				int num48 = Main.screenHeight - 20;
				if (Main.screenHeight < 650 || Main.screenHeight < 900 && Main.mapStyle == 1)
				{
					num47 = num47 - 140;
				}
				float x6 = vector242.X / vector243.X;
				if (Main.mouseExit)
				{
					if ((double)Main.exitScale < 0.96)
					{
						Main.exitScale = Main.exitScale + 0.02f;
					}
				}
				else if ((double)Main.exitScale > 0.8)
				{
					Main.exitScale = Main.exitScale - 0.02f;
				}
				for (int k1 = 0; k1 < 5; k1++)
				{
					int num49 = 0;
					int num50 = 0;
					Microsoft.Xna.Framework.Color black8 = Microsoft.Xna.Framework.Color.Black;
					if (k1 == 0)
					{
						num49 = -2;
					}
					if (k1 == 1)
					{
						num49 = 2;
					}
					if (k1 == 2)
					{
						num50 = -2;
					}
					if (k1 == 3)
					{
						num50 = 2;
					}
					if (k1 == 4)
					{
						black8 = Microsoft.Xna.Framework.Color.White;
					}
					Main.spriteBatch.DrawString(Main.fontDeathText, str12, new Vector2((float)(num47 + num49), (float)(num48 + num50)), black8, 0f, new Vector2(vector244.X / 2f, vector244.Y / 2f), (Main.exitScale - 0.2f) * x6, SpriteEffects.None, 0f);
				}
				if ((float)Main.mouseX <= (float)num47 - vector244.X / 2f || (float)Main.mouseX >= (float)num47 + vector244.X / 2f || (float)Main.mouseY <= (float)num48 - vector244.Y / 2f || (float)Main.mouseY >= (float)num48 + vector244.Y / 2f - 10f)
				{
					Main.mouseExit = false;
				}
				else
				{
					if (!Main.mouseExit)
					{
						Main.PlaySound(12, -1, -1, 1);
					}
					Main.mouseExit = true;
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeftRelease && Main.mouseLeft)
					{
						Main.mouseExit = false;
						Main.exitScale = 0.8f;
						IngameOptions.Open();
					}
				}
			}
			this.GUIHotbarDraw();
			if (Main.mouseItem.stack <= 0)
			{
				Main.mouseItem.type = 0;
			}
			if (Main.hoverItemName != null && Main.hoverItemName != "" && Main.mouseItem.type == 0)
			{
				Main.player[Main.myPlayer].showItemIcon = false;
				this.MouseText(Main.hoverItemName, Main.rare, 0);
				Main.mouseText = true;
			}
			if (!Main.ignoreErrors)
			{
				this.DrawPlayerChat();
			}
			else
			{
				try
				{
					this.DrawPlayerChat();
				}
				catch (Exception exception3)
				{
					TimeLogger.DrawException(exception3);
				}
			}
			if (Main.player[Main.myPlayer].dead)
			{
				string str13 = Lang.inter[38];
				SpriteBatch spriteBatch28 = Main.spriteBatch;
				SpriteFont spriteFont27 = Main.fontDeathText;
				Vector2 vector245 = new Vector2((float)(Main.screenWidth / 2) - Main.fontDeathText.MeasureString(str13).X / 2f, (float)(Main.screenHeight / 2 - 20));
				Microsoft.Xna.Framework.Color deathAlpha = Main.player[Main.myPlayer].GetDeathAlpha(Microsoft.Xna.Framework.Color.Transparent);
				vector2 = new Vector2();
				spriteBatch28.DrawString(spriteFont27, str13, vector245, deathAlpha, 0f, vector2, 1f, SpriteEffects.None, 0f);
				if (Main.player[Main.myPlayer].lostCoins > 0)
				{
					string str14 = string.Concat("dropped ", Main.player[Main.myPlayer].lostCoinString);
					SpriteBatch spriteBatch29 = Main.spriteBatch;
					SpriteFont spriteFont28 = Main.fontMouseText;
					Vector2 vector246 = new Vector2((float)(Main.screenWidth / 2) - Main.fontMouseText.MeasureString(str14).X / 2f, (float)(Main.screenHeight / 2 + 30));
					Microsoft.Xna.Framework.Color deathAlpha1 = Main.player[Main.myPlayer].GetDeathAlpha(Microsoft.Xna.Framework.Color.Transparent);
					vector2 = new Vector2();
					spriteBatch29.DrawString(spriteFont28, str14, vector246, deathAlpha1, 0f, vector2, 1f, SpriteEffects.None, 0f);
				}
			}
			if (Main.cursorOverride != -1)
			{
				Microsoft.Xna.Framework.Color color13 = new Microsoft.Xna.Framework.Color((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f));
				Microsoft.Xna.Framework.Color white12 = Main.cursorColor;
				bool flag2 = true;
				bool flag3 = true;
				float single29 = 0f;
				Vector2 vector247 = new Vector2();
				float single30 = 1f;
				if (Main.cursorOverride == 2)
				{
					flag2 = false;
					white12 = Microsoft.Xna.Framework.Color.White;
					single30 = 0.7f;
					vector247 = new Vector2(0.1f);
				}
				if (Main.cursorOverride == 3)
				{
					flag2 = false;
					white12 = Microsoft.Xna.Framework.Color.White;
				}
				if (Main.cursorOverride == 6)
				{
					flag2 = false;
					white12 = Microsoft.Xna.Framework.Color.White;
				}
				if (Main.cursorOverride == 7)
				{
					flag2 = false;
					white12 = Microsoft.Xna.Framework.Color.White;
				}
				if (flag2)
				{
					nullable = null;
					Main.spriteBatch.Draw(Main.cursorTextures[Main.cursorOverride], new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1)), nullable, color13, single29, vector247 * Main.cursorTextures[Main.cursorOverride].Size(), Main.cursorScale * 1.1f * single30, SpriteEffects.None, 0f);
				}
				if (flag3)
				{
					nullable = null;
					Main.spriteBatch.Draw(Main.cursorTextures[Main.cursorOverride], new Vector2((float)Main.mouseX, (float)Main.mouseY), nullable, white12, single29, vector247 * Main.cursorTextures[Main.cursorOverride].Size(), Main.cursorScale * single30, SpriteEffects.None, 0f);
				}
			}
			else if (!Main.smartDigEnabled)
			{
				SpriteBatch spriteBatch30 = Main.spriteBatch;
				Texture2D texture2D3 = Main.cursorTextures[0];
				Vector2 vector248 = new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1));
				nullable = null;
				Microsoft.Xna.Framework.Color color14 = new Microsoft.Xna.Framework.Color((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f));
				vector2 = new Vector2();
				spriteBatch30.Draw(texture2D3, vector248, nullable, color14, 0f, vector2, Main.cursorScale * 1.1f, SpriteEffects.None, 0f);
				SpriteBatch spriteBatch31 = Main.spriteBatch;
				Texture2D texture2D4 = Main.cursorTextures[0];
				Vector2 vector249 = new Vector2((float)Main.mouseX, (float)Main.mouseY);
				nullable = null;
				Microsoft.Xna.Framework.Color color15 = Main.cursorColor;
				vector2 = new Vector2();
				spriteBatch31.Draw(texture2D4, vector249, nullable, color15, 0f, vector2, Main.cursorScale, SpriteEffects.None, 0f);
			}
			else
			{
				SpriteBatch spriteBatch32 = Main.spriteBatch;
				Texture2D texture2D5 = Main.cursorTextures[1];
				Vector2 vector250 = new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1));
				nullable = null;
				Microsoft.Xna.Framework.Color color16 = new Microsoft.Xna.Framework.Color((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f));
				vector2 = new Vector2();
				spriteBatch32.Draw(texture2D5, vector250, nullable, color16, 0f, vector2, Main.cursorScale * 1.1f, SpriteEffects.None, 0f);
				SpriteBatch spriteBatch33 = Main.spriteBatch;
				Texture2D texture2D6 = Main.cursorTextures[1];
				Vector2 vector251 = new Vector2((float)Main.mouseX, (float)Main.mouseY);
				nullable = null;
				Microsoft.Xna.Framework.Color color17 = Main.cursorColor;
				vector2 = new Vector2();
				spriteBatch33.Draw(texture2D6, vector251, nullable, color17, 0f, vector2, Main.cursorScale, SpriteEffects.None, 0f);
			}
			if (Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
			{
				this.mouseNPC = -1;
				Main.player[Main.myPlayer].showItemIcon = false;
				Main.player[Main.myPlayer].showItemIcon2 = 0;
				Main.mouseText = true;
				float single31 = Main.inventoryScale;
				Main.inventoryScale = Main.cursorScale;
				SpriteBatch spriteBatch34 = Main.spriteBatch;
				Vector2 vector252 = new Vector2((float)Main.mouseX, (float)Main.mouseY);
				color = new Microsoft.Xna.Framework.Color();
				ItemSlot.Draw(spriteBatch34, ref Main.mouseItem, 21, vector252, color);
				Main.inventoryScale = single31;
			}
			else if (this.mouseNPC > -1)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				Main.mouseText = false;
				float single32 = 1f;
				single32 = single32 * Main.cursorScale;
				SpriteBatch spriteBatch35 = Main.spriteBatch;
				Texture2D texture2D7 = Main.npcHeadTexture[this.mouseNPC];
				Vector2 vector253 = new Vector2((float)Main.mouseX + 26f * single32 - (float)Main.npcHeadTexture[this.mouseNPC].Width * 0.5f * single32, (float)Main.mouseY + 26f * single32 - (float)Main.npcHeadTexture[this.mouseNPC].Height * 0.5f * single32);
				Microsoft.Xna.Framework.Rectangle? nullable2 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[this.mouseNPC].Width, Main.npcHeadTexture[this.mouseNPC].Height));
				Microsoft.Xna.Framework.Color white13 = Microsoft.Xna.Framework.Color.White;
				vector2 = new Vector2();
				spriteBatch35.Draw(texture2D7, vector253, nullable2, white13, 0f, vector2, single32, SpriteEffects.None, 0f);
				if (Main.mouseRight && Main.mouseRightRelease)
				{
					Main.PlaySound(12, -1, -1, 1);
					this.mouseNPC = -1;
				}
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					if (this.mouseNPC != 0)
					{
						int num51 = 0;
						int num52 = 0;
						while (num52 < 200)
						{
							if (!Main.npc[num52].active || Main.npc[num52].type != NPC.NumToType(this.mouseNPC))
							{
								num52++;
							}
							else
							{
								num51 = num52;
								break;
							}
						}
						if (num51 < 0)
						{
							this.mouseNPC = 0;
						}
						else
						{
							int x7 = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
							int y7 = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
							if (WorldGen.MoveNPC(x7, y7, num51))
							{
								this.mouseNPC = -1;
								WorldGen.moveRoom(x7, y7, num51);
								Main.PlaySound(12, -1, -1, 1);
							}
						}
					}
					else
					{
						int x8 = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
						int y8 = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
						if (Main.player[Main.myPlayer].gravDir == -1f)
						{
							y8 = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
						}
						if (WorldGen.MoveNPC(x8, y8, -1))
						{
							Main.NewText(Lang.inter[39], 255, 240, 20, false);
						}
					}
				}
			}
			if (!Main.ignoreErrors)
			{
				this.DrawMouseOver();
			}
			else
			{
				try
				{
					this.DrawMouseOver();
				}
				catch (Exception exception4)
				{
					TimeLogger.DrawException(exception4);
				}
			}
			if (!Main.mouseRight)
			{
				Main.npcChatRelease = true;
			}
			else
			{
				Main.npcChatRelease = false;
			}
			if (Main.player[Main.myPlayer].showItemIcon && (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type > 0 || Main.player[Main.myPlayer].showItemIcon2 != 0))
			{
				int num53 = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type;
				Microsoft.Xna.Framework.Color alpha = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].GetAlpha(Microsoft.Xna.Framework.Color.White);
				Microsoft.Xna.Framework.Color color18 = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].GetColor(Microsoft.Xna.Framework.Color.White);
				if (Main.player[Main.myPlayer].showItemIcon2 != 0)
				{
					num53 = Main.player[Main.myPlayer].showItemIcon2;
					alpha = Microsoft.Xna.Framework.Color.White;
					color18 = new Microsoft.Xna.Framework.Color();
				}
				if (Main.player[Main.myPlayer].showItemIcon2 == 269)
				{
					alpha = Main.player[Main.myPlayer].shirtColor;
				}
				float single33 = 1f;
				single33 = Main.cursorScale;
				ItemSlot.GetItemLight(ref alpha, num53, false);
				SpriteEffects spriteEffect1 = SpriteEffects.None;
				if ((Main.player[Main.myPlayer].showItemIcon2 == 928 || Main.player[Main.myPlayer].showItemIcon2 == 1337 || Main.player[Main.myPlayer].showItemIcon2 == 3369) && Main.player[Main.myPlayer].showItemIconR)
				{
					spriteEffect1 = SpriteEffects.FlipHorizontally;
				}
				if (num53 > 0)
				{
					SpriteBatch spriteBatch36 = Main.spriteBatch;
					Texture2D texture2D8 = Main.itemTexture[num53];
					Vector2 vector254 = new Vector2((float)(Main.mouseX + 10), (float)(Main.mouseY + 10));
					Microsoft.Xna.Framework.Rectangle? nullable3 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[num53].Width, Main.itemTexture[num53].Height));
					vector2 = new Vector2();
					spriteBatch36.Draw(texture2D8, vector254, nullable3, alpha, 0f, vector2, single33, spriteEffect1, 0f);
				}
				if (Main.player[Main.myPlayer].showItemIconText != "")
				{
					this.MouseText(Main.player[Main.myPlayer].showItemIconText, 0, 0);
				}
				if (Main.player[Main.myPlayer].showItemIcon2 == 0)
				{
					Microsoft.Xna.Framework.Color color19 = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].color;
					color = new Microsoft.Xna.Framework.Color();
					if (color19 != color)
					{
						SpriteBatch spriteBatch37 = Main.spriteBatch;
						Texture2D texture2D9 = Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type];
						Vector2 vector255 = new Vector2((float)(Main.mouseX + 10), (float)(Main.mouseY + 10));
						Microsoft.Xna.Framework.Rectangle? nullable4 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type].Width, Main.itemTexture[Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type].Height));
						vector2 = new Vector2();
						spriteBatch37.Draw(texture2D9, vector255, nullable4, color18, 0f, vector2, single33, SpriteEffects.None, 0f);
					}
				}
			}
			Main.player[Main.myPlayer].showItemIcon = false;
			Main.player[Main.myPlayer].showItemIcon2 = 0;
			Main.player[Main.myPlayer].showItemIconText = string.Empty;
			Main.cursorOverride = -1;
		}

		public static void DrawInvasionProgress()
		{
			if (Main.invasionProgress == -1)
			{
				return;
			}
			if (Main.invasionProgressMode == 2 && Main.invasionProgressNearInvasion && Main.invasionProgressDisplayLeft < 160)
			{
				Main.invasionProgressDisplayLeft = 160;
			}
			if (!Main.gamePaused && Main.invasionProgressDisplayLeft > 0)
			{
				Main.invasionProgressDisplayLeft = Main.invasionProgressDisplayLeft - 1;
			}
			if (Main.invasionProgressDisplayLeft <= 0)
			{
				Main.invasionProgressAlpha = Main.invasionProgressAlpha - 0.05f;
			}
			else
			{
				Main.invasionProgressAlpha = Main.invasionProgressAlpha + 0.05f;
			}
			if (Main.invasionProgressAlpha < 0f)
			{
				Main.invasionProgressAlpha = 0f;
			}
			if (Main.invasionProgressAlpha > 1f)
			{
				Main.invasionProgressAlpha = 1f;
			}
			if (Main.invasionProgressAlpha <= 0f)
			{
				return;
			}
			float single = 0.5f + Main.invasionProgressAlpha * 0.5f;
			Texture2D texture2D = Main.extraTexture[9];
			string str = "";
			Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
			if (Main.invasionProgressIcon == 1)
			{
				texture2D = Main.extraTexture[8];
				str = Lang.inter[83];
				white = new Microsoft.Xna.Framework.Color(64, 109, 164) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 2)
			{
				texture2D = Main.extraTexture[12];
				str = Lang.inter[84];
				white = new Microsoft.Xna.Framework.Color(112, 86, 114) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 6)
			{
				texture2D = Main.extraTexture[10];
				str = Lang.inter[85];
				white = new Microsoft.Xna.Framework.Color(165, 160, 155) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 5)
			{
				texture2D = Main.extraTexture[11];
				str = Lang.inter[86];
				white = new Microsoft.Xna.Framework.Color(148, 122, 72) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 4)
			{
				texture2D = Main.extraTexture[7];
				str = Lang.inter[87];
				white = new Microsoft.Xna.Framework.Color(173, 135, 140) * 0.5f;
			}
			else if (Main.invasionProgressIcon == 3)
			{
				texture2D = Main.extraTexture[9];
				str = Lang.inter[88];
				white = new Microsoft.Xna.Framework.Color(94, 72, 131) * 0.5f;
			}
			if (Main.invasionProgressWave <= 0)
			{
				int num = (int)(200f * single);
				int num1 = (int)(45f * single);
				Vector2 vector2 = new Vector2((float)(Main.screenWidth - 120), (float)(Main.screenHeight - 40));
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)vector2.X - num / 2, (int)vector2.Y - num1 / 2, num, num1);
				Utils.DrawInvBG(Main.spriteBatch, rectangle, new Microsoft.Xna.Framework.Color(63, 65, 151, 255) * 0.785f);
				string str1 = "";
				if (Main.invasionProgressMax != 0)
				{
					int num2 = (int)((float)Main.invasionProgress * 100f / (float)Main.invasionProgressMax);
					str1 = string.Concat(num2.ToString(), "%");
				}
				else
				{
					str1 = Main.invasionProgress.ToString();
				}
				str1 = string.Concat("Cleared ", str1);
				Texture2D texture2D1 = Main.colorBarTexture;
				Texture2D texture2D2 = Main.colorBlipTexture;
				if (Main.invasionProgressMax != 0)
				{
					Microsoft.Xna.Framework.Rectangle? nullable = null;
					Main.spriteBatch.Draw(texture2D1, vector2, nullable, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, 0f, new Vector2((float)(texture2D1.Width / 2), 0f), single, SpriteEffects.None, 0f);
					float single1 = MathHelper.Clamp((float)Main.invasionProgress / (float)Main.invasionProgressMax, 0f, 1f);
					float single2 = 169f * single;
					float single3 = 8f * single;
					Vector2 unitY = (vector2 + (Vector2.UnitY * single3)) + (Vector2.UnitX * 1f);
					Utils.DrawBorderString(Main.spriteBatch, str1, unitY, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, single, 0.5f, 1f, -1);
					unitY = unitY + ((Vector2.UnitX * (single1 - 0.5f)) * single2);
					Main.spriteBatch.Draw(Main.magicPixel, unitY, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 241, 51) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(single2 * single1, single3), SpriteEffects.None, 0f);
					Main.spriteBatch.Draw(Main.magicPixel, unitY, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 165, 0, 127) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, single3), SpriteEffects.None, 0f);
					Main.spriteBatch.Draw(Main.magicPixel, unitY, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), Microsoft.Xna.Framework.Color.Black * Main.invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(single2 * (1f - single1), single3), SpriteEffects.None, 0f);
				}
			}
			else
			{
				int num3 = (int)(200f * single);
				int num4 = (int)(45f * single);
				Vector2 vector21 = new Vector2((float)(Main.screenWidth - 120), (float)(Main.screenHeight - 40));
				Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int)vector21.X - num3 / 2, (int)vector21.Y - num4 / 2, num3, num4);
				Utils.DrawInvBG(Main.spriteBatch, rectangle1, new Microsoft.Xna.Framework.Color(63, 65, 151, 255) * 0.785f);
				string str2 = "";
				if (Main.invasionProgressMax != 0)
				{
					int num5 = (int)((float)Main.invasionProgress * 100f / (float)Main.invasionProgressMax);
					str2 = string.Concat(num5.ToString(), "%");
				}
				else
				{
					str2 = string.Concat(Main.invasionProgress.ToString(), " points");
				}
				object[] objArray = new object[] { "Wave ", Main.invasionProgressWave, ": ", str2 };
				str2 = string.Concat(objArray);
				Texture2D texture2D3 = Main.colorBarTexture;
				Texture2D texture2D4 = Main.colorBlipTexture;
				float single4 = MathHelper.Clamp((float)Main.invasionProgress / (float)Main.invasionProgressMax, 0f, 1f);
				if (Main.invasionProgressMax == 0)
				{
					single4 = 1f;
				}
				float single5 = 169f * single;
				float single6 = 8f * single;
				Vector2 unitX = (vector21 + (Vector2.UnitY * single6)) + (Vector2.UnitX * 1f);
				Utils.DrawBorderString(Main.spriteBatch, str2, unitX, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, single, 0.5f, 1f, -1);
				Microsoft.Xna.Framework.Rectangle? nullable1 = null;
				Main.spriteBatch.Draw(texture2D3, vector21, nullable1, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, 0f, new Vector2((float)(texture2D3.Width / 2), 0f), single, SpriteEffects.None, 0f);
				unitX = unitX + ((Vector2.UnitX * (single4 - 0.5f)) * single5);
				Main.spriteBatch.Draw(Main.magicPixel, unitX, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 241, 51) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(single5 * single4, single6), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, unitX, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), new Microsoft.Xna.Framework.Color(255, 165, 0, 127) * Main.invasionProgressAlpha, 0f, new Vector2(1f, 0.5f), new Vector2(2f, single6), SpriteEffects.None, 0f);
				Main.spriteBatch.Draw(Main.magicPixel, unitX, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 1, 1)), Microsoft.Xna.Framework.Color.Black * Main.invasionProgressAlpha, 0f, new Vector2(0f, 0.5f), new Vector2(single5 * (1f - single4), single6), SpriteEffects.None, 0f);
			}
			Vector2 vector22 = new Vector2((float)(Main.screenWidth - 120), (float)(Main.screenHeight - 80));
			Vector2 vector23 = Main.fontItemStack.MeasureString(str);
			Microsoft.Xna.Framework.Rectangle rectangle2 = Utils.CenteredRectangle(vector22, (vector23 + new Vector2((float)(texture2D.Width + 20), 10f)) * single);
			Utils.DrawInvBG(Main.spriteBatch, rectangle2, white);
			Microsoft.Xna.Framework.Rectangle? nullable2 = null;
			Main.spriteBatch.Draw(texture2D, rectangle2.Left() + ((Vector2.UnitX * single) * 8f), nullable2, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, 0f, new Vector2(0f, (float)(texture2D.Height / 2)), single * 0.8f, SpriteEffects.None, 0f);
			Utils.DrawBorderString(Main.spriteBatch, str, rectangle2.Right() + ((Vector2.UnitX * single) * -8f), Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, single * 0.9f, 1f, 0.4f, -1);
		}

		protected void DrawInventory()
		{
			string str;
			Microsoft.Xna.Framework.Rectangle? nullable;
			object obj;
			object[] objArray;
			if (Main.netMode == 1)
			{
				Main.DrawPVPIcons();
			}
			Main.inventoryScale = 0.85f;
			int num = 448;
			int num1 = 258;
			if (Main.player[Main.myPlayer].chest != -1 && !Main.recBigList || Main.npcShop > 0)
			{
				num1 = num1 + 168;
				Main.inventoryScale = 0.755f;
				num = num + 5;
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(150, 150, 150, 150);
			if (Main.mouseX >= num && (float)Main.mouseX <= (float)num + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num1 && (float)Main.mouseY <= (float)num1 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.mouseLeftRelease && Main.mouseLeft)
				{
					ItemSlot.LeftClick(ref Main.trashItem, 6);
					Recipe.FindRecipes();
				}
				ItemSlot.MouseHover(ref Main.trashItem, 6);
			}
			SpriteBatch spriteBatch = Main.spriteBatch;
			Vector2 vector2 = new Vector2((float)num, (float)num1);
			Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color();
			ItemSlot.Draw(spriteBatch, ref Main.trashItem, 6, vector2, color1);
			SpriteBatch spriteBatch1 = Main.spriteBatch;
			SpriteFont spriteFont = Main.fontMouseText;
			string str1 = Lang.inter[4];
			Vector2 vector21 = new Vector2(40f, 0f);
			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			Vector2 vector22 = new Vector2();
			spriteBatch1.DrawString(spriteFont, str1, vector21, color2, 0f, vector22, 1f, SpriteEffects.None, 0f);
			Main.inventoryScale = 0.85f;
			if (Main.mouseX > 20 && Main.mouseX < (int)(20f + 560f * Main.inventoryScale) && Main.mouseY > 20 && Main.mouseY < (int)(20f + 224f * Main.inventoryScale))
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			for (int i = 0; i < 10; i++)
			{
				for (int j = 0; j < 5; j++)
				{
					int num2 = (int)(20f + (float)(i * 56) * Main.inventoryScale);
					int num3 = (int)(20f + (float)(j * 56) * Main.inventoryScale);
					int num4 = i + j * 10;
					Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (Main.mouseX >= num2 && (float)Main.mouseX <= (float)num2 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num3 && (float)Main.mouseY <= (float)num3 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						ItemSlot.OverrideHover(Main.player[Main.myPlayer].inventory, 0, num4);
						if (Main.player[Main.myPlayer].inventoryChestStack[num4] && (Main.player[Main.myPlayer].inventory[num4].type == 0 || Main.player[Main.myPlayer].inventory[num4].stack == 0))
						{
							Main.player[Main.myPlayer].inventoryChestStack[num4] = false;
						}
						if (!Main.player[Main.myPlayer].inventoryChestStack[num4])
						{
							if (!Main.mouseLeftRelease || !Main.mouseLeft)
							{
								ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 0, num4);
							}
							else
							{
								ItemSlot.LeftClick(Main.player[Main.myPlayer].inventory, 0, num4);
								Recipe.FindRecipes();
							}
						}
						ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 0, num4);
					}
					SpriteBatch spriteBatch2 = Main.spriteBatch;
					Item[] itemArray = Main.player[Main.myPlayer].inventory;
					Vector2 vector23 = new Vector2((float)num2, (float)num3);
					color1 = new Microsoft.Xna.Framework.Color();
					ItemSlot.Draw(spriteBatch2, itemArray, 0, num4, vector23, color1);
				}
			}
			int num5 = 0;
			int num6 = 2;
			int num7 = 32;
			if (!Main.player[Main.myPlayer].hbLocked)
			{
				num5 = 1;
			}
			SpriteBatch spriteBatch3 = Main.spriteBatch;
			Texture2D hBLockTexture = Main.HBLockTexture[num5];
			Vector2 vector24 = new Vector2((float)num6, (float)num7);
			Microsoft.Xna.Framework.Rectangle? nullable1 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.HBLockTexture[num5].Width, Main.HBLockTexture[num5].Height));
			Microsoft.Xna.Framework.Color color4 = Main.inventoryBack;
			vector22 = new Vector2();
			spriteBatch3.Draw(hBLockTexture, vector24, nullable1, color4, 0f, vector22, 0.9f, SpriteEffects.None, 0f);
			if (Main.mouseX > num6 && (float)Main.mouseX < (float)num6 + (float)Main.HBLockTexture[num5].Width * 0.9f && Main.mouseY > num7 && (float)Main.mouseY < (float)num7 + (float)Main.HBLockTexture[num5].Height * 0.9f)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.player[Main.myPlayer].hbLocked)
				{
					this.MouseText(Lang.inter[6], 0, 0);
					Main.mouseText = true;
				}
				else
				{
					this.MouseText(Lang.inter[5], 0, 0);
					Main.mouseText = true;
				}
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.PlaySound(22, -1, -1, 1);
					if (Main.player[Main.myPlayer].hbLocked)
					{
						Main.player[Main.myPlayer].hbLocked = false;
					}
					else
					{
						Main.player[Main.myPlayer].hbLocked = true;
					}
				}
			}
			if (Main.mapEnabled)
			{
				bool flag = false;
				int num8 = Main.screenWidth - 440;
				int num9 = 40;
				if (Main.screenWidth < 940)
				{
					flag = true;
				}
				if (flag)
				{
					num8 = Main.screenWidth - 40;
					num9 = Main.screenHeight - 200;
				}
				for (int k = 0; k < 4; k++)
				{
					int num10 = 255;
					int num11 = num8 + k * 32;
					int num12 = num9;
					if (flag)
					{
						num11 = num8;
						num12 = num9 + k * 32;
					}
					int num13 = k;
					num10 = 120;
					if (k > 0 && Main.mapStyle == k - 1)
					{
						num10 = 200;
					}
					if (Main.mouseX >= num11 && Main.mouseX <= num11 + 32 && Main.mouseY >= num12 && Main.mouseY <= num12 + 30)
					{
						num10 = 255;
						num13 = num13 + 4;
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							if (k == 0)
							{
								Main.playerInventory = false;
								Main.player[Main.myPlayer].talkNPC = -1;
								Main.npcChatCornerItem = 0;
								Main.PlaySound(10, -1, -1, 1);
								Main.mapFullscreenScale = 2.5f;
								Main.mapFullscreen = true;
								Main.resetMapFull = true;
							}
							if (k == 1)
							{
								Main.mapStyle = 0;
								Main.PlaySound(12, -1, -1, 1);
							}
							if (k == 2)
							{
								Main.mapStyle = 1;
								Main.PlaySound(12, -1, -1, 1);
							}
							if (k == 3)
							{
								Main.mapStyle = 2;
								Main.PlaySound(12, -1, -1, 1);
							}
						}
					}
					SpriteBatch spriteBatch4 = Main.spriteBatch;
					Texture2D texture2D = Main.mapIconTexture[num13];
					Vector2 vector25 = new Vector2((float)num11, (float)num12);
					Microsoft.Xna.Framework.Rectangle? nullable2 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.mapIconTexture[num13].Width, Main.mapIconTexture[num13].Height));
					Microsoft.Xna.Framework.Color color5 = new Microsoft.Xna.Framework.Color(num10, num10, num10, num10);
					vector22 = new Vector2();
					spriteBatch4.Draw(texture2D, vector25, nullable2, color5, 0f, vector22, 1f, SpriteEffects.None, 0f);
				}
			}
			if (!Main.armorHide)
			{
				Main.armorAlpha = Main.armorAlpha + 0.025f;
				if (Main.armorAlpha > 1f)
				{
					Main.armorAlpha = 1f;
				}
			}
			else
			{
				Main.armorAlpha = Main.armorAlpha - 0.1f;
				if (Main.armorAlpha < 0f)
				{
					Main.armorAlpha = 0f;
				}
			}
			Microsoft.Xna.Framework.Color color6 = new Microsoft.Xna.Framework.Color((int)((float)Main.mouseTextColor * Main.armorAlpha), (int)((float)Main.mouseTextColor * Main.armorAlpha), (int)((float)Main.mouseTextColor * Main.armorAlpha), (int)((float)Main.mouseTextColor * Main.armorAlpha));
			Main.armorHide = false;
			int num14 = Main.DrawPageIcons();
			if (num14 > -1)
			{
				Main.toolTip = new Item();
				switch (num14)
				{
					case 1:
					{
						Main.hoverItemName = Lang.inter[80];
						break;
					}
					case 2:
					{
						Main.hoverItemName = Lang.inter[79];
						break;
					}
					case 3:
					{
						Main.hoverItemName = Lang.inter[81];
						break;
					}
				}
			}
			if (Main.EquipPage == 2)
			{
				Microsoft.Xna.Framework.Point point = new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY);
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, (int)((float)Main.inventoryBackTexture.Width * Main.inventoryScale), (int)((float)Main.inventoryBackTexture.Height * Main.inventoryScale));
				Item[] itemArray1 = Main.player[Main.myPlayer].miscEquips;
				int num15 = Main.screenWidth - 92;
				int num16 = Main.mH + 174;
				for (int l = 0; l < 2; l++)
				{
					if (l == 0)
					{
						itemArray1 = Main.player[Main.myPlayer].miscEquips;
					}
					else if (l == 1)
					{
						itemArray1 = Main.player[Main.myPlayer].miscDyes;
					}
					rectangle.X = num15 + l * -47;
					for (int m = 0; m < 5; m++)
					{
						int num17 = 0;
						int num18 = -1;
						switch (m)
						{
							case 0:
							{
								num17 = 19;
								num18 = 0;
								break;
							}
							case 1:
							{
								num17 = 20;
								num18 = 1;
								break;
							}
							case 2:
							{
								num17 = 18;
								break;
							}
							case 3:
							{
								num17 = 17;
								break;
							}
							case 4:
							{
								num17 = 16;
								break;
							}
						}
						if (l == 1)
						{
							num17 = 12;
							num18 = -1;
						}
						rectangle.Y = num16 + m * 47;
						Texture2D texture2D1 = Main.inventoryTickOnTexture;
						if (Main.player[Main.myPlayer].hideMisc[num18])
						{
							texture2D1 = Main.inventoryTickOffTexture;
						}
						Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle(rectangle.Left + 34, rectangle.Top - 2, texture2D1.Width, texture2D1.Height);
						int num19 = 0;
						bool flag1 = false;
						if (rectangle1.Contains(point))
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							flag1 = true;
							if (Main.mouseLeft && Main.mouseLeftRelease)
							{
								if (num18 == 0)
								{
									Main.player[Main.myPlayer].TogglePet();
								}
								if (num18 == 1)
								{
									Main.player[Main.myPlayer].ToggleLight();
								}
								Main.mouseLeftRelease = false;
								Main.PlaySound(12, -1, -1, 1);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
								}
							}
							num19 = (!Main.player[Main.myPlayer].hideMisc[num18] ? 1 : 2);
						}
						if (rectangle.Contains(point) && !flag1)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							Main.armorHide = true;
							ItemSlot.Handle(itemArray1, num17, m);
						}
						SpriteBatch spriteBatch5 = Main.spriteBatch;
						Vector2 vector26 = rectangle.TopLeft();
						color1 = new Microsoft.Xna.Framework.Color();
						ItemSlot.Draw(spriteBatch5, itemArray1, num17, m, vector26, color1);
						if (num18 != -1)
						{
							Main.spriteBatch.Draw(texture2D1, rectangle1.TopLeft(), Microsoft.Xna.Framework.Color.White * 0.7f);
							if (num19 > 0)
							{
								Main.toolTip = new Item();
								Main.hoverItemName = Lang.inter[58 + num19];
							}
						}
					}
				}
			}
			else if (Main.EquipPage != 1)
			{
				int num20 = 4;
				if (Main.mouseX > Main.screenWidth - 64 - 28 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 28) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 448f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				float single = Main.inventoryScale;
				int num21 = 8 + Main.player[Main.myPlayer].extraAccessorySlots;
				bool flag2 = false;
				int num22 = num21 - 1;
				if (num21 == 8 && (Main.player[Main.myPlayer].armor[8].type > 0 || Main.player[Main.myPlayer].armor[18].type > 0 || Main.player[Main.myPlayer].dye[8].type > 0))
				{
					num21 = 9;
					flag2 = true;
					num22 = 7;
				}
				Microsoft.Xna.Framework.Color color7 = Main.inventoryBack;
				Microsoft.Xna.Framework.Color color8 = new Microsoft.Xna.Framework.Color(80, 80, 80, 80);
				for (int n = 0; n < num21; n++)
				{
					bool flag3 = false;
					if (flag2 && n == num21 - 1 && Main.mouseItem.type > 0)
					{
						flag3 = true;
					}
					int num23 = Main.screenWidth - 64 - 28;
					int num24 = (int)((float)(174 + Main.mH) + (float)(n * 56) * Main.inventoryScale);
					Microsoft.Xna.Framework.Color color9 = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (n > 2)
					{
						num24 = num24 + num20;
					}
					if (n == num22)
					{
						Vector2 vector27 = new Vector2((float)(num23 - 10 - 47 - 47 - 14), (float)num24 + (float)Main.inventoryBackTexture.Height * 0.5f);
						nullable = null;
						Main.spriteBatch.Draw(Main.extraTexture[58], vector27, nullable, Microsoft.Xna.Framework.Color.White, 0f, Main.extraTexture[58].Size() / 2f, Main.inventoryScale, SpriteEffects.None, 0f);
						Vector2 vector28 = Main.fontMouseText.MeasureString(Main.player[Main.myPlayer].statDefense.ToString());
						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, Main.player[Main.myPlayer].statDefense.ToString(), vector27 - ((vector28 * 0.5f) * Main.inventoryScale), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, new Vector2(Main.inventoryScale), -1f, 2f);
						if (Utils.CenteredRectangle(vector27, Main.extraTexture[58].Size()).Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)))
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							string str2 = string.Concat(Main.player[Main.myPlayer].statDefense, " ", Lang.inter[10]);
							if (!string.IsNullOrEmpty(str2))
							{
								Main.hoverItemName = str2;
							}
						}
					}
					int num25 = 8;
					if (n > 2)
					{
						num25 = 10;
					}
					Texture2D texture2D2 = Main.inventoryTickOnTexture;
					if (Main.player[Main.myPlayer].hideVisual[n])
					{
						texture2D2 = Main.inventoryTickOffTexture;
					}
					int num26 = Main.screenWidth - 58;
					int num27 = (int)((float)(172 + Main.mH) + (float)(n * 56) * Main.inventoryScale);
					if (n > 2)
					{
						num27 = num27 + num20;
					}
					Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle(num26, num27, texture2D2.Width, texture2D2.Height);
					int num28 = 0;
					if (n >= 3 && n < num21 && rectangle2.Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)))
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							Main.player[Main.myPlayer].hideVisual[n] = !Main.player[Main.myPlayer].hideVisual[n];
							Main.PlaySound(12, -1, -1, 1);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						num28 = (!Main.player[Main.myPlayer].hideVisual[n] ? 1 : 2);
					}
					else if (Main.mouseX >= num23 && (float)Main.mouseX <= (float)num23 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num24 && (float)Main.mouseY <= (float)num24 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.armorHide = true;
						Main.player[Main.myPlayer].mouseInterface = true;
						ItemSlot.OverrideHover(Main.player[Main.myPlayer].armor, num25, n);
						if (!flag3 && Main.mouseLeftRelease && Main.mouseLeft)
						{
							ItemSlot.LeftClick(Main.player[Main.myPlayer].armor, num25, n);
						}
						ItemSlot.MouseHover(Main.player[Main.myPlayer].armor, num25, n);
					}
					if (flag2 && n == num21 - 1)
					{
						Main.inventoryBack = color8;
					}
					SpriteBatch spriteBatch6 = Main.spriteBatch;
					Item[] itemArray2 = Main.player[Main.myPlayer].armor;
					Vector2 vector29 = new Vector2((float)num23, (float)num24);
					color1 = new Microsoft.Xna.Framework.Color();
					ItemSlot.Draw(spriteBatch6, itemArray2, num25, n, vector29, color1);
					if (n > 2 && n < num21)
					{
						Main.spriteBatch.Draw(texture2D2, new Vector2((float)num26, (float)num27), Microsoft.Xna.Framework.Color.White * 0.7f);
						if (num28 > 0)
						{
							Main.toolTip = new Item();
							Main.hoverItemName = Lang.inter[58 + num28];
						}
					}
				}
				Main.inventoryBack = color7;
				if (Main.mouseX > Main.screenWidth - 64 - 28 - 47 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 20 - 47) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 168f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int o = 10; o < 10 + num21; o++)
				{
					bool flag4 = false;
					if (flag2 && o == 10 + num21 - 1 && Main.mouseItem.type > 0)
					{
						flag4 = true;
					}
					int num29 = Main.screenWidth - 64 - 28 - 47;
					int num30 = (int)((float)(174 + Main.mH) + (float)((o - 10) * 56) * Main.inventoryScale);
					Microsoft.Xna.Framework.Color color10 = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (o > 12)
					{
						num30 = num30 + num20;
					}
					int num31 = 9;
					if (o > 12)
					{
						num31 = 11;
					}
					if (Main.mouseX >= num29 && (float)Main.mouseX <= (float)num29 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num30 && (float)Main.mouseY <= (float)num30 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.armorHide = true;
						ItemSlot.OverrideHover(Main.player[Main.myPlayer].armor, num31, o);
						if (!flag4)
						{
							if (!Main.mouseLeftRelease || !Main.mouseLeft)
							{
								ItemSlot.RightClick(Main.player[Main.myPlayer].armor, num31, o);
							}
							else
							{
								ItemSlot.LeftClick(Main.player[Main.myPlayer].armor, num31, o);
							}
						}
						ItemSlot.MouseHover(Main.player[Main.myPlayer].armor, num31, o);
					}
					if (flag2 && o == num21 + 10 - 1)
					{
						Main.inventoryBack = color8;
					}
					SpriteBatch spriteBatch7 = Main.spriteBatch;
					Item[] itemArray3 = Main.player[Main.myPlayer].armor;
					Vector2 vector210 = new Vector2((float)num29, (float)num30);
					color1 = new Microsoft.Xna.Framework.Color();
					ItemSlot.Draw(spriteBatch7, itemArray3, num31, o, vector210, color1);
				}
				Main.inventoryBack = color7;
				if (Main.mouseX > Main.screenWidth - 64 - 28 - 47 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 20 - 47) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 168f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int p = 0; p < num21; p++)
				{
					bool flag5 = false;
					if (flag2 && p == num21 - 1 && Main.mouseItem.type > 0)
					{
						flag5 = true;
					}
					int num32 = Main.screenWidth - 64 - 28 - 47 - 47;
					int num33 = (int)((float)(174 + Main.mH) + (float)(p * 56) * Main.inventoryScale);
					Microsoft.Xna.Framework.Color color11 = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (p > 2)
					{
						num33 = num33 + num20;
					}
					if (Main.mouseX >= num32 && (float)Main.mouseX <= (float)num32 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num33 && (float)Main.mouseY <= (float)num33 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.armorHide = true;
						ItemSlot.OverrideHover(Main.player[Main.myPlayer].dye, 12, p);
						if (!flag5)
						{
							if (Main.mouseRightRelease && Main.mouseRight)
							{
								ItemSlot.RightClick(Main.player[Main.myPlayer].dye, 12, p);
							}
							else if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								ItemSlot.LeftClick(Main.player[Main.myPlayer].dye, 12, p);
							}
						}
						ItemSlot.MouseHover(Main.player[Main.myPlayer].dye, 12, p);
					}
					if (flag2 && p == num21 - 1)
					{
						Main.inventoryBack = color8;
					}
					SpriteBatch spriteBatch8 = Main.spriteBatch;
					Item[] itemArray4 = Main.player[Main.myPlayer].dye;
					Vector2 vector211 = new Vector2((float)num32, (float)num33);
					color1 = new Microsoft.Xna.Framework.Color();
					ItemSlot.Draw(spriteBatch8, itemArray4, 12, p, vector211, color1);
				}
				Main.inventoryBack = color7;
				Main.inventoryScale = single;
			}
			else
			{
				if (Main.mouseX > Main.screenWidth - 64 - 28 && Main.mouseX < (int)((float)(Main.screenWidth - 64 - 28) + 56f * Main.inventoryScale) && Main.mouseY > 174 + Main.mH && Main.mouseY < (int)((float)(174 + Main.mH) + 448f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				int num34 = 0;
				string str3 = "";
				int num35 = 0;
				int num36 = 0;
				for (int q = 0; q < (int)Main.npcHeadTexture.Length; q++)
				{
					bool flag6 = false;
					int num37 = 0;
					if (q == 0)
					{
						flag6 = true;
					}
					else if (q != 21)
					{
						int num38 = 0;
						while (num38 < 200)
						{
							if (!Main.npc[num38].active || NPC.TypeToNum(Main.npc[num38].type) != q)
							{
								num38++;
							}
							else
							{
								flag6 = true;
								num37 = num38;
								break;
							}
						}
					}
					else
					{
						flag6 = false;
					}
					if (flag6)
					{
						int num39 = Main.screenWidth - 64 - 28 + num36;
						int num40 = (int)((float)(174 + Main.mH) + (float)(num34 * 56) * Main.inventoryScale) + num35;
						Microsoft.Xna.Framework.Color white = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
						if (num40 > Main.screenHeight - 80)
						{
							num36 = num36 - 48;
							num35 = num35 - (num40 - (174 + Main.mH));
							num39 = Main.screenWidth - 64 - 28 + num36;
							num40 = (int)((float)(174 + Main.mH) + (float)(num34 * 56) * Main.inventoryScale) + num35;
						}
						if (Main.mouseX >= num39 && (float)Main.mouseX <= (float)num39 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num40 && (float)Main.mouseY <= (float)num40 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.mouseText = true;
							if (q != 0)
							{
								str3 = (q != 11 ? string.Concat(Main.npc[num37].displayName, " the ", Main.npc[num37].name) : Main.npc[num37].displayName);
							}
							else
							{
								str3 = Lang.inter[8];
							}
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft && Main.mouseItem.type == 0)
							{
								Main.PlaySound(12, -1, -1, 1);
								this.mouseNPC = q;
								Main.mouseLeftRelease = false;
							}
						}
						SpriteBatch spriteBatch9 = Main.spriteBatch;
						Texture2D texture2D3 = Main.inventoryBack11Texture;
						Vector2 vector212 = new Vector2((float)num39, (float)num40);
						Microsoft.Xna.Framework.Rectangle? nullable3 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.inventoryBackTexture.Width, Main.inventoryBackTexture.Height));
						Microsoft.Xna.Framework.Color color12 = Main.inventoryBack;
						vector22 = new Vector2();
						spriteBatch9.Draw(texture2D3, vector212, nullable3, color12, 0f, vector22, Main.inventoryScale, SpriteEffects.None, 0f);
						white = Microsoft.Xna.Framework.Color.White;
						int num41 = q;
						float single1 = 1f;
						float single2 = 0f;
						single2 = (Main.npcHeadTexture[num41].Width <= Main.npcHeadTexture[num41].Height ? (float)Main.npcHeadTexture[num41].Height : (float)Main.npcHeadTexture[num41].Width);
						if (single2 > 36f)
						{
							single1 = 36f / single2;
						}
						Main.spriteBatch.Draw(Main.npcHeadTexture[num41], new Vector2((float)num39 + 26f * Main.inventoryScale, (float)num40 + 26f * Main.inventoryScale), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num41].Width, Main.npcHeadTexture[num41].Height)), white, 0f, new Vector2((float)(Main.npcHeadTexture[num41].Width / 2), (float)(Main.npcHeadTexture[num41].Height / 2)), single1, SpriteEffects.None, 0f);
						num34++;
					}
				}
				if (str3 != "" && Main.mouseItem.type == 0)
				{
					this.MouseText(str3, 0, 0);
				}
			}
			int num42 = (Main.screenHeight - 600) / 2;
			int num43 = (int)((float)Main.screenHeight / 600f * 250f);
			if (Main.screenHeight < 700)
			{
				num42 = (Main.screenHeight - 508) / 2;
				num43 = (int)((float)Main.screenHeight / 600f * 200f);
			}
			else if (Main.screenHeight < 850)
			{
				num43 = (int)((float)Main.screenHeight / 600f * 225f);
			}
			if (!Main.craftingHide)
			{
				Main.craftingAlpha = Main.craftingAlpha + 0.025f;
				if (Main.craftingAlpha > 1f)
				{
					Main.craftingAlpha = 1f;
				}
			}
			else
			{
				Main.craftingAlpha = Main.craftingAlpha - 0.1f;
				if (Main.craftingAlpha < 0f)
				{
					Main.craftingAlpha = 0f;
				}
			}
			Microsoft.Xna.Framework.Color color13 = new Microsoft.Xna.Framework.Color((int)((float)Main.mouseTextColor * Main.craftingAlpha), (int)((float)Main.mouseTextColor * Main.craftingAlpha), (int)((float)Main.mouseTextColor * Main.craftingAlpha), (int)((float)Main.mouseTextColor * Main.craftingAlpha));
			Main.craftingHide = false;
			if (Main.reforge)
			{
				if (Main.mouseReforge)
				{
					if (Main.reforgeScale < 1f)
					{
						Main.reforgeScale = Main.reforgeScale + 0.02f;
					}
				}
				else if (Main.reforgeScale > 1f)
				{
					Main.reforgeScale = Main.reforgeScale - 0.02f;
				}
				if (Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.craftGuide)
				{
					Main.reforge = false;
					Main.player[Main.myPlayer].dropItemCheck();
					Recipe.FindRecipes();
				}
				else
				{
					int num44 = 50;
					int num45 = 270;
					string str4 = string.Concat(Lang.inter[46], ": ");
					if (Main.reforgeItem.type <= 0)
					{
						str4 = Lang.inter[20];
					}
					else
					{
						int num46 = Main.reforgeItem.@value;
						if (Main.player[Main.myPlayer].discount)
						{
							num46 = (int)((double)num46 * 0.8);
						}
						num46 = num46 / 3;
						string str5 = "";
						int num47 = 0;
						int num48 = 0;
						int num49 = 0;
						int num50 = 0;
						int num51 = num46;
						if (num51 < 1)
						{
							num51 = 1;
						}
						if (num51 >= 1000000)
						{
							num47 = num51 / 1000000;
							num51 = num51 - num47 * 1000000;
						}
						if (num51 >= 10000)
						{
							num48 = num51 / 10000;
							num51 = num51 - num48 * 10000;
						}
						if (num51 >= 100)
						{
							num49 = num51 / 100;
							num51 = num51 - num49 * 100;
						}
						if (num51 >= 1)
						{
							num50 = num51;
						}
						if (num47 > 0)
						{
							obj = str5;
							objArray = new object[] { obj, "[c/", Colors.AlphaDarken(Colors.CoinPlatinum).Hex3(), ":", num47, " ", Lang.inter[15], "] " };
							str5 = string.Concat(objArray);
						}
						if (num48 > 0)
						{
							obj = str5;
							objArray = new object[] { obj, "[c/", Colors.AlphaDarken(Colors.CoinGold).Hex3(), ":", num48, " ", Lang.inter[16], "] " };
							str5 = string.Concat(objArray);
						}
						if (num49 > 0)
						{
							obj = str5;
							objArray = new object[] { obj, "[c/", Colors.AlphaDarken(Colors.CoinSilver).Hex3(), ":", num49, " ", Lang.inter[17], "] " };
							str5 = string.Concat(objArray);
						}
						if (num50 > 0)
						{
							obj = str5;
							objArray = new object[] { obj, "[c/", Colors.AlphaDarken(Colors.CoinCopper).Hex3(), ":", num50, " ", Lang.inter[18], "] " };
							str5 = string.Concat(objArray);
						}
						ItemSlot.DrawSavings(Main.spriteBatch, (float)(num44 + 130), (float)this.invBottom, true);
						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, str5, new Vector2((float)(num44 + 50) + Main.fontMouseText.MeasureString(str4).X, (float)num45), Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
						int num52 = num44 + 70;
						int num53 = num45 + 40;
						bool flag7 = (Main.mouseX <= num52 - 15 || Main.mouseX >= num52 + 15 || Main.mouseY <= num53 - 15 ? false : Main.mouseY < num53 + 15);
						Texture2D texture2D4 = Main.reforgeTexture[0];
						if (flag7)
						{
							texture2D4 = Main.reforgeTexture[1];
						}
						nullable = null;
						Main.spriteBatch.Draw(texture2D4, new Vector2((float)num52, (float)num53), nullable, Microsoft.Xna.Framework.Color.White, 0f, texture2D4.Size() / 2f, Main.reforgeScale, SpriteEffects.None, 0f);
						if (!flag7)
						{
							Main.mouseReforge = false;
						}
						else
						{
							Main.hoverItemName = Lang.inter[19];
							if (!Main.mouseReforge)
							{
								Main.PlaySound(12, -1, -1, 1);
							}
							Main.mouseReforge = true;
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.mouseLeftRelease && Main.mouseLeft && Main.player[Main.myPlayer].BuyItem(num46))
							{
								bool flag8 = Main.reforgeItem.favorited;
								Main.reforgeItem.netDefaults(Main.reforgeItem.netID);
								Main.reforgeItem.Prefix(-2);
								Main.reforgeItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.reforgeItem.width / 2);
								Main.reforgeItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.reforgeItem.height / 2);
								Main.reforgeItem.favorited = flag8;
								ItemText.NewText(Main.reforgeItem, Main.reforgeItem.stack, true, false);
								Main.PlaySound(2, -1, -1, 37);
							}
						}
					}
					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, str4, new Vector2((float)(num44 + 50), (float)num45), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, Vector2.Zero, Vector2.One, -1f, 2f);
					if (Main.mouseX >= num44 && (float)Main.mouseX <= (float)num44 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num45 && (float)Main.mouseY <= (float)num45 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.craftingHide = true;
						if (!Main.mouseLeftRelease || !Main.mouseLeft)
						{
							ItemSlot.RightClick(ref Main.reforgeItem, 5);
						}
						else
						{
							ItemSlot.LeftClick(ref Main.reforgeItem, 5);
							Recipe.FindRecipes();
						}
						ItemSlot.MouseHover(ref Main.reforgeItem, 5);
					}
					SpriteBatch spriteBatch10 = Main.spriteBatch;
					Vector2 vector213 = new Vector2((float)num44, (float)num45);
					color1 = new Microsoft.Xna.Framework.Color();
					ItemSlot.Draw(spriteBatch10, ref Main.reforgeItem, 5, vector213, color1);
				}
			}
			else if (Main.craftGuide)
			{
				if (Main.player[Main.myPlayer].chest != -1 || Main.npcShop != 0 || Main.player[Main.myPlayer].talkNPC == -1 || Main.reforge)
				{
					Main.craftGuide = false;
					Main.player[Main.myPlayer].dropItemCheck();
					Recipe.FindRecipes();
				}
				else
				{
					int num54 = 73;
					int num55 = 331;
					num55 = num55 + num42;
					if (Main.guideItem.type <= 0)
					{
						str = Lang.inter[24];
					}
					else
					{
						str = string.Concat(Lang.inter[21], " ", Main.guideItem.name);
						SpriteBatch spriteBatch11 = Main.spriteBatch;
						SpriteFont spriteFont1 = Main.fontMouseText;
						string str6 = Lang.inter[22];
						Vector2 vector214 = new Vector2((float)num54, (float)(num55 + 118));
						vector22 = new Vector2();
						spriteBatch11.DrawString(spriteFont1, str6, vector214, color13, 0f, vector22, 1f, SpriteEffects.None, 0f);
						int num56 = Main.focusRecipe;
						int num57 = 0;
						int num58 = 0;
						while (num58 < Recipe.maxRequirements)
						{
							int num59 = (num58 + 1) * 26;
							if (Main.recipe[Main.availableRecipe[num56]].requiredTile[num58] != -1)
							{
								num57++;
								SpriteBatch spriteBatch12 = Main.spriteBatch;
								SpriteFont spriteFont2 = Main.fontMouseText;
								string str7 = Lang.mapLegend[MapHelper.TileToLookup(Main.recipe[Main.availableRecipe[num56]].requiredTile[num58], 0)];
								Vector2 vector215 = new Vector2((float)num54, (float)(num55 + 118 + num59));
								vector22 = new Vector2();
								spriteBatch12.DrawString(spriteFont2, str7, vector215, color13, 0f, vector22, 1f, SpriteEffects.None, 0f);
								num58++;
							}
							else
							{
								if (num58 != 0 || Main.recipe[Main.availableRecipe[num56]].needWater || Main.recipe[Main.availableRecipe[num56]].needHoney || Main.recipe[Main.availableRecipe[num56]].needLava)
								{
									break;
								}
								SpriteBatch spriteBatch13 = Main.spriteBatch;
								SpriteFont spriteFont3 = Main.fontMouseText;
								string str8 = Lang.inter[23];
								Vector2 vector216 = new Vector2((float)num54, (float)(num55 + 118 + num59));
								vector22 = new Vector2();
								spriteBatch13.DrawString(spriteFont3, str8, vector216, color13, 0f, vector22, 1f, SpriteEffects.None, 0f);
								break;
							}
						}
						if (Main.recipe[Main.availableRecipe[num56]].needWater)
						{
							int num60 = (num57 + 1) * 26;
							SpriteBatch spriteBatch14 = Main.spriteBatch;
							SpriteFont spriteFont4 = Main.fontMouseText;
							string str9 = Lang.inter[53];
							Vector2 vector217 = new Vector2((float)num54, (float)(num55 + 118 + num60));
							vector22 = new Vector2();
							spriteBatch14.DrawString(spriteFont4, str9, vector217, color13, 0f, vector22, 1f, SpriteEffects.None, 0f);
						}
						if (Main.recipe[Main.availableRecipe[num56]].needHoney)
						{
							int num61 = (num57 + 1) * 26;
							SpriteBatch spriteBatch15 = Main.spriteBatch;
							SpriteFont spriteFont5 = Main.fontMouseText;
							string str10 = Lang.inter[58];
							Vector2 vector218 = new Vector2((float)num54, (float)(num55 + 118 + num61));
							vector22 = new Vector2();
							spriteBatch15.DrawString(spriteFont5, str10, vector218, color13, 0f, vector22, 1f, SpriteEffects.None, 0f);
						}
						if (Main.recipe[Main.availableRecipe[num56]].needLava)
						{
							int num62 = (num57 + 1) * 26;
							SpriteBatch spriteBatch16 = Main.spriteBatch;
							SpriteFont spriteFont6 = Main.fontMouseText;
							string str11 = Lang.inter[56];
							Vector2 vector219 = new Vector2((float)num54, (float)(num55 + 118 + num62));
							vector22 = new Vector2();
							spriteBatch16.DrawString(spriteFont6, str11, vector219, color13, 0f, vector22, 1f, SpriteEffects.None, 0f);
						}
					}
					SpriteBatch spriteBatch17 = Main.spriteBatch;
					SpriteFont spriteFont7 = Main.fontMouseText;
					Vector2 vector220 = new Vector2((float)(num54 + 50), (float)(num55 + 12));
					Microsoft.Xna.Framework.Color color14 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
					vector22 = new Vector2();
					spriteBatch17.DrawString(spriteFont7, str, vector220, color14, 0f, vector22, 1f, SpriteEffects.None, 0f);
					Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
					if (Main.mouseX >= num54 && (float)Main.mouseX <= (float)num54 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num55 && (float)Main.mouseY <= (float)num55 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.craftingHide = true;
						if (!Main.mouseLeftRelease || !Main.mouseLeft)
						{
							ItemSlot.RightClick(ref Main.guideItem, 7);
						}
						else
						{
							ItemSlot.LeftClick(ref Main.guideItem, 7);
							Recipe.FindRecipes();
						}
						ItemSlot.MouseHover(ref Main.guideItem, 7);
					}
					SpriteBatch spriteBatch18 = Main.spriteBatch;
					Vector2 vector221 = new Vector2((float)num54, (float)num55);
					color1 = new Microsoft.Xna.Framework.Color();
					ItemSlot.Draw(spriteBatch18, ref Main.guideItem, 7, vector221, color1);
				}
			}
			if (!Main.reforge)
			{
				if (Main.numAvailableRecipes > 0)
				{
					SpriteBatch spriteBatch19 = Main.spriteBatch;
					SpriteFont spriteFont8 = Main.fontMouseText;
					string str12 = Lang.inter[25];
					Vector2 vector222 = new Vector2(76f, (float)(414 + num42));
					vector22 = new Vector2();
					spriteBatch19.DrawString(spriteFont8, str12, vector222, color13, 0f, vector22, 1f, SpriteEffects.None, 0f);
				}
				for (int r = 0; r < Recipe.maxRecipes; r++)
				{
					Main.inventoryScale = 100f / (Math.Abs(Main.availableRecipeY[r]) + 100f);
					if ((double)Main.inventoryScale < 0.75)
					{
						Main.inventoryScale = 0.75f;
					}
					if (Main.recFastScroll)
					{
						Main.inventoryScale = 0.75f;
					}
					if (Main.availableRecipeY[r] < (float)((r - Main.focusRecipe) * 65))
					{
						if (Main.availableRecipeY[r] == 0f && !Main.recFastScroll)
						{
							Main.PlaySound(12, -1, -1, 1);
						}
						Main.availableRecipeY[r] = Main.availableRecipeY[r] + 6.5f;
						if (Main.recFastScroll)
						{
							Main.availableRecipeY[r] = Main.availableRecipeY[r] + 130000f;
						}
						if (Main.availableRecipeY[r] > (float)((r - Main.focusRecipe) * 65))
						{
							Main.availableRecipeY[r] = (float)((r - Main.focusRecipe) * 65);
						}
					}
					else if (Main.availableRecipeY[r] <= (float)((r - Main.focusRecipe) * 65))
					{
						Main.recFastScroll = false;
					}
					else
					{
						if (Main.availableRecipeY[r] == 0f && !Main.recFastScroll)
						{
							Main.PlaySound(12, -1, -1, 1);
						}
						Main.availableRecipeY[r] = Main.availableRecipeY[r] - 6.5f;
						if (Main.recFastScroll)
						{
							Main.availableRecipeY[r] = Main.availableRecipeY[r] - 130000f;
						}
						if (Main.availableRecipeY[r] < (float)((r - Main.focusRecipe) * 65))
						{
							Main.availableRecipeY[r] = (float)((r - Main.focusRecipe) * 65);
						}
					}
					if (r < Main.numAvailableRecipes && Math.Abs(Main.availableRecipeY[r]) <= (float)num43)
					{
						int num63 = (int)(46f - 26f * Main.inventoryScale);
						int num64 = (int)(410f + Main.availableRecipeY[r] * Main.inventoryScale - 30f * Main.inventoryScale + (float)num42);
						double a = (double)(Main.inventoryBack.A + 50);
						double num65 = 255;
						if (Math.Abs(Main.availableRecipeY[r]) > (float)(num43 - 100))
						{
							a = (double)(150f * (100f - (Math.Abs(Main.availableRecipeY[r]) - (float)(num43 - 100)))) * 0.01;
							num65 = (double)(255f * (100f - (Math.Abs(Main.availableRecipeY[r]) - (float)(num43 - 100)))) * 0.01;
						}
						Microsoft.Xna.Framework.Color color16 = new Microsoft.Xna.Framework.Color((int)a, (int)a, (int)a, (int)a);
						Microsoft.Xna.Framework.Color color17 = new Microsoft.Xna.Framework.Color((int)num65, (int)num65, (int)num65, (int)num65);
						if (Main.mouseX >= num63 && (float)Main.mouseX <= (float)num63 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num64 && (float)Main.mouseY <= (float)num64 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							if (Main.focusRecipe == r && Main.guideItem.type == 0)
							{
								if ((Main.mouseItem.type == 0 || Main.mouseItem.IsTheSameAs(Main.recipe[Main.availableRecipe[r]].createItem) && Main.mouseItem.stack + Main.recipe[Main.availableRecipe[r]].createItem.stack <= Main.mouseItem.maxStack) && !Main.player[Main.myPlayer].IsStackingItems())
								{
									if (Main.mouseLeftRelease && Main.mouseLeft)
									{
										int num66 = Main.mouseItem.stack;
										Main.mouseItem = Main.recipe[Main.availableRecipe[r]].createItem.Clone();
										Main.mouseItem.Prefix(-1);
										Item item = Main.mouseItem;
										item.stack = item.stack + num66;
										Main.mouseItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.mouseItem.width / 2);
										Main.mouseItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.mouseItem.height / 2);
										ItemText.NewText(Main.mouseItem, Main.recipe[Main.availableRecipe[r]].createItem.stack, false, false);
										Main.recipe[Main.availableRecipe[r]].Create();
										if (Main.mouseItem.type > 0 || Main.recipe[Main.availableRecipe[r]].createItem.type > 0)
										{
											Main.PlaySound(7, -1, -1, 1);
										}
									}
									else if (Main.stackSplit <= 1 && Main.mouseRight && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0))
									{
										if (Main.stackSplit != 0)
										{
											Main.stackSplit = Main.stackDelay;
										}
										else
										{
											Main.stackSplit = 15;
										}
										int num67 = Main.mouseItem.stack;
										Main.mouseItem = Main.recipe[Main.availableRecipe[r]].createItem.Clone();
										Item item1 = Main.mouseItem;
										item1.stack = item1.stack + num67;
										if (num67 <= 0)
										{
											Main.mouseItem.Prefix(-1);
										}
										Main.mouseItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.mouseItem.width / 2);
										Main.mouseItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.mouseItem.height / 2);
										ItemText.NewText(Main.mouseItem, Main.recipe[Main.availableRecipe[r]].createItem.stack, false, false);
										Main.recipe[Main.availableRecipe[r]].Create();
										if (Main.mouseItem.type > 0 || Main.recipe[Main.availableRecipe[r]].createItem.type > 0)
										{
											Main.PlaySound(7, -1, -1, 1);
										}
									}
								}
							}
							else if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								Main.focusRecipe = r;
							}
							Main.craftingHide = true;
							Main.hoverItemName = Main.recipe[Main.availableRecipe[r]].createItem.name;
							Main.toolTip = Main.recipe[Main.availableRecipe[r]].createItem.Clone();
							if (Main.recipe[Main.availableRecipe[r]].createItem.stack > 1)
							{
								obj = Main.hoverItemName;
								objArray = new object[] { obj, " (", Main.recipe[Main.availableRecipe[r]].createItem.stack, ")" };
								Main.hoverItemName = string.Concat(objArray);
							}
						}
						if (Main.numAvailableRecipes > 0)
						{
							a = a - 50;
							if (a < 0)
							{
								a = 0;
							}
							Microsoft.Xna.Framework.Color color18 = Main.inventoryBack;
							Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)a, (int)a, (int)a, (int)a);
							SpriteBatch spriteBatch20 = Main.spriteBatch;
							Vector2 vector223 = new Vector2((float)num63, (float)num64);
							color1 = new Microsoft.Xna.Framework.Color();
							ItemSlot.Draw(spriteBatch20, ref Main.recipe[Main.availableRecipe[r]].createItem, 22, vector223, color1);
							Main.inventoryBack = color18;
						}
					}
				}
				if (Main.numAvailableRecipes > 0)
				{
					for (int s = 0; s < Recipe.maxRequirements && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[s].type != 0; s++)
					{
						int num68 = 80 + s * 40;
						int num69 = 380 + num42;
						double a1 = (double)(Main.inventoryBack.A + 50);
						double num70 = 255;
						Microsoft.Xna.Framework.Color white1 = Microsoft.Xna.Framework.Color.White;
						Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
						a1 = (double)((float)(Main.inventoryBack.A + 50) - Math.Abs(Main.availableRecipeY[Main.focusRecipe]) * 2f);
						num70 = (double)(255f - Math.Abs(Main.availableRecipeY[Main.focusRecipe]) * 2f);
						if (a1 < 0)
						{
							a1 = 0;
						}
						if (num70 < 0)
						{
							num70 = 0;
						}
						white1.R = (byte)a1;
						white1.G = (byte)a1;
						white1.B = (byte)a1;
						white1.A = (byte)a1;
						white2.R = (byte)num70;
						white2.G = (byte)num70;
						white2.B = (byte)num70;
						white2.A = (byte)num70;
						Main.inventoryScale = 0.6f;
						if (a1 == 0)
						{
							break;
						}
						if (Main.mouseX >= num68 && (float)Main.mouseX <= (float)num68 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num69 && (float)Main.mouseY <= (float)num69 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.craftingHide = true;
							Main.player[Main.myPlayer].mouseInterface = true;
							Main.hoverItemName = Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[s].name;
							Main.toolTip = Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[s].Clone();
							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyIronBar && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[s].type == 22)
							{
								Main.toolTip.name = string.Concat(Lang.misc[37], " ", Main.itemName[22]);
							}
							else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyWood && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[s].type == 9)
							{
								Main.toolTip.name = string.Concat(Lang.misc[37], " ", Main.itemName[9]);
							}
							else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anySand && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[s].type == 169)
							{
								Main.toolTip.name = string.Concat(Lang.misc[37], " ", Main.itemName[169]);
							}
							else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyFragment && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[s].type == 3458)
							{
								Main.toolTip.name = string.Concat(Lang.misc[37], " ", Lang.misc[51]);
							}
							else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyPressurePlate && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[s].type == 542)
							{
								Main.toolTip.name = string.Concat(Lang.misc[37], " ", Lang.misc[38]);
							}
							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[s].stack > 1)
							{
								obj = Main.hoverItemName;
								objArray = new object[] { obj, " (", Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[s].stack, ")" };
								Main.hoverItemName = string.Concat(objArray);
							}
						}
						a1 = a1 - 50;
						if (a1 < 0)
						{
							a1 = 0;
						}
						Microsoft.Xna.Framework.Color color19 = Main.inventoryBack;
						Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)a1, (int)a1, (int)a1, (int)a1);
						SpriteBatch spriteBatch21 = Main.spriteBatch;
						Vector2 vector224 = new Vector2((float)num68, (float)num69);
						color1 = new Microsoft.Xna.Framework.Color();
						ItemSlot.Draw(spriteBatch21, ref Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[s], 22, vector224, color1);
						Main.inventoryBack = color19;
					}
				}
				if (Main.numAvailableRecipes != 0)
				{
					int num71 = 94;
					int num72 = 450 + num42;
					if (Main.craftGuide)
					{
						num72 = num72 - 150;
					}
					bool flag9 = (Main.mouseX <= num71 - 15 || Main.mouseX >= num71 + 15 || Main.mouseY <= num72 - 15 ? false : Main.mouseY < num72 + 15);
					int num73 = Main.recBigList.ToInt() * 2 + flag9.ToInt();
					nullable = null;
					Main.spriteBatch.Draw(Main.craftToggleTexture[num73], new Vector2((float)num71, (float)num72), nullable, Microsoft.Xna.Framework.Color.White, 0f, Main.craftToggleTexture[num73].Size() / 2f, 1f, SpriteEffects.None, 0f);
					if (flag9)
					{
						this.MouseText("Crafting window", 0, 0);
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeft && Main.mouseLeftRelease)
						{
							if (Main.recBigList)
							{
								Main.recBigList = false;
								Main.PlaySound(12, -1, -1, 1);
							}
							else
							{
								Main.recBigList = true;
								Main.PlaySound(12, -1, -1, 1);
							}
						}
					}
				}
				else
				{
					Main.recBigList = false;
				}
			}
			if (Main.recBigList)
			{
				int num74 = 42;
				if ((double)Main.inventoryScale < 0.75)
				{
					Main.inventoryScale = 0.75f;
				}
				int num75 = 340;
				int num76 = 310;
				int num77 = (Main.screenWidth - num76 - 280) / num74;
				int num78 = (Main.screenHeight - num75 - 20) / num74;
				int num79 = 0;
				int num80 = 0;
				int num81 = num76;
				int num82 = num75;
				int num83 = num76 - 20;
				int num84 = num75 + 2;
				if (Main.recStart > Main.numAvailableRecipes - num77 * num78)
				{
					Main.recStart = Main.numAvailableRecipes - num77 * num78;
					if (Main.recStart < 0)
					{
						Main.recStart = 0;
					}
				}
				if (Main.recStart > 0)
				{
					if (Main.mouseX >= num83 && Main.mouseX <= num83 + Main.craftUpButtonTexture.Width && Main.mouseY >= num84 && Main.mouseY <= num84 + Main.craftUpButtonTexture.Height)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.recStart = Main.recStart - num77;
							if (Main.recStart < 0)
							{
								Main.recStart = 0;
							}
							Main.PlaySound(12, -1, -1, 1);
							Main.mouseLeftRelease = false;
						}
					}
					SpriteBatch spriteBatch22 = Main.spriteBatch;
					Texture2D texture2D5 = Main.craftUpButtonTexture;
					Vector2 vector225 = new Vector2((float)num83, (float)num84);
					Microsoft.Xna.Framework.Rectangle? nullable4 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height));
					Microsoft.Xna.Framework.Color color20 = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
					vector22 = new Vector2();
					spriteBatch22.Draw(texture2D5, vector225, nullable4, color20, 0f, vector22, 1f, SpriteEffects.None, 0f);
				}
				if (Main.recStart < Main.numAvailableRecipes - num77 * num78)
				{
					num84 = num84 + 20;
					if (Main.mouseX >= num83 && Main.mouseX <= num83 + Main.craftUpButtonTexture.Width && Main.mouseY >= num84 && Main.mouseY <= num84 + Main.craftUpButtonTexture.Height)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.recStart = Main.recStart + num77;
							Main.PlaySound(12, -1, -1, 1);
							if (Main.recStart > Main.numAvailableRecipes - num77)
							{
								Main.recStart = Main.numAvailableRecipes - num77;
							}
							Main.mouseLeftRelease = false;
						}
					}
					SpriteBatch spriteBatch23 = Main.spriteBatch;
					Texture2D texture2D6 = Main.craftDownButtonTexture;
					Vector2 vector226 = new Vector2((float)num83, (float)num84);
					Microsoft.Xna.Framework.Rectangle? nullable5 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.craftUpButtonTexture.Width, Main.craftUpButtonTexture.Height));
					Microsoft.Xna.Framework.Color color21 = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
					vector22 = new Vector2();
					spriteBatch23.Draw(texture2D6, vector226, nullable5, color21, 0f, vector22, 1f, SpriteEffects.None, 0f);
				}
				for (int t = Main.recStart; t < Recipe.maxRecipes && t < Main.numAvailableRecipes; t++)
				{
					int num85 = num81;
					int num86 = num82;
					double a2 = (double)(Main.inventoryBack.A + 50);
					double num87 = 255;
					Microsoft.Xna.Framework.Color color22 = new Microsoft.Xna.Framework.Color((int)a2, (int)a2, (int)a2, (int)a2);
					Microsoft.Xna.Framework.Color color23 = new Microsoft.Xna.Framework.Color((int)num87, (int)num87, (int)num87, (int)num87);
					if (Main.mouseX >= num85 && (float)Main.mouseX <= (float)num85 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num86 && (float)Main.mouseY <= (float)num86 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						if (Main.mouseLeftRelease && Main.mouseLeft)
						{
							Main.focusRecipe = t;
							Main.recFastScroll = true;
							Main.recBigList = false;
							Main.PlaySound(12, -1, -1, 1);
							Main.mouseLeftRelease = false;
						}
						Main.craftingHide = true;
						Main.hoverItemName = Main.recipe[Main.availableRecipe[t]].createItem.name;
						Main.toolTip = Main.recipe[Main.availableRecipe[t]].createItem.Clone();
						if (Main.recipe[Main.availableRecipe[t]].createItem.stack > 1)
						{
							obj = Main.hoverItemName;
							objArray = new object[] { obj, " (", Main.recipe[Main.availableRecipe[t]].createItem.stack, ")" };
							Main.hoverItemName = string.Concat(objArray);
						}
					}
					if (Main.numAvailableRecipes > 0)
					{
						a2 = a2 - 50;
						if (a2 < 0)
						{
							a2 = 0;
						}
						Microsoft.Xna.Framework.Color color24 = Main.inventoryBack;
						Main.inventoryBack = new Microsoft.Xna.Framework.Color((int)a2, (int)a2, (int)a2, (int)a2);
						SpriteBatch spriteBatch24 = Main.spriteBatch;
						Vector2 vector227 = new Vector2((float)num85, (float)num86);
						color1 = new Microsoft.Xna.Framework.Color();
						ItemSlot.Draw(spriteBatch24, ref Main.recipe[Main.availableRecipe[t]].createItem, 22, vector227, color1);
						Main.inventoryBack = color24;
					}
					num81 = num81 + num74;
					num79++;
					if (num79 >= num77)
					{
						num81 = num76;
						num82 = num82 + num74;
						num79 = 0;
						num80++;
						if (num80 >= num78)
						{
							break;
						}
					}
				}
			}
			Vector2 vector228 = Main.fontMouseText.MeasureString("Coins");
			Vector2 vector229 = Main.fontMouseText.MeasureString(Lang.inter[26]);
			float x = vector228.X / vector229.X;
			SpriteBatch spriteBatch25 = Main.spriteBatch;
			SpriteFont spriteFont9 = Main.fontMouseText;
			string str13 = Lang.inter[26];
			Vector2 vector230 = new Vector2(496f, 84f + (vector228.Y - vector228.Y * x) / 2f);
			Microsoft.Xna.Framework.Color color25 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			vector22 = new Vector2();
			spriteBatch25.DrawString(spriteFont9, str13, vector230, color25, 0f, vector22, 0.75f * x, SpriteEffects.None, 0f);
			Main.inventoryScale = 0.6f;
			for (int u = 0; u < 4; u++)
			{
				int num88 = 497;
				int num89 = (int)(85f + (float)(u * 56) * Main.inventoryScale + 20f);
				int num90 = u + 50;
				Microsoft.Xna.Framework.Color color26 = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
				if (Main.mouseX >= num88 && (float)Main.mouseX <= (float)num88 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num89 && (float)Main.mouseY <= (float)num89 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(Main.player[Main.myPlayer].inventory, 1, num90);
					if (!Main.mouseLeftRelease || !Main.mouseLeft)
					{
						ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 1, num90);
					}
					else
					{
						ItemSlot.LeftClick(Main.player[Main.myPlayer].inventory, 1, num90);
						Recipe.FindRecipes();
					}
					ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 1, num90);
				}
				SpriteBatch spriteBatch26 = Main.spriteBatch;
				Item[] itemArray5 = Main.player[Main.myPlayer].inventory;
				Vector2 vector231 = new Vector2((float)num88, (float)num89);
				color1 = new Microsoft.Xna.Framework.Color();
				ItemSlot.Draw(spriteBatch26, itemArray5, 1, num90, vector231, color1);
			}
			Vector2 vector232 = Main.fontMouseText.MeasureString("Ammo");
			Vector2 vector233 = Main.fontMouseText.MeasureString(Lang.inter[27]);
			float x1 = vector232.X / vector233.X;
			SpriteBatch spriteBatch27 = Main.spriteBatch;
			SpriteFont spriteFont10 = Main.fontMouseText;
			string str14 = Lang.inter[27];
			Vector2 vector234 = new Vector2(532f, 84f + (vector232.Y - vector232.Y * x1) / 2f);
			Microsoft.Xna.Framework.Color color27 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			vector22 = new Vector2();
			spriteBatch27.DrawString(spriteFont10, str14, vector234, color27, 0f, vector22, 0.75f * x1, SpriteEffects.None, 0f);
			Main.inventoryScale = 0.6f;
			for (int v = 0; v < 4; v++)
			{
				int num91 = 534;
				int num92 = (int)(85f + (float)(v * 56) * Main.inventoryScale + 20f);
				int num93 = 54 + v;
				Microsoft.Xna.Framework.Color color28 = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
				if (Main.mouseX >= num91 && (float)Main.mouseX <= (float)num91 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num92 && (float)Main.mouseY <= (float)num92 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					ItemSlot.OverrideHover(Main.player[Main.myPlayer].inventory, 2, num93);
					if (!Main.mouseLeftRelease || !Main.mouseLeft)
					{
						ItemSlot.RightClick(Main.player[Main.myPlayer].inventory, 2, num93);
					}
					else
					{
						ItemSlot.LeftClick(Main.player[Main.myPlayer].inventory, 2, num93);
						Recipe.FindRecipes();
					}
					ItemSlot.MouseHover(Main.player[Main.myPlayer].inventory, 2, num93);
				}
				SpriteBatch spriteBatch28 = Main.spriteBatch;
				Item[] itemArray6 = Main.player[Main.myPlayer].inventory;
				Vector2 vector235 = new Vector2((float)num91, (float)num92);
				color1 = new Microsoft.Xna.Framework.Color();
				ItemSlot.Draw(spriteBatch28, itemArray6, 2, num93, vector235, color1);
			}
			if (Main.npcShop > 0 && (!Main.playerInventory || Main.player[Main.myPlayer].talkNPC == -1))
			{
				Main.npcShop = 0;
			}
			if (Main.npcShop > 0)
			{
				Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, Lang.inter[28], 504f, (float)this.invBottom, Microsoft.Xna.Framework.Color.White * ((float)Main.mouseTextColor / 255f), Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
				ItemSlot.DrawSavings(Main.spriteBatch, 504f, (float)this.invBottom, false);
				Main.inventoryScale = 0.755f;
				if (Main.mouseX > 73 && Main.mouseX < (int)(73f + 560f * Main.inventoryScale) && Main.mouseY > this.invBottom && Main.mouseY < (int)((float)this.invBottom + 224f * Main.inventoryScale))
				{
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				for (int w = 0; w < 10; w++)
				{
					for (int x2 = 0; x2 < 4; x2++)
					{
						int num94 = (int)(73f + (float)(w * 56) * Main.inventoryScale);
						int num95 = (int)((float)this.invBottom + (float)(x2 * 56) * Main.inventoryScale);
						int num96 = w + x2 * 10;
						Microsoft.Xna.Framework.Color color29 = new Microsoft.Xna.Framework.Color(100, 100, 100, 100);
						if (Main.mouseX >= num94 && (float)Main.mouseX <= (float)num94 + (float)Main.inventoryBackTexture.Width * Main.inventoryScale && Main.mouseY >= num95 && (float)Main.mouseY <= (float)num95 + (float)Main.inventoryBackTexture.Height * Main.inventoryScale)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							if (!Main.mouseLeftRelease || !Main.mouseLeft)
							{
								ItemSlot.RightClick(this.shop[Main.npcShop].item, 15, num96);
							}
							else
							{
								ItemSlot.LeftClick(this.shop[Main.npcShop].item, 15, num96);
							}
							ItemSlot.MouseHover(this.shop[Main.npcShop].item, 15, num96);
						}
						SpriteBatch spriteBatch29 = Main.spriteBatch;
						Item[] itemArray7 = this.shop[Main.npcShop].item;
						Vector2 vector236 = new Vector2((float)num94, (float)num95);
						color1 = new Microsoft.Xna.Framework.Color();
						ItemSlot.Draw(spriteBatch29, itemArray7, 15, num96, vector236, color1);
					}
				}
			}
			if (Main.player[Main.myPlayer].chest > -1 && !Main.tileContainer[Main.tile[Main.player[Main.myPlayer].chestX, Main.player[Main.myPlayer].chestY].type])
			{
				Main.player[Main.myPlayer].chest = -1;
			}
			ChestUI.Draw(Main.spriteBatch);
			if (Main.player[Main.myPlayer].chest == -1 && Main.npcShop == 0)
			{
				int num97 = 0;
				int num98 = 498;
				int num99 = 244;
				int width = Main.chestStackTexture[num97].Width;
				int height = Main.chestStackTexture[num97].Height;
				if (Main.mouseX >= num98 && Main.mouseX <= num98 + width && Main.mouseY >= num99 && Main.mouseY <= num99 + height)
				{
					num97 = 1;
					if (!Main.allChestStackHover)
					{
						Main.PlaySound(12, -1, -1, 1);
						Main.allChestStackHover = true;
					}
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						Main.mouseLeftRelease = false;
						Main.player[Main.myPlayer].QuickStackAllChests();
					}
					Main.player[Main.myPlayer].mouseInterface = true;
				}
				else if (Main.allChestStackHover)
				{
					Main.PlaySound(12, -1, -1, 1);
					Main.allChestStackHover = false;
				}
				SpriteBatch spriteBatch30 = Main.spriteBatch;
				Texture2D texture2D7 = Main.chestStackTexture[num97];
				Vector2 vector237 = new Vector2((float)num98, (float)num99);
				Microsoft.Xna.Framework.Rectangle? nullable6 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chestStackTexture[num97].Width, Main.chestStackTexture[num97].Height));
				Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
				vector22 = new Vector2();
				spriteBatch30.Draw(texture2D7, vector237, nullable6, white3, 0f, vector22, 1f, SpriteEffects.None, 0f);
				if (!Main.mouseText && num97 == 1)
				{
					this.MouseText("Quick stack to nearby chests", 0, 0);
				}
			}
		}

		protected void DrawItem(Item item, int whoami)
		{
			int x = (int)((double)item.position.X + (double)item.width * 0.5) / 16;
			int num = Lighting.offScreenTiles;
			int y = (int)((double)item.position.Y + (double)item.height * 0.5) / 16;
			int num1 = Lighting.offScreenTiles;
			Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((double)item.position.X + (double)item.width * 0.5) / 16, (int)((double)item.position.Y + (double)item.height * 0.5) / 16);
			if (!Main.gamePaused && base.IsActive && item.type >= 71 && item.type <= 74 && (double)(Math.Abs(item.velocity.X) + Math.Abs(item.velocity.Y)) > 0.2)
			{
				float single = (float)Main.rand.Next(500) - (Math.Abs(item.velocity.X) + Math.Abs(item.velocity.Y)) * 20f;
				int num2 = item.type - 72;
				single = single - (float)(num2 * 20);
				int num3 = 244 + item.type - 71;
				if (item.isBeingGrabbed)
				{
					single = single / 100f;
				}
				if (single < (float)(color.R / 70 + 1))
				{
					Vector2 vector2 = item.position - new Vector2(1f, 2f);
					int num4 = item.width;
					int num5 = item.height;
					Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color();
					int num6 = Dust.NewDust(vector2, num4, num5, num3, 0f, 0f, 254, color1, 0.25f);
					Dust dust = Main.dust[num6];
					dust.velocity = dust.velocity * 0f;
				}
			}
			float x1 = item.velocity.X * 0.2f;
			float single1 = 1f;
			Microsoft.Xna.Framework.Color alpha = item.GetAlpha(color);
			ItemSlot.GetItemLight(ref alpha, ref single1, item, false);
			float single2 = (float)(item.height - Main.itemTexture[item.type].Height);
			float single3 = (float)(item.width / 2 - Main.itemTexture[item.type].Width / 2);
			if (item.type >= 71 && item.type <= 74)
			{
				int num7 = item.type - 71;
				Main.itemFrameCounter[whoami] = Main.itemFrameCounter[whoami] + 1;
				if (Main.itemFrameCounter[whoami] > 5)
				{
					Main.itemFrameCounter[whoami] = 0;
					Main.itemFrame[whoami] = Main.itemFrame[whoami] + 1;
				}
				if (Main.itemFrame[whoami] > 7)
				{
					Main.itemFrame[whoami] = 0;
				}
				int width = Main.coinTexture[num7].Width;
				int height = Main.coinTexture[num7].Height / 8;
				single3 = (float)(item.width / 2 - Main.coinTexture[num7].Width / 2);
				Main.spriteBatch.Draw(Main.coinTexture[num7], new Vector2(item.position.X - Main.screenPosition.X + (float)(width / 2) + single3, item.position.Y - Main.screenPosition.Y + (float)(height / 2) + single2), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.itemFrame[whoami] * height + 1, Main.itemTexture[item.type].Width, height)), alpha, x1, new Vector2((float)(width / 2), (float)(height / 2)), single1, SpriteEffects.None, 0f);
				return;
			}
			if (ItemID.Sets.NebulaPickup[item.type])
			{
				Main.itemFrameCounter[whoami] = Main.itemFrameCounter[whoami] + 1;
				if (Main.itemFrameCounter[whoami] > 5)
				{
					Main.itemFrameCounter[whoami] = 0;
					Main.itemFrame[whoami] = Main.itemFrame[whoami] + 1;
				}
				if (Main.itemFrame[whoami] >= 4)
				{
					Main.itemFrame[whoami] = 0;
				}
				Microsoft.Xna.Framework.Rectangle rectangle = Main.itemTexture[item.type].Frame(1, 4, 0, Main.itemFrame[whoami]);
				single3 = (float)(item.width / 2 - rectangle.Width / 2);
				single2 = (float)(item.height - rectangle.Height);
				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle.Width / 2) + single3, item.position.Y - Main.screenPosition.Y + (float)(rectangle.Height / 2) + single2), new Microsoft.Xna.Framework.Rectangle?(rectangle), alpha, x1, rectangle.Size() / 2f, single1, SpriteEffects.None, 0f);
				return;
			}
			if (ItemID.Sets.AnimatesAsSoul[item.type])
			{
				Main.itemFrameCounter[whoami] = Main.itemFrameCounter[whoami] + 1;
				if (Main.itemFrameCounter[whoami] > 5)
				{
					Main.itemFrameCounter[whoami] = 0;
					Main.itemFrame[whoami] = Main.itemFrame[whoami] + 1;
				}
				if (Main.itemFrame[whoami] >= 4)
				{
					Main.itemFrame[whoami] = 0;
				}
				Microsoft.Xna.Framework.Rectangle rectangle1 = Main.itemTexture[item.type].Frame(1, 4, 0, Main.itemFrame[whoami]);
				single3 = (float)(item.width / 2 - rectangle1.Width / 2);
				single2 = (float)(item.height - rectangle1.Height);
				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle1.Width / 2) + single3, item.position.Y - Main.screenPosition.Y + (float)(rectangle1.Height / 2) + single2), new Microsoft.Xna.Framework.Rectangle?(rectangle1), alpha, x1, rectangle1.Size() / 2f, single1, SpriteEffects.None, 0f);
				return;
			}
			if (item.type >= 1522 && item.type <= 1527)
			{
				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + single3, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + single2 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, Main.mouseTextColor / 2), x1, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), (float)Main.mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
				return;
			}
			Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + single3, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + single2 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, x1, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), single1, SpriteEffects.None, 0f);
			if (item.color != new Microsoft.Xna.Framework.Color())
			{
				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + single3, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + single2 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), item.GetColor(color), x1, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), single1, SpriteEffects.None, 0f);
			}
			if (item.glowMask != -1)
			{
				Main.spriteBatch.Draw(Main.glowMaskTexture[item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + single3, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + single2 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), x1, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), single1, SpriteEffects.None, 0f);
			}
		}

		public void DrawItems()
		{
			for (int i = 0; i < 400; i++)
			{
				if (Main.item[i].active && Main.item[i].type > 0)
				{
					this.DrawItem(Main.item[i], i);
				}
			}
		}

		protected void DrawMap()
		{
			string str;
			string str1;
			Vector2 vector2;
			Microsoft.Xna.Framework.Rectangle? nullable;
			string str2 = "";
			if (!Main.mapEnabled)
			{
				return;
			}
			if (!Main.mapReady)
			{
				return;
			}
			float single = 0f;
			float single1 = 0f;
			float single2 = single;
			float single3 = single1;
			float single4 = 2f;
			byte num = 255;
			int num1 = Main.maxTilesX / Main.textureMaxWidth;
			int num2 = Main.maxTilesY / Main.textureMaxHeight;
			float single5 = (float)Lighting.offScreenTiles;
			float single6 = (float)Lighting.offScreenTiles;
			float single7 = (float)(Main.maxTilesX - Lighting.offScreenTiles - 1);
			float single8 = (float)(Main.maxTilesY - Lighting.offScreenTiles - 42);
			float x = 0f;
			float y = 0f;
			single5 = 10f;
			single6 = 10f;
			single7 = (float)(Main.maxTilesX - 10);
			single8 = (float)(Main.maxTilesY - 10);
			for (int i = 0; i < this.mapTarget.GetLength(0); i++)
			{
				for (int j = 0; j < this.mapTarget.GetLength(1); j++)
				{
					if (this.mapTarget[i, j] != null)
					{
						if (this.mapTarget[i, j].IsContentLost && !Main.mapWasContentLost[i, j])
						{
							Main.mapWasContentLost[i, j] = true;
							Main.refreshMap = true;
							Main.clearMap = true;
						}
						else if (!this.mapTarget[i, j].IsContentLost && Main.mapWasContentLost[i, j])
						{
							Main.mapWasContentLost[i, j] = false;
						}
					}
				}
			}
			single = 200f;
			single1 = 300f;
			float single9 = 0f;
			float single10 = 0f;
			float single11 = single7 - 1f;
			float single12 = single8 - 1f;
			if (!Main.mapFullscreen)
			{
				single4 = (Main.mapStyle != 1 ? Main.mapOverlayScale : Main.mapMinimapScale);
			}
			else
			{
				single4 = Main.mapFullscreenScale;
			}
			bool flag = false;
			if (!Main.mapFullscreen && single4 > 1f)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				flag = true;
			}
			if (Main.mapFullscreen)
			{
				if (Main.mouseLeft && base.IsActive && !CaptureManager.Instance.UsingMap)
				{
					if (!Main.mouseLeftRelease)
					{
						float single13 = (float)Main.mouseX - Main.grabMapX;
						float single14 = (float)Main.mouseY - Main.grabMapY;
						Main.grabMapX = (float)Main.mouseX;
						Main.grabMapY = (float)Main.mouseY;
						single13 = single13 * 0.06255f;
						single14 = single14 * 0.06255f;
						Main.mapFullscreenPos.X = Main.mapFullscreenPos.X - single13 * (16f / Main.mapFullscreenScale);
						Main.mapFullscreenPos.Y = Main.mapFullscreenPos.Y - single14 * (16f / Main.mapFullscreenScale);
					}
					else
					{
						Main.grabMapX = (float)Main.mouseX;
						Main.grabMapY = (float)Main.mouseY;
					}
				}
				Main.player[Main.myPlayer].mouseInterface = true;
				float single15 = (float)Main.screenWidth / (float)Main.maxTilesX * 0.8f;
				if (Main.mapFullscreenScale < single15)
				{
					Main.mapFullscreenScale = single15;
				}
				if (Main.mapFullscreenScale > 16f)
				{
					Main.mapFullscreenScale = 16f;
				}
				single4 = Main.mapFullscreenScale;
				num = 255;
				if (Main.mapFullscreenPos.X < single5)
				{
					Main.mapFullscreenPos.X = single5;
				}
				if (Main.mapFullscreenPos.X > single7)
				{
					Main.mapFullscreenPos.X = single7;
				}
				if (Main.mapFullscreenPos.Y < single6)
				{
					Main.mapFullscreenPos.Y = single6;
				}
				if (Main.mapFullscreenPos.Y > single8)
				{
					Main.mapFullscreenPos.Y = single8;
				}
				float x1 = Main.mapFullscreenPos.X;
				float y1 = Main.mapFullscreenPos.Y;
				if (Main.resetMapFull)
				{
					Main.resetMapFull = false;
					x1 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
					y1 = (Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f;
					Main.mapFullscreenPos.X = x1;
					Main.mapFullscreenPos.Y = y1;
				}
				x1 = x1 * single4;
				y1 = y1 * single4;
				single = -x1 + (float)(Main.screenWidth / 2);
				single1 = -y1 + (float)(Main.screenHeight / 2);
				single = single + single5 * single4;
				single1 = single1 + single6 * single4;
				float single16 = (float)(Main.maxTilesX / 840);
				single16 = single16 * Main.mapFullscreenScale;
				float single17 = single;
				float single18 = single1;
				float width = (float)Main.mapTexture.Width;
				float height = (float)Main.mapTexture.Height;
				if (Main.maxTilesX == 8400)
				{
					single16 = single16 * 0.999f;
					single17 = single17 - 40.6f * single16;
					single18 = single1 - 5f * single16;
					width = width - 8.045f;
					width = width * single16;
					height = height + 0.12f;
					height = height * single16;
					if ((double)single16 < 1.2)
					{
						height = height + 1f;
					}
				}
				else if (Main.maxTilesX == 6400)
				{
					single16 = single16 * 1.09f;
					single17 = single17 - 38.8f * single16;
					single18 = single1 - 3.85f * single16;
					width = width - 13.6f;
					width = width * single16;
					height = height - 6.92f;
					height = height * single16;
					if ((double)single16 < 1.2)
					{
						height = height + 2f;
					}
				}
				else if (Main.maxTilesX == 6300)
				{
					single16 = single16 * 1.09f;
					single17 = single17 - 39.8f * single16;
					single18 = single1 - 4.08f * single16;
					width = width - 26.69f;
					width = width * single16;
					height = height - 6.92f;
					height = height * single16;
					if ((double)single16 < 1.2)
					{
						height = height + 2f;
					}
				}
				else if (Main.maxTilesX == 4200)
				{
					single16 = single16 * 0.998f;
					single17 = single17 - 37.3f * single16;
					single18 = single18 - 1.7f * single16;
					width = width - 16f;
					width = width * single16;
					height = height - 8.31f;
					height = height * single16;
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				flag = true;
				if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
				{
					Main.spriteBatch.Draw(this.mapBG3Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
				}
				else if (Main.player[Main.myPlayer].ZoneDungeon)
				{
					Main.spriteBatch.Draw(this.mapBG5Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
				}
				else if (Main.tile[(int)(Main.player[Main.myPlayer].Center.X / 16f), (int)(Main.player[Main.myPlayer].Center.Y / 16f)].wall == 87)
				{
					Main.spriteBatch.Draw(this.mapBG14Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
				}
				else if ((double)Main.screenPosition.Y <= Main.worldSurface * 16)
				{
					int x2 = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
					if (Main.player[Main.myPlayer].ZoneCorrupt)
					{
						Main.spriteBatch.Draw(this.mapBG6Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if (Main.player[Main.myPlayer].ZoneCrimson)
					{
						Main.spriteBatch.Draw(this.mapBG7Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if (Main.player[Main.myPlayer].ZoneHoly)
					{
						Main.spriteBatch.Draw(this.mapBG8Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10 && (x2 < 380 || x2 > Main.maxTilesX - 380))
					{
						Main.spriteBatch.Draw(this.mapBG11Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if (Main.player[Main.myPlayer].ZoneSnow)
					{
						Main.spriteBatch.Draw(this.mapBG12Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if (Main.player[Main.myPlayer].ZoneJungle)
					{
						Main.spriteBatch.Draw(this.mapBG9Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else if (Main.sandTiles <= 1000)
					{
						Main.spriteBatch.Draw(this.mapBG1Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
					else
					{
						Main.spriteBatch.Draw(this.mapBG10Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
					}
				}
				else if (Main.player[Main.myPlayer].ZoneSnow)
				{
					Main.spriteBatch.Draw(this.mapBG4Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
				}
				else if (Main.player[Main.myPlayer].ZoneJungle)
				{
					Main.spriteBatch.Draw(this.mapBG13Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
				}
				else if (Main.sandTiles <= 1000)
				{
					Main.spriteBatch.Draw(this.mapBG2Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
				}
				else
				{
					Main.spriteBatch.Draw(this.mapBG15Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Main.bgColor);
				}
				Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)single17, (int)single18, (int)width, (int)height);
				Main.spriteBatch.Draw(Main.mapTexture, rectangle, Microsoft.Xna.Framework.Color.White);
				if (single4 < 1f)
				{
					Main.spriteBatch.End();
					Main.spriteBatch.Begin();
					flag = false;
				}
			}
			else if (Main.mapStyle == 1)
			{
				Main.miniMapWidth = 240;
				Main.miniMapHeight = 240;
				Main.miniMapX = Main.screenWidth - Main.miniMapWidth - 52;
				Main.miniMapY = 90;
				float single19 = (float)Main.miniMapHeight / (float)Main.maxTilesY;
				if ((double)Main.mapMinimapScale < 0.2)
				{
					Main.mapMinimapScale = 0.2f;
				}
				if (Main.mapMinimapScale > 3f)
				{
					Main.mapMinimapScale = 3f;
				}
				if ((double)Main.mapMinimapAlpha < 0.01)
				{
					Main.mapMinimapAlpha = 0.01f;
				}
				if (Main.mapMinimapAlpha > 1f)
				{
					Main.mapMinimapAlpha = 1f;
				}
				single4 = Main.mapMinimapScale;
				num = (byte)(255f * Main.mapMinimapAlpha);
				single = (float)Main.miniMapX;
				single1 = (float)Main.miniMapY;
				single2 = single;
				single3 = single1;
				float x3 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
				float y2 = (Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f;
				x = -(x3 - (float)((int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f))) * single4;
				y = -(y2 - (float)((int)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f))) * single4;
				single11 = (float)Main.miniMapWidth / single4;
				single12 = (float)Main.miniMapHeight / single4;
				single9 = (float)((int)x3) - single11 / 2f;
				single10 = (float)((int)y2) - single12 / 2f;
				float single20 = single2 - 6f;
				float single21 = single3 - 6f;
				SpriteBatch spriteBatch = Main.spriteBatch;
				Texture2D texture2D = Main.miniMapFrame2Texture;
				Vector2 vector21 = new Vector2(single20, single21);
				Microsoft.Xna.Framework.Rectangle? nullable1 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.miniMapFrame2Texture.Width, Main.miniMapFrame2Texture.Height));
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)num, (int)num, (int)num, (int)num);
				vector2 = new Vector2();
				spriteBatch.Draw(texture2D, vector21, nullable1, color, 0f, vector2, 1f, SpriteEffects.None, 0f);
			}
			else if (Main.mapStyle == 2)
			{
				float single22 = (float)Main.screenWidth / (float)Main.maxTilesX;
				if (Main.mapOverlayScale < single22)
				{
					Main.mapOverlayScale = single22;
				}
				if (Main.mapOverlayScale > 16f)
				{
					Main.mapOverlayScale = 16f;
				}
				if ((double)Main.mapOverlayAlpha < 0.01)
				{
					Main.mapOverlayAlpha = 0.01f;
				}
				if (Main.mapOverlayAlpha > 1f)
				{
					Main.mapOverlayAlpha = 1f;
				}
				single4 = Main.mapOverlayScale;
				num = (byte)(255f * Main.mapOverlayAlpha);
				int num3 = Main.maxTilesX;
				int num4 = Main.maxTilesY;
				float x4 = (Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f;
				float y3 = (Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f;
				x4 = x4 * single4;
				y3 = y3 * single4;
				single = -x4 + (float)(Main.screenWidth / 2);
				single1 = -y3 + (float)(Main.screenHeight / 2);
				single = single + single5 * single4;
				single1 = single1 + single6 * single4;
			}
			if (Main.mapStyle == 1 && !Main.mapFullscreen)
			{
				if (single9 < single5)
				{
					single = single - (single9 - single5) * single4;
				}
				if (single10 < single6)
				{
					single1 = single1 - (single10 - single6) * single4;
				}
			}
			single11 = single9 + single11;
			single12 = single10 + single12;
			if (single9 > single5)
			{
				single5 = single9;
			}
			if (single10 > single6)
			{
				single6 = single10;
			}
			if (single11 < single7)
			{
				single7 = single11;
			}
			if (single12 < single8)
			{
				single8 = single12;
			}
			float single23 = (float)Main.textureMaxWidth * single4;
			float single24 = (float)Main.textureMaxHeight * single4;
			float single25 = single;
			float single26 = 0f;
			for (int k = 0; k <= 4; k++)
			{
				if ((float)((k + 1) * Main.textureMaxWidth) > single5 && (float)(k * Main.textureMaxWidth) < single5 + single7)
				{
					for (int l = 0; l <= num2; l++)
					{
						if ((float)((l + 1) * Main.textureMaxHeight) > single6 && (float)(l * Main.textureMaxHeight) < single6 + single8)
						{
							float single27 = single + (float)((int)((float)k * single23));
							float single28 = single1 + (float)((int)((float)l * single24));
							float single29 = (float)(k * Main.textureMaxWidth);
							float single30 = (float)(l * Main.textureMaxHeight);
							float single31 = 0f;
							float single32 = 0f;
							if (single29 >= single5)
							{
								single27 = single27 - single5 * single4;
							}
							else
							{
								single31 = single5 - single29;
								single27 = single;
							}
							if (single30 >= single6)
							{
								single28 = single28 - single6 * single4;
							}
							else
							{
								single32 = single6 - single30;
								single28 = single1;
							}
							single27 = single25;
							float single33 = (float)Main.textureMaxWidth;
							float single34 = (float)Main.textureMaxHeight;
							float single35 = (float)((k + 1) * Main.textureMaxWidth);
							float single36 = (float)((l + 1) * Main.textureMaxHeight);
							if (single35 >= single7)
							{
								single33 = single33 - (single35 - single7);
							}
							if (single36 >= single8)
							{
								single34 = single34 - (single36 - single8);
							}
							single27 = single27 + x;
							single28 = single28 + y;
							if (single33 > single31)
							{
								SpriteBatch spriteBatch1 = Main.spriteBatch;
								RenderTarget2D renderTarget2D = this.mapTarget[k, l];
								Vector2 vector22 = new Vector2(single27, single28);
								Microsoft.Xna.Framework.Rectangle? nullable2 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)single31, (int)single32, (int)single33 - (int)single31, (int)single34 - (int)single32));
								Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color((int)num, (int)num, (int)num, (int)num);
								vector2 = new Vector2();
								spriteBatch1.Draw(renderTarget2D, vector22, nullable2, color1, 0f, vector2, single4, SpriteEffects.None, 0f);
							}
							single26 = (float)((int)single33 - (int)single31) * single4;
						}
						if (l == num2)
						{
							single25 = single25 + single26;
						}
					}
				}
			}
			if (flag)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
			}
			if (!Main.mapFullscreen)
			{
				if (Main.mapStyle == 2)
				{
					float single37 = (single4 * 0.2f * 2f + 1f) / 3f;
					if (single37 > 1f)
					{
						single37 = 1f;
					}
					if (single4 < 10f)
					{
						for (int m = 0; m < 200; m++)
						{
							if (Main.npc[m].active && Main.npc[m].townNPC)
							{
								int num5 = NPC.TypeToNum(Main.npc[m].type);
								if (num5 > 0)
								{
									SpriteEffects spriteEffect = SpriteEffects.None;
									if (Main.npc[m].direction > 0)
									{
										spriteEffect = SpriteEffects.FlipHorizontally;
									}
									float x5 = (Main.npc[m].position.X + (float)(Main.npc[m].width / 2)) / 16f * single4;
									float y4 = (Main.npc[m].position.Y + (float)(Main.npc[m].height / 2)) / 16f * single4;
									x5 = x5 + single;
									y4 = y4 + single1;
									x5 = x5 - 10f * single4;
									y4 = y4 - 10f * single4;
									Main.spriteBatch.Draw(Main.npcHeadTexture[num5], new Vector2(x5, y4), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num5].Width, Main.npcHeadTexture[num5].Height)), new Microsoft.Xna.Framework.Color((int)num, (int)num, (int)num, (int)num), 0f, new Vector2((float)(Main.npcHeadTexture[num5].Width / 2), (float)(Main.npcHeadTexture[num5].Height / 2)), single37, spriteEffect, 0f);
								}
							}
							if (Main.npc[m].active && Main.npc[m].GetBossHeadTextureIndex() != -1)
							{
								float bossHeadRotation = Main.npc[m].GetBossHeadRotation();
								SpriteEffects bossHeadSpriteEffects = Main.npc[m].GetBossHeadSpriteEffects();
								Vector2 center = Main.npc[m].Center + new Vector2(0f, Main.npc[m].gfxOffY);
								if (Main.npc[m].type == 134)
								{
									Vector2 center1 = Main.npc[m].Center;
									int num6 = 1;
									for (int n = (int)Main.npc[m].ai[0]; num6 < 15 && Main.npc[n].active && Main.npc[n].type >= 134 && Main.npc[n].type <= 136; n = (int)Main.npc[n].ai[0])
									{
										num6++;
										center1 = center1 + Main.npc[n].Center;
									}
									center1 = center1 / (float)num6;
									center = center1;
								}
								int bossHeadTextureIndex = Main.npc[m].GetBossHeadTextureIndex();
								float x6 = center.X / 16f * single4;
								float y5 = center.Y / 16f * single4;
								x6 = x6 + single;
								y5 = y5 + single1;
								x6 = x6 - 10f * single4;
								y5 = y5 - 10f * single4;
								nullable = null;
								Main.spriteBatch.Draw(Main.npcHeadBossTexture[bossHeadTextureIndex], new Vector2(x6, y5), nullable, new Microsoft.Xna.Framework.Color((int)num, (int)num, (int)num, (int)num), bossHeadRotation, Main.npcHeadBossTexture[bossHeadTextureIndex].Size() / 2f, single37, bossHeadSpriteEffects, 0f);
							}
						}
						Main.spriteBatch.End();
						Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
						for (int o = 0; o < 255; o++)
						{
							if (Main.player[o].active && !Main.player[o].dead && o != Main.myPlayer && (!Main.player[Main.myPlayer].hostile && !Main.player[o].hostile || Main.player[Main.myPlayer].team == Main.player[o].team && Main.player[o].team != 0 || o == Main.myPlayer))
							{
								float x7 = (Main.player[o].position.X + (float)(Main.player[o].width / 2)) / 16f * single4;
								float y6 = Main.player[o].position.Y / 16f * single4;
								x7 = x7 + single;
								y6 = y6 + single1;
								x7 = x7 - 6f;
								y6 = y6 - 2f;
								y6 = y6 - (2f - single4 / 5f * 2f);
								x7 = x7 - 10f * single4;
								y6 = y6 - 10f * single4;
								this.DrawPlayerHead(Main.player[o], x7, y6, (float)num / 255f, single37);
							}
						}
						Main.spriteBatch.End();
						Main.spriteBatch.Begin();
					}
				}
				if (Main.mapStyle == 1)
				{
					float single38 = single2 - 6f;
					float single39 = single3 - 6f;
					float single40 = (single4 * 0.25f * 2f + 1f) / 3f;
					if (single40 > 1f)
					{
						single40 = 1f;
					}
					for (int p = 0; p < 200; p++)
					{
						if (Main.npc[p].active && Main.npc[p].townNPC)
						{
							int num7 = NPC.TypeToNum(Main.npc[p].type);
							if (num7 > 0)
							{
								SpriteEffects spriteEffect1 = SpriteEffects.None;
								if (Main.npc[p].direction > 0)
								{
									spriteEffect1 = SpriteEffects.FlipHorizontally;
								}
								float x8 = ((Main.npc[p].position.X + (float)(Main.npc[p].width / 2)) / 16f - single9) * single4;
								float y7 = ((Main.npc[p].position.Y + Main.npc[p].gfxOffY + (float)(Main.npc[p].height / 2)) / 16f - single10) * single4;
								x8 = x8 + single2;
								y7 = y7 + single3;
								y7 = y7 - 2f * single4 / 5f;
								if (x8 > (float)(Main.miniMapX + 12) && x8 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && y7 > (float)(Main.miniMapY + 10) && y7 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
								{
									Main.spriteBatch.Draw(Main.npcHeadTexture[num7], new Vector2(x8 + x, y7 + y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num7].Width, Main.npcHeadTexture[num7].Height)), new Microsoft.Xna.Framework.Color((int)num, (int)num, (int)num, (int)num), 0f, new Vector2((float)(Main.npcHeadTexture[num7].Width / 2), (float)(Main.npcHeadTexture[num7].Height / 2)), single40, spriteEffect1, 0f);
									float width1 = x8 - (float)(Main.npcHeadTexture[num7].Width / 2) * single40;
									float height1 = y7 - (float)(Main.npcHeadTexture[num7].Height / 2) * single40;
									float width2 = width1 + (float)Main.npcHeadTexture[num7].Width * single40;
									float height2 = height1 + (float)Main.npcHeadTexture[num7].Height * single40;
									if ((float)Main.mouseX >= width1 && (float)Main.mouseX <= width2 && (float)Main.mouseY >= height1 && (float)Main.mouseY <= height2)
									{
										str = (num7 != 11 ? string.Concat(Main.npc[p].displayName, " the ", Main.npc[p].name) : Main.npc[p].displayName);
										str2 = str;
									}
								}
							}
						}
						if (Main.npc[p].active && Main.npc[p].GetBossHeadTextureIndex() != -1)
						{
							float bossHeadRotation1 = Main.npc[p].GetBossHeadRotation();
							SpriteEffects bossHeadSpriteEffects1 = Main.npc[p].GetBossHeadSpriteEffects();
							Vector2 center2 = Main.npc[p].Center + new Vector2(0f, Main.npc[p].gfxOffY);
							if (Main.npc[p].type == 134)
							{
								Vector2 center3 = Main.npc[p].Center;
								int num8 = 1;
								for (int q = (int)Main.npc[p].ai[0]; num8 < 15 && Main.npc[q].active && Main.npc[q].type >= 134 && Main.npc[q].type <= 136; q = (int)Main.npc[q].ai[0])
								{
									num8++;
									center3 = center3 + Main.npc[q].Center;
								}
								center3 = center3 / (float)num8;
								center2 = center3;
							}
							int bossHeadTextureIndex1 = Main.npc[p].GetBossHeadTextureIndex();
							float x9 = (center2.X / 16f - single9) * single4;
							float y8 = (center2.Y / 16f - single10) * single4;
							x9 = x9 + single2;
							y8 = y8 + single3;
							y8 = y8 - 2f * single4 / 5f;
							if (x9 > (float)(Main.miniMapX + 12) && x9 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && y8 > (float)(Main.miniMapY + 10) && y8 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
							{
								nullable = null;
								Main.spriteBatch.Draw(Main.npcHeadBossTexture[bossHeadTextureIndex1], new Vector2(x9 + x, y8 + y), nullable, new Microsoft.Xna.Framework.Color((int)num, (int)num, (int)num, (int)num), bossHeadRotation1, Main.npcHeadBossTexture[bossHeadTextureIndex1].Size() / 2f, single40, bossHeadSpriteEffects1, 0f);
								float width3 = x9 - (float)(Main.npcHeadBossTexture[bossHeadTextureIndex1].Width / 2) * single40;
								float height3 = y8 - (float)(Main.npcHeadBossTexture[bossHeadTextureIndex1].Height / 2) * single40;
								float width4 = width3 + (float)Main.npcHeadBossTexture[bossHeadTextureIndex1].Width * single40;
								float height4 = height3 + (float)Main.npcHeadBossTexture[bossHeadTextureIndex1].Height * single40;
								if ((float)Main.mouseX >= width3 && (float)Main.mouseX <= width4 && (float)Main.mouseY >= height3 && (float)Main.mouseY <= height4)
								{
									str2 = Main.npc[p].displayName;
								}
							}
						}
					}
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
					for (int r = 0; r < 255; r++)
					{
						if (Main.player[r].active && (!Main.player[Main.myPlayer].hostile && !Main.player[r].hostile || Main.player[Main.myPlayer].team == Main.player[r].team && Main.player[r].team != 0 || r == Main.myPlayer))
						{
							float x10 = ((Main.player[r].position.X + (float)(Main.player[r].width / 2)) / 16f - single9) * single4;
							float y9 = ((Main.player[r].position.Y + Main.player[r].gfxOffY + (float)(Main.player[r].height / 2)) / 16f - single10) * single4;
							x10 = x10 + single2;
							y9 = y9 + single3;
							x10 = x10 - 6f;
							y9 = y9 - 6f;
							y9 = y9 - (2f - single4 / 5f * 2f);
							x10 = x10 + x;
							y9 = y9 + y;
							if (Main.screenPosition.X != Main.leftWorld + 640f + 16f && Main.screenPosition.X + (float)Main.screenWidth != Main.rightWorld - 640f - 32f && Main.screenPosition.Y != Main.topWorld + 640f + 16f && Main.screenPosition.Y + (float)Main.screenHeight <= Main.bottomWorld - 640f - 32f && r == Main.myPlayer && Main.zoomX == 0f && Main.zoomY == 0f)
							{
								x10 = single2 + (float)(Main.miniMapWidth / 2);
								y9 = single3 + (float)(Main.miniMapHeight / 2);
								y9 = y9 - 3f;
								x10 = x10 - 4f;
							}
							if (!Main.player[r].dead && x10 > (float)(Main.miniMapX + 6) && x10 < (float)(Main.miniMapX + Main.miniMapWidth - 16) && y9 > (float)(Main.miniMapY + 6) && y9 < (float)(Main.miniMapY + Main.miniMapHeight - 14))
							{
								this.DrawPlayerHead(Main.player[r], x10, y9, (float)num / 255f, single40);
								if (r != Main.myPlayer)
								{
									float single41 = x10 + 4f - 14f * single40;
									float single42 = y9 + 2f - 14f * single40;
									float single43 = single41 + 28f * single40;
									float single44 = single42 + 28f * single40;
									if ((float)Main.mouseX >= single41 && (float)Main.mouseX <= single43 && (float)Main.mouseY >= single42 && (float)Main.mouseY <= single44)
									{
										str2 = Main.player[r].name;
									}
								}
							}
							if (Main.player[r].showLastDeath)
							{
								x10 = (Main.player[r].lastDeathPostion.X / 16f - single9) * single4;
								y9 = (Main.player[r].lastDeathPostion.Y / 16f - single10) * single4;
								x10 = x10 + single2;
								y9 = y9 + single3;
								y9 = y9 - (2f - single4 / 5f * 2f);
								x10 = x10 + x;
								y9 = y9 + y;
								if (x10 > (float)(Main.miniMapX + 8) && x10 < (float)(Main.miniMapX + Main.miniMapWidth - 18) && y9 > (float)(Main.miniMapY + 8) && y9 < (float)(Main.miniMapY + Main.miniMapHeight - 16))
								{
									Main.spriteBatch.Draw(this.mapDeathTexture, new Vector2(x10, y9), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, this.mapDeathTexture.Width, this.mapDeathTexture.Height)), Microsoft.Xna.Framework.Color.White, 0f, new Vector2((float)this.mapDeathTexture.Width * 0.5f, (float)this.mapDeathTexture.Height * 0.5f), single40, SpriteEffects.None, 0f);
									float single45 = x10 + 4f - 14f * single40;
									float single46 = y9 + 2f - 14f * single40;
									single45 = single45 - 4f;
									single46 = single46 - 4f;
									float single47 = single45 + 28f * single40;
									float single48 = single46 + 28f * single40;
									if ((float)Main.mouseX >= single45 && (float)Main.mouseX <= single47 && (float)Main.mouseY >= single46 && (float)Main.mouseY <= single48)
									{
										TimeSpan now = DateTime.Now - Main.player[r].lastDeathTime;
										string str3 = string.Concat(Main.player[r].name, " died ");
										if (now.Days == 1)
										{
											str3 = string.Concat(str3, now.Days, " day");
										}
										else if (now.Days > 0)
										{
											str3 = string.Concat(str3, now.Days, " days");
										}
										else if (now.Hours == 1)
										{
											str3 = string.Concat(str3, now.Hours, " hour");
										}
										else if (now.Hours > 0)
										{
											str3 = string.Concat(str3, now.Hours, " hours");
										}
										else if (now.Minutes == 1)
										{
											str3 = string.Concat(str3, now.Minutes, " minute");
										}
										else if (now.Minutes <= 0)
										{
											str3 = (now.Seconds != 1 ? string.Concat(str3, now.Seconds, " seconds") : string.Concat(str3, now.Seconds, " second"));
										}
										else
										{
											str3 = string.Concat(str3, now.Minutes, " minutes");
										}
										str2 = string.Concat(str3, " ago");
									}
								}
							}
						}
					}
					Main.spriteBatch.End();
					Main.spriteBatch.Begin();
					SpriteBatch spriteBatch2 = Main.spriteBatch;
					Texture2D texture2D1 = Main.miniMapFrameTexture;
					Vector2 vector23 = new Vector2(single38, single39);
					Microsoft.Xna.Framework.Rectangle? nullable3 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.miniMapFrameTexture.Width, Main.miniMapFrameTexture.Height));
					Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
					vector2 = new Vector2();
					spriteBatch2.Draw(texture2D1, vector23, nullable3, white, 0f, vector2, 1f, SpriteEffects.None, 0f);
					for (int s = 0; s < 3; s++)
					{
						float single49 = single38 + 148f + (float)(s * 26);
						float single50 = single39 + 234f;
						if ((float)Main.mouseX > single49 && (float)Main.mouseX < single49 + 22f && (float)Main.mouseY > single50 && (float)Main.mouseY < single50 + 22f)
						{
							Main.player[Main.myPlayer].mouseInterface = true;
							SpriteBatch spriteBatch3 = Main.spriteBatch;
							Texture2D texture2D2 = Main.miniMapButtonTexture[s];
							Vector2 vector24 = new Vector2(single49, single50);
							Microsoft.Xna.Framework.Rectangle? nullable4 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.miniMapButtonTexture[s].Width, Main.miniMapButtonTexture[s].Height));
							Microsoft.Xna.Framework.Color white1 = Microsoft.Xna.Framework.Color.White;
							vector2 = new Vector2();
							spriteBatch3.Draw(texture2D2, vector24, nullable4, white1, 0f, vector2, 1f, SpriteEffects.None, 0f);
							if (Main.mouseLeft)
							{
								if (Main.mouseLeftRelease)
								{
									Main.PlaySound(12, -1, -1, 1);
								}
								if (s == 0)
								{
									Main.mapMinimapScale = 1.25f;
								}
								else if (s == 1)
								{
									Main.mapMinimapScale = Main.mapMinimapScale * 0.975f;
								}
								else if (s == 2)
								{
									Main.mapMinimapScale = Main.mapMinimapScale * 1.025f;
								}
							}
						}
					}
				}
			}
			if (Main.mapFullscreen)
			{
				int num9 = (int)((-single + (float)Main.mouseX) / single4 + single5);
				int num10 = (int)((-single1 + (float)Main.mouseY) / single4 + single6);
				bool flag1 = false;
				if ((float)num9 < single5)
				{
					flag1 = true;
				}
				if ((float)num9 >= single7)
				{
					flag1 = true;
				}
				if ((float)num10 < single6)
				{
					flag1 = true;
				}
				if ((float)num10 >= single8)
				{
					flag1 = true;
				}
				if (!flag1 && Main.Map[num9, num10].Light > 40)
				{
					int type = Main.Map[num9, num10].Type;
					int num11 = MapHelper.tileLookup[21];
					int num12 = MapHelper.tileOptionCounts[21];
					int num13 = MapHelper.tileLookup[88];
					int num14 = MapHelper.tileOptionCounts[88];
					if (type >= num11 && type < num11 + num12)
					{
						Tile tile = Main.tile[num9, num10];
						if (tile == null)
						{
							tile = new Tile();
							Main.tile[num9, num10] = tile;
						}
						int num15 = num9;
						int num16 = num10;
						if (tile.frameX % 36 != 0)
						{
							num15--;
						}
						if (tile.frameY % 36 != 0)
						{
							num16--;
						}
						int num17 = Chest.FindChest(num15, num16);
						if (num17 >= 0)
						{
							str2 = (Main.chest[num17].name == "" ? Lang.chestType[tile.frameX / 36] : string.Concat(Lang.chestType[tile.frameX / 36], ": ", Main.chest[num17].name));
						}
						else
						{
							str2 = Lang.chestType[0];
						}
					}
					else if (type < num13 || type >= num13 + num14)
					{
						str2 = Lang.mapLegend[type];
					}
					else
					{
						Tile tile1 = Main.tile[num9, num10];
						if (tile1 == null)
						{
							tile1 = new Tile();
							Main.tile[num9, num10] = tile1;
						}
						int num18 = num9;
						int num19 = num10;
						num18 = num18 - tile1.frameX % 54 / 18;
						if (tile1.frameY % 36 != 0)
						{
							num19--;
						}
						int num20 = Chest.FindChest(num18, num19);
						if (num20 >= 0)
						{
							str2 = (Main.chest[num20].name == "" ? Lang.dresserType[tile1.frameX / 54] : string.Concat(Lang.dresserType[tile1.frameX / 54], ": ", Main.chest[num20].name));
						}
						else
						{
							str2 = Lang.dresserType[0];
						}
					}
				}
				float single51 = (single4 * 0.25f * 2f + 1f) / 3f;
				if (single51 > 1f)
				{
					single51 = 1f;
				}
				single51 = 1f;
				for (int t = 0; t < 200; t++)
				{
					if (Main.npc[t].active && Main.npc[t].townNPC)
					{
						int num21 = NPC.TypeToNum(Main.npc[t].type);
						if (num21 > 0)
						{
							SpriteEffects spriteEffect2 = SpriteEffects.None;
							if (Main.npc[t].direction > 0)
							{
								spriteEffect2 = SpriteEffects.FlipHorizontally;
							}
							float x11 = (Main.npc[t].position.X + (float)(Main.npc[t].width / 2)) / 16f * single4;
							float y10 = (Main.npc[t].position.Y + Main.npc[t].gfxOffY + (float)(Main.npc[t].height / 2)) / 16f * single4;
							x11 = x11 + single;
							y10 = y10 + single1;
							x11 = x11 - 10f * single4;
							y10 = y10 - 10f * single4;
							Main.spriteBatch.Draw(Main.npcHeadTexture[num21], new Vector2(x11, y10), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num21].Width, Main.npcHeadTexture[num21].Height)), new Microsoft.Xna.Framework.Color((int)num, (int)num, (int)num, (int)num), 0f, new Vector2((float)(Main.npcHeadTexture[num21].Width / 2), (float)(Main.npcHeadTexture[num21].Height / 2)), single51, spriteEffect2, 0f);
							float width5 = x11 - (float)(Main.npcHeadTexture[num21].Width / 2) * single51;
							float height5 = y10 - (float)(Main.npcHeadTexture[num21].Height / 2) * single51;
							float width6 = width5 + (float)Main.npcHeadTexture[num21].Width * single51;
							float height6 = height5 + (float)Main.npcHeadTexture[num21].Height * single51;
							if ((float)Main.mouseX >= width5 && (float)Main.mouseX <= width6 && (float)Main.mouseY >= height5 && (float)Main.mouseY <= height6)
							{
								str1 = (num21 != 11 ? string.Concat(Main.npc[t].displayName, " the ", Main.npc[t].name) : Main.npc[t].displayName);
								str2 = str1;
							}
						}
					}
					if (Main.npc[t].active && Main.npc[t].GetBossHeadTextureIndex() != -1)
					{
						float bossHeadRotation2 = Main.npc[t].GetBossHeadRotation();
						SpriteEffects bossHeadSpriteEffects2 = Main.npc[t].GetBossHeadSpriteEffects();
						Vector2 center4 = Main.npc[t].Center + new Vector2(0f, Main.npc[t].gfxOffY);
						if (Main.npc[t].type == 134)
						{
							Vector2 center5 = Main.npc[t].Center;
							int num22 = 1;
							for (int u = (int)Main.npc[t].ai[0]; num22 < 15 && Main.npc[u].active && Main.npc[u].type >= 134 && Main.npc[u].type <= 136; u = (int)Main.npc[u].ai[0])
							{
								num22++;
								center5 = center5 + Main.npc[u].Center;
							}
							center5 = center5 / (float)num22;
							center4 = center5;
						}
						int bossHeadTextureIndex2 = Main.npc[t].GetBossHeadTextureIndex();
						float x12 = center4.X / 16f * single4;
						float y11 = center4.Y / 16f * single4;
						x12 = x12 + single;
						y11 = y11 + single1;
						x12 = x12 - 10f * single4;
						y11 = y11 - 10f * single4;
						nullable = null;
						Main.spriteBatch.Draw(Main.npcHeadBossTexture[bossHeadTextureIndex2], new Vector2(x12, y11), nullable, new Microsoft.Xna.Framework.Color((int)num, (int)num, (int)num, (int)num), bossHeadRotation2, Main.npcHeadBossTexture[bossHeadTextureIndex2].Size() / 2f, single51, bossHeadSpriteEffects2, 0f);
						float width7 = x12 - (float)(Main.npcHeadBossTexture[bossHeadTextureIndex2].Width / 2) * single51;
						float height7 = y11 - (float)(Main.npcHeadBossTexture[bossHeadTextureIndex2].Height / 2) * single51;
						float width8 = width7 + (float)Main.npcHeadBossTexture[bossHeadTextureIndex2].Width * single51;
						float height8 = height7 + (float)Main.npcHeadBossTexture[bossHeadTextureIndex2].Height * single51;
						if ((float)Main.mouseX >= width7 && (float)Main.mouseX <= width8 && (float)Main.mouseY >= height7 && (float)Main.mouseY <= height8)
						{
							str2 = Main.npc[t].displayName;
						}
					}
				}
				bool flag2 = false;
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				for (int v = 0; v < 255; v++)
				{
					if (Main.player[v].active && (!Main.player[Main.myPlayer].hostile && !Main.player[v].hostile || Main.player[Main.myPlayer].team == Main.player[v].team && Main.player[v].team != 0 || v == Main.myPlayer) && Main.player[v].showLastDeath)
					{
						float x13 = (Main.player[v].lastDeathPostion.X / 16f - single9) * single4;
						float y12 = (Main.player[v].lastDeathPostion.Y / 16f - single10) * single4;
						x13 = x13 + single;
						y12 = y12 + single1;
						y12 = y12 - (2f - single4 / 5f * 2f);
						x13 = x13 - 10f * single4;
						y12 = y12 - 10f * single4;
						Main.spriteBatch.Draw(this.mapDeathTexture, new Vector2(x13, y12), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, this.mapDeathTexture.Width, this.mapDeathTexture.Height)), Microsoft.Xna.Framework.Color.White, 0f, new Vector2((float)this.mapDeathTexture.Width * 0.5f, (float)this.mapDeathTexture.Height * 0.5f), single51, SpriteEffects.None, 0f);
						float single52 = x13 + 4f - 14f * single51;
						float single53 = y12 + 2f - 14f * single51;
						float single54 = single52 + 28f * single51;
						float single55 = single53 + 28f * single51;
						if ((float)Main.mouseX >= single52 && (float)Main.mouseX <= single54 && (float)Main.mouseY >= single53 && (float)Main.mouseY <= single55)
						{
							TimeSpan timeSpan = DateTime.Now - Main.player[v].lastDeathTime;
							string str4 = string.Concat(Main.player[v].name, " died ");
							if (timeSpan.Days == 1)
							{
								str4 = string.Concat(str4, timeSpan.Days, " day");
							}
							else if (timeSpan.Days > 0)
							{
								str4 = string.Concat(str4, timeSpan.Days, " days");
							}
							else if (timeSpan.Hours == 1)
							{
								str4 = string.Concat(str4, timeSpan.Hours, " hour");
							}
							else if (timeSpan.Hours > 0)
							{
								str4 = string.Concat(str4, timeSpan.Hours, " hours");
							}
							else if (timeSpan.Minutes == 1)
							{
								str4 = string.Concat(str4, timeSpan.Minutes, " minute");
							}
							else if (timeSpan.Minutes <= 0)
							{
								str4 = (timeSpan.Seconds != 1 ? string.Concat(str4, timeSpan.Seconds, " seconds") : string.Concat(str4, timeSpan.Seconds, " second"));
							}
							else
							{
								str4 = string.Concat(str4, timeSpan.Minutes, " minutes");
							}
							str2 = string.Concat(str4, " ago");
						}
					}
				}
				for (int w = 0; w < 255; w++)
				{
					if (Main.player[w].active && (!Main.player[Main.myPlayer].hostile && !Main.player[w].hostile || Main.player[Main.myPlayer].team == Main.player[w].team && Main.player[w].team != 0 || w == Main.myPlayer))
					{
						float x14 = ((Main.player[w].position.X + (float)(Main.player[w].width / 2)) / 16f - single9) * single4;
						float y13 = ((Main.player[w].position.Y + Main.player[w].gfxOffY + (float)(Main.player[w].height / 2)) / 16f - single10) * single4;
						x14 = x14 + single;
						y13 = y13 + single1;
						x14 = x14 - 6f;
						y13 = y13 - 2f;
						y13 = y13 - (2f - single4 / 5f * 2f);
						x14 = x14 - 10f * single4;
						y13 = y13 - 10f * single4;
						float single56 = x14 + 4f - 14f * single51;
						float single57 = y13 + 2f - 14f * single51;
						float single58 = single56 + 28f * single51;
						float single59 = single57 + 28f * single51;
						if (!Main.player[w].dead)
						{
							this.DrawPlayerHead(Main.player[w], x14, y13, (float)num / 255f, single51);
							if ((float)Main.mouseX >= single56 && (float)Main.mouseX <= single58 && (float)Main.mouseY >= single57 && (float)Main.mouseY <= single59)
							{
								str2 = Main.player[w].name;
								if (w != Main.myPlayer && Main.player[Main.myPlayer].team > 0 && Main.player[Main.myPlayer].team == Main.player[w].team && Main.netMode == 1 && Main.player[Main.myPlayer].HasUnityPotion())
								{
									flag2 = true;
									if (!this.unityMouseOver)
									{
										Main.PlaySound(12, -1, -1, 1);
									}
									this.unityMouseOver = true;
									this.DrawPlayerHead(Main.player[w], x14, y13, 2f, single51 + 0.5f);
									str2 = string.Concat("Teleport to ", Main.player[w].name);
									if (Main.mouseLeft && Main.mouseLeftRelease)
									{
										Main.mouseLeftRelease = false;
										Main.mapFullscreen = false;
										Main.player[Main.myPlayer].UnityTeleport(Main.player[w].position);
										Main.player[Main.myPlayer].TakeUnityPotion();
									}
								}
							}
						}
					}
				}
				if (!flag2 && this.unityMouseOver)
				{
					this.unityMouseOver = false;
				}
				Main.spriteBatch.End();
				Main.spriteBatch.Begin();
				int num23 = 10;
				int num24 = Main.screenHeight - 40;
				int num25 = 0;
				int num26 = 130;
				if (Main.mouseX >= num23 && Main.mouseX <= num23 + 32 && Main.mouseY >= num24 && Main.mouseY <= num24 + 30)
				{
					num26 = 255;
					num25 = num25 + 4;
					Main.player[Main.myPlayer].mouseInterface = true;
					if (Main.mouseLeft && Main.mouseLeftRelease)
					{
						Main.PlaySound(10, -1, -1, 1);
						Main.mapFullscreen = false;
					}
				}
				SpriteBatch spriteBatch4 = Main.spriteBatch;
				Texture2D texture2D3 = Main.mapIconTexture[num25];
				Vector2 vector25 = new Vector2((float)num23, (float)num24);
				Microsoft.Xna.Framework.Rectangle? nullable5 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.mapIconTexture[num25].Width, Main.mapIconTexture[num25].Height));
				Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(num26, num26, num26, num26);
				vector2 = new Vector2();
				spriteBatch4.Draw(texture2D3, vector25, nullable5, color2, 0f, vector2, 1f, SpriteEffects.None, 0f);
				SpriteBatch spriteBatch5 = Main.spriteBatch;
				Texture2D texture2D4 = Main.cursorTextures[0];
				Vector2 vector26 = new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1));
				nullable = null;
				Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f));
				vector2 = new Vector2();
				spriteBatch5.Draw(texture2D4, vector26, nullable, color3, 0f, vector2, Main.cursorScale * 1.1f, SpriteEffects.None, 0f);
				SpriteBatch spriteBatch6 = Main.spriteBatch;
				Texture2D texture2D5 = Main.cursorTextures[0];
				Vector2 vector27 = new Vector2((float)Main.mouseX, (float)Main.mouseY);
				nullable = null;
				Microsoft.Xna.Framework.Color color4 = Main.cursorColor;
				vector2 = new Vector2();
				spriteBatch6.Draw(texture2D5, vector27, nullable, color4, 0f, vector2, Main.cursorScale, SpriteEffects.None, 0f);
			}
			if (str2 != "")
			{
				this.MouseText(str2, 0, 0);
			}
			TimeLogger.DetailedDrawTime(9);
		}

		protected void DrawMenu(GameTime gameTime)
		{
			string[] strArrays;
			object[] serverPassword;
			Vector2 vector2;
			if (!Main.IsEngineLoaded)
			{
				Main.IsEngineLoaded = true;
				if (Main.OnEngineLoad != null)
				{
					Main.OnEngineLoad();
				}
			}
			if (Main.menuMode <= 1 && Main.slimeRain)
			{
				Main.StopSlimeRain(true);
			}
			Main.render = false;
			Star.UpdateStars();
			Cloud.UpdateClouds();
			Main.holyTiles = 0;
			Main.evilTiles = 0;
			Main.shroomTiles = 0;
			Main.bloodTiles = 0;
			Main.bloodTiles = 0;
			Main.jungleTiles = 0;
			Main.chatMode = false;
			for (int i = 0; i < Main.numChatLines; i++)
			{
				Main.chatLine[i] = new ChatLine();
			}
			this.DrawFPS();
			Main.screenLastPosition = Main.screenPosition;
			Main.screenPosition.Y = (float)(Main.worldSurface * 16 - (double)Main.screenHeight);
			if (!Main.grabSky)
			{
				Main.screenPosition.X = Main.screenPosition.X + 2f;
			}
			else
			{
				Main.screenPosition.X = Main.screenPosition.X + (float)(Main.mouseX - Main.screenWidth / 2) * 0.02f;
			}
			if (Main.screenPosition.X > 2.14748352E+09f)
			{
				Main.screenPosition.X = 0f;
			}
			if (Main.screenPosition.X < -2.14748352E+09f)
			{
				Main.screenPosition.X = 0f;
			}
			Main.background = 0;
			byte r = (byte)((255 + Main.tileColor.R * 2) / 3);
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)r, (int)r, (int)r, 255);
			Main main = this;
			main.logoRotation = main.logoRotation + this.logoRotationSpeed * 3E-05f;
			if ((double)this.logoRotation > 0.1)
			{
				this.logoRotationDirection = -1f;
			}
			else if ((double)this.logoRotation < -0.1)
			{
				this.logoRotationDirection = 1f;
			}
			if (this.logoRotationSpeed < 20f & this.logoRotationDirection == 1f)
			{
				Main main1 = this;
				main1.logoRotationSpeed = main1.logoRotationSpeed + 1f;
			}
			else if (this.logoRotationSpeed > -20f & this.logoRotationDirection == -1f)
			{
				Main main2 = this;
				main2.logoRotationSpeed = main2.logoRotationSpeed - 1f;
			}
			Main main3 = this;
			main3.logoScale = main3.logoScale + this.logoScaleSpeed * 1E-05f;
			if ((double)this.logoScale > 1.1)
			{
				this.logoScaleDirection = -1f;
			}
			else if ((double)this.logoScale < 0.9)
			{
				this.logoScaleDirection = 1f;
			}
			if (this.logoScaleSpeed < 50f & this.logoScaleDirection == 1f)
			{
				Main main4 = this;
				main4.logoScaleSpeed = main4.logoScaleSpeed + 1f;
			}
			else if (this.logoScaleSpeed > -50f & this.logoScaleDirection == -1f)
			{
				Main main5 = this;
				main5.logoScaleSpeed = main5.logoScaleSpeed - 1f;
			}
			Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color((int)((float)color.R * ((float)Main.LogoA / 255f)), (int)((float)color.G * ((float)Main.LogoA / 255f)), (int)((float)color.B * ((float)Main.LogoA / 255f)), (int)((float)color.A * ((float)Main.LogoA / 255f)));
			Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color((int)((float)color.R * ((float)Main.LogoB / 255f)), (int)((float)color.G * ((float)Main.LogoB / 255f)), (int)((float)color.B * ((float)Main.LogoB / 255f)), (int)((float)color.A * ((float)Main.LogoB / 255f)));
			Main.spriteBatch.Draw(Main.logoTexture, new Vector2((float)(Main.screenWidth / 2), 100f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.logoTexture.Width, Main.logoTexture.Height)), color1, this.logoRotation, new Vector2((float)(Main.logoTexture.Width / 2), (float)(Main.logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
			Main.spriteBatch.Draw(Main.logo2Texture, new Vector2((float)(Main.screenWidth / 2), 100f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.logoTexture.Width, Main.logoTexture.Height)), color2, this.logoRotation, new Vector2((float)(Main.logoTexture.Width / 2), (float)(Main.logoTexture.Height / 2)), this.logoScale, SpriteEffects.None, 0f);
			if (!Main.dayTime)
			{
				Main.LogoB = Main.LogoB + 2;
				if (Main.LogoB > 255)
				{
					Main.LogoB = 255;
				}
				Main.LogoA = Main.LogoA - 1;
				if (Main.LogoA < 0)
				{
					Main.LogoA = 0;
					Main.LogoT = true;
				}
			}
			else
			{
				Main.LogoA = Main.LogoA + 2;
				if (Main.LogoA > 255)
				{
					Main.LogoA = 255;
				}
				Main.LogoB = Main.LogoB - 1;
				if (Main.LogoB < 0)
				{
					Main.LogoB = 0;
				}
			}
			int num = 250;
			int num1 = Main.screenWidth / 2;
			int num2 = 80;
			int num3 = 0;
			int num4 = Main.menuMode;
			int num5 = 0;
			int num6 = 0;
			bool flag = false;
			bool flag1 = false;
			bool flag2 = false;
			int num7 = 0;
			bool[] flagArray = new bool[Main.maxMenuItems];
			bool[] flagArray1 = new bool[Main.maxMenuItems];
			bool[] flagArray2 = new bool[Main.maxMenuItems];
			int[] numArray = new int[Main.maxMenuItems];
			int[] numArray1 = new int[Main.maxMenuItems];
			byte[] pendingPlayer = new byte[Main.maxMenuItems];
			float[] singleArray = new float[Main.maxMenuItems];
			bool[] flagArray3 = new bool[Main.maxMenuItems];
			bool flag3 = false;
			for (int j = 0; j < Main.maxMenuItems; j++)
			{
				flagArray[j] = false;
				flagArray1[j] = false;
				numArray[j] = 0;
				numArray1[j] = 0;
				singleArray[j] = 1f;
			}
			string[] statusText = new string[Main.maxMenuItems];
			if (Main.menuMode == -1)
			{
				Main.menuMode = 0;
			}
			if (Main.menuMode == 1212)
			{
				if (this.focusMenu == 2)
				{
					statusText[0] = "Wählen Sie die Sprache";
				}
				else if (this.focusMenu == 3)
				{
					statusText[0] = "Selezionare la lingua";
				}
				else if (this.focusMenu == 4)
				{
					statusText[0] = "Sélectionnez la langue";
				}
				else if (this.focusMenu != 5)
				{
					statusText[0] = "Select language";
				}
				else
				{
					statusText[0] = "Seleccione el idioma";
				}
				num2 = 50;
				num = 200;
				numArray[1] = 25;
				numArray[2] = 25;
				numArray[3] = 25;
				numArray[4] = 25;
				numArray[5] = 25;
				flagArray[0] = true;
				statusText[1] = "English";
				statusText[2] = "Deutsch";
				statusText[3] = "Italiano";
				statusText[4] = "Française";
				statusText[5] = "Español";
				num3 = 6;
				if (this.selectedMenu >= 1)
				{
					Lang.lang = this.selectedMenu;
					Lang.setLang(false);
					Main.menuMode = 0;
					Main.PlaySound(10, -1, -1, 1);
					Main.SaveSettings();
				}
			}
			else if (Main.menuMode == 1213)
			{
				if (this.focusMenu == 1)
				{
					statusText[0] = "Select language";
				}
				else if (this.focusMenu == 2)
				{
					statusText[0] = "Wählen Sie die Sprache";
				}
				else if (this.focusMenu == 3)
				{
					statusText[0] = "Selezionare la lingua";
				}
				else if (this.focusMenu == 4)
				{
					statusText[0] = "Sélectionnez la langue";
				}
				else if (this.focusMenu != 5)
				{
					statusText[0] = Lang.menu[102];
				}
				else
				{
					statusText[0] = "Seleccione el idioma";
				}
				num2 = 48;
				num = 180;
				numArray[1] = 25;
				numArray[2] = 25;
				numArray[3] = 25;
				numArray[4] = 25;
				numArray[5] = 25;
				numArray[6] = 50;
				flagArray[0] = true;
				statusText[1] = "English";
				statusText[2] = "Deutsch";
				statusText[3] = "Italiano";
				statusText[4] = "Française";
				statusText[5] = "Español";
				statusText[6] = Lang.menu[5];
				num3 = 7;
				if (this.selectedMenu == 6)
				{
					Main.menuMode = 11;
					Main.PlaySound(11, -1, -1, 1);
				}
				else if (this.selectedMenu >= 1)
				{
					Lang.lang = this.selectedMenu;
					Lang.setLang(false);
					Main.PlaySound(12, -1, -1, 1);
					Main.SaveSettings();
				}
			}
			else if (Main.netMode == 2)
			{
				bool flag4 = true;
				for (int k = 0; k < 8; k++)
				{
					if (k < 255)
					{
						try
						{
							statusText[k] = Netplay.Clients[k].StatusText;
							if (Netplay.Clients[k].IsActive && Main.showSpam)
							{
								string[] strArrays1 = statusText;
								strArrays = strArrays1;
								int num8 = k;
								object obj = strArrays[num8];
								serverPassword = new object[] { obj, " (", NetMessage.buffer[k].spamCount, ")" };
								strArrays1[num8] = string.Concat(serverPassword);
							}
						}
						catch
						{
							statusText[k] = "";
						}
						flagArray[k] = true;
						if (statusText[k] != "" && statusText[k] != null)
						{
							flag4 = false;
						}
					}
				}
				if (flag4)
				{
					statusText[0] = Lang.menu[0];
					statusText[1] = string.Concat(Lang.menu[1], Netplay.ListenPort, ".");
				}
				num3 = 11;
				statusText[9] = Main.statusText;
				flagArray[9] = true;
				num = 170;
				num2 = 30;
				numArray[10] = 20;
				numArray[10] = 40;
				statusText[10] = Lang.menu[2];
				if (this.selectedMenu == 10)
				{
					Netplay.disconnect = true;
					Main.PlaySound(11, -1, -1, 1);
				}
			}
			else if (Main.menuMode == 31)
			{
				string str = Netplay.ServerPassword;
				Netplay.ServerPassword = Main.GetInputText(Netplay.ServerPassword);
				if (str != Netplay.ServerPassword)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				statusText[0] = Lang.menu[3];
				Main main6 = this;
				main6.textBlinkerCount = main6.textBlinkerCount + 1;
				if (this.textBlinkerCount >= 20)
				{
					if (this.textBlinkerState != 0)
					{
						this.textBlinkerState = 0;
					}
					else
					{
						this.textBlinkerState = 1;
					}
					this.textBlinkerCount = 0;
				}
				statusText[1] = Netplay.ServerPassword;
				if (this.textBlinkerState != 1)
				{
					string[] strArrays2 = statusText;
					strArrays = strArrays2;
					strArrays2[1] = string.Concat(strArrays[1], " ");
				}
				else
				{
					string[] strArrays3 = statusText;
					strArrays = strArrays3;
					strArrays3[1] = string.Concat(strArrays[1], "|");
					numArray1[1] = 1;
				}
				flagArray[0] = true;
				flagArray[1] = true;
				numArray[1] = -20;
				numArray[2] = 20;
				statusText[2] = Lang.menu[4];
				statusText[3] = Lang.menu[5];
				num3 = 4;
				if (this.selectedMenu == 3)
				{
					Main.PlaySound(11, -1, -1, 1);
					Main.menuMode = 0;
					Netplay.disconnect = true;
					Netplay.ServerPassword = "";
				}
				else if (this.selectedMenu == 2 || Main.inputTextEnter)
				{
					NetMessage.SendData(38, -1, -1, Netplay.ServerPassword, 0, 0f, 0f, 0f, 0, 0, 0);
					Main.menuMode = 14;
				}
			}
			else if (Main.netMode == 1 || Main.menuMode == 14)
			{
				num3 = 2;
				statusText[0] = Main.statusText;
				flagArray[0] = true;
				num = 300;
				statusText[1] = Lang.menu[6];
				if (this.selectedMenu == 1)
				{
					Netplay.disconnect = true;
					Netplay.Connection.Socket.Close();
					Main.PlaySound(11, -1, -1, 1);
					Main.menuMode = 0;
					Main.netMode = 0;
					try
					{
						this.tServer.Kill();
					}
					catch (Exception ex)
					{
#if DEBUG
						Console.WriteLine(ex);
						System.Diagnostics.Debugger.Break();

#endif
					}
				}
			}
			else if (Main.menuMode == 882)
			{
				num3 = 2;
				flagArray[0] = true;
				num = 300;
				statusText[0] = Main.statusText;
				statusText[1] = Lang.menu[6];
				if (this.selectedMenu == 1)
				{
					Main.PlaySound(11, -1, -1, 1);
					Main.menuMode = 0;
					Main.netMode = 0;
					if (SocialAPI.Network != null)
					{
						SocialAPI.Network.CancelJoin();
					}
				}
			}
			else if (Main.menuMode == 30)
			{
				string serverPassword1 = Netplay.ServerPassword;
				Netplay.ServerPassword = Main.GetInputText(Netplay.ServerPassword);
				if (serverPassword1 != Netplay.ServerPassword)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				statusText[0] = Lang.menu[7];
				Main main7 = this;
				main7.textBlinkerCount = main7.textBlinkerCount + 1;
				if (this.textBlinkerCount >= 20)
				{
					if (this.textBlinkerState != 0)
					{
						this.textBlinkerState = 0;
					}
					else
					{
						this.textBlinkerState = 1;
					}
					this.textBlinkerCount = 0;
				}
				statusText[1] = Netplay.ServerPassword;
				if (this.textBlinkerState != 1)
				{
					string[] strArrays4 = statusText;
					strArrays = strArrays4;
					strArrays4[1] = string.Concat(strArrays[1], " ");
				}
				else
				{
					string[] strArrays5 = statusText;
					strArrays = strArrays5;
					strArrays5[1] = string.Concat(strArrays[1], "|");
					numArray1[1] = 1;
				}
				flagArray[0] = true;
				flagArray[1] = true;
				numArray[1] = -20;
				numArray[2] = 20;
				statusText[2] = Lang.menu[4];
				statusText[3] = Lang.menu[5];
				num3 = 4;
				if (this.selectedMenu == 3)
				{
					if (SocialAPI.Network == null)
					{
						Main.menuMode = 6;
					}
					else
					{
						Main.menuMode = 889;
					}
					Netplay.ServerPassword = "";
				}
				else if (this.selectedMenu == 2 || Main.inputTextEnter || Main.autoPass)
				{
					serverPassword = new object[] { "-autoshutdown -password \"", Netplay.ServerPassword, "\" -lang ", Lang.lang };
					string str1 = string.Concat(serverPassword);
					str1 = (!Main.ActiveWorldFileData.IsCloudSave ? string.Concat(str1, " -world \"", Main.worldPathName, "\"") : string.Concat(str1, " -cloudworld \"", Main.worldPathName, "\""));
					this.tServer.StartInfo.FileName = "TerrariaServer.exe";
					this.tServer.StartInfo.Arguments = str1;
					if (Main.libPath != "")
					{
						ProcessStartInfo startInfo = this.tServer.StartInfo;
						startInfo.Arguments = string.Concat(startInfo.Arguments, " -loadlib ", Main.libPath);
					}
					this.tServer.StartInfo.UseShellExecute = false;
					this.tServer.StartInfo.CreateNoWindow = true;
					if (SocialAPI.Network == null)
					{
						this.tServer.Start();
					}
					else
					{
						SocialAPI.Network.LaunchLocalServer(this.tServer, Main.MenuServerMode);
					}
					Netplay.SetRemoteIP("127.0.0.1");
					Main.autoPass = true;
					Main.statusText = Lang.menu[8];
					Netplay.StartTcpClient();
					Main.menuMode = 10;
				}
			}
			else if (Main.menuMode == 889)
			{
				num = 200;
				num2 = 60;
				numArray[1] = 30;
				numArray[2] = 30;
				numArray[3] = 30;
				numArray[4] = 70;
				statusText[0] = Lang.menu[135];
				flagArray[0] = true;
				statusText[1] = Lang.menu[136];
				statusText[2] = Lang.menu[137];
				statusText[3] = Lang.menu[138];
				statusText[4] = Lang.menu[5];
				num3 = 5;
				if (this.selectedMenu == 4)
				{
					Main.menuMode = 6;
					Main.PlaySound(11, -1, -1, 1);
				}
				else if (this.selectedMenu > 0)
				{
					if (this.selectedMenu == 1)
					{
						Main.MenuServerMode = ServerSocialMode.None;
					}
					else if (this.selectedMenu != 2)
					{
						Main.MenuServerMode = ServerSocialMode.FriendsOnly;
					}
					else
					{
						Main.MenuServerMode = ServerSocialMode.InviteOnly;
					}
					Main.clrInput();
					Netplay.ServerPassword = "";
					Main.menuMode = 30;
					Main.PlaySound(10, -1, -1, 1);
				}
			}
			else if (Main.menuMode == 15)
			{
				num3 = 2;
				statusText[0] = Main.statusText;
				flagArray[0] = true;
				num = 80;
				num2 = 400;
				statusText[1] = Lang.menu[5];
				if (this.selectedMenu == 1)
				{
					Netplay.disconnect = true;
					Main.PlaySound(11, -1, -1, 1);
					Main.menuMode = 0;
					Main.netMode = 0;
				}
			}
			else if (Main.menuMode == 200)
			{
				num3 = 3;
				statusText[0] = Lang.menu[9];
				flagArray[0] = true;
				num = num - 30;
				numArray[1] = 70;
				numArray[2] = 50;
				statusText[1] = Lang.menu[10];
				statusText[2] = Lang.menu[6];
				if (this.selectedMenu == 1)
				{
					if (!FileUtilities.Exists(string.Concat(Main.worldPathName, ".bak"), Main.ActiveWorldFileData.IsCloudSave))
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 0;
						Main.netMode = 0;
					}
					else
					{
						FileUtilities.Move(string.Concat(Main.worldPathName, ".bak"), Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave, true);
						Main.PlaySound(10, -1, -1, 1);
						WorldGen.playWorld();
						Main.menuMode = 10;
					}
				}
				if (this.selectedMenu == 2)
				{
					Main.PlaySound(11, -1, -1, 1);
					Main.menuMode = 0;
					Main.netMode = 0;
				}
			}
			else if (Main.menuMode == 201)
			{
				num3 = 3;
				statusText[0] = Lang.menu[9];
				flagArray[0] = true;
				flagArray[1] = true;
				num = num - 30;
				numArray[1] = -30;
				numArray[2] = 50;
				statusText[1] = Lang.menu[11];
				statusText[2] = Lang.menu[5];
				if (this.selectedMenu == 2)
				{
					Main.PlaySound(11, -1, -1, 1);
					Main.menuMode = 0;
					Main.netMode = 0;
				}
			}
			else if (Main.menuMode == 10)
			{
				num3 = 1;
				statusText[0] = Main.statusText;
				flagArray[0] = true;
				num = 300;
			}
			else if (Main.menuMode == 100)
			{
				num3 = 1;
				statusText[0] = Main.statusText;
				flagArray[0] = true;
				num = 300;
			}
			else if (Main.menuMode == 0)
			{
				Main.eclipse = false;
				Main.pumpkinMoon = false;
				Main.snowMoon = false;
				Main.ServerSideCharacter = false;
				Main.menuMultiplayer = false;
				Main.menuServer = false;
				Main.netMode = 0;
				for (int l = 0; l < 9; l++)
				{
					string str2 = "";
					switch (l)
					{
						case 0:
						{
							str2 = "Solar";
							break;
						}
						case 1:
						{
							str2 = "Vortex";
							break;
						}
						case 2:
						{
							str2 = "Nebula";
							break;
						}
						case 3:
						{
							str2 = "Stardust";
							break;
						}
						case 4:
						{
							str2 = "MoonLord";
							break;
						}
						case 5:
						{
							str2 = "MonolithSolar";
							break;
						}
						case 6:
						{
							str2 = "MonolithVortex";
							break;
						}
						case 7:
						{
							str2 = "MonolithNebula";
							break;
						}
						case 8:
						{
							str2 = "MonolithStardust";
							break;
						}
					}
					if (SkyManager.Instance[str2].IsActive())
					{
						SkyManager.Instance.Deactivate(str2, new object[0]);
					}
					if (Filters.Scene[str2].IsActive())
					{
						Filters.Scene[str2].Deactivate(new object[0]);
					}
				}
				if (Filters.Scene["BloodMoon"].IsActive())
				{
					Filters.Scene["BloodMoon"].Deactivate(new object[0]);
				}
				if (SkyManager.Instance["Martian"].IsActive())
				{
					SkyManager.Instance["Martian"].Deactivate(new object[0]);
				}
				if (SkyManager.Instance["Slime"].IsActive())
				{
					SkyManager.Instance["Slime"].Deactivate(new object[0]);
				}
				int num9 = 0;
				num3 = 5;
				num2 = 60;
				statusText[num9] = Lang.menu[12];
				if (this.selectedMenu == num9)
				{
					Main.PlaySound(10, -1, -1, 1);
					Main.menuMode = 1;
				}
				num9++;
				statusText[num9] = Lang.menu[13];
				if (this.selectedMenu == num9)
				{
					Main.PlaySound(10, -1, -1, 1);
					Main.menuMode = 12;
				}
				num9++;
				statusText[num9] = Lang.menu[131];
				if (this.selectedMenu == num9)
				{
					Main.PlaySound(10, -1, -1, 1);
					Main.MenuUI.SetState(Main.AchievementsMenu);
					Main.menuMode = 888;
				}
				num9++;
				statusText[num9] = Lang.menu[14];
				if (this.selectedMenu == num9)
				{
					Main.PlaySound(10, -1, -1, 1);
					Main.menuMode = 11;
				}
				num9++;
				statusText[num9] = Lang.menu[15];
				if (this.selectedMenu == num9)
				{
					this.QuitGame();
				}
				num9++;
			}
			else if (Main.menuMode == 1)
			{
				Main.MenuUI.SetState(Main._characterSelectMenu);
				Main.menuMode = 888;
			}
			else if (Main.menuMode == 2)
			{
				flag3 = true;
				if (this.selectedMenu == 0)
				{
					Main.menuMode = 17;
					Main.PlaySound(10, -1, -1, 1);
					Main.selColor = Main.PendingPlayer.hairColor;
				}
				if (this.selectedMenu == 1)
				{
					Main.menuMode = 18;
					Main.PlaySound(10, -1, -1, 1);
					Main.selColor = Main.PendingPlayer.eyeColor;
				}
				if (this.selectedMenu == 2)
				{
					Main.menuMode = 19;
					Main.PlaySound(10, -1, -1, 1);
					Main.selColor = Main.PendingPlayer.skinColor;
				}
				if (this.selectedMenu == 3)
				{
					Main.menuMode = 20;
					Main.PlaySound(10, -1, -1, 1);
				}
				statusText[0] = Lang.menu[18];
				statusText[1] = Lang.menu[19];
				statusText[2] = Lang.menu[20];
				statusText[3] = Lang.menu[21];
				num = 220;
				for (int m = 0; m < 9; m++)
				{
					if (m >= 6)
					{
						singleArray[m] = 0.9f;
					}
					else
					{
						singleArray[m] = 0.75f;
					}
				}
				num2 = 38;
				numArray[6] = 6;
				numArray[7] = 12;
				numArray[8] = 18;
				num5 = Main.screenWidth / 2 - 16;
				num6 = 176;
				if (!Main.PendingPlayer.Male)
				{
					statusText[4] = Lang.menu[23];
				}
				else
				{
					statusText[4] = Lang.menu[22];
				}
				if (this.selectedMenu == 4)
				{
					if (!Main.PendingPlayer.Male)
					{
						Main.PlaySound(1, -1, -1, 1);
						Main.PendingPlayer.Male = true;
					}
					else
					{
						Main.PlaySound(20, -1, -1, 1);
						Main.PendingPlayer.Male = false;
					}
				}
				if (Main.PendingPlayer.difficulty == 2)
				{
					statusText[5] = Lang.menu[24];
					pendingPlayer[5] = Main.PendingPlayer.difficulty;
				}
				else if (Main.PendingPlayer.difficulty != 1)
				{
					statusText[5] = Lang.menu[26];
				}
				else
				{
					statusText[5] = Lang.menu[25];
					pendingPlayer[5] = Main.PendingPlayer.difficulty;
				}
				if (this.selectedMenu == 5)
				{
					Main.PlaySound(10, -1, -1, 1);
					Main.menuMode = 222;
				}
				if (this.selectedMenu == 7)
				{
					Main.PlaySound(12, -1, -1, 1);
					Main.PendingPlayer.hair = Main.rand.Next(51);
					Main.PendingPlayer.eyeColor = this.randColor();
					while (Main.PendingPlayer.eyeColor.R + Main.PendingPlayer.eyeColor.G + Main.PendingPlayer.eyeColor.B > 300)
					{
						Main.PendingPlayer.eyeColor = this.randColor();
					}
					Main.PendingPlayer.hairColor = this.randColor();
					Main.PendingPlayer.pantsColor = this.randColor();
					Main.PendingPlayer.shirtColor = this.randColor();
					Main.PendingPlayer.shoeColor = this.randColor();
					Main.PendingPlayer.skinColor = this.randColor();
					float single = (float)Main.rand.Next(60, 120) * 0.01f;
					if (single > 1f)
					{
						single = 1f;
					}
					Main.PendingPlayer.skinColor.R = (byte)((float)Main.rand.Next(240, 255) * single);
					Main.PendingPlayer.skinColor.G = (byte)((float)Main.rand.Next(110, 140) * single);
					Main.PendingPlayer.skinColor.B = (byte)((float)Main.rand.Next(75, 110) * single);
					Main.PendingPlayer.underShirtColor = this.randColor();
					int pendingPlayer1 = Main.PendingPlayer.hair + 1;
					if (pendingPlayer1 == 5 || pendingPlayer1 == 6 || pendingPlayer1 == 7 || pendingPlayer1 == 10 || pendingPlayer1 == 12 || pendingPlayer1 == 19 || pendingPlayer1 == 22 || pendingPlayer1 == 23 || pendingPlayer1 == 26 || pendingPlayer1 == 27 || pendingPlayer1 == 30 || pendingPlayer1 == 33)
					{
						Main.PendingPlayer.Male = false;
					}
					else
					{
						Main.PendingPlayer.Male = true;
					}
					Main.PendingPlayer.skinVariant = Main.rand.Next(8);
				}
				statusText[7] = Lang.menu[27];
				statusText[6] = Lang.menu[28];
				statusText[8] = Lang.menu[5];
				num3 = 9;
				if (this.selectedMenu == 8)
				{
					Main.PlaySound(11, -1, -1, 1);
					Main.menuMode = 1;
				}
				else if (this.selectedMenu == 6)
				{
					Main.PlaySound(10, -1, -1, 1);
					Main.PendingPlayer.name = "";
					Main.menuMode = 3;
					Main.clrInput();
				}
			}
			else if (Main.menuMode == 222)
			{
				if (this.focusMenu == 3)
				{
					statusText[0] = Lang.menu[29];
				}
				else if (this.focusMenu == 2)
				{
					statusText[0] = Lang.menu[30];
				}
				else if (this.focusMenu != 1)
				{
					statusText[0] = Lang.menu[32];
				}
				else
				{
					statusText[0] = Lang.menu[31];
				}
				num2 = 50;
				numArray[1] = 25;
				numArray[2] = 25;
				numArray[3] = 25;
				flagArray[0] = true;
				statusText[1] = Lang.menu[26];
				statusText[2] = Lang.menu[25];
				pendingPlayer[2] = 1;
				statusText[3] = Lang.menu[24];
				pendingPlayer[3] = 2;
				num3 = 4;
				if (this.selectedMenu == 1)
				{
					Main.PendingPlayer.difficulty = 0;
					Main.menuMode = 2;
				}
				else if (this.selectedMenu == 2)
				{
					Main.menuMode = 2;
					Main.PendingPlayer.difficulty = 1;
				}
				else if (this.selectedMenu == 3)
				{
					Main.PendingPlayer.difficulty = 2;
					Main.menuMode = 2;
				}
			}
			else if (Main.menuMode == 20)
			{
				flag3 = true;
				if (this.selectedMenu == 0)
				{
					Main.menuMode = 21;
					Main.PlaySound(10, -1, -1, 1);
					Main.selColor = Main.PendingPlayer.shirtColor;
				}
				if (this.selectedMenu == 1)
				{
					Main.menuMode = 22;
					Main.PlaySound(10, -1, -1, 1);
					Main.selColor = Main.PendingPlayer.underShirtColor;
				}
				if (this.selectedMenu == 2)
				{
					Main.menuMode = 23;
					Main.PlaySound(10, -1, -1, 1);
					Main.selColor = Main.PendingPlayer.pantsColor;
				}
				if (this.selectedMenu == 3)
				{
					Main.selColor = Main.PendingPlayer.shoeColor;
					Main.menuMode = 24;
					Main.PlaySound(10, -1, -1, 1);
				}
				if (this.selectedMenu == 5)
				{
					Main.PlaySound(11, -1, -1, 1);
					Main.menuMode = 2;
				}
				if (this.selectedMenu == 4)
				{
					Main.PlaySound(12, -1, -1, 1);
					if (Main.PendingPlayer.skinVariant >= 4)
					{
						Player player = Main.PendingPlayer;
						player.skinVariant = player.skinVariant + 1;
						if (Main.PendingPlayer.skinVariant == 8)
						{
							Main.PendingPlayer.skinVariant = 4;
						}
					}
					else
					{
						Player player1 = Main.PendingPlayer;
						player1.skinVariant = player1.skinVariant + 1;
						if (Main.PendingPlayer.skinVariant == 4)
						{
							Main.PendingPlayer.skinVariant = 0;
						}
					}
				}
				num5 = Main.screenWidth / 2 - 16;
				num6 = 210;
				num = 260;
				num2 = 50;
				num3 = 6;
				statusText[0] = Lang.menu[33];
				statusText[1] = Lang.menu[34];
				statusText[2] = Lang.menu[35];
				statusText[3] = Lang.menu[36];
				statusText[4] = Lang.menu[127];
				statusText[5] = Lang.menu[5];
				numArray[5] = 20;
			}
			else if (Main.menuMode == 17)
			{
				flag3 = true;
				num5 = Main.screenWidth / 2 - 16;
				num6 = 210;
				flag = true;
				num7 = 390;
				num = 260;
				num2 = 60;
				Main.PendingPlayer.hairColor = Main.selColor;
				num3 = 3;
				statusText[0] = string.Concat(Lang.menu[37], " ", Main.PendingPlayer.hair + 1);
				statusText[1] = Lang.menu[38];
				flagArray[1] = true;
				numArray[2] = 150;
				numArray[1] = 10;
				statusText[2] = Lang.menu[5];
				if (this.selectedMenu == 0)
				{
					Main.PlaySound(12, -1, -1, 1);
					Player pendingPlayer2 = Main.PendingPlayer;
					pendingPlayer2.hair = pendingPlayer2.hair + 1;
					if (Main.PendingPlayer.hair >= 51)
					{
						Main.PendingPlayer.hair = 0;
					}
				}
				else if (this.selectedMenu2 == 0)
				{
					Main.PlaySound(12, -1, -1, 1);
					Player player2 = Main.PendingPlayer;
					player2.hair = player2.hair - 1;
					if (Main.PendingPlayer.hair < 0)
					{
						Main.PendingPlayer.hair = 50;
					}
				}
				if (this.selectedMenu == 2)
				{
					Main.menuMode = 2;
					Main.PlaySound(11, -1, -1, 1);
				}
			}
			else if (Main.menuMode == 18)
			{
				flag3 = true;
				num5 = Main.screenWidth / 2 - 16;
				num6 = 210;
				flag = true;
				num7 = 370;
				num = 240;
				num2 = 60;
				Main.PendingPlayer.eyeColor = Main.selColor;
				num3 = 3;
				statusText[0] = "";
				statusText[1] = Lang.menu[39];
				flagArray[1] = true;
				numArray[2] = 170;
				numArray[1] = 10;
				statusText[2] = Lang.menu[5];
				if (this.selectedMenu == 2)
				{
					Main.menuMode = 2;
					Main.PlaySound(11, -1, -1, 1);
				}
			}
			else if (Main.menuMode == 19)
			{
				flag3 = true;
				num5 = Main.screenWidth / 2 - 16;
				num6 = 210;
				flag = true;
				num7 = 370;
				num = 240;
				num2 = 60;
				Main.PendingPlayer.skinColor = Main.selColor;
				num3 = 3;
				statusText[0] = "";
				statusText[1] = Lang.menu[40];
				flagArray[1] = true;
				numArray[2] = 170;
				numArray[1] = 10;
				statusText[2] = Lang.menu[5];
				if (this.selectedMenu == 2)
				{
					Main.menuMode = 2;
					Main.PlaySound(11, -1, -1, 1);
				}
			}
			else if (Main.menuMode == 21)
			{
				flag3 = true;
				num5 = Main.screenWidth / 2 - 16;
				num6 = 210;
				flag = true;
				num7 = 370;
				num = 240;
				num2 = 60;
				Main.PendingPlayer.shirtColor = Main.selColor;
				num3 = 3;
				statusText[0] = "";
				statusText[1] = Lang.menu[41];
				flagArray[1] = true;
				numArray[2] = 170;
				numArray[1] = 10;
				statusText[2] = Lang.menu[5];
				if (this.selectedMenu == 2)
				{
					Main.menuMode = 20;
					Main.PlaySound(11, -1, -1, 1);
				}
			}
			else if (Main.menuMode == 22)
			{
				flag3 = true;
				num5 = Main.screenWidth / 2 - 16;
				num6 = 210;
				flag = true;
				num7 = 370;
				num = 240;
				num2 = 60;
				Main.PendingPlayer.underShirtColor = Main.selColor;
				num3 = 3;
				statusText[0] = "";
				statusText[1] = Lang.menu[42];
				flagArray[1] = true;
				numArray[2] = 170;
				numArray[1] = 10;
				statusText[2] = Lang.menu[5];
				if (this.selectedMenu == 2)
				{
					Main.menuMode = 20;
					Main.PlaySound(11, -1, -1, 1);
				}
			}
			else if (Main.menuMode == 23)
			{
				flag3 = true;
				num5 = Main.screenWidth / 2 - 16;
				num6 = 210;
				flag = true;
				num7 = 370;
				num = 240;
				num2 = 60;
				Main.PendingPlayer.pantsColor = Main.selColor;
				num3 = 3;
				statusText[0] = "";
				statusText[1] = Lang.menu[43];
				flagArray[1] = true;
				numArray[2] = 170;
				numArray[1] = 10;
				statusText[2] = Lang.menu[5];
				if (this.selectedMenu == 2)
				{
					Main.menuMode = 20;
					Main.PlaySound(11, -1, -1, 1);
				}
			}
			else if (Main.menuMode == 24)
			{
				flag3 = true;
				num5 = Main.screenWidth / 2 - 16;
				num6 = 210;
				flag = true;
				num7 = 370;
				num = 240;
				num2 = 60;
				Main.PendingPlayer.shoeColor = Main.selColor;
				num3 = 3;
				statusText[0] = "";
				statusText[1] = Lang.menu[44];
				flagArray[1] = true;
				numArray[2] = 170;
				numArray[1] = 10;
				statusText[2] = Lang.menu[5];
				if (this.selectedMenu == 2)
				{
					Main.menuMode = 20;
					Main.PlaySound(11, -1, -1, 1);
				}
			}
			else if (Main.menuMode == 3)
			{
				string pendingPlayer3 = Main.PendingPlayer.name;
				Main.PendingPlayer.name = Main.GetInputText(Main.PendingPlayer.name);
				if (Main.PendingPlayer.name.Length > Player.nameLen)
				{
					Main.PendingPlayer.name = Main.PendingPlayer.name.Substring(0, Player.nameLen);
				}
				if (pendingPlayer3 != Main.PendingPlayer.name)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				statusText[0] = Lang.menu[45];
				flagArray1[2] = true;
				if (Main.PendingPlayer.name != "")
				{
					if (Main.PendingPlayer.name.Substring(0, 1) == " ")
					{
						Main.PendingPlayer.name = "";
					}
					for (int n = 0; n < Main.PendingPlayer.name.Length; n++)
					{
						if (Main.PendingPlayer.name.Substring(n, 1) != " ")
						{
							flagArray1[2] = false;
						}
					}
				}
				Main main8 = this;
				main8.textBlinkerCount = main8.textBlinkerCount + 1;
				if (this.textBlinkerCount >= 20)
				{
					if (this.textBlinkerState != 0)
					{
						this.textBlinkerState = 0;
					}
					else
					{
						this.textBlinkerState = 1;
					}
					this.textBlinkerCount = 0;
				}
				statusText[1] = Main.PendingPlayer.name;
				if (this.textBlinkerState != 1)
				{
					string[] strArrays6 = statusText;
					strArrays = strArrays6;
					strArrays6[1] = string.Concat(strArrays[1], " ");
				}
				else
				{
					string[] strArrays7 = statusText;
					strArrays = strArrays7;
					strArrays7[1] = string.Concat(strArrays[1], "|");
					numArray1[1] = 1;
				}
				flagArray[0] = true;
				flagArray[1] = true;
				numArray[1] = -20;
				numArray[2] = 20;
				statusText[2] = Lang.menu[4];
				statusText[3] = Lang.menu[5];
				num3 = 4;
				if (this.selectedMenu == 3)
				{
					Main.PlaySound(11, -1, -1, 1);
					Main.menuMode = 2;
				}
				if (this.selectedMenu == 2 || !flagArray1[2] && Main.inputTextEnter)
				{
					Main.PendingPlayer.name.Trim();
					PlayerFileData.CreateAndSave(Main.PendingPlayer);
					Main.LoadPlayers();
					Main.PlaySound(10, -1, -1, 1);
					Main.menuMode = 1;
				}
			}
			else if (Main.menuMode != 4)
			{
				if (Main.menuMode == 5)
				{
					statusText[0] = string.Concat(Lang.menu[46], " ", Main.PlayerList[Main.selectedPlayer].Player.name, "?");
					flagArray[0] = true;
					statusText[1] = Lang.menu[104];
					statusText[2] = Lang.menu[105];
					num3 = 3;
					if (this.selectedMenu == 1)
					{
						Main.ErasePlayer(Main.selectedPlayer);
						Main.PlaySound(10, -1, -1, 1);
						Main.menuMode = 1;
					}
					else if (this.selectedMenu == 2)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 1;
					}
				}
				else if (Main.menuMode == 6)
				{
					Main.MenuUI.SetState(Main._worldSelectMenu);
					Main.menuMode = 888;
				}
				else if (Main.menuMode == -7)
				{
					num = 200;
					num2 = 60;
					numArray[2] = 30;
					numArray[3] = 30;
					pendingPlayer[3] = 2;
					numArray[4] = 70;
					if (this.focusMenu == 2)
					{
						statusText[0] = "Your Journey Begins...";
						statusText[1] = "(The standard Terraria Experience)";
					}
					else if (this.focusMenu != 3)
					{
						statusText[0] = Lang.menu[32];
					}
					else
					{
						statusText[0] = "Fortune & Glory, Kid.";
						statusText[1] = "(Far Greater Difficulty & Loot)";
					}
					flagArray[0] = true;
					flagArray[1] = true;
					statusText[2] = "Normal";
					statusText[3] = "Expert";
					statusText[4] = "Back";
					num3 = 5;
					if (this.selectedMenu == 2)
					{
						Main.expertMode = false;
						Main.PlaySound(10, -1, -1, 1);
						Main.menuMode = 7;
					}
					else if (this.selectedMenu == 3)
					{
						Main.expertMode = true;
						Main.PlaySound(10, -1, -1, 1);
						Main.menuMode = 7;
					}
					else if (this.selectedMenu == 4)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 16;
					}
					Main.clrInput();
				}
				else if (Main.menuMode == 7)
				{
					string str3 = Main.newWorldName;
					Main.newWorldName = Main.GetInputText(Main.newWorldName);
					if (Main.newWorldName.Length > 20)
					{
						Main.newWorldName = Main.newWorldName.Substring(0, 20);
					}
					if (str3 != Main.newWorldName)
					{
						Main.PlaySound(12, -1, -1, 1);
					}
					statusText[0] = Lang.menu[48];
					flagArray1[2] = true;
					if (Main.newWorldName != "")
					{
						if (Main.newWorldName.Substring(0, 1) == " ")
						{
							Main.newWorldName = "";
						}
						for (int o = 0; o < Main.newWorldName.Length; o++)
						{
							if (Main.newWorldName != " ")
							{
								flagArray1[2] = false;
							}
						}
					}
					Main main9 = this;
					main9.textBlinkerCount = main9.textBlinkerCount + 1;
					if (this.textBlinkerCount >= 20)
					{
						if (this.textBlinkerState != 0)
						{
							this.textBlinkerState = 0;
						}
						else
						{
							this.textBlinkerState = 1;
						}
						this.textBlinkerCount = 0;
					}
					statusText[1] = Main.newWorldName;
					if (this.textBlinkerState != 1)
					{
						string[] strArrays8 = statusText;
						strArrays = strArrays8;
						strArrays8[1] = string.Concat(strArrays[1], " ");
					}
					else
					{
						string[] strArrays9 = statusText;
						strArrays = strArrays9;
						strArrays9[1] = string.Concat(strArrays[1], "|");
						numArray1[1] = 1;
					}
					flagArray[0] = true;
					flagArray[1] = true;
					numArray[1] = -20;
					numArray[2] = 20;
					statusText[2] = Lang.menu[4];
					statusText[3] = Lang.menu[5];
					num3 = 4;
					if (this.selectedMenu == 3)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = -7;
					}
					if (this.selectedMenu == 2 || !flagArray1[2] && Main.inputTextEnter)
					{
						Main.menuMode = 10;
						Main.worldName = Main.newWorldName;
						Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, (SocialAPI.Cloud == null ? false : SocialAPI.Cloud.EnabledByDefault), Main.expertMode);
						WorldGen.CreateNewWorld(null);
					}
				}
				else if (Main.menuMode == 8)
				{
					num = 180;
					num2 = 40;
					num3 = 8;
					numArray[7] = numArray[7] + 30;
					for (int p = 0; p < num3; p++)
					{
						singleArray[p] = 0.8f;
					}
					statusText[7] = Lang.menu[5];
					for (int q = 0; q < 7; q++)
					{
						if (q >= Main.WorldList.Count)
						{
							statusText[q] = null;
						}
						else
						{
							statusText[q] = Main.WorldList[q + Main.menuSkip].Name;
							if (Main.WorldList[q + Main.menuSkip].IsExpertMode)
							{
								pendingPlayer[q] = 2;
							}
						}
					}
					if (Main.WorldList.Count > 7 + Main.menuSkip)
					{
						statusText[6] = "more";
						statusText[6] = "▼";
						singleArray[6] = 0.6f;
						numArray[6] = numArray[6] + 8;
						this.menuWide[6] = true;
					}
					if (Main.menuSkip > 0)
					{
						statusText[0] = "▲";
						singleArray[0] = 0.6f;
						numArray[0] = numArray[0] + 8;
						this.menuWide[0] = true;
					}
					if (this.selectedMenu == 0 && Main.menuSkip > 0)
					{
						Main.PlaySound(12, -1, -1, 1);
						Main.menuSkip = Main.menuSkip - 5;
						if (Main.menuSkip < 0)
						{
							Main.menuSkip = 0;
						}
					}
					else if (this.selectedMenu == 6 && Main.menuSkip < Main.WorldList.Count - 7)
					{
						Main.PlaySound(12, -1, -1, 1);
						Main.menuSkip = Main.menuSkip + 5;
						if (Main.menuSkip >= Main.PlayerList.Count - 7)
						{
							Main.menuSkip = Main.WorldList.Count - 7;
						}
					}
					else if (this.selectedMenu == 7)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 6;
					}
					else if (this.selectedMenu >= 0)
					{
						Main.selectedWorld = this.selectedMenu + Main.menuSkip;
						Main.PlaySound(10, -1, -1, 1);
						Main.menuMode = 9;
					}
				}
				else if (Main.menuMode == 9)
				{
					statusText[0] = string.Concat(Lang.menu[46], " ", Main.WorldList[Main.selectedWorld].Name, "?");
					flagArray[0] = true;
					statusText[1] = Lang.menu[104];
					statusText[2] = Lang.menu[105];
					num3 = 3;
					if (this.selectedMenu == 1)
					{
						Main.EraseWorld(Main.selectedWorld);
						Main.PlaySound(10, -1, -1, 1);
						Main.menuMode = 6;
					}
					else if (this.selectedMenu == 2)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 6;
					}
				}
				else if (Main.menuMode == 1111)
				{
					num = 210;
					num2 = 40;
					for (int r1 = 0; r1 < 8; r1++)
					{
						singleArray[r1] = 0.8f;
					}
					numArray[8] = 10;
					num3 = 9;
					if (!Main.graphics.IsFullScreen)
					{
						statusText[0] = Lang.menu[50];
					}
					else
					{
						statusText[0] = Lang.menu[49];
					}
					Main.bgScroll = (int)Math.Round((double)((1f - Main.caveParallax) * 500f));
					statusText[1] = Lang.menu[51];
					statusText[2] = Lang.menu[52];
					if (!Main.fixedTiming)
					{
						statusText[3] = Lang.menu[54];
					}
					else
					{
						statusText[3] = Lang.menu[53];
					}
					if (Lighting.lightMode == 0)
					{
						statusText[4] = Lang.menu[55];
					}
					else if (Lighting.lightMode == 1)
					{
						statusText[4] = Lang.menu[56];
					}
					else if (Lighting.lightMode == 2)
					{
						statusText[4] = Lang.menu[57];
					}
					else if (Lighting.lightMode == 3)
					{
						statusText[4] = Lang.menu[58];
					}
					if (Lighting.LightingThreads != 0)
					{
						statusText[5] = string.Concat(Lang.menu[116], " ", Lighting.LightingThreads + 1);
					}
					else
					{
						statusText[5] = string.Concat(Lang.menu[116], " ", Lang.menu[117]);
					}
					if (Main.qaStyle == 0)
					{
						statusText[6] = Lang.menu[59];
					}
					else if (Main.qaStyle == 1)
					{
						statusText[6] = Lang.menu[60];
					}
					else if (Main.qaStyle != 2)
					{
						statusText[6] = Lang.menu[62];
					}
					else
					{
						statusText[6] = Lang.menu[61];
					}
					if (!Main.owBack)
					{
						statusText[7] = Lang.menu[101];
					}
					else
					{
						statusText[7] = Lang.menu[100];
					}
					if (this.selectedMenu == 7)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (!Main.owBack)
						{
							Main.owBack = true;
						}
						else
						{
							Main.owBack = false;
						}
					}
					statusText[8] = Lang.menu[5];
					if (this.selectedMenu == 8)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.SaveSettings();
						Main.menuMode = 11;
					}
					if (this.selectedMenu == 6)
					{
						Main.PlaySound(12, -1, -1, 1);
						Main.qaStyle = Main.qaStyle + 1;
						if (Main.qaStyle > 3)
						{
							Main.qaStyle = 0;
						}
					}
					if (this.selectedMenu == 5)
					{
						Main.PlaySound(12, -1, -1, 1);
						Lighting.LightingThreads = Lighting.LightingThreads + 1;
						if (Lighting.LightingThreads > Environment.ProcessorCount - 1)
						{
							Lighting.LightingThreads = 0;
						}
					}
					if (this.selectedMenu == 4)
					{
						Main.PlaySound(12, -1, -1, 1);
						Lighting.lightMode = Lighting.lightMode + 1;
						if (Lighting.lightMode >= 4)
						{
							Lighting.lightMode = 0;
						}
					}
					if (this.selectedMenu == 3)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (!Main.fixedTiming)
						{
							Main.fixedTiming = true;
						}
						else
						{
							Main.fixedTiming = false;
						}
					}
					if (this.selectedMenu == 2)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 28;
					}
					if (this.selectedMenu == 1)
					{
						Main.PlaySound(10, -1, -1, 1);
						Main.menuMode = 111;
					}
					if (this.selectedMenu == 0)
					{
						Main.ToggleFullScreen();
					}
				}
				else if (Main.menuMode == 11)
				{
					num = 240;
					num2 = 37;
					num3 = 8;
					numArray[num3 - 1] = 8;
					for (int s = 0; s < num3; s++)
					{
						singleArray[s] = 0.73f;
					}
					int num10 = 0;
					statusText[num10] = Lang.menu[114];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(10, -1, -1, 1);
						Main.menuMode = 112;
					}
					num10++;
					statusText[num10] = Lang.menu[63];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(10, -1, -1, 1);
						Main.menuMode = 1111;
					}
					num10++;
					statusText[num10] = Lang.menu[64];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(10, -1, -1, 1);
						Main.selColor = Main.mouseColor;
						Main.menuMode = 25;
					}
					num10++;
					statusText[num10] = Lang.menu[65];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 26;
					}
					num10++;
					statusText[num10] = Lang.menu[66];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 27;
					}
					num10++;
					statusText[num10] = Lang.menu[115];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 272727;
					}
					num10++;
					statusText[num10] = Lang.menu[103];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(10, -1, -1, 1);
						Main.menuMode = 1213;
					}
					num10++;
					statusText[num10] = Lang.menu[5];
					if (this.selectedMenu == num10)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.SaveSettings();
						Main.menuMode = 0;
					}
				}
				else if (Main.menuMode == 112)
				{
					num = 220;
					num2 = 35;
					num3 = 9;
					numArray[num3 - 1] = 18;
					for (int t = 0; t < num3; t++)
					{
						singleArray[t] = 0.73f;
					}
					int num11 = 0;
					if (!Main.autoSave)
					{
						statusText[num11] = Lang.menu[68];
					}
					else
					{
						statusText[num11] = Lang.menu[67];
					}
					if (this.selectedMenu == num11)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (!Main.autoSave)
						{
							Main.autoSave = true;
						}
						else
						{
							Main.autoSave = false;
						}
					}
					num11++;
					if (!Main.autoPause)
					{
						statusText[num11] = Lang.menu[70];
					}
					else
					{
						statusText[num11] = Lang.menu[69];
					}
					if (this.selectedMenu == num11)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (!Main.autoPause)
						{
							Main.autoPause = true;
						}
						else
						{
							Main.autoPause = false;
						}
					}
					num11++;
					if (!Main.showItemText)
					{
						statusText[num11] = Lang.menu[72];
					}
					else
					{
						statusText[num11] = Lang.menu[71];
					}
					if (this.selectedMenu == num11)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (!Main.showItemText)
						{
							Main.showItemText = true;
						}
						else
						{
							Main.showItemText = false;
						}
					}
					num11++;
					if (!Main.mapEnabled)
					{
						statusText[num11] = Lang.menu[113];
					}
					else
					{
						statusText[num11] = Lang.menu[112];
					}
					if (this.selectedMenu == num11)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (!Main.mapEnabled)
						{
							Main.mapEnabled = true;
						}
						else
						{
							Main.mapEnabled = false;
						}
					}
					num11++;
					statusText[num11] = (Main.cSmartToggle ? Lang.menu[121] : Lang.menu[122]);
					if (this.selectedMenu == num11)
					{
						Main.PlaySound(12, -1, -1, 1);
						Main.cSmartToggle = !Main.cSmartToggle;
					}
					num11++;
					statusText[num11] = string.Concat(Lang.menu[123], " ", Lang.menu[124 + Main.invasionProgressMode]);
					if (this.selectedMenu == num11)
					{
						Main.PlaySound(12, -1, -1, 1);
						Main.invasionProgressMode = Main.invasionProgressMode + 1;
						if (Main.invasionProgressMode >= 3)
						{
							Main.invasionProgressMode = 0;
						}
					}
					num11++;
					statusText[num11] = (Main.placementPreview ? Lang.menu[128] : Lang.menu[129]);
					if (this.selectedMenu == num11)
					{
						Main.PlaySound(12, -1, -1, 1);
						Main.placementPreview = !Main.placementPreview;
					}
					num11++;
					statusText[num11] = (ChildSafety.Disabled ? Lang.menu[132] : Lang.menu[133]);
					if (this.selectedMenu == num11)
					{
						Main.PlaySound(12, -1, -1, 1);
						ChildSafety.Disabled = !ChildSafety.Disabled;
					}
					num11++;
					statusText[num11] = Lang.menu[5];
					if (this.selectedMenu == num11)
					{
						Main.menuMode = 11;
						Main.PlaySound(11, -1, -1, 1);
					}
				}
				else if (Main.menuMode == 111)
				{
					num = 240;
					num2 = 60;
					num3 = 4;
					statusText[0] = Lang.menu[73];
					statusText[1] = string.Concat(Main.PendingResolutionWidth, "x", Main.PendingResolutionHeight);
					statusText[2] = Lang.menu[134];
					statusText[3] = Lang.menu[5];
					flagArray[0] = true;
					numArray[1] = 10;
					numArray[2] = 140;
					numArray[3] = 140;
					if (this.selectedMenu == 1)
					{
						Main.PlaySound(12, -1, -1, 1);
						int num12 = 0;
						int num13 = 0;
						while (num13 < Main.numDisplayModes)
						{
							if (Main.displayWidth[num13] != Main.PendingResolutionWidth || Main.displayHeight[num13] != Main.PendingResolutionHeight)
							{
								num13++;
							}
							else
							{
								num12 = num13;
								break;
							}
						}
						num12 = (num12 + 1) % Main.numDisplayModes;
						Main.PendingResolutionWidth = Main.displayWidth[num12];
						Main.PendingResolutionHeight = Main.displayHeight[num12];
					}
					if (this.selectedMenu == 2)
					{
						if (Main.graphics.IsFullScreen)
						{
							Main.graphics.ApplyChanges();
						}
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 1111;
					}
					if (this.selectedMenu == 3)
					{
						Main.PendingResolutionWidth = Main.graphics.PreferredBackBufferWidth;
						Main.PendingResolutionHeight = Main.graphics.PreferredBackBufferHeight;
						Main.menuMode = 1111;
						Main.PlaySound(11, -1, -1, 1);
					}
				}
				else if (Main.menuMode == 25)
				{
					flag = true;
					num7 = 370;
					num = 240;
					num2 = 60;
					Main.mouseColor = Main.selColor;
					num3 = 3;
					statusText[0] = "";
					statusText[1] = Lang.menu[64];
					flagArray[1] = true;
					numArray[2] = 170;
					numArray[1] = 10;
					statusText[2] = Lang.menu[5];
					if (this.selectedMenu == 2)
					{
						Main.menuMode = 11;
						Main.PlaySound(11, -1, -1, 1);
					}
				}
				else if (Main.menuMode == 26)
				{
					flag1 = true;
					num = 240;
					num2 = 60;
					num3 = 3;
					statusText[0] = "";
					statusText[1] = Lang.menu[65];
					flagArray[1] = true;
					numArray[2] = 170;
					numArray[1] = 10;
					statusText[2] = Lang.menu[5];
					if (this.selectedMenu == 2)
					{
						Main.menuMode = 11;
						Main.PlaySound(11, -1, -1, 1);
					}
				}
				else if (Main.menuMode == 28)
				{
					Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
					flag2 = true;
					num = 240;
					num2 = 60;
					num3 = 3;
					statusText[0] = "";
					statusText[1] = Lang.menu[52];
					flagArray[1] = true;
					numArray[2] = 170;
					numArray[1] = 10;
					statusText[2] = Lang.menu[5];
					if (this.selectedMenu == 2)
					{
						Main.menuMode = 1111;
						Main.PlaySound(11, -1, -1, 1);
					}
				}
				else if (Main.menuMode == 272727)
				{
					num = 200;
					num2 = 30;
					num3 = 14;
					string[] strArrays10 = new string[] { Main.cMapStyle, Main.cMapFull, Main.cMapZoomIn, Main.cMapZoomOut, Main.cMapAlphaUp, Main.cMapAlphaDown, null, null, null, null, null, null };
					if (Main.setKey >= 0)
					{
						strArrays10[Main.setKey] = "_";
					}
					statusText[0] = string.Concat(Lang.menu[106], strArrays10[0]);
					statusText[1] = string.Concat(Lang.menu[107], strArrays10[1]);
					statusText[2] = string.Concat(Lang.menu[108], strArrays10[2]);
					statusText[3] = string.Concat(Lang.menu[109], strArrays10[3]);
					statusText[4] = string.Concat(Lang.menu[110], strArrays10[4]);
					statusText[5] = string.Concat(Lang.menu[111], strArrays10[5]);
					for (int u = 0; u < 6; u++)
					{
						flagArray3[u] = true;
						singleArray[u] = 0.55f;
						numArray1[u] = -140;
					}
					singleArray[6] = 0.8f;
					singleArray[6] = 0.8f;
					numArray[6] = 6;
					statusText[6] = Lang.menu[86];
					numArray[7] = 16;
					statusText[7] = Lang.menu[5];
					if (this.selectedMenu == 7)
					{
						Main.menuMode = 11;
						Main.PlaySound(11, -1, -1, 1);
					}
					else if (this.selectedMenu == 6)
					{
						Main.cMapStyle = "Tab";
						Main.cMapFull = "M";
						Main.cMapZoomIn = "Add";
						Main.cMapZoomOut = "Subtract";
						Main.cMapAlphaUp = "PageUp";
						Main.cMapAlphaDown = "PageDown";
						Main.setKey = -1;
						Main.PlaySound(11, -1, -1, 1);
					}
					else if (this.selectedMenu >= 0)
					{
						Main.setKey = this.selectedMenu;
					}
					if (Main.setKey >= 0)
					{
						Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.keyState.GetPressedKeys();
						if ((int)pressedKeys.Length > 0)
						{
							string str4 = string.Concat(pressedKeys[0]);
							if (str4 != "None")
							{
								if (Main.setKey == 0)
								{
									Main.cMapStyle = str4;
								}
								if (Main.setKey == 1)
								{
									Main.cMapFull = str4;
								}
								if (Main.setKey == 2)
								{
									Main.cMapZoomIn = str4;
								}
								if (Main.setKey == 3)
								{
									Main.cMapZoomOut = str4;
								}
								if (Main.setKey == 4)
								{
									Main.cMapAlphaUp = str4;
								}
								if (Main.setKey == 5)
								{
									Main.cMapAlphaDown = str4;
								}
								Main.setKey = -1;
							}
						}
					}
				}
				else if (Main.menuMode == 27)
				{
					num = 176;
					num2 = 22;
					num3 = 16;
					string[] strArrays11 = new string[] { Main.cUp, Main.cDown, Main.cLeft, Main.cRight, Main.cJump, Main.cThrowItem, Main.cInv, Main.cHeal, Main.cMana, Main.cBuff, Main.cHook, Main.cTorch, Main.cSmart, Main.cMount };
					if (Main.setKey >= 0)
					{
						strArrays11[Main.setKey] = "_";
					}
					statusText[0] = string.Concat(Lang.menu[74], strArrays11[0]);
					statusText[1] = string.Concat(Lang.menu[75], strArrays11[1]);
					statusText[2] = string.Concat(Lang.menu[76], strArrays11[2]);
					statusText[3] = string.Concat(Lang.menu[77], strArrays11[3]);
					statusText[4] = string.Concat(Lang.menu[78], strArrays11[4]);
					statusText[5] = string.Concat(Lang.menu[79], strArrays11[5]);
					statusText[6] = string.Concat(Lang.menu[80], strArrays11[6]);
					statusText[7] = string.Concat(Lang.menu[81], strArrays11[7]);
					statusText[8] = string.Concat(Lang.menu[82], strArrays11[8]);
					statusText[9] = string.Concat(Lang.menu[83], strArrays11[9]);
					statusText[10] = string.Concat(Lang.menu[84], strArrays11[10]);
					statusText[11] = string.Concat(Lang.menu[85], strArrays11[11]);
					statusText[12] = string.Concat(Lang.menu[120], strArrays11[12]);
					statusText[13] = string.Concat(Lang.menu[130], strArrays11[13]);
					for (int v = 0; v < 14; v++)
					{
						flagArray3[v] = true;
						singleArray[v] = 0.45f;
						numArray1[v] = -80;
					}
					singleArray[14] = 0.8f;
					numArray[14] = 6;
					statusText[14] = Lang.menu[86];
					singleArray[15] = 0.8f;
					numArray[15] = 16;
					statusText[15] = Lang.menu[5];
					if (this.selectedMenu == 15)
					{
						Main.menuMode = 11;
						Main.PlaySound(11, -1, -1, 1);
					}
					else if (this.selectedMenu == 14)
					{
						Main.ResetKeyBindings();
						Main.setKey = -1;
						Main.PlaySound(11, -1, -1, 1);
					}
					else if (this.selectedMenu >= 0)
					{
						Main.setKey = this.selectedMenu;
					}
					if (Main.setKey >= 0)
					{
						Microsoft.Xna.Framework.Input.Keys[] keysArray = Main.keyState.GetPressedKeys();
						if ((int)keysArray.Length > 0)
						{
							string str5 = string.Concat(keysArray[0]);
							if (str5 != "None")
							{
								if (Main.setKey == 0)
								{
									Main.cUp = str5;
								}
								if (Main.setKey == 1)
								{
									Main.cDown = str5;
								}
								if (Main.setKey == 2)
								{
									Main.cLeft = str5;
								}
								if (Main.setKey == 3)
								{
									Main.cRight = str5;
								}
								if (Main.setKey == 4)
								{
									Main.cJump = str5;
								}
								if (Main.setKey == 5)
								{
									Main.cThrowItem = str5;
								}
								if (Main.setKey == 6)
								{
									Main.cInv = str5;
								}
								if (Main.setKey == 7)
								{
									Main.cHeal = str5;
								}
								if (Main.setKey == 8)
								{
									Main.cMana = str5;
								}
								if (Main.setKey == 9)
								{
									Main.cBuff = str5;
								}
								if (Main.setKey == 10)
								{
									Main.cHook = str5;
								}
								if (Main.setKey == 11)
								{
									Main.cTorch = str5;
								}
								if (Main.setKey == 12)
								{
									Main.cSmart = str5;
								}
								if (Main.setKey == 13)
								{
									Main.cMount = str5;
								}
								Main.setKey = -1;
							}
						}
					}
				}
				else if (Main.menuMode == 12)
				{
					int num14 = (SocialAPI.Network != null ? 1 : 0);
					Main.menuServer = false;
					statusText[0] = Lang.menu[(SocialAPI.Network != null ? 140 : 87)];
					statusText[1] = Lang.menu[139];
					statusText[1 + num14] = Lang.menu[88];
					statusText[2 + num14] = Lang.menu[5];
					if (this.selectedMenu == 0)
					{
						Main.LoadPlayers();
						Main.menuMultiplayer = true;
						Main.PlaySound(10, -1, -1, 1);
						Main.menuMode = 1;
					}
					else if (this.selectedMenu == 1 + num14)
					{
						Main.LoadPlayers();
						Main.PlaySound(10, -1, -1, 1);
						Main.menuMode = 1;
						Main.menuMultiplayer = true;
						Main.menuServer = true;
					}
					else if (this.selectedMenu == 1)
					{
						Main.PlaySound(10, -1, -1, 1);
						SocialAPI.Friends.OpenJoinInterface();
					}
					else if (this.selectedMenu == 2 + num14)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 0;
					}
					num3 = 3 + num14;
				}
				else if (Main.menuMode == 13)
				{
					string str6 = Main.getIP;
					Main.getIP = Main.GetInputText(Main.getIP);
					if (str6 != Main.getIP)
					{
						Main.PlaySound(12, -1, -1, 1);
					}
					statusText[0] = Lang.menu[89];
					flagArray1[9] = true;
					if (Main.getIP != "")
					{
						if (Main.getIP.Substring(0, 1) == " ")
						{
							Main.getIP = "";
						}
						for (int w = 0; w < Main.getIP.Length; w++)
						{
							if (Main.getIP != " ")
							{
								flagArray1[9] = false;
							}
						}
					}
					Main main10 = this;
					main10.textBlinkerCount = main10.textBlinkerCount + 1;
					if (this.textBlinkerCount >= 20)
					{
						if (this.textBlinkerState != 0)
						{
							this.textBlinkerState = 0;
						}
						else
						{
							this.textBlinkerState = 1;
						}
						this.textBlinkerCount = 0;
					}
					statusText[1] = Main.getIP;
					if (this.textBlinkerState != 1)
					{
						string[] strArrays12 = statusText;
						strArrays = strArrays12;
						strArrays12[1] = string.Concat(strArrays[1], " ");
					}
					else
					{
						string[] strArrays13 = statusText;
						strArrays = strArrays13;
						strArrays13[1] = string.Concat(strArrays[1], "|");
						numArray1[1] = 1;
					}
					flagArray[0] = true;
					flagArray[1] = true;
					numArray[9] = 44;
					numArray[10] = 64;
					statusText[9] = Lang.menu[4];
					statusText[10] = Lang.menu[5];
					num3 = 11;
					num = 180;
					num2 = 30;
					numArray[1] = 19;
					for (int x = 2; x < 9; x++)
					{
						int num15 = x - 2;
						if (Main.recentWorld[num15] == null || !(Main.recentWorld[num15] != ""))
						{
							statusText[x] = "";
							flagArray[x] = true;
						}
						else
						{
							serverPassword = new object[] { Main.recentWorld[num15], " (", Main.recentIP[num15], ":", Main.recentPort[num15], ")" };
							statusText[x] = string.Concat(serverPassword);
						}
						singleArray[x] = 0.6f;
						numArray[x] = 40;
					}
					if (this.selectedMenu >= 2 && this.selectedMenu < 9)
					{
						Main.autoPass = false;
						int num16 = this.selectedMenu - 2;
						Netplay.ListenPort = Main.recentPort[num16];
						Main.getIP = Main.recentIP[num16];
						if (Netplay.SetRemoteIP(Main.getIP))
						{
							Main.menuMode = 10;
							Netplay.StartTcpClient();
						}
					}
					if (this.selectedMenu == 10)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 1;
					}
					if (this.selectedMenu == 9 || !flagArray1[2] && Main.inputTextEnter)
					{
						Main.PlaySound(12, -1, -1, 1);
						Main.menuMode = 131;
						Main.clrInput();
					}
				}
				else if (Main.menuMode == 131)
				{
					int num17 = 7777;
					string str7 = Main.getPort;
					Main.getPort = Main.GetInputText(Main.getPort);
					if (str7 != Main.getPort)
					{
						Main.PlaySound(12, -1, -1, 1);
					}
					statusText[0] = Lang.menu[90];
					flagArray1[2] = true;
					if (Main.getPort != "")
					{
						bool flag5 = false;
						try
						{
							num17 = Convert.ToInt32(Main.getPort);
							if (num17 > 0 && num17 <= 65535)
							{
								flag5 = true;
							}
						}
						catch (Exception ex)
						{
#if DEBUG
							Console.WriteLine(ex);
							System.Diagnostics.Debugger.Break();

#endif
						}
						if (flag5)
						{
							flagArray1[2] = false;
						}
					}
					Main main11 = this;
					main11.textBlinkerCount = main11.textBlinkerCount + 1;
					if (this.textBlinkerCount >= 20)
					{
						if (this.textBlinkerState != 0)
						{
							this.textBlinkerState = 0;
						}
						else
						{
							this.textBlinkerState = 1;
						}
						this.textBlinkerCount = 0;
					}
					statusText[1] = Main.getPort;
					if (this.textBlinkerState != 1)
					{
						string[] strArrays14 = statusText;
						strArrays = strArrays14;
						strArrays14[1] = string.Concat(strArrays[1], " ");
					}
					else
					{
						string[] strArrays15 = statusText;
						strArrays = strArrays15;
						strArrays15[1] = string.Concat(strArrays[1], "|");
						numArray1[1] = 1;
					}
					flagArray[0] = true;
					flagArray[1] = true;
					numArray[1] = -20;
					numArray[2] = 20;
					statusText[2] = Lang.menu[4];
					statusText[3] = Lang.menu[5];
					num3 = 4;
					if (this.selectedMenu == 3)
					{
						Main.PlaySound(11, -1, -1, 1);
						Main.menuMode = 1;
					}
					if (this.selectedMenu == 2 || !flagArray1[2] && Main.inputTextEnter)
					{
						Netplay.ListenPort = num17;
						Main.autoPass = false;
						if (Netplay.SetRemoteIP(Main.getIP))
						{
							Main.menuMode = 10;
							Netplay.StartTcpClient();
						}
					}
				}
				else if (Main.menuMode == 16)
				{
					num = 200;
					num2 = 60;
					numArray[1] = 30;
					numArray[2] = 30;
					numArray[3] = 30;
					numArray[4] = 70;
					statusText[0] = Lang.menu[91];
					flagArray[0] = true;
					statusText[1] = Lang.menu[92];
					statusText[2] = Lang.menu[93];
					statusText[3] = Lang.menu[94];
					statusText[4] = Lang.menu[5];
					num3 = 5;
					if (this.selectedMenu == 4)
					{
						Main.menuMode = 6;
						Main.PlaySound(11, -1, -1, 1);
					}
					else if (this.selectedMenu > 0)
					{
						if (this.selectedMenu == 1)
						{
							Main.maxTilesX = 4200;
							Main.maxTilesY = 1200;
						}
						else if (this.selectedMenu != 2)
						{
							Main.maxTilesX = 8400;
							Main.maxTilesY = 2400;
						}
						else
						{
							Main.maxTilesX = 6400;
							Main.maxTilesY = 1800;
						}
						Main.clrInput();
						Main.menuMode = -7;
						Main.PlaySound(10, -1, -1, 1);
						WorldGen.setWorldSize();
					}
				}
			}
			if (Main.menuMode == 888)
			{
				Main.MenuUI.Draw(Main.spriteBatch, gameTime);
			}
			if (Main.menuMode != num4)
			{
				Main.blockMouse = true;
				Main.menuSkip = 0;
				num3 = 0;
				for (int y = 0; y < Main.maxMenuItems; y++)
				{
					this.menuItemScale[y] = 0.8f;
				}
			}
			if (!Main.mouseLeft)
			{
				Main.blockMouse = true;
			}
			int num18 = this.focusMenu;
			this.selectedMenu = -1;
			this.selectedMenu2 = -1;
			this.focusMenu = -1;
			for (int a = 0; a < num3; a++)
			{
				if (statusText[a] != null)
				{
					if (!flag)
					{
						this.grabColorSlider = 0;
						Main.hBar = -1f;
						Main.sBar = -1f;
						Main.lBar = -1f;
					}
					if (flag)
					{
						if (!Main.mouseLeft)
						{
							this.grabColorSlider = 0;
							Main.blockMouse = false;
						}
						int num19 = num7;
						int width = Main.screenWidth / 2 - this.hueTexture.Width / 2;
						int num20 = 167;
						Vector3 hsl = Main.rgbToHsl(Main.selColor);
						float x1 = hsl.X;
						float y1 = hsl.Y;
						float z = hsl.Z;
						if (Main.hBar == -1f || Main.sBar == -1f || Main.lBar == -1f)
						{
							Main.hBar = x1;
							Main.sBar = y1;
							Main.lBar = z;
						}
						else
						{
							x1 = Main.hBar;
							y1 = Main.sBar;
							z = Main.lBar;
						}
						Main.spriteBatch.Draw(this.hueTexture, new Vector2((float)width, (float)num19), Microsoft.Xna.Framework.Color.White);
						Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)width + (float)(this.hueTexture.Width - 2) * Main.hBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num19 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
						if ((Main.mouseX > width - 4 && Main.mouseX < width + this.hueTexture.Width + 4 && Main.mouseY > num19 - 4 && Main.mouseY < num19 + this.hueTexture.Height + 4 || this.grabColorSlider == 1) && Main.mouseLeft && !Main.blockMouse)
						{
							this.grabColorSlider = 1;
							x1 = (float)(Main.mouseX - width);
							x1 = x1 / (float)this.hueTexture.Width;
							if (x1 < 0f)
							{
								x1 = 0f;
							}
							if (x1 > 1f)
							{
								x1 = 1f;
							}
							Main.hBar = x1;
						}
						num19 = num19 + 26;
						Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)width, (float)num19), Microsoft.Xna.Framework.Color.White);
						for (int b = 0; b <= num20; b++)
						{
							float single1 = (float)b / (float)num20;
							Microsoft.Xna.Framework.Color rgb = Main.hslToRgb(x1, single1, z);
							Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(width + b + 5), (float)(num19 + 4)), rgb);
						}
						Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)width + (float)(this.hueTexture.Width - 2) * Main.sBar - (float)(Main.colorSliderTexture.Width / 2), (float)(num19 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
						if ((Main.mouseX > width - 4 && Main.mouseX < width + this.hueTexture.Width + 4 && Main.mouseY > num19 - 4 && Main.mouseY < num19 + this.hueTexture.Height + 4 || this.grabColorSlider == 2) && Main.mouseLeft && !Main.blockMouse)
						{
							this.grabColorSlider = 2;
							y1 = (float)(Main.mouseX - width);
							y1 = y1 / (float)this.hueTexture.Width;
							if (y1 < 0f)
							{
								y1 = 0f;
							}
							if (y1 > 1f)
							{
								y1 = 1f;
							}
							Main.sBar = y1;
						}
						num19 = num19 + 26;
						Main.spriteBatch.Draw(Main.colorBarTexture, new Vector2((float)width, (float)num19), Microsoft.Xna.Framework.Color.White);
						float single2 = 0.15f;
						for (int c = 0; c <= num20; c++)
						{
							float single3 = (float)c / (float)num20;
							Microsoft.Xna.Framework.Color rgb1 = Main.hslToRgb(x1, y1, single3);
							Main.spriteBatch.Draw(Main.colorBlipTexture, new Vector2((float)(width + c + 5), (float)(num19 + 4)), rgb1);
						}
						Main.spriteBatch.Draw(Main.colorSliderTexture, new Vector2((float)width + (float)(this.hueTexture.Width - 2) * ((Main.lBar - single2) / (1f - single2)) - (float)(Main.colorSliderTexture.Width / 2), (float)(num19 - Main.colorSliderTexture.Height / 2 + this.hueTexture.Height / 2)), Microsoft.Xna.Framework.Color.White);
						if ((Main.mouseX > width - 4 && Main.mouseX < width + this.hueTexture.Width + 4 && Main.mouseY > num19 - 4 && Main.mouseY < num19 + this.hueTexture.Height + 4 || this.grabColorSlider == 3) && Main.mouseLeft && !Main.blockMouse)
						{
							this.grabColorSlider = 3;
							z = (float)(Main.mouseX - width);
							z = z / (float)this.hueTexture.Width;
							if (z < 0f)
							{
								z = 0f;
							}
							if (z > 1f)
							{
								z = 1f;
							}
							z = z * (1f - single2) + single2;
							Main.lBar = z;
						}
						Main.selColor = Main.hslToRgb(Main.hBar, Main.sBar, Main.lBar);
					}
					else if (flag)
					{
						string str8 = "";
						for (int d = 0; d < 6; d++)
						{
							int num21 = num7;
							int num22 = 370 + Main.screenWidth / 2 - 400;
							if (d == 0)
							{
								str8 = Lang.menu[95];
							}
							if (d == 1)
							{
								str8 = Lang.menu[96];
								num21 = num21 + 30;
							}
							if (d == 2)
							{
								str8 = Lang.menu[97];
								num21 = num21 + 60;
							}
							if (d == 3)
							{
								str8 = string.Concat(Main.selColor.R);
								num22 = num22 + 90;
							}
							if (d == 4)
							{
								str8 = string.Concat(Main.selColor.G);
								num22 = num22 + 90;
								num21 = num21 + 30;
							}
							if (d == 5)
							{
								str8 = string.Concat(Main.selColor.B);
								num22 = num22 + 90;
								num21 = num21 + 60;
							}
							for (int e = 0; e < 5; e++)
							{
								Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
								if (e == 4)
								{
									black = color;
									black.R = (byte)((255 + black.R) / 2);
									black.G = (byte)((255 + black.R) / 2);
									black.B = (byte)((255 + black.R) / 2);
								}
								int num23 = 255;
								int r2 = black.R - (255 - num23);
								if (r2 < 0)
								{
									r2 = 0;
								}
								black = new Microsoft.Xna.Framework.Color((int)r2, (int)r2, (int)r2, (int)num23);
								int num24 = 0;
								int num25 = 0;
								if (e == 0)
								{
									num24 = -2;
								}
								if (e == 1)
								{
									num24 = 2;
								}
								if (e == 2)
								{
									num25 = -2;
								}
								if (e == 3)
								{
									num25 = 2;
								}
								SpriteBatch spriteBatch = Main.spriteBatch;
								SpriteFont spriteFont = Main.fontDeathText;
								Vector2 vector21 = new Vector2((float)(num22 + num24), (float)(num21 + num25));
								vector2 = new Vector2();
								spriteBatch.DrawString(spriteFont, str8, vector21, black, 0f, vector2, 0.5f, SpriteEffects.None, 0f);
							}
						}
						bool flag6 = false;
						for (int f = 0; f < 2; f++)
						{
							for (int g = 0; g < 3; g++)
							{
								int num26 = num7 + g * 30 - 12;
								int num27 = 360 + Main.screenWidth / 2 - 400;
								float single4 = 0.9f;
								if (f != 0)
								{
									num27 = num27 - 40;
								}
								else
								{
									num27 = num27 - 70;
									num26 = num26 + 2;
								}
								str8 = "-";
								if (f == 1)
								{
									str8 = "+";
								}
								Vector2 vector22 = new Vector2(24f, 24f);
								int num28 = 142;
								if (Main.mouseX > num27 && (float)Main.mouseX < (float)num27 + vector22.X && Main.mouseY > num26 + 13 && (float)Main.mouseY < (float)(num26 + 13) + vector22.Y)
								{
									if (Main.focusColor != (f + 1) * (g + 10))
									{
										Main.PlaySound(12, -1, -1, 1);
									}
									Main.focusColor = (f + 1) * (g + 10);
									flag6 = true;
									num28 = 255;
									if (!Main.mouseLeft)
									{
										Main.colorDelay = 0;
									}
									else
									{
										if (Main.colorDelay <= 1)
										{
											if (Main.colorDelay != 0)
											{
												Main.colorDelay = 3;
											}
											else
											{
												Main.colorDelay = 40;
											}
											int num29 = f;
											if (f == 0)
											{
												num29 = -1;
												if (Main.selColor.R + Main.selColor.G + Main.selColor.B <= 150)
												{
													num29 = 0;
												}
											}
											if (g == 0 && Main.selColor.R + num29 >= 0 && Main.selColor.R + num29 <= 255)
											{
												Main.selColor.R = (byte)(Main.selColor.R + num29);
											}
											if (g == 1 && Main.selColor.G + num29 >= 0 && Main.selColor.G + num29 <= 255)
											{
												Main.selColor.G = (byte)(Main.selColor.G + num29);
											}
											if (g == 2 && Main.selColor.B + num29 >= 0 && Main.selColor.B + num29 <= 255)
											{
												Main.selColor.B = (byte)(Main.selColor.B + num29);
											}
										}
										Main.colorDelay = Main.colorDelay - 1;
									}
								}
								for (int h = 0; h < 5; h++)
								{
									Microsoft.Xna.Framework.Color black1 = Microsoft.Xna.Framework.Color.Black;
									if (h == 4)
									{
										black1 = color;
										black1.R = (byte)((255 + black1.R) / 2);
										black1.G = (byte)((255 + black1.R) / 2);
										black1.B = (byte)((255 + black1.R) / 2);
									}
									int r3 = black1.R - (255 - num28);
									if (r3 < 0)
									{
										r3 = 0;
									}
									black1 = new Microsoft.Xna.Framework.Color((int)r3, (int)r3, (int)r3, (int)num28);
									int num30 = 0;
									int num31 = 0;
									if (h == 0)
									{
										num30 = -2;
									}
									if (h == 1)
									{
										num30 = 2;
									}
									if (h == 2)
									{
										num31 = -2;
									}
									if (h == 3)
									{
										num31 = 2;
									}
									SpriteBatch spriteBatch1 = Main.spriteBatch;
									SpriteFont spriteFont1 = Main.fontDeathText;
									Vector2 vector23 = new Vector2((float)(num27 + num30), (float)(num26 + num31));
									vector2 = new Vector2();
									spriteBatch1.DrawString(spriteFont1, str8, vector23, black1, 0f, vector2, single4, SpriteEffects.None, 0f);
								}
							}
						}
						if (!flag6)
						{
							Main.focusColor = 0;
							Main.colorDelay = 0;
						}
					}
					if (flag2)
					{
						int num32 = 400;
						string str9 = "";
						for (int i1 = 0; i1 < 4; i1++)
						{
							int num33 = num32;
							int num34 = 370 + Main.screenWidth / 2 - 400;
							if (i1 == 0)
							{
								str9 = string.Concat(Lang.menu[52], ": ", Main.bgScroll);
							}
							for (int j1 = 0; j1 < 5; j1++)
							{
								Microsoft.Xna.Framework.Color black2 = Microsoft.Xna.Framework.Color.Black;
								if (j1 == 4)
								{
									black2 = color;
									black2.R = (byte)((255 + black2.R) / 2);
									black2.G = (byte)((255 + black2.R) / 2);
									black2.B = (byte)((255 + black2.R) / 2);
								}
								int num35 = 255;
								int r4 = black2.R - (255 - num35);
								if (r4 < 0)
								{
									r4 = 0;
								}
								black2 = new Microsoft.Xna.Framework.Color((int)r4, (int)r4, (int)r4, (int)num35);
								int num36 = 0;
								int num37 = 0;
								if (j1 == 0)
								{
									num36 = -2;
								}
								if (j1 == 1)
								{
									num36 = 2;
								}
								if (j1 == 2)
								{
									num37 = -2;
								}
								if (j1 == 3)
								{
									num37 = 2;
								}
								SpriteBatch spriteBatch2 = Main.spriteBatch;
								SpriteFont spriteFont2 = Main.fontDeathText;
								Vector2 vector24 = new Vector2((float)(num34 + num36), (float)(num33 + num37));
								vector2 = new Vector2();
								spriteBatch2.DrawString(spriteFont2, str9, vector24, black2, 0f, vector2, 0.5f, SpriteEffects.None, 0f);
							}
						}
						IngameOptions.rightHover = -1;
						if (!Main.mouseLeft)
						{
							IngameOptions.rightLock = -1;
						}
						IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num32 + 12));
						float single5 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, (float)Main.bgScroll / 100f);
						if (IngameOptions.inBar || IngameOptions.rightLock == 2)
						{
							IngameOptions.rightHover = 2;
							if (Main.mouseLeft && IngameOptions.rightLock == 2)
							{
								Main.bgScroll = (int)(single5 * 100f);
								Main.caveParallax = 1f - (float)Main.bgScroll / 500f;
							}
						}
						if (IngameOptions.rightHover != -1)
						{
							IngameOptions.rightLock = IngameOptions.rightHover;
						}
					}
					if (flag1)
					{
						int num38 = 400;
						string str10 = "";
						for (int k1 = 0; k1 < 6; k1++)
						{
							int num39 = num38;
							int num40 = 370 + Main.screenWidth / 2 - 400;
							switch (k1)
							{
								case 0:
								{
									str10 = Lang.menu[98];
									break;
								}
								case 1:
								{
									str10 = Lang.menu[99];
									num39 = num39 + 30;
									break;
								}
								case 2:
								{
									str10 = Lang.menu[119];
									num39 = num39 + 60;
									break;
								}
								case 3:
								{
									str10 = string.Concat(Math.Round((double)(Main.soundVolume * 100f)), "%");
									num40 = num40 + 90;
									break;
								}
								case 4:
								{
									str10 = string.Concat(Math.Round((double)(Main.musicVolume * 100f)), "%");
									num40 = num40 + 90;
									num39 = num39 + 30;
									break;
								}
								case 5:
								{
									str10 = string.Concat(Math.Round((double)(Main.ambientVolume * 100f)), "%");
									num40 = num40 + 90;
									num39 = num39 + 60;
									break;
								}
							}
							Microsoft.Xna.Framework.Color color3 = color;
							color3.R = (byte)((255 + color3.R) / 2);
							color3.G = (byte)((255 + color3.R) / 2);
							color3.B = (byte)((255 + color3.R) / 2);
							int num41 = 255;
							int r5 = color3.R - (255 - num41);
							if (r5 < 0)
							{
								r5 = 0;
							}
							color3 = new Microsoft.Xna.Framework.Color((int)r5, (int)r5, (int)r5, (int)num41);
							Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontDeathText, str10, (float)num40, (float)num39, color3, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 0.5f);
						}
						IngameOptions.rightHover = -1;
						if (!Main.mouseLeft)
						{
							IngameOptions.rightLock = -1;
						}
						IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num38 - 18 + 30));
						float single6 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.soundVolume);
						if (IngameOptions.inBar || IngameOptions.rightLock == 2)
						{
							IngameOptions.rightHover = 2;
							if (Main.mouseLeft && IngameOptions.rightLock == 2)
							{
								Main.soundVolume = single6;
							}
						}
						IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num38 - 18 + 60));
						float single7 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.musicVolume);
						if (IngameOptions.inBar || IngameOptions.rightLock == 3)
						{
							IngameOptions.rightHover = 3;
							if (Main.mouseLeft && IngameOptions.rightLock == 3)
							{
								Main.musicVolume = single7;
							}
						}
						IngameOptions.valuePosition = new Vector2((float)(Main.screenWidth / 2 - 40), (float)(num38 - 18 + 90));
						float single8 = IngameOptions.DrawValueBar(Main.spriteBatch, 1f, Main.ambientVolume);
						if (IngameOptions.inBar || IngameOptions.rightLock == 4)
						{
							IngameOptions.rightHover = 4;
							if (Main.mouseLeft && IngameOptions.rightLock == 4)
							{
								Main.ambientVolume = single8;
							}
						}
						if (IngameOptions.rightHover != -1)
						{
							IngameOptions.rightLock = IngameOptions.rightHover;
						}
					}
					for (int l1 = 0; l1 < 5; l1++)
					{
						Microsoft.Xna.Framework.Color g1 = Microsoft.Xna.Framework.Color.Black;
						if (l1 == 4)
						{
							switch (pendingPlayer[a])
							{
								case 0:
								{
									g1 = color;
									break;
								}
								case 1:
								{
									g1 = Main.mcColor;
									break;
								}
								case 2:
								{
									g1 = Main.hcColor;
									break;
								}
								case 3:
								{
									g1 = Main.highVersionColor;
									break;
								}
								case 4:
								case 5:
								case 6:
								{
									g1 = Main.errorColor;
									break;
								}
								default:
								{
									g1 = color;
									break;
								}
							}
							g1.R = (byte)((255 + g1.R) / 2);
							g1.G = (byte)((255 + g1.G) / 2);
							g1.B = (byte)((255 + g1.B) / 2);
						}
						int num42 = (int)(255f * (this.menuItemScale[a] * 2f - 1f));
						if (flagArray[a])
						{
							num42 = 255;
						}
						int r6 = g1.R - (255 - num42);
						if (r6 < 0)
						{
							r6 = 0;
						}
						int g2 = g1.G - (255 - num42);
						if (g2 < 0)
						{
							g2 = 0;
						}
						int b1 = g1.B - (255 - num42);
						if (b1 < 0)
						{
							b1 = 0;
						}
						if (num18 == a && l1 == 4)
						{
							float single9 = (float)num42 / 255f;
							r6 = (int)((float)r6 * (1f - single9) + 255f * single9);
							g2 = (int)((float)g2 * (1f - single9) + 215f * single9);
							b1 = (int)((float)b1 * (1f - single9) + 0f * single9);
						}
						g1 = new Microsoft.Xna.Framework.Color((int)r6, (int)g2, (int)b1, (int)num42);
						if (flagArray2[a])
						{
							if (l1 != 4)
							{
								g1.A = (byte)(g1.A - (byte)(Main.mouseTextColor / 5));
							}
							else
							{
								g1.R = (byte)(g1.R * Main.mouseTextColor / 300);
								g1.G = (byte)(g1.G * Main.mouseTextColor / 300);
								g1.B = (byte)(g1.B * Main.mouseTextColor / 300);
								g1.A = (byte)(g1.A * Main.mouseTextColor / 300);
							}
						}
						int num43 = 0;
						int num44 = 0;
						if (l1 == 0)
						{
							num43 = -2;
						}
						if (l1 == 1)
						{
							num43 = 2;
						}
						if (l1 == 2)
						{
							num44 = -2;
						}
						if (l1 == 3)
						{
							num44 = 2;
						}
						Vector2 x2 = Main.fontDeathText.MeasureString(statusText[a]);
						x2.X = x2.X * 0.5f;
						x2.Y = x2.Y * 0.5f;
						float single10 = this.menuItemScale[a];
						if (Main.menuMode == 15 && a == 0)
						{
							single10 = single10 * 0.35f;
						}
						else if (Main.netMode == 2)
						{
							single10 = single10 * 0.5f;
						}
						single10 = single10 * singleArray[a];
						if (flagArray3[a])
						{
							Main.spriteBatch.DrawString(Main.fontDeathText, statusText[a], new Vector2((float)(num1 + num43 + numArray1[a]), (float)(num + num2 * a + num44) + x2.Y * singleArray[a] + (float)numArray[a]), g1, 0f, new Vector2(0f, x2.Y), single10, SpriteEffects.None, 0f);
						}
						else
						{
							Main.spriteBatch.DrawString(Main.fontDeathText, statusText[a], new Vector2((float)(num1 + num43 + numArray1[a]), (float)(num + num2 * a + num44) + x2.Y * singleArray[a] + (float)numArray[a]), g1, 0f, x2, single10, SpriteEffects.None, 0f);
						}
					}
					if (!flagArray3[a])
					{
						int num45 = 0;
						if (this.menuWide[a])
						{
							num45 = 14;
						}
						this.menuWide[a] = false;
						if ((float)Main.mouseX > (float)num1 - (float)(statusText[a].Length * 10) * singleArray[a] + (float)numArray1[a] - (float)num45 && (float)Main.mouseX < (float)num1 + (float)(statusText[a].Length * 10) * singleArray[a] + (float)numArray1[a] + (float)num45 && Main.mouseY > num + num2 * a + numArray[a] && (float)Main.mouseY < (float)(num + num2 * a + numArray[a]) + 50f * singleArray[a] && Main.hasFocus)
						{
							this.focusMenu = a;
							if (flagArray[a] || flagArray1[a])
							{
								this.focusMenu = -1;
							}
							else
							{
								if (num18 != this.focusMenu)
								{
									Main.PlaySound(12, -1, -1, 1);
								}
								if (Main.mouseLeftRelease && Main.mouseLeft)
								{
									this.selectedMenu = a;
								}
								if (Main.mouseRightRelease && Main.mouseRight)
								{
									this.selectedMenu2 = a;
								}
							}
						}
					}
					else if (Main.mouseX > num1 + numArray1[a] && (float)Main.mouseX < (float)num1 + (float)(statusText[a].Length * 20) * singleArray[a] + (float)numArray1[a] && Main.mouseY > num + num2 * a + numArray[a] && (float)Main.mouseY < (float)(num + num2 * a + numArray[a]) + 50f * singleArray[a] && Main.hasFocus)
					{
						this.focusMenu = a;
						if (flagArray[a] || flagArray1[a])
						{
							this.focusMenu = -1;
						}
						else
						{
							if (num18 != this.focusMenu)
							{
								Main.PlaySound(12, -1, -1, 1);
							}
							if (Main.mouseLeftRelease && Main.mouseLeft)
							{
								this.selectedMenu = a;
							}
							if (Main.mouseRightRelease && Main.mouseRight)
							{
								this.selectedMenu2 = a;
							}
						}
					}
				}
			}
			for (int m1 = 0; m1 < Main.maxMenuItems; m1++)
			{
				if (m1 == this.focusMenu)
				{
					if (this.menuItemScale[m1] < 1f)
					{
						this.menuItemScale[m1] = this.menuItemScale[m1] + 0.02f;
					}
					if (this.menuItemScale[m1] > 1f)
					{
						this.menuItemScale[m1] = 1f;
					}
				}
				else if ((double)this.menuItemScale[m1] > 0.8)
				{
					this.menuItemScale[m1] = this.menuItemScale[m1] - 0.02f;
				}
			}
			if (flag3)
			{
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
				Player y2 = Main.PendingPlayer;
				y2.PlayerFrame();
				y2.position.X = (float)num5 + Main.screenPosition.X;
				y2.position.Y = (float)num6 + Main.screenPosition.Y;
				this.DrawPlayer(y2, y2.position, 0f, Vector2.Zero, 0f);
				Main.spriteBatch.End();
				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
			}
			for (int n1 = 0; n1 < 5; n1++)
			{
				Microsoft.Xna.Framework.Color a1 = Microsoft.Xna.Framework.Color.Black;
				if (n1 == 4)
				{
					a1 = color;
					a1.R = (byte)((255 + a1.R) / 2);
					a1.G = (byte)((255 + a1.R) / 2);
					a1.B = (byte)((255 + a1.R) / 2);
				}
				a1.A = (byte)((float)a1.A * 0.3f);
				int num46 = 0;
				int num47 = 0;
				if (n1 == 0)
				{
					num46 = -2;
				}
				if (n1 == 1)
				{
					num46 = 2;
				}
				if (n1 == 2)
				{
					num47 = -2;
				}
				if (n1 == 3)
				{
					num47 = 2;
				}
				string str11 = "Copyright © 2015 Re-Logic";
				Vector2 x3 = Main.fontMouseText.MeasureString(str11);
				x3.X = x3.X * 0.5f;
				x3.Y = x3.Y * 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, str11, new Vector2((float)Main.screenWidth - x3.X + (float)num46 - 10f, (float)Main.screenHeight - x3.Y + (float)num47 - 2f), a1, 0f, x3, 1f, SpriteEffects.None, 0f);
			}
			for (int o1 = 0; o1 < 5; o1++)
			{
				Microsoft.Xna.Framework.Color a2 = Microsoft.Xna.Framework.Color.Black;
				if (o1 == 4)
				{
					a2 = color;
					a2.R = (byte)((255 + a2.R) / 2);
					a2.G = (byte)((255 + a2.R) / 2);
					a2.B = (byte)((255 + a2.R) / 2);
				}
				a2.A = (byte)((float)a2.A * 0.3f);
				int num48 = 0;
				int num49 = 0;
				if (o1 == 0)
				{
					num48 = -2;
				}
				if (o1 == 1)
				{
					num48 = 2;
				}
				if (o1 == 2)
				{
					num49 = -2;
				}
				if (o1 == 3)
				{
					num49 = 2;
				}
				Vector2 y3 = Main.fontMouseText.MeasureString(Main.versionNumber);
				y3.X = y3.X * 0.5f;
				y3.Y = y3.Y * 0.5f;
				Main.spriteBatch.DrawString(Main.fontMouseText, Main.versionNumber, new Vector2(y3.X + (float)num48 + 10f, (float)Main.screenHeight - y3.Y + (float)num49 - 2f), a2, 0f, y3, 1f, SpriteEffects.None, 0f);
			}
			SpriteBatch spriteBatch3 = Main.spriteBatch;
			Texture2D texture2D = Main.cursorTextures[0];
			Vector2 vector25 = new Vector2((float)(Main.mouseX + 1), (float)(Main.mouseY + 1));
			Microsoft.Xna.Framework.Rectangle? nullable = null;
			Microsoft.Xna.Framework.Color color4 = new Microsoft.Xna.Framework.Color((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f));
			vector2 = new Vector2();
			spriteBatch3.Draw(texture2D, vector25, nullable, color4, 0f, vector2, Main.cursorScale * 1.1f, SpriteEffects.None, 0f);
			SpriteBatch spriteBatch4 = Main.spriteBatch;
			Texture2D texture2D1 = Main.cursorTextures[0];
			Vector2 vector26 = new Vector2((float)Main.mouseX, (float)Main.mouseY);
			nullable = null;
			Microsoft.Xna.Framework.Color color5 = Main.cursorColor;
			vector2 = new Vector2();
			spriteBatch4.Draw(texture2D1, vector26, nullable, color5, 0f, vector2, Main.cursorScale, SpriteEffects.None, 0f);
			if (Main.fadeCounter > 0)
			{
				Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
				byte num50 = 0;
				Main.fadeCounter = Main.fadeCounter - 1;
				num50 = (byte)((float)Main.fadeCounter / 75f * 255f);
				white = new Microsoft.Xna.Framework.Color((int)num50, (int)num50, (int)num50, (int)num50);
				Main.spriteBatch.Draw(Main.fadeTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), white);
			}
			Main.spriteBatch.End();
			if (!Main.mouseLeft)
			{
				Main.mouseLeftRelease = true;
			}
			else
			{
				Main.mouseLeftRelease = false;
			}
			if (Main.mouseRight)
			{
				Main.mouseRightRelease = false;
				return;
			}
			Main.mouseRightRelease = true;
		}

		public void DrawMouseOver()
		{
			int num;
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)((float)Main.mouseX + Main.screenPosition.X), (int)((float)Main.mouseY + Main.screenPosition.Y), 1, 1);
			if (Main.player[Main.myPlayer].gravDir == -1f)
			{
				rectangle.Y = (int)Main.screenPosition.Y + Main.screenHeight - Main.mouseY;
			}
			this.GUIBarsMouseOverLife();
			this.GUIBarsMouseOverMana();
			IngameOptions.MouseOver();
			AchievementsUI.MouseOver();
			if (!Main.mouseText)
			{
				for (int i = 0; i < 400; i++)
				{
					if (Main.item[i].active)
					{
						Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int)((double)Main.item[i].position.X + (double)Main.item[i].width * 0.5 - (double)Main.itemTexture[Main.item[i].type].Width * 0.5), (int)(Main.item[i].position.Y + (float)Main.item[i].height - (float)Main.itemTexture[Main.item[i].type].Height), Main.itemTexture[Main.item[i].type].Width, Main.itemTexture[Main.item[i].type].Height);
						if (rectangle.Intersects(rectangle1))
						{
							Main.player[Main.myPlayer].showItemIcon = false;
							string str = Main.item[i].AffixName();
							if (Main.item[i].stack > 1)
							{
								object obj = str;
								object[] objArray = new object[] { obj, " (", Main.item[i].stack, ")" };
								str = string.Concat(objArray);
							}
							if (Main.item[i].owner < 255 && Main.showItemOwner)
							{
								str = string.Concat(str, " <", Main.player[Main.item[i].owner].name, ">");
							}
							Main.rare = Main.item[i].rare;
							if (Main.item[i].expert)
							{
								Main.rare = -12;
							}
							this.MouseText(str, Main.rare, 0);
							Main.mouseText = true;
							break;
						}
					}
				}
			}
			for (int j = 0; j < 255; j++)
			{
				if (Main.player[j].active && Main.myPlayer != j && !Main.player[j].dead)
				{
					Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int)((double)Main.player[j].position.X + (double)Main.player[j].width * 0.5 - 16), (int)(Main.player[j].position.Y + (float)Main.player[j].height - 48f), 32, 48);
					if (!Main.mouseText && rectangle.Intersects(rectangle2))
					{
						Main.player[Main.myPlayer].showItemIcon = false;
						int num1 = Main.player[j].statLife;
						if (num1 < 0)
						{
							num1 = 0;
						}
						object[] objArray1 = new object[] { Main.player[j].name, ": ", num1, "/", Main.player[j].statLifeMax2 };
						string str1 = string.Concat(objArray1);
						if (Main.player[j].hostile)
						{
							str1 = string.Concat(str1, " (PvP)");
						}
						this.MouseText(str1, 0, Main.player[j].difficulty);
						Main.mouseText = true;
					}
				}
			}
			if (!Main.mouseText)
			{
				for (int k = 0; k < 200; k++)
				{
					if (Main.npc[k].active)
					{
						int num2 = Main.npc[k].type;
						this.LoadNPC(num2);
						Microsoft.Xna.Framework.Rectangle rectangle3 = new Microsoft.Xna.Framework.Rectangle((int)((double)Main.npc[k].position.X + (double)Main.npc[k].width * 0.5 - (double)Main.npcTexture[num2].Width * 0.5), (int)(Main.npc[k].position.Y + (float)Main.npc[k].height - (float)(Main.npcTexture[num2].Height / Main.npcFrameCount[num2])), Main.npcTexture[num2].Width, Main.npcTexture[num2].Height / Main.npcFrameCount[num2]);
						if (Main.npc[k].type >= 87 && Main.npc[k].type <= 92)
						{
							rectangle3 = new Microsoft.Xna.Framework.Rectangle((int)((double)Main.npc[k].position.X + (double)Main.npc[k].width * 0.5 - 32), (int)((double)Main.npc[k].position.Y + (double)Main.npc[k].height * 0.5 - 32), 64, 64);
						}
						if (rectangle.Intersects(rectangle3) && (Main.npc[k].type != 85 && Main.npc[k].type != 341 && Main.npc[k].aiStyle != 87 || Main.npc[k].ai[0] != 0f) && Main.npc[k].type != 488)
						{
							bool flag = false;
							if (Main.npc[k].townNPC || Main.npc[k].type == 105 || Main.npc[k].type == 106 || Main.npc[k].type == 123 || Main.npc[k].type == 354 || Main.npc[k].type == 376 || Main.npc[k].type == 453)
							{
								Microsoft.Xna.Framework.Rectangle rectangle4 = new Microsoft.Xna.Framework.Rectangle((int)(Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Player.tileRangeX * 16)), (int)(Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Player.tileRangeY * 16)), Player.tileRangeX * 16 * 2, Player.tileRangeY * 16 * 2);
								Microsoft.Xna.Framework.Rectangle rectangle5 = new Microsoft.Xna.Framework.Rectangle((int)Main.npc[k].position.X, (int)Main.npc[k].position.Y, Main.npc[k].width, Main.npc[k].height);
								if (rectangle4.Intersects(rectangle5))
								{
									flag = true;
								}
							}
							if (flag && !Main.player[Main.myPlayer].dead)
							{
								int num3 = -(Main.npc[k].width / 2 + 8);
								float y = Main.npc[k].position.Y - (float)Main.chatTexture.Height - (float)((int)Main.screenPosition.Y);
								SpriteEffects spriteEffect = SpriteEffects.None;
								if (Main.npc[k].spriteDirection == -1)
								{
									spriteEffect = SpriteEffects.FlipHorizontally;
									num3 = Main.npc[k].width / 2 + 8;
								}
								if (Main.player[Main.myPlayer].gravDir != 1f)
								{
									spriteEffect = spriteEffect | SpriteEffects.FlipVertically;
									y = (float)Main.screenHeight - y - (float)Main.chatTexture.Height;
								}
								SpriteBatch spriteBatch = Main.spriteBatch;
								Texture2D texture2D = Main.chatTexture;
								Vector2 vector2 = new Vector2(Main.npc[k].position.X + (float)(Main.npc[k].width / 2) - Main.screenPosition.X - (float)(Main.chatTexture.Width / 2) - (float)num3, y);
								Microsoft.Xna.Framework.Rectangle? nullable = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chatTexture.Width, Main.chatTexture.Height));
								Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
								Vector2 vector21 = new Vector2();
								spriteBatch.Draw(texture2D, vector2, nullable, color, 0f, vector21, 1f, spriteEffect, 0f);
								if (Main.mouseRight && Main.npcChatRelease)
								{
									Main.npcChatRelease = false;
									if (Main.player[Main.myPlayer].talkNPC != k)
									{
										Main.CancelHairWindow();
										Main.npcShop = 0;
										Main.craftGuide = false;
										Main.player[Main.myPlayer].dropItemCheck();
										Main.npcChatCornerItem = 0;
										Main.player[Main.myPlayer].sign = -1;
										Main.editSign = false;
										Main.player[Main.myPlayer].talkNPC = k;
										Main.playerInventory = false;
										Main.player[Main.myPlayer].chest = -1;
										Recipe.FindRecipes();
										Main.npcChatText = Main.npc[k].GetChat();
										Main.PlaySound(24, -1, -1, 1);
									}
								}
							}
							Main.player[Main.myPlayer].showItemIcon = false;
							string str2 = Main.npc[k].displayName;
							int num4 = k;
							if (Main.npc[k].realLife >= 0)
							{
								num4 = Main.npc[k].realLife;
							}
							if (Main.npc[num4].lifeMax > 1 && !Main.npc[num4].dontTakeDamage)
							{
								object obj1 = str2;
								object[] objArray2 = new object[] { obj1, ": ", Main.npc[num4].life, "/", Main.npc[num4].lifeMax };
								str2 = string.Concat(objArray2);
							}
							this.MouseText(str2, 0, 0);
							Main.mouseText = true;
							break;
						}
					}
				}
			}
			if (!Main.mouseText)
			{
				if (Main.signHover != -1 && Main.sign[Main.signHover] != null && !Main.player[Main.myPlayer].mouseInterface)
				{
					string[] strArrays = Utils.WordwrapString(Main.sign[Main.signHover].text, Main.fontMouseText, 460, 10, out num);
					num++;
					float single = 0f;
					for (int l = 0; l < num; l++)
					{
						float x = Main.fontMouseText.MeasureString(strArrays[l]).X;
						if (single < x)
						{
							single = x;
						}
					}
					if (single > 460f)
					{
						single = 460f;
					}
					Vector2 vector22 = new Vector2((float)Main.mouseX, (float)Main.mouseY) + new Vector2(16f);
					if (vector22.Y > (float)(Main.screenHeight - 30 * num))
					{
						vector22.Y = (float)(Main.screenHeight - 30 * num);
					}
					if (vector22.X > (float)Main.screenWidth - single)
					{
						vector22.X = (float)(Main.screenWidth - 460);
					}
					for (int m = 0; m < num; m++)
					{
						Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, strArrays[m], vector22.X, vector22.Y + (float)(m * 30), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
					}
					Main.mouseText = true;
				}
				Main.signHover = -1;
			}
		}

		protected void DrawNPC(int i, bool behindTiles)
		{
			byte num;
			byte num1;
			byte num2;
			Microsoft.Xna.Framework.Color alpha;
			Microsoft.Xna.Framework.Rectangle? nullable;
			int y;
			Vector3 vector3;
			Vector2 vector2;
			int num3 = Main.npc[i].type;
			this.LoadNPC(num3);
			if (Main.npc[i].setFrameSize)
			{
				Main.npc[i].frame = new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcTexture[num3].Width, Main.npcTexture[num3].Height / Main.npcFrameCount[num3]);
				Main.npc[i].setFrameSize = false;
			}
			if (num3 == 101)
			{
				bool flag = true;
				Vector2 x = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
				float single = Main.npc[i].ai[0] * 16f + 8f - x.X;
				float y1 = Main.npc[i].ai[1] * 16f + 8f - x.Y;
				float single1 = (float)Math.Atan2((double)y1, (double)single) - 1.57f;
				bool flag1 = true;
				while (flag1)
				{
					float single2 = 0.75f;
					int num4 = 28;
					float single3 = (float)Math.Sqrt((double)(single * single + y1 * y1));
					if (single3 < 28f * single2)
					{
						num4 = (int)single3 - 40 + 28;
						flag1 = false;
					}
					single3 = 20f * single2 / single3;
					single = single * single3;
					y1 = y1 * single3;
					x.X = x.X + single;
					x.Y = x.Y + y1;
					single = Main.npc[i].ai[0] * 16f + 8f - x.X;
					y1 = Main.npc[i].ai[1] * 16f + 8f - x.Y;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)x.X / 16, (int)(x.Y / 16f));
					if (flag)
					{
						flag = false;
						Main.spriteBatch.Draw(Main.chain11Texture, new Vector2(x.X - Main.screenPosition.X, x.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain10Texture.Width, num4)), color, single1, new Vector2((float)Main.chain10Texture.Width * 0.5f, (float)Main.chain10Texture.Height * 0.5f), single2, SpriteEffects.None, 0f);
					}
					else
					{
						flag = true;
						Main.spriteBatch.Draw(Main.chain10Texture, new Vector2(x.X - Main.screenPosition.X, x.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain10Texture.Width, num4)), color, single1, new Vector2((float)Main.chain10Texture.Width * 0.5f, (float)Main.chain10Texture.Height * 0.5f), single2, SpriteEffects.None, 0f);
					}
				}
			}
			else if (Main.npc[i].aiStyle == 13)
			{
				Vector2 vector21 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
				float x1 = Main.npc[i].ai[0] * 16f + 8f - vector21.X;
				float y2 = Main.npc[i].ai[1] * 16f + 8f - vector21.Y;
				float single4 = (float)Math.Atan2((double)y2, (double)x1) - 1.57f;
				bool flag2 = true;
				while (flag2)
				{
					int num5 = 28;
					int num6 = 40;
					if (num3 == 259 || num3 == 260)
					{
						num6 = 20;
						num5 = 12;
					}
					float single5 = (float)Math.Sqrt((double)(x1 * x1 + y2 * y2));
					if (single5 < (float)num6)
					{
						num5 = (int)single5 - num6 + num5;
						flag2 = false;
					}
					single5 = (float)num5 / single5;
					x1 = x1 * single5;
					y2 = y2 * single5;
					vector21.X = vector21.X + x1;
					vector21.Y = vector21.Y + y2;
					x1 = Main.npc[i].ai[0] * 16f + 8f - vector21.X;
					y2 = Main.npc[i].ai[1] * 16f + 8f - vector21.Y;
					Microsoft.Xna.Framework.Color color1 = Lighting.GetColor((int)vector21.X / 16, (int)(vector21.Y / 16f));
					if (num3 == 259 || num3 == 260)
					{
						color1.B = 255;
						if (color1.R < 100)
						{
							color1.R = 100;
						}
						if (color1.G < 150)
						{
							color1.G = 150;
						}
					}
					if (num3 == 56)
					{
						Main.spriteBatch.Draw(Main.chain5Texture, new Vector2(vector21.X - Main.screenPosition.X, vector21.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain4Texture.Width, num5)), color1, single4, new Vector2((float)Main.chain4Texture.Width * 0.5f, (float)Main.chain4Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else if (num3 == 175)
					{
						Main.spriteBatch.Draw(Main.chain14Texture, new Vector2(vector21.X - Main.screenPosition.X, vector21.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain14Texture.Width, num5)), color1, single4, new Vector2((float)Main.chain14Texture.Width * 0.5f, (float)Main.chain14Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else if (num3 == 259)
					{
						Main.spriteBatch.Draw(Main.chain24Texture, new Vector2(vector21.X - Main.screenPosition.X, vector21.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain24Texture.Width, num5)), color1, single4, new Vector2((float)Main.chain24Texture.Width * 0.5f, (float)Main.chain24Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else if (num3 != 260)
					{
						Main.spriteBatch.Draw(Main.chain4Texture, new Vector2(vector21.X - Main.screenPosition.X, vector21.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain4Texture.Width, num5)), color1, single4, new Vector2((float)Main.chain4Texture.Width * 0.5f, (float)Main.chain4Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else
					{
						Main.spriteBatch.Draw(Main.chain25Texture, new Vector2(vector21.X - Main.screenPosition.X, vector21.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain25Texture.Width, num5)), color1, single4, new Vector2((float)Main.chain25Texture.Width * 0.5f, (float)Main.chain25Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
				}
			}
			if (num3 == 327)
			{
				float single6 = 0f;
				Vector2 vector22 = new Vector2(Main.npc[i].Center.X, Main.npc[i].Center.Y + 80f);
				int num7 = (int)Main.npc[i].localAI[1];
				Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector22.X / 16, (int)(vector22.Y / 16f));
				Main.spriteBatch.Draw(Main.pumpkingCloakTexture, new Vector2(vector22.X - Main.screenPosition.X, vector22.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.pumpkingCloakTexture.Height / 5 * num7, Main.pumpkingCloakTexture.Width, Main.pumpkingCloakTexture.Height / 5)), color2, single6, new Vector2((float)Main.pumpkingCloakTexture.Width * 0.5f, (float)Main.pumpkingCloakTexture.Height * 0.5f / 5f), 1f, SpriteEffects.None, 0f);
			}
			if (num3 == 328)
			{
				Vector2 x2 = new Vector2(Main.npc[i].position.X + (float)Main.npc[i].width * 0.5f - 5f * Main.npc[i].ai[0], Main.npc[i].position.Y + 20f);
				for (int i1 = 0; i1 < 2; i1++)
				{
					float x3 = Main.npc[(int)Main.npc[i].ai[1]].position.X + (float)(Main.npc[(int)Main.npc[i].ai[1]].width / 2) - x2.X;
					float y3 = Main.npc[(int)Main.npc[i].ai[1]].position.Y + (float)(Main.npc[(int)Main.npc[i].ai[1]].height / 2) - 30f - x2.Y;
					float single7 = 0f;
					if (i1 != 0)
					{
						x3 = x3 - 50f * Main.npc[i].ai[0];
						y3 = y3 + 80f;
						single7 = (float)Math.Sqrt((double)(x3 * x3 + y3 * y3));
						single7 = 60f / single7;
						x2.X = x2.X + x3 * single7;
						x2.Y = x2.Y + y3 * single7;
					}
					else
					{
						x3 = x3 - 200f * Main.npc[i].ai[0];
						y3 = y3 + 130f;
						single7 = (float)Math.Sqrt((double)(x3 * x3 + y3 * y3));
						single7 = 92f / single7;
						x2.X = x2.X + x3 * single7;
						x2.Y = x2.Y + y3 * single7;
					}
					float single8 = (float)Math.Atan2((double)y3, (double)x3) - 1.57f;
					Microsoft.Xna.Framework.Color color3 = Lighting.GetColor((int)x2.X / 16, (int)(x2.Y / 16f));
					Main.spriteBatch.Draw(Main.pumpkingArmTexture, new Vector2(x2.X - Main.screenPosition.X, x2.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.pumpkingArmTexture.Width, Main.pumpkingArmTexture.Height)), color3, single8, new Vector2((float)Main.pumpkingArmTexture.Width * 0.5f, (float)Main.pumpkingArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					if (i1 == 0)
					{
						x2.X = x2.X + x3 * single7 / 2f;
						x2.Y = x2.Y + y3 * single7 / 2f;
					}
				}
			}
			if (num3 == 36)
			{
				Vector2 vector23 = new Vector2(Main.npc[i].position.X + (float)Main.npc[i].width * 0.5f - 5f * Main.npc[i].ai[0], Main.npc[i].position.Y + 20f);
				for (int j = 0; j < 2; j++)
				{
					float x4 = Main.npc[(int)Main.npc[i].ai[1]].position.X + (float)(Main.npc[(int)Main.npc[i].ai[1]].width / 2) - vector23.X;
					float y4 = Main.npc[(int)Main.npc[i].ai[1]].position.Y + (float)(Main.npc[(int)Main.npc[i].ai[1]].height / 2) - vector23.Y;
					float single9 = 0f;
					if (j != 0)
					{
						x4 = x4 - 50f * Main.npc[i].ai[0];
						y4 = y4 + 80f;
						single9 = (float)Math.Sqrt((double)(x4 * x4 + y4 * y4));
						single9 = 60f / single9;
						vector23.X = vector23.X + x4 * single9;
						vector23.Y = vector23.Y + y4 * single9;
					}
					else
					{
						x4 = x4 - 200f * Main.npc[i].ai[0];
						y4 = y4 + 130f;
						single9 = (float)Math.Sqrt((double)(x4 * x4 + y4 * y4));
						single9 = 92f / single9;
						vector23.X = vector23.X + x4 * single9;
						vector23.Y = vector23.Y + y4 * single9;
					}
					float single10 = (float)Math.Atan2((double)y4, (double)x4) - 1.57f;
					Microsoft.Xna.Framework.Color color4 = Lighting.GetColor((int)vector23.X / 16, (int)(vector23.Y / 16f));
					Main.spriteBatch.Draw(Main.boneArmTexture, new Vector2(vector23.X - Main.screenPosition.X, vector23.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.boneArmTexture.Width, Main.boneArmTexture.Height)), color4, single10, new Vector2((float)Main.boneArmTexture.Width * 0.5f, (float)Main.boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					if (j == 0)
					{
						vector23.X = vector23.X + x4 * single9 / 2f;
						vector23.Y = vector23.Y + y4 * single9 / 2f;
					}
					else if (base.IsActive)
					{
						vector23.X = vector23.X + (x4 * single9 - 16f);
						vector23.Y = vector23.Y + (y4 * single9 - 6f);
						Vector2 vector24 = new Vector2(vector23.X, vector23.Y);
						alpha = new Microsoft.Xna.Framework.Color();
						int num8 = Dust.NewDust(vector24, 30, 10, 5, x4 * 0.02f, y4 * 0.02f, 0, alpha, 2f);
						Main.dust[num8].noGravity = true;
					}
				}
			}
			if (Main.npc[i].aiStyle == 47)
			{
				Vector2 vector25 = new Vector2(Main.npc[i].Center.X, Main.npc[i].Center.Y);
				float x5 = Main.npc[NPC.golemBoss].Center.X - vector25.X;
				float y5 = Main.npc[NPC.golemBoss].Center.Y - vector25.Y;
				y5 = y5 - 7f;
				x5 = (num3 != 247 ? x5 + 66f : x5 - 70f);
				float single11 = (float)Math.Atan2((double)y5, (double)x5) - 1.57f;
				bool flag3 = true;
				while (flag3)
				{
					float single12 = (float)Math.Sqrt((double)(x5 * x5 + y5 * y5));
					if (single12 >= 16f)
					{
						single12 = 16f / single12;
						x5 = x5 * single12;
						y5 = y5 * single12;
						vector25.X = vector25.X + x5;
						vector25.Y = vector25.Y + y5;
						x5 = Main.npc[NPC.golemBoss].Center.X - vector25.X;
						y5 = Main.npc[NPC.golemBoss].Center.Y - vector25.Y;
						y5 = y5 - 7f;
						x5 = (num3 != 247 ? x5 + 66f : x5 - 70f);
						Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)vector25.X / 16, (int)(vector25.Y / 16f));
						Main.spriteBatch.Draw(Main.chain21Texture, new Vector2(vector25.X - Main.screenPosition.X, vector25.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain21Texture.Width, Main.chain21Texture.Height)), color5, single11, new Vector2((float)Main.chain21Texture.Width * 0.5f, (float)Main.chain21Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					}
					else
					{
						flag3 = false;
					}
				}
			}
			if (Main.npc[i].aiStyle >= 33 && Main.npc[i].aiStyle <= 36)
			{
				Vector2 vector26 = new Vector2(Main.npc[i].position.X + (float)Main.npc[i].width * 0.5f - 5f * Main.npc[i].ai[0], Main.npc[i].position.Y + 20f);
				for (int k = 0; k < 2; k++)
				{
					float x6 = Main.npc[(int)Main.npc[i].ai[1]].position.X + (float)(Main.npc[(int)Main.npc[i].ai[1]].width / 2) - vector26.X;
					float y6 = Main.npc[(int)Main.npc[i].ai[1]].position.Y + (float)(Main.npc[(int)Main.npc[i].ai[1]].height / 2) - vector26.Y;
					float single13 = 0f;
					if (k != 0)
					{
						x6 = x6 - 50f * Main.npc[i].ai[0];
						y6 = y6 + 80f;
						single13 = (float)Math.Sqrt((double)(x6 * x6 + y6 * y6));
						single13 = 60f / single13;
						vector26.X = vector26.X + x6 * single13;
						vector26.Y = vector26.Y + y6 * single13;
					}
					else
					{
						x6 = x6 - 200f * Main.npc[i].ai[0];
						y6 = y6 + 130f;
						single13 = (float)Math.Sqrt((double)(x6 * x6 + y6 * y6));
						single13 = 92f / single13;
						vector26.X = vector26.X + x6 * single13;
						vector26.Y = vector26.Y + y6 * single13;
					}
					float single14 = (float)Math.Atan2((double)y6, (double)x6) - 1.57f;
					Microsoft.Xna.Framework.Color color6 = Lighting.GetColor((int)vector26.X / 16, (int)(vector26.Y / 16f));
					Main.spriteBatch.Draw(Main.boneArm2Texture, new Vector2(vector26.X - Main.screenPosition.X, vector26.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.boneArmTexture.Width, Main.boneArmTexture.Height)), color6, single14, new Vector2((float)Main.boneArmTexture.Width * 0.5f, (float)Main.boneArmTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
					if (k == 0)
					{
						vector26.X = vector26.X + x6 * single13 / 2f;
						vector26.Y = vector26.Y + y6 * single13 / 2f;
					}
					else if (base.IsActive)
					{
						vector26.X = vector26.X + (x6 * single13 - 16f);
						vector26.Y = vector26.Y + (y6 * single13 - 6f);
						Vector2 vector27 = new Vector2(vector26.X, vector26.Y);
						alpha = new Microsoft.Xna.Framework.Color();
						int num9 = Dust.NewDust(vector27, 30, 10, 6, x6 * 0.02f, y6 * 0.02f, 0, alpha, 2.5f);
						Main.dust[num9].noGravity = true;
					}
				}
			}
			if (Main.npc[i].aiStyle == 20)
			{
				Vector2 x7 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
				float x8 = Main.npc[i].ai[1] - x7.X;
				float y7 = Main.npc[i].ai[2] - x7.Y;
				float single15 = (float)Math.Atan2((double)y7, (double)x8) - 1.57f;
				Main.npc[i].rotation = single15;
				bool flag4 = true;
				while (flag4)
				{
					int num10 = 12;
					float single16 = (float)Math.Sqrt((double)(x8 * x8 + y7 * y7));
					if (single16 < 20f)
					{
						num10 = (int)single16 - 20 + 12;
						flag4 = false;
					}
					single16 = 12f / single16;
					x8 = x8 * single16;
					y7 = y7 * single16;
					x7.X = x7.X + x8;
					x7.Y = x7.Y + y7;
					x8 = Main.npc[i].ai[1] - x7.X;
					y7 = Main.npc[i].ai[2] - x7.Y;
					Microsoft.Xna.Framework.Color color7 = Lighting.GetColor((int)x7.X / 16, (int)(x7.Y / 16f));
					Main.spriteBatch.Draw(Main.chainTexture, new Vector2(x7.X - Main.screenPosition.X, x7.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chainTexture.Width, num10)), color7, single15, new Vector2((float)Main.chainTexture.Width * 0.5f, (float)Main.chainTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
				}
				Main.spriteBatch.Draw(Main.spikeBaseTexture, new Vector2(Main.npc[i].ai[1] - Main.screenPosition.X, Main.npc[i].ai[2] - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.spikeBaseTexture.Width, Main.spikeBaseTexture.Height)), Lighting.GetColor((int)Main.npc[i].ai[1] / 16, (int)(Main.npc[i].ai[2] / 16f)), single15 - 0.75f, new Vector2((float)Main.spikeBaseTexture.Width * 0.5f, (float)Main.spikeBaseTexture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
			}
			Microsoft.Xna.Framework.Color black = Lighting.GetColor((int)((double)Main.npc[i].position.X + (double)Main.npc[i].width * 0.5) / 16, (int)(((double)Main.npc[i].position.Y + (double)Main.npc[i].height * 0.5) / 16));
			if (num3 >= 277 && num3 <= 280)
			{
				if (black.R < 255)
				{
					black.R = 255;
				}
				if (black.G < 175)
				{
					black.G = 175;
				}
			}
			if (num3 == -4)
			{
				int r = black.R;
				int g = black.G;
				int b = black.B;
				r = r * 2;
				if (r > 255)
				{
					r = 255;
				}
				g = g * 2;
				if (g > 255)
				{
					g = 255;
				}
				b = b * 2;
				if (b > 255)
				{
					b = 255;
				}
				black = new Microsoft.Xna.Framework.Color(r, g, b);
			}
			if (behindTiles && num3 != 113 && num3 != 114)
			{
				int x9 = (int)((Main.npc[i].position.X - 8f) / 16f);
				int x10 = (int)((Main.npc[i].position.X + (float)Main.npc[i].width + 8f) / 16f);
				int y8 = (int)((Main.npc[i].position.Y - 8f) / 16f);
				int y9 = (int)((Main.npc[i].position.Y + (float)Main.npc[i].height + 8f) / 16f);
				for (int l = x9; l <= x10; l++)
				{
					for (int m = y8; m <= y9; m++)
					{
						if (Lighting.Brightness(l, m) == 0f)
						{
							black = Microsoft.Xna.Framework.Color.Black;
						}
					}
				}
			}
			float single17 = 1f;
			float single18 = 1f;
			float single19 = 1f;
			float single20 = 1f;
			if (Main.npc[i].poisoned)
			{
				if (Main.rand.Next(30) == 0)
				{
					Vector2 vector28 = Main.npc[i].position;
					int num11 = Main.npc[i].width;
					int num12 = Main.npc[i].height;
					alpha = new Microsoft.Xna.Framework.Color();
					int num13 = Dust.NewDust(vector28, num11, num12, 46, 0f, 0f, 120, alpha, 0.2f);
					Main.dust[num13].noGravity = true;
					Main.dust[num13].fadeIn = 1.9f;
				}
				single17 = single17 * 0.65f;
				single19 = single19 * 0.75f;
				black = Main.buffColor(black, single17, single18, single19, single20);
			}
			if (Main.npc[i].venom)
			{
				if (Main.rand.Next(10) == 0)
				{
					Vector2 vector29 = Main.npc[i].position;
					int num14 = Main.npc[i].width;
					int num15 = Main.npc[i].height;
					alpha = new Microsoft.Xna.Framework.Color();
					int num16 = Dust.NewDust(vector29, num14, num15, 171, 0f, 0f, 100, alpha, 0.5f);
					Main.dust[num16].noGravity = true;
					Main.dust[num16].fadeIn = 1.5f;
				}
				single18 = single18 * 0.45f;
				single17 = single17 * 0.75f;
				black = Main.buffColor(black, single17, single18, single19, single20);
			}
			if (Main.npc[i].midas)
			{
				single19 = single19 * 0.3f;
				single17 = single17 * 0.85f;
				black = Main.buffColor(black, single17, single18, single19, single20);
			}
			if (Main.npc[i].shadowFlame && Main.rand.Next(5) < 4)
			{
				Vector2 vector210 = new Vector2(Main.npc[i].position.X - 2f, Main.npc[i].position.Y - 2f);
				alpha = new Microsoft.Xna.Framework.Color();
				int num17 = Dust.NewDust(vector210, Main.npc[i].width + 4, Main.npc[i].height + 4, 27, Main.npc[i].velocity.X * 0.4f, Main.npc[i].velocity.Y * 0.4f, 180, alpha, 1.95f);
				Main.dust[num17].noGravity = true;
				Dust dust = Main.dust[num17];
				dust.velocity = dust.velocity * 0.75f;
				Main.dust[num17].velocity.X = Main.dust[num17].velocity.X * 0.75f;
				Main.dust[num17].velocity.Y = Main.dust[num17].velocity.Y - 1f;
				if (Main.rand.Next(4) == 0)
				{
					Main.dust[num17].noGravity = false;
					Dust dust1 = Main.dust[num17];
					dust1.scale = dust1.scale * 0.5f;
				}
			}
			if (Main.npc[i].onFire)
			{
				if (Main.rand.Next(4) < 3)
				{
					Vector2 vector211 = new Vector2(Main.npc[i].position.X - 2f, Main.npc[i].position.Y - 2f);
					alpha = new Microsoft.Xna.Framework.Color();
					int num18 = Dust.NewDust(vector211, Main.npc[i].width + 4, Main.npc[i].height + 4, 6, Main.npc[i].velocity.X * 0.4f, Main.npc[i].velocity.Y * 0.4f, 100, alpha, 3.5f);
					Main.dust[num18].noGravity = true;
					Dust dust2 = Main.dust[num18];
					dust2.velocity = dust2.velocity * 1.8f;
					Main.dust[num18].velocity.Y = Main.dust[num18].velocity.Y - 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						Main.dust[num18].noGravity = false;
						Dust dust3 = Main.dust[num18];
						dust3.scale = dust3.scale * 0.5f;
					}
				}
				Lighting.AddLight((int)(Main.npc[i].position.X / 16f), (int)(Main.npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (Main.npc[i].daybreak)
			{
				if (Main.rand.Next(4) < 3)
				{
					Vector2 vector212 = new Vector2(Main.npc[i].position.X - 2f, Main.npc[i].position.Y - 2f);
					alpha = new Microsoft.Xna.Framework.Color();
					int num19 = Dust.NewDust(vector212, Main.npc[i].width + 4, Main.npc[i].height + 4, 158, Main.npc[i].velocity.X * 0.4f, Main.npc[i].velocity.Y * 0.4f, 100, alpha, 3.5f);
					Main.dust[num19].noGravity = true;
					Dust dust4 = Main.dust[num19];
					dust4.velocity = dust4.velocity * 2.8f;
					Main.dust[num19].velocity.Y = Main.dust[num19].velocity.Y - 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						Main.dust[num19].noGravity = false;
						Dust dust5 = Main.dust[num19];
						dust5.scale = dust5.scale * 0.5f;
					}
				}
				Lighting.AddLight((int)(Main.npc[i].position.X / 16f), (int)(Main.npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (Main.npc[i].dryadWard && Main.npc[i].velocity.X != 0f && Main.rand.Next(4) == 0)
			{
				Vector2 vector213 = new Vector2(Main.npc[i].position.X - 2f, Main.npc[i].position.Y + (float)Main.npc[i].height - 2f);
				alpha = new Microsoft.Xna.Framework.Color();
				int num20 = Dust.NewDust(vector213, Main.npc[i].width + 4, 4, 163, Main.npc[i].velocity.X * 0.4f, Main.npc[i].velocity.Y * 0.4f, 100, alpha, 1.5f);
				Main.dust[num20].noGravity = true;
				Main.dust[num20].noLight = true;
				Dust dust6 = Main.dust[num20];
				dust6.velocity = dust6.velocity * 0f;
			}
			if (Main.npc[i].dryadBane && Main.rand.Next(4) == 0)
			{
				Vector2 vector214 = new Vector2(Main.npc[i].position.X - 2f, Main.npc[i].position.Y);
				int num21 = Main.npc[i].height;
				alpha = new Microsoft.Xna.Framework.Color();
				int num22 = Dust.NewDust(vector214, Main.npc[i].width + 4, num21, 163, Main.npc[i].velocity.X * 0.4f, Main.npc[i].velocity.Y * 0.4f, 100, alpha, 1.5f);
				Main.dust[num22].noGravity = true;
				Dust dust7 = Main.dust[num22];
				dust7.velocity = dust7.velocity * new Vector2(Main.rand.NextFloat() * 4f - 2f, 0f);
				Main.dust[num22].noLight = true;
			}
			if (Main.npc[i].loveStruck && Main.rand.Next(5) == 0)
			{
				Vector2 x11 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
				x11.Normalize();
				x11.X = x11.X * 0.66f;
				int num23 = Gore.NewGore(Main.npc[i].position + new Vector2((float)Main.rand.Next(Main.npc[i].width + 1), (float)Main.rand.Next(Main.npc[i].height + 1)), (x11 * (float)Main.rand.Next(3, 6)) * 0.33f, 331, (float)Main.rand.Next(40, 121) * 0.01f);
				Main.gore[num23].sticky = false;
				Gore gore = Main.gore[num23];
				gore.velocity = gore.velocity * 0.4f;
				Main.gore[num23].velocity.Y = Main.gore[num23].velocity.Y - 0.6f;
			}
			if (Main.npc[i].stinky)
			{
				single17 = single17 * 0.7f;
				single19 = single19 * 0.55f;
				black = Main.buffColor(black, single17, single18, single19, single20);
				if (Main.rand.Next(5) == 0)
				{
					Vector2 x12 = new Vector2((float)Main.rand.Next(-10, 11), (float)Main.rand.Next(-10, 11));
					x12.Normalize();
					x12.X = x12.X * 0.66f;
					x12.Y = Math.Abs(x12.Y);
					Vector2 vector215 = (x12 * (float)Main.rand.Next(3, 5)) * 0.25f;
					Vector2 vector216 = Main.npc[i].position;
					int num24 = Main.npc[i].width;
					int num25 = Main.npc[i].height;
					float x13 = vector215.X;
					alpha = new Microsoft.Xna.Framework.Color();
					int num26 = Dust.NewDust(vector216, num24, num25, 188, x13, vector215.Y * 0.5f, 100, alpha, 1.5f);
					Dust dust8 = Main.dust[num26];
					dust8.velocity = dust8.velocity * 0.1f;
					Main.dust[num26].velocity.Y = Main.dust[num26].velocity.Y - 0.5f;
				}
			}
			if (Main.npc[i].dripping && Main.rand.Next(4) != 0)
			{
				Vector2 y10 = Main.npc[i].position;
				y10.X = y10.X - 2f;
				y10.Y = y10.Y - 2f;
				if (Main.rand.Next(2) != 0)
				{
					alpha = new Microsoft.Xna.Framework.Color();
					int num27 = Dust.NewDust(y10, Main.npc[i].width + 8, Main.npc[i].height + 8, 211, 0f, 0f, 50, alpha, 1.1f);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust9 = Main.dust[num27];
						dust9.alpha = dust9.alpha + 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Dust dust10 = Main.dust[num27];
						dust10.alpha = dust10.alpha + 25;
					}
					Main.dust[num27].noLight = true;
					Main.dust[num27].noGravity = true;
					Dust dust11 = Main.dust[num27];
					dust11.velocity = dust11.velocity * 0.2f;
					Main.dust[num27].velocity.Y = Main.dust[num27].velocity.Y + 1f;
					Dust dust12 = Main.dust[num27];
					dust12.velocity = dust12.velocity + Main.npc[i].velocity;
				}
				else
				{
					alpha = new Microsoft.Xna.Framework.Color();
					int num28 = Dust.NewDust(y10, Main.npc[i].width + 4, Main.npc[i].height + 2, 211, 0f, 0f, 50, alpha, 0.8f);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust13 = Main.dust[num28];
						dust13.alpha = dust13.alpha + 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Dust dust14 = Main.dust[num28];
						dust14.alpha = dust14.alpha + 25;
					}
					Main.dust[num28].noLight = true;
					Dust dust15 = Main.dust[num28];
					dust15.velocity = dust15.velocity * 0.2f;
					Main.dust[num28].velocity.Y = Main.dust[num28].velocity.Y + 0.2f;
					Dust dust16 = Main.dust[num28];
					dust16.velocity = dust16.velocity + Main.npc[i].velocity;
				}
			}
			if (Main.npc[i].drippingSlime)
			{
				if (Main.rand.Next(4) != 0)
				{
					int num29 = 175;
					Microsoft.Xna.Framework.Color color8 = new Microsoft.Xna.Framework.Color(0, 80, 255, 100);
					Vector2 y11 = Main.npc[i].position;
					y11.X = y11.X - 2f;
					y11.Y = y11.Y - 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num30 = Dust.NewDust(y11, Main.npc[i].width + 4, Main.npc[i].height + 2, 4, 0f, 0f, num29, color8, 1.4f);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust17 = Main.dust[num30];
							dust17.alpha = dust17.alpha + 25;
						}
						if (Main.rand.Next(2) == 0)
						{
							Dust dust18 = Main.dust[num30];
							dust18.alpha = dust18.alpha + 25;
						}
						Main.dust[num30].noLight = true;
						Dust dust19 = Main.dust[num30];
						dust19.velocity = dust19.velocity * 0.2f;
						Main.dust[num30].velocity.Y = Main.dust[num30].velocity.Y + 0.2f;
						Dust dust20 = Main.dust[num30];
						dust20.velocity = dust20.velocity + Main.npc[i].velocity;
					}
				}
				single17 = single17 * 0.8f;
				single18 = single18 * 0.8f;
				black = Main.buffColor(black, single17, single18, single19, single20);
			}
			if (Main.npc[i].ichor)
			{
				black = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
			}
			if (Main.npc[i].onFrostBurn)
			{
				if (Main.rand.Next(4) < 3)
				{
					Vector2 vector217 = new Vector2(Main.npc[i].position.X - 2f, Main.npc[i].position.Y - 2f);
					alpha = new Microsoft.Xna.Framework.Color();
					int num31 = Dust.NewDust(vector217, Main.npc[i].width + 4, Main.npc[i].height + 4, 135, Main.npc[i].velocity.X * 0.4f, Main.npc[i].velocity.Y * 0.4f, 100, alpha, 3.5f);
					Main.dust[num31].noGravity = true;
					Dust dust21 = Main.dust[num31];
					dust21.velocity = dust21.velocity * 1.8f;
					Main.dust[num31].velocity.Y = Main.dust[num31].velocity.Y - 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						Main.dust[num31].noGravity = false;
						Dust dust22 = Main.dust[num31];
						dust22.scale = dust22.scale * 0.5f;
					}
				}
				Lighting.AddLight((int)(Main.npc[i].position.X / 16f), (int)(Main.npc[i].position.Y / 16f + 1f), 0.1f, 0.6f, 1f);
			}
			if (Main.npc[i].onFire2)
			{
				if (Main.rand.Next(4) < 3)
				{
					Vector2 vector218 = new Vector2(Main.npc[i].position.X - 2f, Main.npc[i].position.Y - 2f);
					alpha = new Microsoft.Xna.Framework.Color();
					int num32 = Dust.NewDust(vector218, Main.npc[i].width + 4, Main.npc[i].height + 4, 75, Main.npc[i].velocity.X * 0.4f, Main.npc[i].velocity.Y * 0.4f, 100, alpha, 3.5f);
					Main.dust[num32].noGravity = true;
					Dust dust23 = Main.dust[num32];
					dust23.velocity = dust23.velocity * 1.8f;
					Main.dust[num32].velocity.Y = Main.dust[num32].velocity.Y - 0.5f;
					if (Main.rand.Next(4) == 0)
					{
						Main.dust[num32].noGravity = false;
						Dust dust24 = Main.dust[num32];
						dust24.scale = dust24.scale * 0.5f;
					}
				}
				Lighting.AddLight((int)(Main.npc[i].position.X / 16f), (int)(Main.npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
			}
			if (Main.player[Main.myPlayer].detectCreature && Main.npc[i].lifeMax > 1)
			{
				if (Main.npc[i].friendly || Main.npc[i].catchItem > 0 || Main.npc[i].damage == 0 && Main.npc[i].lifeMax == 5)
				{
					num = 50;
					num1 = 255;
					num2 = 50;
				}
				else
				{
					num = 255;
					num1 = 50;
					num2 = 50;
				}
				if (black.R < num)
				{
					black.R = num;
				}
				if (black.G < num1)
				{
					black.G = num1;
				}
				if (black.B < num2)
				{
					black.B = num2;
				}
			}
			if (num3 == 50)
			{
				Vector2 zero = Vector2.Zero;
				float x14 = 0f;
				zero.Y = zero.Y - Main.npc[i].velocity.Y;
				zero.X = zero.X - Main.npc[i].velocity.X * 2f;
				x14 = x14 + Main.npc[i].velocity.X * 0.05f;
				if (Main.npc[i].frame.Y == 120)
				{
					zero.Y = zero.Y + 2f;
				}
				if (Main.npc[i].frame.Y == 360)
				{
					zero.Y = zero.Y - 2f;
				}
				if (Main.npc[i].frame.Y == 480)
				{
					zero.Y = zero.Y - 6f;
				}
				Main.spriteBatch.Draw(Main.ninjaTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) + zero.X, Main.npc[i].position.Y - Main.screenPosition.Y + (float)(Main.npc[i].height / 2) + zero.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.ninjaTexture.Width, Main.ninjaTexture.Height)), black, x14, new Vector2((float)(Main.ninjaTexture.Width / 2), (float)(Main.ninjaTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
			}
			if (num3 == 71)
			{
				Vector2 zero1 = Vector2.Zero;
				float x15 = 0f;
				zero1.Y = zero1.Y - Main.npc[i].velocity.Y * 0.3f;
				zero1.X = zero1.X - Main.npc[i].velocity.X * 0.6f;
				x15 = x15 + Main.npc[i].velocity.X * 0.09f;
				if (Main.npc[i].frame.Y == 120)
				{
					zero1.Y = zero1.Y + 2f;
				}
				if (Main.npc[i].frame.Y == 360)
				{
					zero1.Y = zero1.Y - 2f;
				}
				if (Main.npc[i].frame.Y == 480)
				{
					zero1.Y = zero1.Y - 6f;
				}
				Main.spriteBatch.Draw(Main.itemTexture[327], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) + zero1.X, Main.npc[i].position.Y - Main.screenPosition.Y + (float)(Main.npc[i].height / 2) + zero1.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[327].Width, Main.itemTexture[327].Height)), black, x15, new Vector2((float)(Main.itemTexture[327].Width / 2), (float)(Main.itemTexture[327].Height / 2)), 1f, SpriteEffects.None, 0f);
			}
			if (num3 == 69)
			{
				Main.spriteBatch.Draw(Main.antLionTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height + 14f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.antLionTexture.Width, Main.antLionTexture.Height)), black, -Main.npc[i].rotation * 0.3f, new Vector2((float)(Main.antLionTexture.Width / 2), (float)(Main.antLionTexture.Height / 2)), 1f, SpriteEffects.None, 0f);
			}
			if (num3 == 1 && Main.npc[i].ai[1] > 0f)
			{
				int num33 = (int)Main.npc[i].ai[1];
				float single21 = 1f;
				float single22 = 22f * Main.npc[i].scale;
				float single23 = 18f * Main.npc[i].scale;
				float width = (float)Main.itemTexture[num33].Width;
				float height = (float)Main.itemTexture[num33].Height;
				if (width > single22)
				{
					single21 = single21 * (single22 / width);
					width = width * single21;
					height = height * single21;
				}
				if (height > single23)
				{
					single21 = single21 * (single23 / height);
					width = width * single21;
					height = height * single21;
				}
				float single24 = -1f;
				float single25 = 1f;
				int y12 = Main.npc[i].frame.Y / (Main.npcTexture[num3].Height / Main.npcFrameCount[num3]);
				single25 = single25 - (float)y12;
				single24 = single24 + (float)(y12 * 2);
				float single26 = 0.2f - 0.3f * (float)y12;
				nullable = null;
				Main.spriteBatch.Draw(Main.itemTexture[num33], new Vector2(Main.npc[i].Center.X - Main.screenPosition.X + single24, Main.npc[i].Center.Y - Main.screenPosition.Y + Main.npc[i].gfxOffY + single25), nullable, black, single26, new Vector2((float)(Main.itemTexture[num33].Width / 2), (float)(Main.itemTexture[num33].Height / 2)), single21, SpriteEffects.None, 0f);
			}
			float single27 = 0f;
			float single28 = Main.NPCAddHeight(i);
			Vector2 y13 = new Vector2((float)(Main.npcTexture[num3].Width / 2), (float)(Main.npcTexture[num3].Height / Main.npcFrameCount[num3] / 2));
			if (num3 == 108 || num3 == 124)
			{
				single27 = 2f;
			}
			else if (num3 == 357)
			{
				single27 = Main.npc[i].localAI[0];
			}
			else if (num3 == 467)
			{
				single27 = 7f;
			}
			else if (num3 == 537)
			{
				single27 = 2f;
			}
			else if (num3 == 509)
			{
				single27 = -6f;
			}
			else if (num3 == 490)
			{
				single27 = 4f;
			}
			else if (num3 == 484)
			{
				single27 = 2f;
			}
			else if (num3 == 483)
			{
				single27 = 14f;
			}
			else if (num3 == 477)
			{
				single28 = 22f;
			}
			else if (num3 == 478)
			{
				single27 = single27 - 2f;
			}
			else if (num3 == 469 && Main.npc[i].ai[2] == 1f)
			{
				single27 = 14f;
			}
			else if (num3 == 4)
			{
				y13 = new Vector2(55f, 107f);
			}
			else if (num3 == 125)
			{
				y13 = new Vector2(55f, 107f);
			}
			else if (num3 == 126)
			{
				y13 = new Vector2(55f, 107f);
			}
			else if (num3 == 63 || num3 == 64 || num3 == 103)
			{
				y13.Y = y13.Y + 4f;
			}
			else if (num3 == 69)
			{
				y13.Y = y13.Y + 8f;
			}
			else if (num3 == 262)
			{
				y13.Y = 77f;
				single28 = single28 + 26f;
			}
			else if (num3 == 264)
			{
				y13.Y = 21f;
				single28 = single28 + 2f;
			}
			else if (num3 == 266)
			{
				single28 = single28 + 50f;
			}
			else if (num3 == 268)
			{
				single28 = single28 + 16f;
			}
			else if (num3 == 288)
			{
				single28 = single28 + 6f;
			}
			if (Main.npc[i].aiStyle == 10 || num3 == 72)
			{
				black = Microsoft.Xna.Framework.Color.White;
			}
			SpriteEffects spriteEffect = SpriteEffects.None;
			if (Main.npc[i].spriteDirection == 1)
			{
				spriteEffect = SpriteEffects.FlipHorizontally;
			}
			if (num3 == 124 && Main.npc[i].localAI[0] == 0f)
			{
				int y14 = 0;
				if (Main.npc[i].frame.Y > 56)
				{
					y14 = y14 + 4;
				}
				y14 = y14 + Main.npc[i].frame.Y / 56;
				if (y14 >= (int)Main.OffsetsPlayerHeadgear.Length)
				{
					y14 = 0;
				}
				float y15 = Main.OffsetsPlayerHeadgear[y14].Y;
				this.LoadProjectile(582);
				Texture2D texture2D = Main.projectileTexture[582];
				Vector2 center = Main.npc[i].Center - Main.screenPosition;
				center = center - ((new Vector2((float)texture2D.Width, (float)(texture2D.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
				center = center + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY + y15);
				center = center + new Vector2((float)(-Main.npc[i].spriteDirection * 2), -2f);
				nullable = null;
				Main.spriteBatch.Draw(texture2D, center, nullable, Main.npc[i].GetAlpha(black), Main.npc[i].rotation, texture2D.Size() * new Vector2(0f, 0.5f), Main.npc[i].scale, spriteEffect, 0f);
			}
			if (num3 == 427 || num3 == 426 || num3 == 428 || num3 == 509 || num3 == 521 || num3 == 523)
			{
				Texture2D texture2D1 = Main.npcTexture[num3];
				Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
				float single29 = 0f;
				float single30 = 0f;
				int num34 = 0;
				int num35 = 0;
				int num36 = 1;
				int num37 = 15;
				int num38 = 0;
				float single31 = Main.npc[i].scale;
				float single32 = Main.npc[i].scale;
				int num39 = 0;
				float single33 = 0f;
				float single34 = 0f;
				float single35 = 0f;
				Microsoft.Xna.Framework.Color color9 = black;
				y = num3;
				switch (y)
				{
					case 426:
					{
						num39 = 4;
						single34 = 4f;
						single33 = (float)Math.Cos((double)(Main.GlobalTime % 1.2f / 1.2f * 6.28318548f)) / 2f + 0.5f;
						white = Microsoft.Xna.Framework.Color.Turquoise;
						single29 = 0.5f;
						num34 = 6;
						num35 = 2;
						num37 = num34;
						break;
					}
					case 427:
					{
						num34 = 8;
						num35 = 2;
						num37 = num34 * 3;
						break;
					}
					default:
					{
						if (y == 509)
						{
							num34 = 6;
							num35 = 2;
							num37 = num34 * 3;
							break;
						}
						else
						{
							switch (y)
							{
								case 521:
								{
									num34 = 10;
									num35 = 2;
									num37 = num34;
									num38 = 1;
									single32 = 0.3f;
									break;
								}
								case 523:
								{
									num39 = 3;
									single34 = 10f * Main.npc[i].scale;
									single29 = 0.5f;
									single30 = 0.8f;
									white = Microsoft.Xna.Framework.Color.HotPink;
									white.A = 128;
									single35 = Main.npc[i].localAI[0];
									single33 = Main.npc[i].localAI[1];
									break;
								}
							}
						}
						break;
					}
				}
				for (int n = num36; n < num34; n = n + num35)
				{
					Vector2 vector219 = Main.npc[i].oldPos[n];
					Microsoft.Xna.Framework.Color alpha1 = color9;
					alpha1 = Microsoft.Xna.Framework.Color.Lerp(alpha1, white, single29);
					alpha1 = Main.npc[i].GetAlpha(alpha1);
					alpha1 = alpha1 * ((float)(num34 - n) / (float)num37);
					float single36 = Main.npc[i].rotation;
					if (num38 == 1)
					{
						float single37 = Main.npc[i].oldRot[n];
					}
					float single38 = MathHelper.Lerp(single31, single32, 1f - (float)(num34 - n) / (float)num37);
					Vector2 vector220 = (Main.npc[i].oldPos[n] + (new Vector2((float)Main.npc[i].width, (float)Main.npc[i].height) / 2f)) - Main.screenPosition;
					vector220 = vector220 - ((new Vector2((float)texture2D1.Width, (float)(texture2D1.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
					vector220 = vector220 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
					Main.spriteBatch.Draw(texture2D1, vector220, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), alpha1, Main.npc[i].rotation, y13, single38, spriteEffect, 0f);
				}
				for (int o = 0; o < num39; o++)
				{
					Microsoft.Xna.Framework.Color alpha2 = Microsoft.Xna.Framework.Color.Lerp(black, white, single29);
					alpha2 = Main.npc[i].GetAlpha(alpha2);
					alpha2 = Microsoft.Xna.Framework.Color.Lerp(alpha2, white, single30);
					alpha2 = alpha2 * (1f - single33);
					Vector2 center1 = (Main.npc[i].Center + ((((float)o / (float)num39 * 6.28318548f + Main.npc[i].rotation + single35).ToRotationVector2() * single34) * single33)) - Main.screenPosition;
					center1 = center1 - ((new Vector2((float)texture2D1.Width, (float)(texture2D1.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
					center1 = center1 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
					Main.spriteBatch.Draw(texture2D1, center1, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), alpha2, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
				}
				Vector2 center2 = Main.npc[i].Center - Main.screenPosition;
				center2 = center2 - ((new Vector2((float)texture2D1.Width, (float)(texture2D1.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
				center2 = center2 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
				Main.spriteBatch.Draw(texture2D1, center2, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
				if (num3 == 427)
				{
					Main.spriteBatch.Draw(Main.glowMaskTexture[152], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
					return;
				}
				if (num3 == 426)
				{
					Main.spriteBatch.Draw(Main.glowMaskTexture[153], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
					return;
				}
			}
			else
			{
				if (num3 == 371 || num3 >= 454 && num3 <= 459)
				{
					Texture2D texture2D2 = Main.npcTexture[num3];
					Vector2 center3 = Main.npc[i].Center - Main.screenPosition;
					center3 = center3 - ((new Vector2((float)texture2D2.Width, (float)(texture2D2.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
					center3 = center3 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
					Main.spriteBatch.Draw(texture2D2, center3, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
					return;
				}
				if (num3 == 493 || num3 == 507 || num3 == 422 || num3 == 517)
				{
					Texture2D texture2D3 = Main.npcTexture[num3];
					Vector2 center4 = Main.npc[i].Center - Main.screenPosition;
					Vector2 vector221 = center4 - new Vector2(300f, 310f);
					center4 = center4 - ((new Vector2((float)texture2D3.Width, (float)(texture2D3.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
					center4 = center4 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
					Main.spriteBatch.Draw(texture2D3, center4, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
					if (num3 == 493)
					{
						texture2D3 = Main.glowMaskTexture[132];
						alpha = Main.npc[i].GetAlpha(black);
						vector3 = alpha.ToVector3() - new Vector3(0.5f);
						float single39 = 4f + vector3.Length() * 4f;
						for (int p = 0; p < 4; p++)
						{
							SpriteBatch spriteBatch = Main.spriteBatch;
							Vector2 vector222 = Main.npc[i].velocity;
							double num40 = (double)((float)p * 1.57079637f);
							vector2 = new Vector2();
							spriteBatch.Draw(texture2D3, center4 + (vector222.RotatedBy(num40, vector2) * single39), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * Main.npc[i].Opacity, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
						}
					}
					else if (num3 == 507)
					{
						texture2D3 = Main.glowMaskTexture[143];
						alpha = Main.npc[i].GetAlpha(black);
						vector3 = alpha.ToVector3() - new Vector3(0.5f);
						float single40 = 4f + vector3.Length() * 4f;
						for (int q = 0; q < 4; q++)
						{
							SpriteBatch spriteBatch1 = Main.spriteBatch;
							Vector2 vector223 = Main.npc[i].velocity;
							double num41 = (double)((float)q * 1.57079637f);
							vector2 = new Vector2();
							spriteBatch1.Draw(texture2D3, center4 + (vector223.RotatedBy(num41, vector2) * single40), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * Main.npc[i].Opacity, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
						}
					}
					else if (num3 == 422)
					{
						texture2D3 = Main.glowMaskTexture[149];
						alpha = Main.npc[i].GetAlpha(black);
						vector3 = alpha.ToVector3() - new Vector3(0.5f);
						float single41 = 4f + vector3.Length() * 4f;
						for (int r1 = 0; r1 < 4; r1++)
						{
							SpriteBatch spriteBatch2 = Main.spriteBatch;
							Vector2 vector224 = Main.npc[i].velocity;
							double num42 = (double)((float)r1 * 1.57079637f);
							vector2 = new Vector2();
							spriteBatch2.Draw(texture2D3, center4 + (vector224.RotatedBy(num42, vector2) * single41), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * Main.npc[i].Opacity, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
						}
					}
					else if (num3 == 517)
					{
						texture2D3 = Main.glowMaskTexture[162];
						alpha = Main.npc[i].GetAlpha(black);
						vector3 = alpha.ToVector3() - new Vector3(0.5f);
						float single42 = 2f + vector3.Length() * 9f;
						for (int s = 0; s < 4; s++)
						{
							SpriteBatch spriteBatch3 = Main.spriteBatch;
							Vector2 vector225 = Main.npc[i].velocity;
							double num43 = (double)((float)s * 1.57079637f);
							vector2 = new Vector2();
							spriteBatch3.Draw(texture2D3, (center4 + (vector225.RotatedBy(num43, vector2) * single42)) + (Vector2.UnitX * 2f), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0) * Main.npc[i].Opacity, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
						}
					}
					int shieldStrengthTowerVortex = 0;
					string str = "";
					y = num3;
					if (y <= 493)
					{
						if (y == 422)
						{
							shieldStrengthTowerVortex = NPC.ShieldStrengthTowerVortex;
							str = "Vortex";
						}
						else if (y == 493)
						{
							shieldStrengthTowerVortex = NPC.ShieldStrengthTowerStardust;
							str = "Stardust";
						}
					}
					else if (y == 507)
					{
						shieldStrengthTowerVortex = NPC.ShieldStrengthTowerNebula;
						str = "Nebula";
					}
					else if (y == 517)
					{
						shieldStrengthTowerVortex = NPC.ShieldStrengthTowerSolar;
						str = "Solar";
					}
					float shieldStrengthTowerMax = (float)shieldStrengthTowerVortex / (float)NPC.ShieldStrengthTowerMax;
					if (shieldStrengthTowerVortex <= 0)
					{
						if (Main.npc[i].ai[3] <= 0f)
						{
							Filters.Scene[str].GetShader().UseIntensity(0f).UseProgress(0f);
							return;
						}
						Main.spriteBatch.End();
						Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone);
						float single43 = Main.npc[i].ai[3] / 120f;
						float single44 = Math.Min(Main.npc[i].ai[3] / 30f, 1f);
						Filters.Scene[str].GetShader().UseIntensity(Math.Min(5f, 15f * single43) + 1f).UseProgress(single43);
						DrawData drawDatum = new DrawData(TextureManager.Load("Images/Misc/Perlin"), vector221 + new Vector2(300f, 300f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 600, 600)), new Microsoft.Xna.Framework.Color(new Vector4(1f - (float)Math.Sqrt((double)single44))), Main.npc[i].rotation, new Vector2(300f, 300f), Main.npc[i].scale * (1f + single44), spriteEffect, 0);
						GameShaders.Misc["ForceField"].UseColor(new Vector3(2f));
						GameShaders.Misc["ForceField"].Apply(new DrawData?(drawDatum));
						drawDatum.Draw(Main.spriteBatch);
						Main.spriteBatch.End();
						Main.spriteBatch.Begin();
						return;
					}
					Main.spriteBatch.End();
					Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.PointWrap, DepthStencilState.Default, RasterizerState.CullNone);
					float single45 = 0f;
					if (Main.npc[i].ai[3] > 0f && Main.npc[i].ai[3] <= 30f)
					{
						single45 = 1f - Main.npc[i].ai[3] / 30f;
					}
					Filters.Scene[str].GetShader().UseIntensity(1f + single45).UseProgress(0f);
					DrawData drawDatum1 = new DrawData(TextureManager.Load("Images/Misc/Perlin"), vector221 + new Vector2(300f, 300f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, 600, 600)), Microsoft.Xna.Framework.Color.White * (shieldStrengthTowerMax * 0.8f + 0.2f), Main.npc[i].rotation, new Vector2(300f, 300f), Main.npc[i].scale * (1f + single45 * 0.05f), spriteEffect, 0);
					GameShaders.Misc["ForceField"].UseColor(new Vector3(1f + single45 * 0.5f));
					GameShaders.Misc["ForceField"].Apply(new DrawData?(drawDatum1));
					drawDatum1.Draw(Main.spriteBatch);
					Main.spriteBatch.End();
					Main.spriteBatch.Begin();
					return;
				}
				if (num3 == 402)
				{
					this.LoadNPC(403);
					this.LoadNPC(404);
					NPC nPC = Main.npc[i];
					Texture2D texture2D4 = Main.npcTexture[nPC.type];
					Vector2 center5 = nPC.Center - Main.screenPosition;
					center5 = center5 - ((new Vector2((float)texture2D4.Width, (float)(texture2D4.Height / Main.npcFrameCount[nPC.type])) * nPC.scale) / 2f);
					center5 = center5 + (y13 * nPC.scale) + new Vector2(0f, single27 + single28 + nPC.gfxOffY);
					int num44 = 0;
					float length = 2f / (float)((int)nPC.oldPos.Length) * 0.7f;
					for (int t = (int)nPC.oldPos.Length - 1; (float)t >= 1f; t = t - 2)
					{
						texture2D4 = (num44 != 0 ? Main.npcTexture[403] : Main.npcTexture[404]);
						nullable = null;
						Main.spriteBatch.Draw(texture2D4, (center5 + nPC.oldPos[t]) - nPC.position, nullable, nPC.GetAlpha(black) * (0.8f - length * (float)t / 2f), nPC.oldRot[t], y13, nPC.scale, spriteEffect, 0f);
						texture2D4 = (num44 != 0 ? Main.glowMaskTexture[133] : Main.glowMaskTexture[134]);
						nullable = null;
						Main.spriteBatch.Draw(texture2D4, (center5 + nPC.oldPos[t]) - nPC.position, nullable, new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - length * (float)t / 2f), nPC.oldRot[t], y13, nPC.scale, spriteEffect, 0f);
						num44++;
					}
					texture2D4 = Main.npcTexture[nPC.type];
					Main.spriteBatch.Draw(texture2D4, center5, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
					texture2D4 = Main.glowMaskTexture[135];
					Main.spriteBatch.Draw(texture2D4, center5, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
					return;
				}
				if (num3 == 519)
				{
					NPC nPC1 = Main.npc[i];
					Texture2D texture2D5 = Main.npcTexture[nPC1.type];
					Vector2 center6 = nPC1.Center - Main.screenPosition;
					center6 = center6 - ((new Vector2((float)texture2D5.Width, (float)(texture2D5.Height / Main.npcFrameCount[nPC1.type])) * nPC1.scale) / 2f);
					center6 = center6 + (y13 * nPC1.scale) + new Vector2(0f, single27 + single28 + nPC1.gfxOffY);
					texture2D5 = Main.npcTexture[nPC1.type];
					Main.spriteBatch.Draw(texture2D5, center6, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
					int num45 = 0;
					float length1 = 1f / (float)((int)nPC1.oldPos.Length) * 0.7f;
					for (int u = (int)nPC1.oldPos.Length - 1; (float)u >= 0f; u--)
					{
						float length2 = (float)((int)nPC1.oldPos.Length - u) / (float)((int)nPC1.oldPos.Length);
						Microsoft.Xna.Framework.Color pink = Microsoft.Xna.Framework.Color.Pink;
						pink = pink * (1f - length1 * (float)u / 1f);
						pink.A = (byte)((float)pink.A * (1f - length2));
						nullable = null;
						Main.spriteBatch.Draw(texture2D5, (center6 + nPC1.oldPos[u]) - nPC1.position, nullable, pink, nPC1.oldRot[u], y13, nPC1.scale * MathHelper.Lerp(0.3f, 1.1f, length2), spriteEffect, 0f);
						num45++;
					}
					return;
				}
				if (num3 == 522)
				{
					NPC nPC2 = Main.npc[i];
					Texture2D texture2D6 = Main.npcTexture[nPC2.type];
					Vector2 center7 = nPC2.Center - Main.screenPosition;
					center7 = center7 - ((new Vector2((float)texture2D6.Width, (float)(texture2D6.Height / Main.npcFrameCount[nPC2.type])) * nPC2.scale) / 2f);
					center7 = center7 + (y13 * nPC2.scale) + new Vector2(0f, single27 + single28 + nPC2.gfxOffY);
					int num46 = 0;
					float length3 = 1f / (float)((int)nPC2.oldPos.Length) * 1.1f;
					for (int v = (int)nPC2.oldPos.Length - 1; (float)v >= 0f; v--)
					{
						float length4 = (float)((int)nPC2.oldPos.Length - v) / (float)((int)nPC2.oldPos.Length);
						Microsoft.Xna.Framework.Color a = Microsoft.Xna.Framework.Color.White;
						a = a * (1f - length3 * (float)v / 1f);
						a.A = (byte)((float)a.A * (1f - length4));
						nullable = null;
						Main.spriteBatch.Draw(texture2D6, (center7 + nPC2.oldPos[v]) - nPC2.position, nullable, a, nPC2.oldRot[v], y13, nPC2.scale * MathHelper.Lerp(0.8f, 0.3f, length4), spriteEffect, 0f);
						num46++;
					}
					texture2D6 = Main.extraTexture[57];
					nullable = null;
					Main.spriteBatch.Draw(texture2D6, center7, nullable, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), 0f, texture2D6.Size() / 2f, Main.npc[i].scale, spriteEffect, 0f);
					return;
				}
				if (num3 == 488)
				{
					return;
				}
				if (num3 == 370 || num3 == 372 || num3 == 373)
				{
					Texture2D texture2D7 = Main.npcTexture[num3];
					Microsoft.Xna.Framework.Color blue = Microsoft.Xna.Framework.Color.White;
					float single46 = 0f;
					bool flag5 = (num3 != 370 ? false : Main.npc[i].ai[0] > 4f);
					bool flag6 = (num3 != 370 ? false : Main.npc[i].ai[0] > 9f);
					int num47 = 120;
					int num48 = 60;
					Microsoft.Xna.Framework.Color color10 = black;
					if (flag6)
					{
						black = Main.buffColor(black, 0.4f, 0.8f, 0.4f, 1f);
					}
					else if (flag5)
					{
						black = Main.buffColor(black, 0.5f, 0.7f, 0.5f, 1f);
					}
					else if (num3 == 370 && Main.npc[i].ai[0] == 4f && Main.npc[i].ai[2] > (float)num47)
					{
						float single47 = Main.npc[i].ai[2] - (float)num47;
						single47 = single47 / (float)num48;
						black = Main.buffColor(black, 1f - 0.5f * single47, 1f - 0.3f * single47, 1f - 0.5f * single47, 1f);
					}
					int num49 = 10;
					int num50 = 2;
					if (num3 == 370)
					{
						if (Main.npc[i].ai[0] == -1f)
						{
							num49 = 0;
						}
						if (Main.npc[i].ai[0] == 0f || Main.npc[i].ai[0] == 5f || Main.npc[i].ai[0] == 10f)
						{
							num49 = 7;
						}
						if (Main.npc[i].ai[0] != 1f)
						{
							color10 = black;
						}
						else
						{
							blue = Microsoft.Xna.Framework.Color.Blue;
							single46 = 0.5f;
						}
					}
					else if ((num3 == 372 || num3 == 373) && Main.npc[i].ai[0] == 1f)
					{
						blue = Microsoft.Xna.Framework.Color.Blue;
						single46 = 0.5f;
					}
					for (int w = 1; w < num49; w = w + num50)
					{
						Vector2 vector226 = Main.npc[i].oldPos[w];
						Microsoft.Xna.Framework.Color alpha3 = Microsoft.Xna.Framework.Color.Lerp(color10, blue, single46);
						alpha3 = Main.npc[i].GetAlpha(alpha3);
						alpha3 = alpha3 * ((float)(num49 - w) / 15f);
						Vector2 vector227 = (Main.npc[i].oldPos[w] + (new Vector2((float)Main.npc[i].width, (float)Main.npc[i].height) / 2f)) - Main.screenPosition;
						vector227 = vector227 - ((new Vector2((float)texture2D7.Width, (float)(texture2D7.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
						vector227 = vector227 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
						Main.spriteBatch.Draw(texture2D7, vector227, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), alpha3, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
					}
					int num51 = 0;
					float single48 = 0f;
					float single49 = 0f;
					if (num3 == 370)
					{
						if (Main.npc[i].ai[0] == -1f)
						{
							num51 = 0;
						}
						if (Main.npc[i].ai[0] == 3f || Main.npc[i].ai[0] == 8f)
						{
							int num52 = 60;
							int num53 = 30;
							if (Main.npc[i].ai[2] > (float)num52)
							{
								num51 = 6;
								single48 = 1f - (float)Math.Cos((double)((Main.npc[i].ai[2] - (float)num52) / (float)num53 * 6.28318548f));
								single48 = single48 / 3f;
								single49 = 40f;
							}
						}
						if (Main.npc[i].ai[0] == 4f && Main.npc[i].ai[2] > (float)num47)
						{
							num51 = 6;
							single48 = 1f - (float)Math.Cos((double)((Main.npc[i].ai[2] - (float)num47) / (float)num48 * 6.28318548f));
							single48 = single48 / 3f;
							single49 = 60f;
						}
						if (Main.npc[i].ai[0] == 9f && Main.npc[i].ai[2] > (float)num47)
						{
							num51 = 6;
							single48 = 1f - (float)Math.Cos((double)((Main.npc[i].ai[2] - (float)num47) / (float)num48 * 6.28318548f));
							single48 = single48 / 3f;
							single49 = 60f;
						}
						if (Main.npc[i].ai[0] == 12f)
						{
							num51 = 6;
							single48 = 1f - (float)Math.Cos((double)(Main.npc[i].ai[2] / 30f * 6.28318548f));
							single48 = single48 / 3f;
							single49 = 20f;
						}
					}
					for (int x16 = 0; x16 < num51; x16++)
					{
						Microsoft.Xna.Framework.Color alpha4 = Microsoft.Xna.Framework.Color.Lerp(black, blue, single46);
						alpha4 = Main.npc[i].GetAlpha(alpha4);
						alpha4 = alpha4 * (1f - single48);
						Vector2 center8 = (Main.npc[i].Center + ((((float)x16 / (float)num51 * 6.28318548f + Main.npc[i].rotation).ToRotationVector2() * single49) * single48)) - Main.screenPosition;
						center8 = center8 - ((new Vector2((float)texture2D7.Width, (float)(texture2D7.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
						center8 = center8 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
						Main.spriteBatch.Draw(texture2D7, center8, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), alpha4, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
					}
					Vector2 center9 = Main.npc[i].Center - Main.screenPosition;
					center9 = center9 - ((new Vector2((float)texture2D7.Width, (float)(texture2D7.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
					center9 = center9 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
					Main.spriteBatch.Draw(texture2D7, center9, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
					if (num3 == 370 && Main.npc[i].ai[0] >= 4f)
					{
						texture2D7 = Main.dukeFishronTexture;
						Microsoft.Xna.Framework.Color color11 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.White, Microsoft.Xna.Framework.Color.Yellow, 0.5f);
						blue = Microsoft.Xna.Framework.Color.Yellow;
						single46 = 1f;
						single48 = 0.5f;
						single49 = 10f;
						num50 = 1;
						if (Main.npc[i].ai[0] == 4f)
						{
							float single50 = Main.npc[i].ai[2] - (float)num47;
							single50 = single50 / (float)num48;
							blue = blue * single50;
							color11 = color11 * single50;
						}
						if (Main.npc[i].ai[0] == 12f)
						{
							float single51 = Main.npc[i].ai[2];
							single51 = single51 / 30f;
							if (single51 > 0.5f)
							{
								single51 = 1f - single51;
							}
							single51 = single51 * 2f;
							single51 = 1f - single51;
							blue = blue * single51;
							color11 = color11 * single51;
						}
						for (int y16 = 1; y16 < num49; y16 = y16 + num50)
						{
							Vector2 vector228 = Main.npc[i].oldPos[y16];
							Microsoft.Xna.Framework.Color color12 = Microsoft.Xna.Framework.Color.Lerp(color11, blue, single46);
							color12 = color12 * ((float)(num49 - y16) / 15f);
							Vector2 vector229 = (Main.npc[i].oldPos[y16] + (new Vector2((float)Main.npc[i].width, (float)Main.npc[i].height) / 2f)) - Main.screenPosition;
							vector229 = vector229 - ((new Vector2((float)texture2D7.Width, (float)(texture2D7.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
							vector229 = vector229 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
							Main.spriteBatch.Draw(texture2D7, vector229, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), color12, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
						}
						for (int a1 = 1; a1 < num51; a1++)
						{
							Microsoft.Xna.Framework.Color alpha5 = Microsoft.Xna.Framework.Color.Lerp(color11, blue, single46);
							alpha5 = Main.npc[i].GetAlpha(alpha5);
							alpha5 = alpha5 * (1f - single48);
							Vector2 center10 = (Main.npc[i].Center + ((((float)a1 / (float)num51 * 6.28318548f + Main.npc[i].rotation).ToRotationVector2() * single49) * single48)) - Main.screenPosition;
							center10 = center10 - ((new Vector2((float)texture2D7.Width, (float)(texture2D7.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
							center10 = center10 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
							Main.spriteBatch.Draw(texture2D7, center10, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), alpha5, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
						}
						Main.spriteBatch.Draw(texture2D7, center9, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), color11, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
						return;
					}
				}
				else
				{
					if (num3 == 439 || num3 == 440)
					{
						int y17 = Main.npc[i].frame.Y / (Main.npcTexture[num3].Height / Main.npcFrameCount[num3]);
						Texture2D texture2D8 = Main.npcTexture[num3];
						Texture2D texture2D9 = Main.extraTexture[30];
						Microsoft.Xna.Framework.Rectangle rectangle = texture2D9.Frame(1, 1, 0, 0);
						rectangle.Height = rectangle.Height / 2;
						if (y17 >= 4)
						{
							rectangle.Y = rectangle.Y + rectangle.Height;
						}
						Microsoft.Xna.Framework.Color white1 = Microsoft.Xna.Framework.Color.White;
						float single52 = 0f;
						Microsoft.Xna.Framework.Color color13 = black;
						int num54 = 0;
						int num55 = 0;
						int num56 = 0;
						if (Main.npc[i].ai[0] == -1f)
						{
							if (Main.npc[i].ai[1] >= 320f && Main.npc[i].ai[1] < 960f)
							{
								white1 = Microsoft.Xna.Framework.Color.White;
								single52 = 0.5f;
								num54 = 6;
								num55 = 2;
								num56 = 1;
							}
						}
						else if (Main.npc[i].ai[0] != 1f)
						{
							color13 = black;
						}
						else
						{
							white1 = Microsoft.Xna.Framework.Color.White;
							single52 = 0.5f;
							num54 = 4;
							num55 = 2;
							num56 = 1;
						}
						for (int b1 = num56; b1 < num54; b1 = b1 + num55)
						{
							Vector2 vector230 = Main.npc[i].oldPos[b1];
							Microsoft.Xna.Framework.Color alpha6 = color13;
							alpha6 = Microsoft.Xna.Framework.Color.Lerp(alpha6, white1, single52);
							alpha6 = Main.npc[i].GetAlpha(alpha6);
							alpha6 = alpha6 * ((float)(num54 - b1) / (float)num54);
							alpha6.A = 100;
							Vector2 vector231 = (Main.npc[i].oldPos[b1] + (new Vector2((float)Main.npc[i].width, (float)Main.npc[i].height) / 2f)) - Main.screenPosition;
							vector231 = vector231 - ((rectangle.Size() * Main.npc[i].scale) / 2f);
							vector231 = vector231 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
							Main.spriteBatch.Draw(texture2D9, vector231, new Microsoft.Xna.Framework.Rectangle?(rectangle), alpha6, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
						}
						int num57 = 0;
						float single53 = 0f;
						float single54 = 0f;
						if (Main.npc[i].ai[0] == 5f && Main.npc[i].ai[1] >= 0f && Main.npc[i].ai[1] < 30f)
						{
							num57 = 4;
							single53 = 1f - (float)Math.Cos((double)((Main.npc[i].ai[1] - 0f) / 30f * 3.14159274f));
							single53 = single53 / 2f;
							single54 = 70f;
						}
						for (int c = 0; c < num57; c++)
						{
							Microsoft.Xna.Framework.Color alpha7 = Microsoft.Xna.Framework.Color.Lerp(black, white1, single52);
							alpha7 = Main.npc[i].GetAlpha(alpha7);
							alpha7 = alpha7 * (1f - single53);
							Vector2 center11 = (Main.npc[i].Center + ((((float)c / (float)num57 * 6.28318548f + Main.npc[i].rotation).ToRotationVector2() * single54) * single53)) - Main.screenPosition;
							center11 = center11 - ((new Vector2((float)texture2D8.Width, (float)(texture2D8.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
							center11 = center11 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
							Main.spriteBatch.Draw(texture2D9, center11, new Microsoft.Xna.Framework.Rectangle?(rectangle), alpha7, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
						}
						Vector2 center12 = Main.npc[i].Center - Main.screenPosition;
						center12 = center12 - ((new Vector2((float)texture2D8.Width, (float)(texture2D8.Height / Main.npcFrameCount[num3])) * Main.npc[i].scale) / 2f);
						center12 = center12 + (y13 * Main.npc[i].scale) + new Vector2(0f, single27 + single28 + Main.npc[i].gfxOffY);
						Main.spriteBatch.Draw(texture2D8, center12, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
						return;
					}
					if (num3 == 392 || num3 == 393 || num3 == 394 || num3 == 395)
					{
						Texture2D texture2D10 = Main.npcTexture[num3];
						Vector2 center13 = (Main.npc[i].Center - Main.screenPosition) + (Vector2.UnitY * Main.npc[i].gfxOffY);
						center13 = center13.Floor();
						float single55 = 0f;
						if (num3 == 393)
						{
							single55 = -8f;
						}
						Main.spriteBatch.Draw(texture2D10, center13, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13 + (Vector2.UnitY * single55), Main.npc[i].scale, spriteEffect, 0f);
						if (num3 == 392)
						{
							Main.spriteBatch.Draw(Main.glowMaskTexture[48], center13, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), Main.npc[i].rotation, y13 + (Vector2.UnitY * single55), Main.npc[i].scale, spriteEffect, 0f);
						}
						if (num3 == 395)
						{
							Main.spriteBatch.Draw(Main.glowMaskTexture[49], center13, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), Main.npc[i].rotation, y13 + (Vector2.UnitY * single55), Main.npc[i].scale, spriteEffect, 0f);
						}
						if (num3 == 394)
						{
							Main.spriteBatch.Draw(Main.glowMaskTexture[50], center13, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), Main.npc[i].rotation, y13 + (Vector2.UnitY * single55), Main.npc[i].scale, spriteEffect, 0f);
							return;
						}
					}
					else
					{
						if (num3 == 83 || num3 == 84 || num3 == 179)
						{
							Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Microsoft.Xna.Framework.Color.White, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							return;
						}
						if (num3 >= 87 && num3 <= 92)
						{
							Microsoft.Xna.Framework.Color alpha8 = Main.npc[i].GetAlpha(black);
							byte r2 = (byte)((Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3);
							if (alpha8.R < r2)
							{
								alpha8.R = r2;
							}
							if (alpha8.G < r2)
							{
								alpha8.G = r2;
							}
							if (alpha8.B < r2)
							{
								alpha8.B = r2;
							}
							Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), alpha8, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							return;
						}
						if (num3 != 491)
						{
							if (num3 == 398)
							{
								bool flag7 = false;
								Texture2D texture2D11 = Main.npcTexture[num3];
								Texture2D texture2D12 = Main.extraTexture[16];
								Texture2D texture2D13 = Main.extraTexture[14];
								float single56 = 340f;
								float single57 = 0.5f;
								Vector2 vector232 = new Vector2(220f, -60f);
								Vector2 vector233 = new Vector2(76f, 66f);
								Texture2D texture2D14 = Main.extraTexture[13];
								Vector2 vector234 = new Vector2((float)texture2D14.Width, 278f);
								Vector2 vector235 = new Vector2(0f, 278f);
								Vector2 vector236 = new Vector2(0f, 76f);
								Vector2 center14 = Main.npc[i].Center;
								Microsoft.Xna.Framework.Point tileCoordinates = (Main.npc[i].Center + new Vector2(0f, -150f)).ToTileCoordinates();
								Microsoft.Xna.Framework.Color alpha9 = Main.npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(tileCoordinates.X, tileCoordinates.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
								for (int d = 0; d < 2; d++)
								{
									bool flag8 = d == 0;
									Vector2 vector237 = new Vector2((float)((flag8 ? -1 : 1)), 1f);
									int num58 = -1;
									int num59 = 0;
									while (num59 < 200)
									{
										if (!Main.npc[num59].active || Main.npc[num59].type != 397 || Main.npc[num59].ai[2] != (float)d || Main.npc[num59].ai[3] != (float)i)
										{
											num59++;
										}
										else
										{
											num58 = num59;
											break;
										}
									}
									if (num58 != -1)
									{
										Vector2 vector238 = center14 + (vector232 * vector237);
										Vector2 center15 = Main.npc[num58].Center + vector236;
										Vector2 vector239 = (center15 - vector238) * single57;
										if (flag7)
										{
											Dust[] dustArray = Main.dust;
											Vector2 vector240 = vector238 + vector239;
											alpha = new Microsoft.Xna.Framework.Color();
											dustArray[Dust.NewDust(vector240, 0, 0, 6, 0f, 0f, 0, alpha, 1f)].noGravity = true;
										}
										float single58 = (float)Math.Acos((double)(vector239.Length() / single56)) * -vector237.X;
										SpriteEffects spriteEffect1 = (flag8 ? SpriteEffects.None : SpriteEffects.FlipHorizontally);
										Vector2 width1 = vector233;
										if (!flag8)
										{
											width1.X = (float)texture2D13.Width - width1.X;
										}
										nullable = null;
										Main.spriteBatch.Draw(texture2D13, vector238 - Main.screenPosition, nullable, alpha9, vector239.ToRotation() - single58 - 1.57079637f, width1, 1f, spriteEffect1, 0f);
										if (flag7)
										{
											Dust[] dustArray1 = Main.dust;
											alpha = new Microsoft.Xna.Framework.Color();
											dustArray1[Dust.NewDust(vector238, 0, 0, 6, 0f, 0f, 0, alpha, 1f)].noGravity = true;
										}
										if (flag7)
										{
											Dust[] dustArray2 = Main.dust;
											alpha = new Microsoft.Xna.Framework.Color();
											dustArray2[Dust.NewDust(center14, 0, 0, 6, 0f, 0f, 0, alpha, 1f)].noGravity = true;
										}
										if (flag7)
										{
											Dust[] dustArray3 = Main.dust;
											Vector2 vector241 = new Vector2(0f, single56);
											double rotation = (double)(vector239.ToRotation() - single58 - 1.57079637f);
											vector2 = new Vector2();
											Vector2 vector242 = vector238 + vector241.RotatedBy(rotation, vector2);
											alpha = new Microsoft.Xna.Framework.Color();
											dustArray3[Dust.NewDust(vector242, 0, 0, 6, 0f, 0f, 0, alpha, 1f)].noGravity = true;
										}
									}
								}
								nullable = null;
								Main.spriteBatch.Draw(texture2D14, center14 - Main.screenPosition, nullable, alpha9, 0f, vector234, 1f, SpriteEffects.None, 0f);
								nullable = null;
								Main.spriteBatch.Draw(texture2D14, center14 - Main.screenPosition, nullable, alpha9, 0f, vector235, 1f, SpriteEffects.FlipHorizontally, 0f);
								nullable = null;
								Main.spriteBatch.Draw(texture2D12, center14 - Main.screenPosition, nullable, alpha9, 0f, new Vector2(112f, 101f), 1f, SpriteEffects.None, 0f);
								Main.spriteBatch.Draw(texture2D11, center14 - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), alpha9, 0f, Main.npc[i].frame.Size() / 2f, 1f, SpriteEffects.None, 0f);
								return;
							}
							if (num3 == 397)
							{
								Texture2D texture2D15 = Main.npcTexture[num3];
								float single59 = 0.5f;
								Vector2 vector243 = new Vector2(220f, -60f);
								Vector2 vector244 = new Vector2(0f, 76f);
								Texture2D texture2D16 = Main.extraTexture[15];
								Vector2 vector245 = new Vector2(60f, 30f);
								float single60 = 340f;
								Vector2 center16 = Main.npc[(int)Main.npc[i].ai[3]].Center;
								Microsoft.Xna.Framework.Point point = Main.npc[i].Center.ToTileCoordinates();
								Microsoft.Xna.Framework.Color alpha10 = Main.npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point.X, point.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
								bool flag9 = Main.npc[i].ai[2] == 0f;
								Vector2 vector246 = new Vector2((float)((flag9 ? -1 : 1)), 1f);
								Vector2 width2 = new Vector2(120f, 180f);
								if (!flag9)
								{
									width2.X = (float)texture2D15.Width - width2.X;
								}
								Texture2D texture2D17 = Main.extraTexture[17];
								Texture2D texture2D18 = Main.extraTexture[19];
								Vector2 width3 = new Vector2(26f, 42f);
								if (!flag9)
								{
									width3.X = (float)texture2D17.Width - width3.X;
								}
								Vector2 vector247 = new Vector2(30f, 66f);
								Vector2 vector248 = new Vector2(1f * -vector246.X, 3f);
								Texture2D texture2D19 = Main.extraTexture[26];
								Microsoft.Xna.Framework.Rectangle height1 = texture2D19.Frame(1, 1, 0, 0);
								height1.Height = height1.Height / 4;
								Vector2 vector249 = center16 + (vector243 * vector246);
								Vector2 center17 = Main.npc[i].Center + vector244;
								Vector2 vector250 = vector249 - center17;
								vector250 = vector250 * (1f - single59);
								Vector2 width4 = vector245;
								if (!flag9)
								{
									width4.X = (float)texture2D16.Width - width4.X;
								}
								float single61 = (float)Math.Acos((double)(vector250.Length() / single60)) * -vector246.X;
								nullable = null;
								Main.spriteBatch.Draw(texture2D16, center17 - Main.screenPosition, nullable, alpha10, vector250.ToRotation() + single61 - 1.57079637f, width4, 1f, spriteEffect, 0f);
								if (Main.npc[i].ai[0] != -2f)
								{
									nullable = null;
									Main.spriteBatch.Draw(texture2D17, Main.npc[i].Center - Main.screenPosition, nullable, alpha10, 0f, width3, 1f, spriteEffect, 0f);
									Vector2 vector251 = Utils.Vector2FromElipse(Main.npc[i].localAI[0].ToRotationVector2(), vector247 * Main.npc[i].localAI[1]);
									nullable = null;
									Main.spriteBatch.Draw(texture2D18, ((Main.npc[i].Center - Main.screenPosition) + vector251) + vector248, nullable, alpha10, 0f, new Vector2((float)texture2D18.Width, (float)texture2D18.Height) / 2f, 1f, SpriteEffects.None, 0f);
								}
								else
								{
									int num60 = (int)Main.npc[i].ai[1];
									num60 = num60 / 8;
									height1.Y = height1.Y + height1.Height * num60;
									Main.spriteBatch.Draw(texture2D19, Main.npc[i].Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(height1), alpha10, 0f, width3 - new Vector2(4f, 4f), 1f, spriteEffect, 0f);
								}
								Main.spriteBatch.Draw(texture2D15, Main.npc[i].Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), alpha10, 0f, width2, 1f, spriteEffect, 0f);
								return;
							}
							if (num3 == 396)
							{
								Texture2D texture2D20 = Main.npcTexture[num3];
								Vector2 vector252 = new Vector2(191f, 130f);
								Texture2D texture2D21 = Main.extraTexture[18];
								Texture2D texture2D22 = Main.extraTexture[19];
								Vector2 vector253 = new Vector2(19f, 34f);
								Vector2 vector254 = new Vector2(27f, 59f);
								Vector2 vector255 = new Vector2(0f, 0f);
								Texture2D texture2D23 = Main.extraTexture[25];
								Vector2 vector256 = new Vector2(0f, 214f);
								double num61 = (double)Main.npc[i].rotation;
								vector2 = new Vector2();
								Vector2 vector257 = vector256.RotatedBy(num61, vector2);
								Microsoft.Xna.Framework.Rectangle rectangle1 = texture2D23.Frame(1, 1, 0, 0);
								rectangle1.Height = rectangle1.Height / 3;
								rectangle1.Y = rectangle1.Y + rectangle1.Height * (int)(Main.npc[i].localAI[2] / 7f);
								Texture2D texture2D24 = Main.extraTexture[29];
								Vector2 vector258 = new Vector2(0f, 4f);
								double num62 = (double)Main.npc[i].rotation;
								vector2 = new Vector2();
								Vector2 vector259 = vector258.RotatedBy(num62, vector2);
								Microsoft.Xna.Framework.Rectangle height2 = texture2D24.Frame(1, 1, 0, 0);
								height2.Height = height2.Height / 4;
								height2.Y = height2.Y + height2.Height * (int)(Main.npc[i].localAI[3] / 5f);
								Texture2D texture2D25 = Main.extraTexture[26];
								Microsoft.Xna.Framework.Rectangle rectangle2 = texture2D25.Frame(1, 1, 0, 0);
								rectangle2.Height = rectangle2.Height / 4;
								Vector2 center18 = Main.npc[(int)Main.npc[i].ai[3]].Center;
								Microsoft.Xna.Framework.Point tileCoordinates1 = Main.npc[i].Center.ToTileCoordinates();
								Microsoft.Xna.Framework.Color alpha11 = Main.npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(tileCoordinates1.X, tileCoordinates1.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
								if (Main.npc[i].ai[0] >= 0f)
								{
									nullable = null;
									Main.spriteBatch.Draw(texture2D21, Main.npc[i].Center - Main.screenPosition, nullable, alpha11, Main.npc[i].rotation, vector253, 1f, spriteEffect, 0f);
									Vector2 vector260 = Utils.Vector2FromElipse(Main.npc[i].localAI[0].ToRotationVector2(), vector254 * Main.npc[i].localAI[1]);
									nullable = null;
									Main.spriteBatch.Draw(texture2D22, ((Main.npc[i].Center - Main.screenPosition) + vector260) + vector255, nullable, alpha11, Main.npc[i].rotation, new Vector2((float)texture2D22.Width, (float)texture2D22.Height) / 2f, 1f, SpriteEffects.None, 0f);
								}
								else
								{
									int num63 = (int)Main.npc[i].ai[1];
									num63 = num63 / 8;
									rectangle2.Y = rectangle2.Y + rectangle2.Height * num63;
									Main.spriteBatch.Draw(texture2D25, Main.npc[i].Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha11, Main.npc[i].rotation, vector253 + new Vector2(4f, 4f), 1f, spriteEffect, 0f);
								}
								Main.spriteBatch.Draw(texture2D20, Main.npc[i].Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), alpha11, Main.npc[i].rotation, vector252, 1f, spriteEffect, 0f);
								Main.spriteBatch.Draw(texture2D24, ((Main.npc[i].Center - Main.screenPosition) + vector259).Floor(), new Microsoft.Xna.Framework.Rectangle?(height2), alpha11, Main.npc[i].rotation, height2.Size() / 2f, 1f, spriteEffect, 0f);
								Main.spriteBatch.Draw(texture2D23, ((Main.npc[i].Center - Main.screenPosition) + vector257).Floor(), new Microsoft.Xna.Framework.Rectangle?(rectangle1), alpha11, Main.npc[i].rotation, rectangle1.Size() / 2f, 1f, spriteEffect, 0f);
								return;
							}
							if (num3 == 400)
							{
								Texture2D texture2D26 = Main.npcTexture[num3];
								Texture2D texture2D27 = Main.extraTexture[19];
								Vector2 vector261 = new Vector2(40f, 40f);
								Vector2 vector262 = new Vector2(30f, 30f);
								Vector2 center19 = Main.npc[i].Center;
								Microsoft.Xna.Framework.Point point1 = Main.npc[i].Center.ToTileCoordinates();
								Microsoft.Xna.Framework.Color alpha12 = Main.npc[i].GetAlpha(Microsoft.Xna.Framework.Color.Lerp(Lighting.GetColor(point1.X, point1.Y), Microsoft.Xna.Framework.Color.White, 0.3f));
								Main.spriteBatch.Draw(texture2D26, Main.npc[i].Center - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), alpha12, Main.npc[i].rotation, vector261, 1f, spriteEffect, 0f);
								Vector2 vector263 = Utils.Vector2FromElipse(Main.npc[i].localAI[0].ToRotationVector2(), vector262 * Main.npc[i].localAI[1]);
								nullable = null;
								Main.spriteBatch.Draw(texture2D27, (Main.npc[i].Center - Main.screenPosition) + vector263, nullable, alpha12, Main.npc[i].rotation, texture2D27.Size() / 2f, Main.npc[i].localAI[2], SpriteEffects.None, 0f);
								return;
							}
							if (num3 == 384)
							{
								return;
							}
							if (num3 == 416)
							{
								int num64 = -1;
								int num65 = (int)Main.npc[i].ai[0];
								Vector2 vector264 = Main.npc[i].position;
								Vector2 zero2 = Vector2.Zero;
								if (Main.npc[num65].active && Main.npc[num65].type == 415)
								{
									num64 = num65;
								}
								if (num64 != -1)
								{
									Vector2 vector265 = Main.npc[i].position;
									Main.npc[i].Bottom = Main.npc[num64].Bottom;
									vector264 = Main.npc[i].position;
									Main.npc[i].position = vector265;
									Main.npc[i].gfxOffY = Main.npc[num64].gfxOffY;
									zero2 = Main.npc[num64].velocity;
								}
								Microsoft.Xna.Framework.Rectangle rectangle3 = Main.npc[i].frame;
								Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(vector264.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, vector264.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle3), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								Microsoft.Xna.Framework.Color color14 = Main.npc[i].color;
								alpha = new Microsoft.Xna.Framework.Color();
								if (color14 != alpha)
								{
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(vector264.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, vector264.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle3), Main.npc[i].GetColor(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
								Main.spriteBatch.Draw(Main.glowMaskTexture[156], ((vector264 + (Main.npc[i].Size * new Vector2(0.5f, 1f))) - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								alpha = Main.npc[i].GetAlpha(black);
								vector3 = alpha.ToVector3() - new Vector3(0.5f);
								float single62 = 0.5f + vector3.Length() * 0.5f;
								for (int e = 0; e < 4; e++)
								{
									SpriteBatch spriteBatch4 = Main.spriteBatch;
									Texture2D texture2D28 = Main.glowMaskTexture[156];
									Vector2 size = ((vector264 + (Main.npc[i].Size * new Vector2(0.5f, 1f))) - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY);
									double num66 = (double)((float)e * 1.57079637f);
									vector2 = new Vector2();
									spriteBatch4.Draw(texture2D28, size + (zero2.RotatedBy(num66, vector2) * single62), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
								return;
							}
							if (num3 == 399)
							{
								Texture2D texture2D29 = Main.npcTexture[num3];
								Vector2 unitY = (Main.npc[i].position - Main.screenPosition) + (Vector2.UnitY * Main.npc[i].gfxOffY);
								unitY = unitY.Floor();
								float single63 = 5f;
								for (int f = 0; (float)f < single63; f++)
								{
									float globalTime = 1f - (Main.GlobalTime + (float)f) % single63 / single63;
									Microsoft.Xna.Framework.Color limeGreen = Microsoft.Xna.Framework.Color.LimeGreen;
									if (Main.npc[i].ai[0] == 1f)
									{
										limeGreen = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.LimeGreen, Microsoft.Xna.Framework.Color.Red, MathHelper.Clamp(Main.npc[i].ai[1] / 20f, 0f, 1f));
									}
									if (Main.npc[i].ai[0] == 2f)
									{
										limeGreen = Microsoft.Xna.Framework.Color.Red;
									}
									limeGreen = limeGreen * (1f - globalTime);
									limeGreen.A = 0;
									for (int g1 = 0; g1 < 2; g1++)
									{
										nullable = null;
										Main.spriteBatch.Draw(Main.extraTexture[27], (Main.npc[i].Center - Main.screenPosition) + (Vector2.UnitY * (Main.npc[i].gfxOffY - 4f + 6f)), nullable, limeGreen, 1.57079637f, new Vector2(10f, 48f), globalTime * 4f, SpriteEffects.None, 0f);
									}
								}
								Main.spriteBatch.Draw(texture2D29, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								texture2D29 = Main.glowMaskTexture[100];
								Main.spriteBatch.Draw(texture2D29, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(127 - Main.npc[i].alpha / 2, 127 - Main.npc[i].alpha / 2, 127 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								texture2D29 = Main.extraTexture[20];
								Microsoft.Xna.Framework.Rectangle rectangle4 = texture2D29.Frame(1, 4, 0, (int)Main.npc[i].ai[0] + 1);
								Vector2 vector266 = new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)texture2D29.Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY + 18f + 6f);
								Main.spriteBatch.Draw(texture2D29, vector266, new Microsoft.Xna.Framework.Rectangle?(rectangle4), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								texture2D29 = Main.glowMaskTexture[101];
								Main.spriteBatch.Draw(texture2D29, vector266, new Microsoft.Xna.Framework.Rectangle?(rectangle4), new Microsoft.Xna.Framework.Color(127 - Main.npc[i].alpha / 2, 127 - Main.npc[i].alpha / 2, 127 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								return;
							}
							if (num3 == 94)
							{
								for (int h = 1; h < 6; h = h + 2)
								{
									Vector2 vector267 = Main.npc[i].oldPos[h];
									Microsoft.Xna.Framework.Color g2 = Main.npc[i].GetAlpha(black);
									g2.R = (byte)(g2.R * (10 - h) / 15);
									g2.G = (byte)(g2.G * (10 - h) / 15);
									g2.B = (byte)(g2.B * (10 - h) / 15);
									g2.A = (byte)(g2.A * (10 - h) / 15);
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].oldPos[h].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[h].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), g2, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							if (num3 == 125 || num3 == 126 || num3 == 127 || num3 == 128 || num3 == 129 || num3 == 130 || num3 == 131 || num3 == 139 || num3 == 140)
							{
								for (int i11 = 9; i11 >= 0; i11 = i11 - 2)
								{
									Vector2 vector268 = Main.npc[i].oldPos[i11];
									Microsoft.Xna.Framework.Color b2 = Main.npc[i].GetAlpha(black);
									b2.R = (byte)(b2.R * (10 - i11) / 20);
									b2.G = (byte)(b2.G * (10 - i11) / 20);
									b2.B = (byte)(b2.B * (10 - i11) / 20);
									b2.A = (byte)(b2.A * (10 - i11) / 20);
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].oldPos[i11].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[i11].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), b2, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							if (num3 == 417 && Main.npc[i].ai[0] >= 6f && Main.npc[i].ai[0] <= 6f)
							{
								for (int j1 = 5; j1 >= 0; j1--)
								{
									Vector2 vector269 = Main.npc[i].oldPos[j1];
									Microsoft.Xna.Framework.Color a2 = Main.npc[i].GetAlpha(black);
									a2.R = (byte)(a2.R * (10 - j1) / 20);
									a2.G = (byte)(a2.G * (10 - j1) / 20);
									a2.B = (byte)(a2.B * (10 - j1) / 20);
									a2.A = (byte)(a2.A * (10 - j1) / 20);
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].oldPos[j1].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[j1].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), a2, Main.npc[i].oldRot[j1], y13, MathHelper.Lerp(0.5f, 1f, (5f - (float)j1) / 6f), spriteEffect, 0f);
								}
							}
							if (num3 == 419 && Main.npc[i].ai[2] <= -9f)
							{
								int height3 = Main.glowMaskTexture[154].Height / Main.npcFrameCount[num3];
								int y18 = Main.npc[i].frame.Y / height3;
								for (int k1 = 6; k1 >= 0; k1--)
								{
									Vector2 vector270 = Main.npc[i].oldPos[k1];
									Microsoft.Xna.Framework.Color white2 = Microsoft.Xna.Framework.Color.White;
									white2.R = (byte)(255 * (10 - k1) / 20);
									white2.G = (byte)(255 * (10 - k1) / 20);
									white2.B = (byte)(255 * (10 - k1) / 20);
									white2.A = 0;
									Microsoft.Xna.Framework.Rectangle rectangle5 = Main.npc[i].frame;
									int num67 = (y18 - 3 - k1) % 3;
									if (num67 < 0)
									{
										num67 = num67 + 3;
									}
									num67 = num67 + 5;
									rectangle5.Y = height3 * num67;
									Main.spriteBatch.Draw(Main.glowMaskTexture[154], new Vector2(Main.npc[i].oldPos[k1].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[k1].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(rectangle5), white2, Main.npc[i].oldRot[k1], y13, MathHelper.Lerp(0.75f, 1.2f, (10f - (float)k1) / 10f), spriteEffect, 0f);
								}
							}
							if (num3 == 418 && (Main.npc[i].ai[0] == 2f || Main.npc[i].ai[0] == 4f))
							{
								Texture2D texture2D30 = Main.extraTexture[55];
								Vector2 vector271 = new Vector2((float)(texture2D30.Width / 2), (float)(texture2D30.Height / 8 + 14));
								int num68 = (int)Main.npc[i].ai[1] / 2;
								float single64 = -1.57079637f * (float)Main.npc[i].spriteDirection;
								float single65 = Main.npc[i].ai[1] / 45f;
								if (single65 > 1f)
								{
									single65 = 1f;
								}
								num68 = num68 % 4;
								for (int l1 = 6; l1 >= 0; l1--)
								{
									Vector2 vector272 = Main.npc[i].oldPos[l1];
									Microsoft.Xna.Framework.Color r3 = Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color.Gold, Microsoft.Xna.Framework.Color.OrangeRed, single65);
									r3 = Microsoft.Xna.Framework.Color.Lerp(r3, Microsoft.Xna.Framework.Color.Blue, (float)l1 / 12f);
									r3.A = (byte)(64f * single65);
									r3.R = (byte)(r3.R * (10 - l1) / 20);
									r3.G = (byte)(r3.G * (10 - l1) / 20);
									r3.B = (byte)(r3.B * (10 - l1) / 20);
									r3.A = (byte)(r3.A * (10 - l1) / 20);
									r3 = r3 * single65;
									int num69 = (num68 - l1) % 4;
									if (num69 < 0)
									{
										num69 = num69 + 4;
									}
									Microsoft.Xna.Framework.Rectangle rectangle6 = texture2D30.Frame(1, 4, 0, num69);
									Main.spriteBatch.Draw(texture2D30, new Vector2(Main.npc[i].oldPos[l1].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[l1].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(rectangle6), r3, Main.npc[i].oldRot[l1] + single64, vector271, MathHelper.Lerp(0.1f, 1.2f, (10f - (float)l1) / 10f), spriteEffect, 0f);
								}
							}
							if (num3 == 516)
							{
								int height4 = Main.npcTexture[num3].Height / Main.npcFrameCount[num3];
								int y19 = Main.npc[i].frame.Y / height4;
								for (int m1 = 6; m1 >= 0; m1--)
								{
									Vector2 vector273 = Main.npc[i].oldPos[m1];
									Microsoft.Xna.Framework.Color white3 = Microsoft.Xna.Framework.Color.White;
									white3.R = (byte)(255 * (10 - m1) / 20);
									white3.G = (byte)(255 * (10 - m1) / 20);
									white3.B = (byte)(255 * (10 - m1) / 20);
									white3.A = (byte)(255 * (10 - m1) / 20);
									white3 = Microsoft.Xna.Framework.Color.Lerp(white3, Microsoft.Xna.Framework.Color.Transparent, (float)m1 / 6f);
									Microsoft.Xna.Framework.Rectangle rectangle7 = Main.npc[i].frame;
									int num70 = (y19 - 4 - m1) % 4;
									if (num70 < 0)
									{
										num70 = num70 + 4;
									}
									rectangle7.Y = height4 * num70;
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].oldPos[m1].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[m1].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(rectangle7), white3, Main.npc[i].rotation, y13, MathHelper.Lerp(0.35f, 1.2f, (10f - (float)m1) / 10f), spriteEffect, 0f);
								}
							}
							Microsoft.Xna.Framework.Rectangle height5 = Main.npc[i].frame;
							if (num3 == 182 || num3 == 289)
							{
								height5.Height = height5.Height - 2;
							}
							if (Main.npc[i].aiStyle == 7)
							{
								NPC nPC3 = Main.npc[i];
								this.DrawNPCExtras(nPC3, true, single28, single27, black, y13, spriteEffect);
							}
							if (num3 == 346 && (double)Main.npc[i].life < (double)Main.npc[i].lifeMax * 0.5)
							{
								Main.spriteBatch.Draw(Main.santaTankTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 356)
							{
								height5.Height = height5.Height - 1;
								Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 360)
							{
								float single66 = 0f;
								if (Main.npc[i].ai[2] == 0f)
								{
									if (Main.npc[i].rotation == 3.14f || Main.npc[i].rotation == -3.14f)
									{
										single28 = 2f;
									}
									if (Main.npc[i].direction < 0 && (Main.npc[i].rotation == 1.57f || Main.npc[i].rotation == 4.71f))
									{
										single66 = 1f;
									}
									if (Main.npc[i].direction > 0 && (Main.npc[i].rotation == 1.57f || Main.npc[i].rotation == 4.71f))
									{
										single66 = -1f;
									}
								}
								Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale + single66, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 266 && Main.npc[i].life < Main.npc[i].lifeMax && Main.expertMode)
							{
								Microsoft.Xna.Framework.Color g3 = Main.npc[i].GetAlpha(black);
								float single67 = 1f - (float)Main.npc[i].life / (float)Main.npc[i].lifeMax;
								single67 = single67 * single67;
								g3.R = (byte)((float)g3.R * single67);
								g3.G = (byte)((float)g3.G * single67);
								g3.B = (byte)((float)g3.B * single67);
								g3.A = (byte)((float)g3.A * single67);
								for (int n1 = 0; n1 < 4; n1++)
								{
									Vector2 x17 = Main.npc[i].position;
									float single68 = Math.Abs(Main.npc[i].Center.X - Main.player[Main.myPlayer].Center.X);
									float single69 = Math.Abs(Main.npc[i].Center.Y - Main.player[Main.myPlayer].Center.Y);
									if (n1 == 0 || n1 == 2)
									{
										x17.X = Main.player[Main.myPlayer].Center.X + single68;
									}
									else
									{
										x17.X = Main.player[Main.myPlayer].Center.X - single68;
									}
									x17.X = x17.X - (float)(Main.npc[i].width / 2);
									if (n1 == 0 || n1 == 1)
									{
										x17.Y = Main.player[Main.myPlayer].Center.Y + single69;
									}
									else
									{
										x17.Y = Main.player[Main.myPlayer].Center.Y - single69;
									}
									x17.Y = x17.Y - (float)(Main.npc[i].height / 2);
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(x17.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, x17.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), g3, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
								Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 421 && Main.npc[i].ai[0] == 5f)
							{
								Player player = Main.player[Main.npc[i].target];
								if (player.gravDir == -1f)
								{
									spriteEffect = spriteEffect | SpriteEffects.FlipVertically;
								}
								Main.spriteBatch.Draw(Main.npcTexture[num3], (new Vector2((float)(player.direction * 4), player.gfxOffY) + (player.gravDir == 1f ? player.Top : player.Bottom)) - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(height5), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, height5.Size() / 2f, Main.npc[i].scale, spriteEffect, 0f);
								Main.spriteBatch.Draw(Main.glowMaskTexture[146], (new Vector2((float)(player.direction * 4), player.gfxOffY) + (player.gravDir == 1f ? player.Top : player.Bottom)) - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(height5), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, height5.Size() / 2f, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 != 518)
							{
								Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								Microsoft.Xna.Framework.Color color15 = Main.npc[i].color;
								alpha = new Microsoft.Xna.Framework.Color();
								if (color15 != alpha)
								{
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), Main.npc[i].GetColor(black), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else
							{
								Vector2 vector274 = new Vector2(-10f, 0f);
								Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), Main.npc[i].GetAlpha(black), Main.npc[i].rotation, y13 + vector274, Main.npc[i].scale, spriteEffect, 0f);
								Microsoft.Xna.Framework.Color color16 = Main.npc[i].color;
								alpha = new Microsoft.Xna.Framework.Color();
								if (color16 != alpha)
								{
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), Main.npc[i].GetColor(black), Main.npc[i].rotation, y13 + vector274, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							if (Main.npc[i].confused)
							{
								Main.spriteBatch.Draw(Main.confuseTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 - (float)Main.confuseTexture.Height - 20f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.confuseTexture.Width, Main.confuseTexture.Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, 70), Main.npc[i].velocity.X * -0.05f, new Vector2((float)(Main.confuseTexture.Width / 2), (float)(Main.confuseTexture.Height / 2)), Main.essScale + 0.2f, SpriteEffects.None, 0f);
							}
							if (num3 >= 134 && num3 <= 136 && black != Microsoft.Xna.Framework.Color.Black)
							{
								Main.spriteBatch.Draw(Main.destTexture[num3 - 134], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0) * (1f - (float)Main.npc[i].alpha / 255f), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 125)
							{
								Main.spriteBatch.Draw(Main.EyeLaserTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 139)
							{
								Main.spriteBatch.Draw(Main.probeTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 127)
							{
								Main.spriteBatch.Draw(Main.BoneEyesTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 131)
							{
								Main.spriteBatch.Draw(Main.BoneLaserTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 120)
							{
								for (int o1 = 1; o1 < (int)Main.npc[i].oldPos.Length; o1++)
								{
									Vector2 vector275 = Main.npc[i].oldPos[o1];
									Microsoft.Xna.Framework.Color color17 = new Microsoft.Xna.Framework.Color()
									{
										R = (byte)(150 * (10 - o1) / 15),
										G = (byte)(100 * (10 - o1) / 15),
										B = (byte)(150 * (10 - o1) / 15),
										A = (byte)(50 * (10 - o1) / 15)
									};
									Main.spriteBatch.Draw(Main.chaosTexture, new Vector2(Main.npc[i].oldPos[o1].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[o1].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), color17, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 137 || num3 == 138)
							{
								for (int p1 = 1; p1 < (int)Main.npc[i].oldPos.Length; p1++)
								{
									Vector2 vector276 = Main.npc[i].oldPos[p1];
									Microsoft.Xna.Framework.Color color18 = new Microsoft.Xna.Framework.Color()
									{
										R = (byte)(150 * (10 - p1) / 15),
										G = (byte)(100 * (10 - p1) / 15),
										B = (byte)(150 * (10 - p1) / 15),
										A = (byte)(50 * (10 - p1) / 15)
									};
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].oldPos[p1].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[p1].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), color18, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 327)
							{
								Main.spriteBatch.Draw(Main.pumpkingFaceTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Microsoft.Xna.Framework.Color.White, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								for (int q1 = 1; q1 < 10; q1++)
								{
									Microsoft.Xna.Framework.Color color19 = new Microsoft.Xna.Framework.Color(110 - q1 * 10, 110 - q1 * 10, 110 - q1 * 10, 110 - q1 * 10);
									Vector2 vector277 = new Vector2((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
									Main.spriteBatch.Draw(Main.pumpkingFaceTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28) + vector277, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), color19, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 325)
							{
								Main.spriteBatch.Draw(Main.treeFaceTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Microsoft.Xna.Framework.Color.White, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								for (int r11 = 1; r11 < 10; r11++)
								{
									Microsoft.Xna.Framework.Color color20 = new Microsoft.Xna.Framework.Color(110 - r11 * 10, 110 - r11 * 10, 110 - r11 * 10, 110 - r11 * 10);
									Vector2 vector278 = new Vector2((float)Main.rand.Next(-10, 11) * 0.2f, (float)Main.rand.Next(-10, 11) * 0.2f);
									Main.spriteBatch.Draw(Main.treeFaceTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28) + vector278, new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), color20, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 345)
							{
								Main.spriteBatch.Draw(Main.iceQueenTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Microsoft.Xna.Framework.Color.White, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								for (int s1 = 1; s1 < 5; s1++)
								{
									Microsoft.Xna.Framework.Color color21 = new Microsoft.Xna.Framework.Color(100 - s1 * 10, 100 - s1 * 10, 100 - s1 * 10, 100 - s1 * 10);
									Main.spriteBatch.Draw(Main.iceQueenTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28) - ((Main.npc[i].velocity * (float)s1) * 0.2f), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), color21, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 355)
							{
								Main.spriteBatch.Draw(Main.fireflyTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 358)
							{
								Main.spriteBatch.Draw(Main.lightningbugTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 82)
							{
								Main.spriteBatch.Draw(Main.wraithEyeTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Microsoft.Xna.Framework.Color.White, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								for (int t1 = 1; t1 < 10; t1++)
								{
									Microsoft.Xna.Framework.Color color22 = new Microsoft.Xna.Framework.Color(110 - t1 * 10, 110 - t1 * 10, 110 - t1 * 10, 110 - t1 * 10);
									Main.spriteBatch.Draw(Main.wraithEyeTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28) - ((Main.npc[i].velocity * (float)t1) * 0.5f), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), color22, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 253)
							{
								Main.spriteBatch.Draw(Main.reaperEyeTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 3f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), Microsoft.Xna.Framework.Color.White, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								for (int u1 = 1; u1 < 20; u1++)
								{
									Microsoft.Xna.Framework.Color color23 = new Microsoft.Xna.Framework.Color(210 - u1 * 20, 210 - u1 * 20, 210 - u1 * 20, 210 - u1 * 20);
									Main.spriteBatch.Draw(Main.reaperEyeTexture, new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 3f + y13.Y * Main.npc[i].scale + single28) - ((Main.npc[i].velocity * (float)u1) * 0.5f), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), color23, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 245 && Main.npc[i].alpha == 0)
							{
								Microsoft.Xna.Framework.Color color24 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
								Main.spriteBatch.Draw(Main.golemTexture[3], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), color24, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 246)
							{
								Microsoft.Xna.Framework.Color color25 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
								if (Main.npc[i].frame.Y < 222)
								{
									SpriteBatch spriteBatch5 = Main.spriteBatch;
									Texture2D texture2D31 = Main.golemTexture[1];
									Vector2 vector279 = new Vector2(Main.npc[i].Center.X - Main.screenPosition.X - 20f, Main.npc[i].Center.Y - Main.screenPosition.Y - 27f);
									Microsoft.Xna.Framework.Rectangle? nullable1 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.golemTexture[1].Width, Main.golemTexture[1].Height / 2));
									vector2 = new Vector2();
									spriteBatch5.Draw(texture2D31, vector279, nullable1, color25, 0f, vector2, 1f, SpriteEffects.None, 0f);
								}
								else if (Main.npc[i].frame.Y >= 444)
								{
									SpriteBatch spriteBatch6 = Main.spriteBatch;
									Texture2D texture2D32 = Main.golemTexture[2];
									Vector2 vector280 = new Vector2(Main.npc[i].Center.X - Main.screenPosition.X - 38f, Main.npc[i].Center.Y - Main.screenPosition.Y - 28f);
									Microsoft.Xna.Framework.Rectangle? nullable2 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.golemTexture[2].Height / 2, Main.golemTexture[2].Width, Main.golemTexture[2].Height / 4));
									vector2 = new Vector2();
									spriteBatch6.Draw(texture2D32, vector280, nullable2, color25, 0f, vector2, 1f, SpriteEffects.None, 0f);
								}
								else
								{
									SpriteBatch spriteBatch7 = Main.spriteBatch;
									Texture2D texture2D33 = Main.golemTexture[2];
									Vector2 vector281 = new Vector2(Main.npc[i].Center.X - Main.screenPosition.X + 26f, Main.npc[i].Center.Y - Main.screenPosition.Y - 28f);
									Microsoft.Xna.Framework.Rectangle? nullable3 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.golemTexture[2].Width, Main.golemTexture[2].Height / 4));
									vector2 = new Vector2();
									spriteBatch7.Draw(texture2D33, vector281, nullable3, color25, 0f, vector2, 1f, SpriteEffects.None, 0f);
								}
							}
							else if (num3 == 249)
							{
								Microsoft.Xna.Framework.Color color26 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, 0);
								SpriteBatch spriteBatch8 = Main.spriteBatch;
								Texture2D texture2D34 = Main.golemTexture[1];
								Vector2 vector282 = new Vector2(Main.npc[i].Center.X - Main.screenPosition.X - 20f, Main.npc[i].Center.Y - Main.screenPosition.Y - 47f);
								Microsoft.Xna.Framework.Rectangle? nullable4 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.golemTexture[1].Width, Main.golemTexture[1].Height / 2));
								vector2 = new Vector2();
								spriteBatch8.Draw(texture2D34, vector282, nullable4, color26, 0f, vector2, 1f, SpriteEffects.None, 0f);
							}
							else if (num3 == 383)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[11], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								if (Main.npc[i].ai[2] != 0f && Main.npc[(int)Main.npc[i].ai[2] - 1].active && Main.npc[(int)Main.npc[i].ai[2] - 1].type == 384)
								{
									float single70 = Main.npc[i].ai[2];
									nullable = null;
									Main.spriteBatch.Draw(Main.npcTexture[384], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), nullable, new Microsoft.Xna.Framework.Color(100, 100, 100, 0), Main.npc[i].rotation, new Vector2((float)Main.npcTexture[384].Width, (float)Main.npcTexture[384].Height) / 2f, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 381)
							{
								Vector2 zero3 = Vector2.Zero;
								Vector2 zero4 = Vector2.Zero;
								int height6 = Main.npcTexture[num3].Height / Main.npcFrameCount[num3];
								int y20 = Main.npc[i].frame.Y / height6;
								Microsoft.Xna.Framework.Rectangle rectangle8 = new Microsoft.Xna.Framework.Rectangle(0, 0, 32, 42);
								y = y20;
								switch (y)
								{
									case 0:
									{
										zero3 = zero3 + new Vector2(8f, 32f);
										break;
									}
									case 1:
									{
										zero3 = zero3 + new Vector2(6f, 72f);
										break;
									}
									case 2:
									{
										zero3 = zero3 + new Vector2(8f, 126f);
										break;
									}
									case 3:
									{
										zero3 = zero3 + new Vector2(6f, 174f);
										break;
									}
									case 4:
									{
										zero3 = zero3 + new Vector2(6f, 224f);
										break;
									}
									case 5:
									{
										zero3 = zero3 + new Vector2(8f, 272f);
										break;
									}
									case 6:
									{
										zero3 = zero3 + new Vector2(10f, 318f);
										break;
									}
									case 7:
									{
										zero3 = zero3 + new Vector2(14f, 366f);
										break;
									}
									case 8:
									{
										zero3 = zero3 + new Vector2(10f, 414f);
										break;
									}
								}
								zero3.Y = zero3.Y - (float)(height6 * y20);
								zero3 = zero3 - y13;
								int num71 = 2;
								if (Main.npc[i].ai[2] > 0f)
								{
									num71 = (int)Main.npc[i].ai[2] - 1;
								}
								if (Main.npc[i].velocity.Y != 0f)
								{
									num71 = 3;
								}
								rectangle8.Y = rectangle8.Y + 44 * num71;
								y = num71;
								switch (y)
								{
									case 0:
									{
										zero4 = new Vector2(10f, 18f);
										break;
									}
									case 1:
									{
										zero4 = new Vector2(8f, 20f);
										break;
									}
									case 2:
									{
										zero4 = new Vector2(8f, 20f);
										break;
									}
									case 3:
									{
										zero4 = new Vector2(8f, 20f);
										break;
									}
									case 4:
									{
										zero4 = new Vector2(6f, 18f);
										break;
									}
								}
								if (spriteEffect.HasFlag(SpriteEffects.FlipHorizontally))
								{
									zero3.X = zero3.X * -1f;
									zero4.X = (float)rectangle8.Width - zero4.X;
								}
								zero3 = zero3 + Main.npc[i].Center;
								zero3 = zero3 - Main.screenPosition;
								zero3.Y = zero3.Y + Main.npc[i].gfxOffY;
								Main.spriteBatch.Draw(Main.extraTexture[0], zero3, new Microsoft.Xna.Framework.Rectangle?(rectangle8), black, Main.npc[i].rotation, zero4, Main.npc[i].scale, spriteEffect, 0f);
								Main.spriteBatch.Draw(Main.glowMaskTexture[24], zero3, new Microsoft.Xna.Framework.Rectangle?(rectangle8), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Main.npc[i].rotation, zero4, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 382)
							{
								Vector2 zero5 = Vector2.Zero;
								Vector2 width5 = Vector2.Zero;
								int height7 = Main.npcTexture[num3].Height / Main.npcFrameCount[num3];
								int y21 = Main.npc[i].frame.Y / height7;
								Microsoft.Xna.Framework.Rectangle rectangle9 = new Microsoft.Xna.Framework.Rectangle(0, 0, 30, 42);
								y = y21;
								switch (y)
								{
									case 0:
									{
										zero5 = zero5 + new Vector2(8f, 30f);
										break;
									}
									case 1:
									{
										zero5 = zero5 + new Vector2(6f, 68f);
										break;
									}
									case 2:
									{
										zero5 = zero5 + new Vector2(8f, 120f);
										break;
									}
									case 3:
									{
										zero5 = zero5 + new Vector2(6f, 166f);
										break;
									}
									case 4:
									{
										zero5 = zero5 + new Vector2(6f, 214f);
										break;
									}
									case 5:
									{
										zero5 = zero5 + new Vector2(8f, 260f);
										break;
									}
									case 6:
									{
										zero5 = zero5 + new Vector2(14f, 304f);
										break;
									}
									case 7:
									{
										zero5 = zero5 + new Vector2(14f, 350f);
										break;
									}
									case 8:
									{
										zero5 = zero5 + new Vector2(10f, 396f);
										break;
									}
								}
								zero5.Y = zero5.Y - (float)(height7 * y21);
								zero5 = zero5 - y13;
								int num72 = 2;
								if (Main.npc[i].ai[2] > 0f)
								{
									num72 = (int)Main.npc[i].ai[2] - 1;
								}
								if (Main.npc[i].velocity.Y != 0f)
								{
									num72 = 3;
								}
								rectangle9.Y = rectangle9.Y + 44 * num72;
								y = num72;
								switch (y)
								{
									case 0:
									{
										width5 = new Vector2(10f, 18f);
										break;
									}
									case 1:
									{
										width5 = new Vector2(8f, 20f);
										break;
									}
									case 2:
									{
										width5 = new Vector2(8f, 20f);
										break;
									}
									case 3:
									{
										width5 = new Vector2(8f, 20f);
										break;
									}
									case 4:
									{
										width5 = new Vector2(6f, 18f);
										break;
									}
								}
								if (spriteEffect.HasFlag(SpriteEffects.FlipHorizontally))
								{
									zero5.X = zero5.X * -1f;
									width5.X = (float)rectangle9.Width - width5.X;
								}
								zero5 = zero5 + Main.npc[i].Center;
								zero5 = zero5 - Main.screenPosition;
								zero5.Y = zero5.Y + Main.npc[i].gfxOffY;
								Main.spriteBatch.Draw(Main.extraTexture[1], zero5, new Microsoft.Xna.Framework.Rectangle?(rectangle9), black, Main.npc[i].rotation, width5, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 520)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[164], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								Vector2 top = Vector2.Zero;
								Vector2 width6 = new Vector2(4f, 4f);
								int height8 = Main.npcTexture[num3].Height / Main.npcFrameCount[num3];
								int y22 = Main.npc[i].frame.Y / height8;
								if (spriteEffect.HasFlag(SpriteEffects.FlipHorizontally))
								{
									top.X = top.X * -1f;
									width6.X = (float)Main.extraTexture[56].Width - width6.X;
								}
								top = top + Main.npc[i].Top + new Vector2(0f, 20f);
								top = top - Main.screenPosition;
								top.Y = top.Y + Main.npc[i].gfxOffY;
								float single71 = Main.npc[i].localAI[3];
								if (spriteEffect.HasFlag(SpriteEffects.FlipHorizontally))
								{
									single71 = single71 + 3.14159274f;
								}
								nullable = null;
								Main.spriteBatch.Draw(Main.extraTexture[56], top, nullable, black, single71, width6, Main.npc[i].scale, spriteEffect, 0f);
								nullable = null;
								Main.spriteBatch.Draw(Main.glowMaskTexture[165], top, nullable, new Microsoft.Xna.Framework.Color(255, 255, 255, 0), single71, width6, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 386)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[31], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 387)
							{
								Microsoft.Xna.Framework.Color color27 = new Microsoft.Xna.Framework.Color(1f, 1f, 1f, 1f) * 0.75f;
								if (Main.npc[i].ai[0] > 0f)
								{
									float single72 = (Main.npc[i].ai[0] + 1f) / 60f;
									color27 = Microsoft.Xna.Framework.Color.Lerp(color27, Microsoft.Xna.Framework.Color.White, single72);
									color27.A = (byte)MathHelper.Lerp((float)color27.A, 0f, single72);
								}
								color27 = color27 * ((255f - (float)Main.npc[i].alpha) / 255f);
								Main.spriteBatch.Draw(Main.glowMaskTexture[32], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), color27, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 388)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[33], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 389)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[34], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), new Microsoft.Xna.Framework.Color(255, 255, 255, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 4 && Main.npc[i].ai[1] >= 4f && Main.npc[i].ai[0] == 3f)
							{
								for (int v1 = 1; v1 < (int)Main.npc[i].oldPos.Length; v1++)
								{
									Vector2 vector283 = Main.npc[i].oldPos[v1];
									Microsoft.Xna.Framework.Color b3 = black;
									b3.R = (byte)(0.5 * (double)b3.R * (double)(10 - v1) / 20);
									b3.G = (byte)(0.5 * (double)b3.G * (double)(10 - v1) / 20);
									b3.B = (byte)(0.5 * (double)b3.B * (double)(10 - v1) / 20);
									b3.A = (byte)(0.5 * (double)b3.A * (double)(10 - v1) / 20);
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].oldPos[v1].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[v1].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), b3, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 437)
							{
								Microsoft.Xna.Framework.Color white4 = Microsoft.Xna.Framework.Color.White;
								white4.A = 200;
								Main.spriteBatch.Draw(Main.glowMaskTexture[109], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(height5), white4, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								nullable = null;
								Main.spriteBatch.Draw(Main.glowMaskTexture[108], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + single27 + Main.npc[i].gfxOffY), nullable, white4, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 471 && Main.npc[i].ai[3] < 0f)
							{
								for (int w1 = 1; w1 < (int)Main.npc[i].oldPos.Length; w1++)
								{
									Vector2 vector284 = Main.npc[i].oldPos[w1];
									Microsoft.Xna.Framework.Color a3 = black;
									a3.R = (byte)(0.5 * (double)a3.R * (double)(10 - w1) / 20);
									a3.G = (byte)(0.5 * (double)a3.G * (double)(10 - w1) / 20);
									a3.B = (byte)(0.5 * (double)a3.B * (double)(10 - w1) / 20);
									a3.A = (byte)(0.5 * (double)a3.A * (double)(10 - w1) / 20);
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].oldPos[w1].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[w1].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), a3, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 477 && Main.npc[i].velocity.Length() > 9f)
							{
								for (int x18 = 1; x18 < (int)Main.npc[i].oldPos.Length; x18++)
								{
									Vector2 vector285 = Main.npc[i].oldPos[x18];
									Microsoft.Xna.Framework.Color r4 = black;
									r4.R = (byte)(0.5 * (double)r4.R * (double)(10 - x18) / 20);
									r4.G = (byte)(0.5 * (double)r4.G * (double)(10 - x18) / 20);
									r4.B = (byte)(0.5 * (double)r4.B * (double)(10 - x18) / 20);
									r4.A = (byte)(0.5 * (double)r4.A * (double)(10 - x18) / 20);
									Microsoft.Xna.Framework.Rectangle rectangle10 = Main.npc[i].frame;
									int height9 = Main.npcTexture[num3].Height / Main.npcFrameCount[num3];
									rectangle10.Y = rectangle10.Y - height9 * x18;
									while (rectangle10.Y < 0)
									{
										rectangle10.Y = rectangle10.Y + height9 * Main.npcFrameCount[num3];
									}
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].oldPos[x18].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[x18].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(rectangle10), r4, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							if (num3 == 479 && (double)Main.npc[i].velocity.Length() > 6.5)
							{
								for (int y110 = 1; y110 < (int)Main.npc[i].oldPos.Length; y110++)
								{
									Vector2 vector286 = Main.npc[i].oldPos[y110];
									Microsoft.Xna.Framework.Color g4 = black;
									g4.R = (byte)(0.5 * (double)g4.R * (double)(10 - y110) / 20);
									g4.G = (byte)(0.5 * (double)g4.G * (double)(10 - y110) / 20);
									g4.B = (byte)(0.5 * (double)g4.B * (double)(10 - y110) / 20);
									g4.A = (byte)(0.5 * (double)g4.A * (double)(10 - y110) / 20);
									Microsoft.Xna.Framework.Rectangle rectangle11 = Main.npc[i].frame;
									int height10 = Main.npcTexture[num3].Height / Main.npcFrameCount[num3];
									rectangle11.Y = rectangle11.Y - height10 * y110;
									while (rectangle11.Y < 0)
									{
										rectangle11.Y = rectangle11.Y + height10 * Main.npcFrameCount[num3];
									}
									Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].oldPos[y110].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[y110].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(rectangle11), g4, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 472)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[110], new Vector2(Main.npc[i].position.X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].position.Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (Main.npc[i].aiStyle == 87)
							{
								if ((int)Main.npc[i].ai[0] == 4 || Main.npc[i].ai[0] == 5f || Main.npc[i].ai[0] == 6f)
								{
									for (int a11 = 1; a11 < (int)Main.npc[i].oldPos.Length; a11++)
									{
										Vector2 vector287 = Main.npc[i].oldPos[a11];
										Microsoft.Xna.Framework.Color b4 = black;
										b4.R = (byte)(0.5 * (double)b4.R * (double)(10 - a11) / 20);
										b4.G = (byte)(0.5 * (double)b4.G * (double)(10 - a11) / 20);
										b4.B = (byte)(0.5 * (double)b4.B * (double)(10 - a11) / 20);
										b4.A = (byte)(0.5 * (double)b4.A * (double)(10 - a11) / 20);
										Main.spriteBatch.Draw(Main.npcTexture[num3], new Vector2(Main.npc[i].oldPos[a11].X - Main.screenPosition.X + (float)(Main.npc[i].width / 2) - (float)Main.npcTexture[num3].Width * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, Main.npc[i].oldPos[a11].Y - Main.screenPosition.Y + (float)Main.npc[i].height - (float)Main.npcTexture[num3].Height * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), b4, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
									}
								}
							}
							else if (num3 == 50)
							{
								Texture2D texture2D35 = Main.extraTexture[39];
								Vector2 center20 = Main.npc[i].Center;
								float single73 = 0f;
								y = Main.npc[i].frame.Y / (Main.npcTexture[num3].Height / Main.npcFrameCount[num3]);
								switch (y)
								{
									case 0:
									{
										single73 = 2f;
										break;
									}
									case 1:
									{
										single73 = -6f;
										break;
									}
									case 2:
									{
										single73 = 2f;
										break;
									}
									case 3:
									{
										single73 = 10f;
										break;
									}
									case 4:
									{
										single73 = 2f;
										break;
									}
									case 5:
									{
										single73 = 0f;
										break;
									}
								}
								center20.Y = center20.Y + (Main.npc[i].gfxOffY - (70f - single73) * Main.npc[i].scale);
								nullable = null;
								Main.spriteBatch.Draw(texture2D35, center20 - Main.screenPosition, nullable, black, 0f, texture2D35.Size() / 2f, 1f, spriteEffect, 0f);
							}
							else if (num3 == 411)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[136], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 409)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[138], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 410)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[137], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 407)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[139], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 405)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[141], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 406)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[142], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 424)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[144], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 423)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[145], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 421)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[146], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 420)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[147], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 425)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[150], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 429)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[151], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 418)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[161], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								alpha = Main.npc[i].GetAlpha(black);
								vector3 = alpha.ToVector3() - new Vector3(0.5f);
								float single74 = 0.25f + vector3.Length() * 0.25f;
								for (int b11 = 0; b11 < 4; b11++)
								{
									SpriteBatch spriteBatch9 = Main.spriteBatch;
									Texture2D texture2D36 = Main.glowMaskTexture[161];
									Vector2 bottom = (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY);
									Vector2 vector288 = Main.npc[i].velocity;
									double num73 = (double)((float)b11 * 1.57079637f);
									vector2 = new Vector2();
									spriteBatch9.Draw(texture2D36, bottom + (vector288.RotatedBy(num73, vector2) * single74), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 >= 412 && num3 <= 414)
							{
								Microsoft.Xna.Framework.Color color28 = new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 0);
								int num74 = 157 + num3 - 412;
								if (num3 == 414 && Main.npc[i].localAI[2] != 0f)
								{
									int num75 = (int)Main.npc[i].localAI[2];
									if (Main.npc[i].localAI[2] < 0f)
									{
										num75 = 128 + (int)Main.npc[i].localAI[2];
									}
									int num76 = 255 - num75;
									color28 = new Microsoft.Xna.Framework.Color(num76, num75, num75, num76);
								}
								Main.spriteBatch.Draw(Main.glowMaskTexture[num74], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), color28, Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 415)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[155], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								alpha = Main.npc[i].GetAlpha(black);
								vector3 = alpha.ToVector3() - new Vector3(0.5f);
								float single75 = 0.5f + vector3.Length() * 0.5f;
								for (int c1 = 0; c1 < 4; c1++)
								{
									SpriteBatch spriteBatch10 = Main.spriteBatch;
									Texture2D texture2D37 = Main.glowMaskTexture[155];
									Vector2 bottom1 = (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY);
									Vector2 vector289 = Main.npc[i].velocity;
									double num77 = (double)((float)c1 * 1.57079637f);
									vector2 = new Vector2();
									spriteBatch10.Draw(texture2D37, bottom1 + (vector289.RotatedBy(num77, vector2) * single75), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 419)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[154], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								if (Main.npc[i].ai[2] < -6f)
								{
									float single76 = 4f;
									for (int d1 = 0; d1 < 4; d1++)
									{
										SpriteBatch spriteBatch11 = Main.spriteBatch;
										Texture2D texture2D38 = Main.glowMaskTexture[154];
										Vector2 bottom2 = (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY);
										Vector2 unitX = Vector2.UnitX;
										double num78 = (double)((float)d1 * 1.57079637f);
										vector2 = new Vector2();
										spriteBatch11.Draw(texture2D38, bottom2 + (unitX.RotatedBy(num78, vector2) * single76), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
									}
								}
								else
								{
									alpha = Main.npc[i].GetAlpha(black);
									vector3 = alpha.ToVector3() - new Vector3(0.5f);
									float single77 = 0.5f + vector3.Length() * 0.5f;
									for (int e1 = 0; e1 < 4; e1++)
									{
										SpriteBatch spriteBatch12 = Main.spriteBatch;
										Texture2D texture2D39 = Main.glowMaskTexture[154];
										Vector2 bottom3 = (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY);
										Vector2 vector290 = Main.npc[i].velocity;
										double num79 = (double)((float)e1 * 1.57079637f);
										vector2 = new Vector2();
										spriteBatch12.Draw(texture2D39, bottom3 + (vector290.RotatedBy(num79, vector2) * single77), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
									}
								}
							}
							else if (num3 == 417)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[160], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								alpha = Main.npc[i].GetAlpha(black);
								vector3 = alpha.ToVector3() - new Vector3(0.5f);
								float single78 = 0.25f + vector3.Length() * 0.25f;
								for (int f1 = 0; f1 < 4; f1++)
								{
									SpriteBatch spriteBatch13 = Main.spriteBatch;
									Texture2D texture2D40 = Main.glowMaskTexture[160];
									Vector2 bottom4 = (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY);
									Vector2 vector291 = Main.npc[i].velocity;
									double num80 = (double)((float)f1 * 1.57079637f);
									vector2 = new Vector2();
									spriteBatch13.Draw(texture2D40, bottom4 + (vector291.RotatedBy(num80, vector2) * single78), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 516)
							{
								Main.spriteBatch.Draw(Main.npcTexture[num3], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								alpha = Main.npc[i].GetAlpha(black);
								vector3 = alpha.ToVector3() - new Vector3(0.5f);
								float single79 = 0.5f + vector3.Length() * 0.5f;
								for (int g11 = 0; g11 < 4; g11++)
								{
									SpriteBatch spriteBatch14 = Main.spriteBatch;
									Texture2D texture2D41 = Main.npcTexture[num3];
									Vector2 bottom5 = (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY);
									Vector2 vector292 = Main.npc[i].velocity;
									double num81 = (double)((float)g11 * 1.57079637f);
									vector2 = new Vector2();
									spriteBatch14.Draw(texture2D41, bottom5 + (vector292.RotatedBy(num81, vector2) * single79), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 518)
							{
								Vector2 vector293 = new Vector2(-10f, 0f);
								Main.spriteBatch.Draw(Main.glowMaskTexture[163], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha, 255 - Main.npc[i].alpha), Main.npc[i].rotation, y13 + vector293, Main.npc[i].scale, spriteEffect, 0f);
								alpha = Main.npc[i].GetAlpha(black);
								vector3 = alpha.ToVector3() - new Vector3(0.5f);
								float single80 = 0.5f + vector3.Length() * 0.5f;
								for (int h1 = 0; h1 < 4; h1++)
								{
									SpriteBatch spriteBatch15 = Main.spriteBatch;
									Texture2D texture2D42 = Main.glowMaskTexture[163];
									Vector2 bottom6 = (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY);
									Vector2 vector294 = Main.npc[i].velocity;
									double num82 = (double)((float)h1 * 1.57079637f);
									vector2 = new Vector2();
									spriteBatch15.Draw(texture2D42, bottom6 + (vector294.RotatedBy(num82, vector2) * single80), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(64, 64, 64, 0), Main.npc[i].rotation, y13 + vector293, Main.npc[i].scale, spriteEffect, 0f);
								}
							}
							else if (num3 == 525)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[169], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 100), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 526)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[170], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 100), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 527)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[171], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(200, 200, 200, 100), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 533)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[172], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(255, 255, 255, 100), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 160)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[166], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							else if (num3 == 209)
							{
								Main.spriteBatch.Draw(Main.glowMaskTexture[167], (Main.npc[i].Bottom - Main.screenPosition) + new Vector2((float)(-Main.npcTexture[num3].Width) * Main.npc[i].scale / 2f + y13.X * Main.npc[i].scale, (float)(-Main.npcTexture[num3].Height) * Main.npc[i].scale / (float)Main.npcFrameCount[num3] + 4f + y13.Y * Main.npc[i].scale + single28 + Main.npc[i].gfxOffY), new Microsoft.Xna.Framework.Rectangle?(Main.npc[i].frame), new Microsoft.Xna.Framework.Color(128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 128 - Main.npc[i].alpha / 2, 0), Main.npc[i].rotation, y13, Main.npc[i].scale, spriteEffect, 0f);
							}
							if (Main.npc[i].aiStyle == 7)
							{
								NPC nPC4 = Main.npc[i];
								this.DrawNPCExtras(nPC4, false, single28, single27, black, y13, spriteEffect);
							}
						}
						else
						{
							NPC nPC5 = Main.npc[i];
							Texture2D texture2D43 = Main.npcTexture[nPC5.type];
							Microsoft.Xna.Framework.Rectangle rectangle12 = nPC5.frame;
							Vector2 vector295 = rectangle12.OriginFlip(new Vector2(208f, 460f), spriteEffect);
							Vector2 center21 = nPC5.Center - Main.screenPosition;
							Vector2 vector296 = new Vector2((float)((spriteEffect.HasFlag(SpriteEffects.FlipHorizontally) ? -1 : 1)), 1f);
							Microsoft.Xna.Framework.Color alpha13 = nPC5.GetAlpha(black);
							Main.spriteBatch.Draw(texture2D43, center21, new Microsoft.Xna.Framework.Rectangle?(rectangle12), alpha13, nPC5.rotation, vector295, nPC5.scale, spriteEffect, 0f);
							int num83 = (int)nPC5.localAI[3] / 8;
							texture2D43 = Main.extraTexture[40];
							rectangle12 = texture2D43.Frame(1, 4, 0, num83 % 4);
							vector295 = rectangle12.Size() * new Vector2(0.5f, 1f);
							SpriteBatch spriteBatch16 = Main.spriteBatch;
							Vector2 vector297 = new Vector2(102f, -384f) * vector296;
							double num84 = (double)nPC5.rotation;
							vector2 = new Vector2();
							spriteBatch16.Draw(texture2D43, center21 + vector297.RotatedBy(num84, vector2), new Microsoft.Xna.Framework.Rectangle?(rectangle12), alpha13, nPC5.rotation, vector295, nPC5.scale, spriteEffect, 0f);
							texture2D43 = Main.extraTexture[41];
							rectangle12 = texture2D43.Frame(1, 8, 0, num83 % 8);
							vector295 = (rectangle12.Size() * new Vector2(0.5f, 0f)) + new Vector2(0f, 10f);
							for (int i2 = 0; i2 < 5; i2++)
							{
								SpriteBatch spriteBatch17 = Main.spriteBatch;
								Vector2 vector298 = new Vector2((float)(-96 + 34 * i2), 40f) * vector296;
								double num85 = (double)nPC5.rotation;
								vector2 = new Vector2();
								spriteBatch17.Draw(texture2D43, center21 + vector298.RotatedBy(num85, vector2), new Microsoft.Xna.Framework.Rectangle?(rectangle12), alpha13, nPC5.rotation, vector295, nPC5.scale, spriteEffect, 0f);
							}
							texture2D43 = Main.extraTexture[42];
							rectangle12 = texture2D43.Frame(1, 4, 0, num83 % 4);
							vector295 = rectangle12.Size() * new Vector2(0.5f, 0f);
							for (int j2 = 0; j2 < 2; j2++)
							{
								SpriteBatch spriteBatch18 = Main.spriteBatch;
								Vector2 vector299 = new Vector2((float)(158 - 106 * j2), -302f) * vector296;
								double num86 = (double)nPC5.rotation;
								vector2 = new Vector2();
								spriteBatch18.Draw(texture2D43, center21 + vector299.RotatedBy(num86, vector2), new Microsoft.Xna.Framework.Rectangle?(rectangle12), alpha13, nPC5.rotation, vector295, nPC5.scale, spriteEffect, 0f);
							}
							texture2D43 = Main.extraTexture[43];
							rectangle12 = texture2D43.Frame(1, 4, 0, num83 % 4);
							vector295 = rectangle12.Size() * new Vector2(0.5f, 0f);
							for (int k2 = 0; k2 < 2; k2++)
							{
								SpriteBatch spriteBatch19 = Main.spriteBatch;
								Vector2 vector2100 = new Vector2((float)(42 - 178 * k2), -444f) * vector296;
								double num87 = (double)nPC5.rotation;
								vector2 = new Vector2();
								spriteBatch19.Draw(texture2D43, center21 + vector2100.RotatedBy(num87, vector2), new Microsoft.Xna.Framework.Rectangle?(rectangle12), alpha13, nPC5.rotation, vector295, nPC5.scale, spriteEffect, 0f);
							}
							texture2D43 = Main.extraTexture[44];
							rectangle12 = texture2D43.Frame(1, 4, 0, num83 % 4);
							vector295 = rectangle12.Size() * new Vector2(0.5f, 0f);
							SpriteBatch spriteBatch20 = Main.spriteBatch;
							Vector2 vector2101 = new Vector2(-134f, -302f) * vector296;
							double num88 = (double)nPC5.rotation;
							vector2 = new Vector2();
							spriteBatch20.Draw(texture2D43, center21 + vector2101.RotatedBy(num88, vector2), new Microsoft.Xna.Framework.Rectangle?(rectangle12), alpha13, nPC5.rotation, vector295, nPC5.scale, spriteEffect, 0f);
							texture2D43 = Main.extraTexture[45];
							rectangle12 = texture2D43.Frame(1, 4, 0, (2 + num83) % 4);
							vector295 = rectangle12.Size() * new Vector2(0.5f, 0f);
							SpriteBatch spriteBatch21 = Main.spriteBatch;
							Vector2 vector2102 = new Vector2(-60f, -330f) * vector296;
							double num89 = (double)nPC5.rotation;
							vector2 = new Vector2();
							spriteBatch21.Draw(texture2D43, center21 + vector2102.RotatedBy(num89, vector2), new Microsoft.Xna.Framework.Rectangle?(rectangle12), alpha13, nPC5.rotation, vector295, nPC5.scale, spriteEffect, 0f);
							this.LoadNPC(492);
							if (Main.NPCLoaded[492])
							{
								texture2D43 = Main.npcTexture[492];
								rectangle12 = texture2D43.Frame(1, 9, 0, 0);
								vector295 = (rectangle12.Size() * new Vector2(0.5f, 0f)) + new Vector2(0f, 10f);
								for (int l2 = 0; l2 < 4; l2++)
								{
									int num90 = (int)nPC5.ai[l2];
									if (num90 >= 0)
									{
										rectangle12.Y = Main.npc[num90].frame.Y;
										SpriteBatch spriteBatch22 = Main.spriteBatch;
										Vector2 vector2103 = new Vector2((float)(-122 + 68 * l2), -20f) * vector296;
										double num91 = (double)nPC5.rotation;
										vector2 = new Vector2();
										spriteBatch22.Draw(texture2D43, center21 + vector2103.RotatedBy(num91, vector2), new Microsoft.Xna.Framework.Rectangle?(rectangle12), alpha13, nPC5.rotation, vector295, nPC5.scale, spriteEffect, 0f);
									}
								}
								return;
							}
						}
					}
				}
			}
		}

		protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect)
		{
			object obj;
			if (NPCID.Sets.AttackType[n.type] == 1 && n.ai[0] == 12f && !beforeDraw)
			{
				if (n.type == 228 || n.type == 229 || n.type == 209)
				{
					return;
				}
				float single = n.ai[2];
				Vector2 offsetsNPCOffhand = Main.OffsetsNPCOffhand[2];
				if (n.spriteDirection == 1)
				{
					offsetsNPCOffhand.X = offsetsNPCOffhand.X * -1f;
				}
				Vector2 bottom = n.Bottom - offsetsNPCOffhand;
				if (n.type == 22 && n.ai[2] > -0.1f)
				{
					bottom.Y = bottom.Y + 4f;
				}
				if (n.type == 368 && Main.hardMode && n.ai[2] > -0.1f)
				{
					bottom.Y = bottom.Y + 4f;
				}
				if (n.type == 368 && !Main.hardMode && n.ai[2] < -0.1f)
				{
					bottom.Y = bottom.Y - 8f;
				}
				float single1 = single * 1.57079637f * (float)n.spriteDirection;
				float single2 = 1f;
				int num = 0;
				int num1 = 4;
				if (n.type == 19)
				{
					num = (Main.hardMode ? 98 : 95);
					if (Main.hardMode)
					{
						bottom.X = bottom.X - (float)(10 * n.direction);
						bottom.Y = bottom.Y + 4f;
					}
				}
				else if (n.type == 22)
				{
					num = 39;
					num1 = 18;
				}
				else if (n.type == 178)
				{
					num = 434;
				}
				else if (n.type == 227)
				{
					num = 3350;
					num1 = 16;
					single2 = 0.85f;
				}
				else if (n.type == 368)
				{
					num = (Main.hardMode ? 2223 : 2269);
					if (!Main.hardMode)
					{
						if (n.ai[2] < -0.1f)
						{
							num1 = 28;
						}
						single2 = 0.75f;
					}
					else
					{
						num1 = 18;
					}
				}
				Texture2D texture2D = Main.itemTexture[num];
				Vector2 vector2 = texture2D.Size() / 2f;
				Vector2 vector21 = this.DrawPlayerItemPos(1f, num);
				int x = (int)vector21.X - num1;
				Vector2 vector22 = new Vector2((float)(-x), (float)(texture2D.Height / 2));
				if (n.spriteDirection == -1)
				{
					vector22 = new Vector2((float)(texture2D.Width + x), (float)(texture2D.Height / 2));
				}
				Microsoft.Xna.Framework.Rectangle? nullable = null;
				Main.spriteBatch.Draw(texture2D, new Vector2((float)((int)(bottom.X - Main.screenPosition.X)), (float)((int)(bottom.Y - Main.screenPosition.Y))), nullable, npcColor, single1, vector22, n.scale * single2, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
				if (n.type == 22 && n.frame.Y / (Main.npcTexture[n.type].Height / Main.npcFrameCount[n.type]) >= 21)
				{
					Texture2D texture2D1 = Main.extraTexture[52];
					Microsoft.Xna.Framework.Rectangle rectangle = texture2D1.Frame(1, 5, 0, n.frame.Y / (Main.npcTexture[n.type].Height / Main.npcFrameCount[n.type]) - 21);
					Main.spriteBatch.Draw(texture2D1, new Vector2(n.position.X - Main.screenPosition.X + (float)(n.width / 2) - (float)Main.npcTexture[n.type].Width * n.scale / 2f + halfSize.X * n.scale, n.position.Y - Main.screenPosition.Y + (float)n.height - (float)Main.npcTexture[n.type].Height * n.scale / (float)Main.npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
				}
				else if (n.type == 368 && n.frame.Y / (Main.npcTexture[n.type].Height / Main.npcFrameCount[n.type]) >= 21)
				{
					Texture2D texture2D2 = Main.extraTexture[53];
					Microsoft.Xna.Framework.Rectangle rectangle1 = texture2D2.Frame(1, 5, 0, n.frame.Y / (Main.npcTexture[n.type].Height / Main.npcFrameCount[n.type]) - 21);
					Main.spriteBatch.Draw(texture2D2, new Vector2(n.position.X - Main.screenPosition.X + (float)(n.width / 2) - (float)Main.npcTexture[n.type].Width * n.scale / 2f + halfSize.X * n.scale, n.position.Y - Main.screenPosition.Y + (float)n.height - (float)Main.npcTexture[n.type].Height * n.scale / (float)Main.npcFrameCount[n.type] + 4f + halfSize.Y * n.scale + addHeight + addY + n.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle1), n.GetAlpha(npcColor), n.rotation, halfSize, n.scale, npcSpriteEffect, 0f);
				}
			}
			if (NPCID.Sets.AttackType[n.type] == 2 && n.ai[0] == 14f && !beforeDraw)
			{
				Texture2D texture2D3 = Main.extraTexture[51];
				Vector2 bottom1 = n.Bottom + new Vector2(0f, n.gfxOffY + 4f);
				Microsoft.Xna.Framework.Rectangle rectangle2 = texture2D3.Frame(1, 4, 0, (int)n.frameCounter % 48 / 12);
				Vector2 vector23 = rectangle2.Size() * new Vector2(0.5f, 1f);
				Main.spriteBatch.Draw(texture2D3, new Vector2((float)((int)(bottom1.X - Main.screenPosition.X)), (float)((int)(bottom1.Y - Main.screenPosition.Y))), new Microsoft.Xna.Framework.Rectangle?(rectangle2), NPCID.Sets.MagicAuraColor[n.type], 0f, vector23, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
			}
			if (NPCID.Sets.AttackType[n.type] == 3 && n.ai[0] == 15f)
			{
				Texture2D texture2D4 = Main.itemTexture[4];
				int num2 = 32;
				float single3 = 0f;
				Vector2 zero = Vector2.Zero;
				if (n.type == 207)
				{
					texture2D4 = Main.itemTexture[3349];
					single3 = 0.15f;
					if (beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				else if (n.type == 353)
				{
					texture2D4 = Main.itemTexture[3352];
					single3 = 0.15f;
					if (!beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				else if (n.type == 441)
				{
					texture2D4 = Main.itemTexture[3351];
					num2 = 28;
					single3 = 0.1f;
					if (!beforeDraw)
					{
						return;
					}
					if (n.ai[1] > (float)NPCID.Sets.AttackTime[n.type] * 0.66f)
					{
						zero.Y = 12f;
					}
				}
				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num2, num2);
				Vector2 item1 = (swingStats.Item1 + ((swingStats.Item1 - n.Center) * single3)) + zero;
				Vector2 vector24 = texture2D4.Size();
				if (n.spriteDirection == 1)
				{
					obj = null;
				}
				else
				{
					obj = 1;
				}
				Vector2 vector25 = vector24 * new Vector2((float)obj, 1f);
				Microsoft.Xna.Framework.Rectangle? nullable1 = null;
				Main.spriteBatch.Draw(texture2D4, new Vector2((float)((int)(item1.X - Main.screenPosition.X)), (float)((int)(item1.Y - Main.screenPosition.Y))), nullable1, NPCID.Sets.MagicAuraColor[n.type], swingStats.Item2, vector25, n.scale, npcSpriteEffect ^ SpriteEffects.FlipHorizontally, 0f);
			}
		}

		protected void DrawNPCHouse()
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].townNPC && !Main.npc[i].homeless && Main.npc[i].homeTileX > 0 && Main.npc[i].homeTileY > 0 && Main.npc[i].type != 37)
				{
					int num = 1;
					int x = Main.npc[i].homeTileX;
					int y = Main.npc[i].homeTileY - 1;
					if (Main.tile[x, y] != null)
					{
						bool flag = false;
						while (!Main.tile[x, y].active() || !Main.tileSolid[Main.tile[x, y].type])
						{
							y--;
							if (y < 10)
							{
								break;
							}
							if (Main.tile[x, y] != null)
							{
								continue;
							}
							flag = true;
							break;
						}
						if (!flag)
						{
							int num1 = 8;
							int num2 = 18;
							if (Main.tile[x, y].type == 19)
							{
								num2 = num2 - 8;
							}
							y++;
							int num3 = 0;
							float height = (float)(y * 16);
							SpriteEffects spriteEffect = SpriteEffects.None;
							if (Main.player[Main.myPlayer].gravDir == -1f)
							{
								height = height - Main.screenPosition.Y;
								height = Main.screenPosition.Y + (float)Main.screenHeight - height;
								height = height - (float)Main.bannerTexture[num].Height;
								spriteEffect = SpriteEffects.FlipVertically;
								num3 = 4;
							}
							Main.spriteBatch.Draw(Main.bannerTexture[num], new Vector2((float)(x * 16 - (int)Main.screenPosition.X + num1), height - (float)((int)Main.screenPosition.Y) + (float)num2 + (float)num3), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.bannerTexture[num].Width, Main.bannerTexture[num].Height)), Lighting.GetColor(x, y), 0f, new Vector2((float)(Main.bannerTexture[num].Width / 2), (float)(Main.bannerTexture[num].Height / 2)), 1f, spriteEffect, 0f);
							int num4 = NPC.TypeToNum(Main.npc[i].type);
							float single = 1f;
							float single1 = 0f;
							single1 = (Main.npcHeadTexture[num4].Width <= Main.npcHeadTexture[num4].Height ? (float)Main.npcHeadTexture[num4].Height : (float)Main.npcHeadTexture[num4].Width);
							if (single1 > 24f)
							{
								single = 24f / single1;
							}
							Main.spriteBatch.Draw(Main.npcHeadTexture[num4], new Vector2((float)(x * 16 - (int)Main.screenPosition.X + num1), height - (float)((int)Main.screenPosition.Y) + (float)num2 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.npcHeadTexture[num4].Width, Main.npcHeadTexture[num4].Height)), Lighting.GetColor(x, y), 0f, new Vector2((float)(Main.npcHeadTexture[num4].Width / 2), (float)(Main.npcHeadTexture[num4].Height / 2)), single, spriteEffect, 0f);
							x = x * 16 - (int)Main.screenPosition.X + num1 - Main.bannerTexture[num].Width / 2;
							y = y * 16 - (int)Main.screenPosition.Y + num2 - Main.bannerTexture[num].Height / 2;
							if (Main.mouseX >= x && Main.mouseX <= x + Main.bannerTexture[num].Width && Main.mouseY >= y && Main.mouseY <= y + Main.bannerTexture[num].Height)
							{
								this.MouseText(string.Concat(Main.npc[i].displayName, " the ", Main.npc[i].name), 0, 0);
								if (Main.mouseRightRelease && Main.mouseRight)
								{
									Main.mouseRightRelease = false;
									WorldGen.kickOut(i);
									Main.PlaySound(12, -1, -1, 1);
								}
							}
						}
					}
				}
			}
		}

		protected void DrawNPCs(bool behindTiles = false)
		{
			bool flag = false;
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X - 300, (int)Main.screenPosition.Y - 300, Main.screenWidth + 600, Main.screenHeight + 600);
			for (int i = 199; i >= 0; i--)
			{
				try
				{
					if (Main.npc[i].active && Main.npc[i].type > 0 && Main.npc[i].type < 540 && !Main.npc[i].hide && Main.npc[i].behindTiles == behindTiles)
					{
						if (Main.npc[i].type == 125 || Main.npc[i].type == 126)
						{
							if (!flag)
							{
								flag = true;
								for (int j = 0; j < 200; j++)
								{
									if (Main.npc[j].active && i != j && (Main.npc[j].type == 125 || Main.npc[j].type == 126))
									{
										float x = Main.npc[j].position.X + (float)Main.npc[j].width * 0.5f;
										float y = Main.npc[j].position.Y + (float)Main.npc[j].height * 0.5f;
										Vector2 vector2 = new Vector2(Main.npc[i].position.X + (float)Main.npc[i].width * 0.5f, Main.npc[i].position.Y + (float)Main.npc[i].height * 0.5f);
										float single = x - vector2.X;
										float y1 = y - vector2.Y;
										float single1 = (float)Math.Atan2((double)y1, (double)single) - 1.57f;
										bool flag1 = true;
										float height = (float)Math.Sqrt((double)(single * single + y1 * y1));
										if (height > 2000f)
										{
											flag1 = false;
										}
										while (flag1)
										{
											height = (float)Math.Sqrt((double)(single * single + y1 * y1));
											if (height >= 40f)
											{
												height = (float)Main.chain12Texture.Height / height;
												single = single * height;
												y1 = y1 * height;
												vector2.X = vector2.X + single;
												vector2.Y = vector2.Y + y1;
												single = x - vector2.X;
												y1 = y - vector2.Y;
												Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)vector2.X / 16, (int)(vector2.Y / 16f));
												Main.spriteBatch.Draw(Main.chain12Texture, new Vector2(vector2.X - Main.screenPosition.X, vector2.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain12Texture.Width, Main.chain12Texture.Height)), color, single1, new Vector2((float)Main.chain12Texture.Width * 0.5f, (float)Main.chain12Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
											}
											else
											{
												flag1 = false;
											}
										}
									}
								}
							}
						}
						else if (Main.npc[i].type == 263 && Main.npc[i].aiStyle == 52 && NPC.plantBoss >= 0)
						{
							Vector2 vector21 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
							float x1 = Main.npc[NPC.plantBoss].Center.X - vector21.X;
							float y2 = Main.npc[NPC.plantBoss].Center.Y - vector21.Y;
							float single2 = (float)Math.Atan2((double)y2, (double)x1) - 1.57f;
							bool flag2 = true;
							while (flag2)
							{
								int num = 16;
								int num1 = 32;
								float single3 = (float)Math.Sqrt((double)(x1 * x1 + y2 * y2));
								if (single3 < (float)num1)
								{
									num = (int)single3 - num1 + num;
									flag2 = false;
								}
								single3 = (float)num / single3;
								x1 = x1 * single3;
								y2 = y2 * single3;
								vector21.X = vector21.X + x1;
								vector21.Y = vector21.Y + y2;
								x1 = Main.npc[NPC.plantBoss].Center.X - vector21.X;
								y2 = Main.npc[NPC.plantBoss].Center.Y - vector21.Y;
								Microsoft.Xna.Framework.Color color1 = Lighting.GetColor((int)vector21.X / 16, (int)(vector21.Y / 16f));
								Main.spriteBatch.Draw(Main.chain26Texture, new Vector2(vector21.X - Main.screenPosition.X, vector21.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain26Texture.Width, num)), color1, single2, new Vector2((float)Main.chain26Texture.Width * 0.5f, (float)Main.chain26Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
							}
						}
						else if (Main.npc[i].type == 264 && Main.npc[i].aiStyle == 53 && NPC.plantBoss >= 0)
						{
							int num2 = NPC.plantBoss;
							if (Main.npc[i].ai[3] > 0f)
							{
								num2 = (int)Main.npc[i].ai[3] - 1;
							}
							Vector2 vector22 = new Vector2(Main.npc[i].position.X + (float)(Main.npc[i].width / 2), Main.npc[i].position.Y + (float)(Main.npc[i].height / 2));
							float x2 = Main.npc[num2].Center.X - vector22.X;
							float y3 = Main.npc[num2].Center.Y - vector22.Y;
							float single4 = (float)Math.Atan2((double)y3, (double)x2) - 1.57f;
							bool flag3 = true;
							while (flag3)
							{
								int num3 = 16;
								int num4 = 32;
								float single5 = (float)Math.Sqrt((double)(x2 * x2 + y3 * y3));
								if (single5 < (float)num4)
								{
									num3 = (int)single5 - num4 + num3;
									flag3 = false;
								}
								single5 = (float)num3 / single5;
								x2 = x2 * single5;
								y3 = y3 * single5;
								vector22.X = vector22.X + x2;
								vector22.Y = vector22.Y + y3;
								x2 = Main.npc[num2].Center.X - vector22.X;
								y3 = Main.npc[num2].Center.Y - vector22.Y;
								Microsoft.Xna.Framework.Color color2 = Lighting.GetColor((int)vector22.X / 16, (int)(vector22.Y / 16f));
								Main.spriteBatch.Draw(Main.chain27Texture, new Vector2(vector22.X - Main.screenPosition.X, vector22.Y - Main.screenPosition.Y), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chain27Texture.Width, num3)), color2, single4, new Vector2((float)Main.chain27Texture.Width * 0.5f, (float)Main.chain27Texture.Height * 0.5f), 1f, SpriteEffects.None, 0f);
							}
						}
						if (rectangle.Intersects(new Microsoft.Xna.Framework.Rectangle((int)Main.npc[i].position.X, (int)Main.npc[i].position.Y, Main.npc[i].width, Main.npc[i].height)))
						{
							this.DrawNPC(i, behindTiles);
						}
					}
				}
				catch
				{
					Main.npc[i].active = false;
				}
			}
		}

		private static int DrawPageIcons()
		{
			int num = -1;
			Vector2 vector2 = new Vector2((float)(Main.screenWidth - 162), (float)(142 + Main.mH))
			{
				X = 82f
			};
			Texture2D equipPageTexture = Main.EquipPageTexture[(Main.EquipPage == 2 ? 3 : 2)];
			if (Collision.CheckAABBvAABBCollision(vector2, equipPageTexture.Size(), new Vector2((float)Main.mouseX, (float)Main.mouseY), Vector2.One) && (Main.mouseItem.stack < 1 || Main.mouseItem.dye > 0))
			{
				num = 2;
			}
			if (num == 2)
			{
				Microsoft.Xna.Framework.Rectangle? nullable = null;
				Main.spriteBatch.Draw(Main.EquipPageTexture[6], vector2, nullable, Main.OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
			}
			Microsoft.Xna.Framework.Rectangle? nullable1 = null;
			Main.spriteBatch.Draw(equipPageTexture, vector2, nullable1, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			vector2.X = vector2.X - 48f;
			equipPageTexture = Main.EquipPageTexture[(Main.EquipPage == 1 ? 5 : 4)];
			if (Collision.CheckAABBvAABBCollision(vector2, equipPageTexture.Size(), new Vector2((float)Main.mouseX, (float)Main.mouseY), Vector2.One) && Main.mouseItem.stack < 1)
			{
				num = 1;
			}
			if (num == 1)
			{
				Microsoft.Xna.Framework.Rectangle? nullable2 = null;
				Main.spriteBatch.Draw(Main.EquipPageTexture[7], vector2, nullable2, Main.OurFavoriteColor, 0f, new Vector2(2f), 0.9f, SpriteEffects.None, 0f);
			}
			Microsoft.Xna.Framework.Rectangle? nullable3 = null;
			Main.spriteBatch.Draw(equipPageTexture, vector2, nullable3, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			vector2.X = vector2.X - 48f;
			equipPageTexture = Main.EquipPageTexture[(Main.EquipPage == 3 ? 10 : 8)];
			if (Collision.CheckAABBvAABBCollision(vector2, equipPageTexture.Size(), new Vector2((float)Main.mouseX, (float)Main.mouseY), Vector2.One) && Main.mouseItem.stack < 1)
			{
				num = 3;
			}
			if (num == 3)
			{
				Microsoft.Xna.Framework.Rectangle? nullable4 = null;
				Main.spriteBatch.Draw(Main.EquipPageTexture[9], vector2, nullable4, Main.OurFavoriteColor, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			}
			Microsoft.Xna.Framework.Rectangle? nullable5 = null;
			Main.spriteBatch.Draw(equipPageTexture, vector2, nullable5, Microsoft.Xna.Framework.Color.White, 0f, Vector2.Zero, 0.9f, SpriteEffects.None, 0f);
			if (num != -1)
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.mouseLeft && Main.mouseLeftRelease)
				{
					Main.PlaySound(12, -1, -1, 1);
					if (num == 3)
					{
						CaptureManager.Instance.Active = true;
						Main.blockMouse = true;
					}
					else if (Main.EquipPageSelected == num)
					{
						Main.EquipPageSelected = 0;
					}
					else
					{
						Main.EquipPageSelected = num;
					}
				}
			}
			ItemSlot.EquipPage(Main.mouseItem);
			if (Main.EquipPage == -1)
			{
				Main.EquipPage = Main.EquipPageSelected;
			}
			return num;
		}

		public void DrawPlayer(Player drawPlayer, Vector2 Position, float rotation, Vector2 rotationOrigin, float shadow = 0f)
		{
		}

		protected void DrawPlayerChat()
		{
		}

		protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f)
		{
		}

		protected Vector2 DrawPlayerItemPos(float gravdir, int itemtype)
		{
			return Vector2.Zero;
		}

		protected void DrawPlayers()
		{
		}

		protected void DrawPlayerStoned(Player drawPlayer, Vector2 Position)
		{ 
		}

		public void DrawProj(int i)
		{
		}

		protected void DrawProjectiles()
		{
		}

		private static void DrawPVPIcons()
		{
		}

		protected void DrawRain()
		{
		}

		public void DrawSimpleSurfaceBackground()
		{
		}

		protected void DrawSplash(GameTime gameTime)
		{
		}

		protected void DrawSurfaceBG()
		{
		}

		private void DrawTileCracks(int crackType)
		{
		}

		protected void DrawTiles(bool solidOnly = true, int waterStyleOverride = -1)
		{
		}

		protected void DrawToMap()
		{
		}

		protected void DrawToMap_Section(int secX, int secY)
		{
		}

		protected void DrawUnderworldBackground(bool flat)
		{
		}

		protected void DrawWalls()
		{
		}

		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
		{
		}

		protected void drawWaters(bool bg = false, int styleOverride = -1, bool allowUpdate = true)
		{
		}

		protected void DrawWires()
		{
		}

		protected void DrawWoF()
		{
		}

		protected void EnsureRenderTargetContent()
		{
		}

		private static void ErasePlayer(int i)
		{
		}

		private static void EraseWorld(int i)
		{
			try
			{
				if (!Main.WorldList[i].IsCloudSave)
				{
					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path);
					FileOperationAPIWrapper.MoveToRecycleBin(string.Concat(Main.WorldList[i].Path, ".bak"));
				}
				else if (SocialAPI.Cloud != null)
				{
					SocialAPI.Cloud.Delete(Main.WorldList[i].Path);
				}
				Main.LoadWorlds();
			}
			catch (Exception ex)
			{
#if DEBUG
				Console.WriteLine(ex);
				System.Diagnostics.Debugger.Break();

#endif
			}
		}

		public static void FakeLoadInvasionStart()
		{
			int num = 0;
			int num1 = 0;
			switch (Main.invasionType)
			{
				case 1:
				case 2:
				{
					num = 80;
					num1 = 40;
					break;
				}
				case 3:
				{
					num = 120;
					num1 = 60;
					break;
				}
				case 4:
				{
					num = 160;
					num1 = 40;
					break;
				}
			}
			int num2 = (int)Math.Ceiling((double)((float)(Main.invasionSize - num) / (float)num1));
			Main.invasionSizeStart = num;
			if (num2 > 0)
			{
				Main.invasionSizeStart = Main.invasionSizeStart + num2 * num1;
			}
		}

		[DllImport("user32.dll", CharSet=CharSet.None, ExactSpelling=false)]
		public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

		protected bool FullTile(int x, int y)
		{
			if (Main.tile[x - 1, y] == null || Main.tile[x - 1, y].blockType() != 0 || Main.tile[x + 1, y] == null || Main.tile[x + 1, y].blockType() != 0)
			{
				return false;
			}
			Tile tile = Main.tile[x, y];
			if (tile == null)
			{
				return false;
			}
			if (tile.active())
			{
				ushort num = tile.type;
				if (num <= 138)
				{
					if (num <= 48)
					{
						if (num == 10 || num == 48)
						{
							return false;
						}
						goto Label0;
					}
					else if (num != 54)
					{
						switch (num)
						{
							case 137:
							case 138:
							{
								break;
							}
							default:
							{
								goto Label0;
							}
						}
					}
				}
				else if (num <= 191)
				{
					if (num == 162 || num == 191)
					{
						return false;
					}
					goto Label0;
				}
				else if (num != 232 && num != 328)
				{
					switch (num)
					{
						case 387:
						case 388:
						{
							break;
						}
						default:
						{
							goto Label0;
						}
					}
				}
				return false;
			}
			return false;
		Label0:
			if (Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
			{
				int num1 = tile.frameX;
				int num2 = tile.frameY;
				if (Main.tileLargeFrames[tile.type] == 1)
				{
					if (num2 == 18 || num2 == 108)
					{
						if (num1 >= 18 && num1 <= 54)
						{
							return true;
						}
						if (num1 >= 108 && num1 <= 144)
						{
							return true;
						}
						else
						{
							return false;
						}
					}
					else
					{
						return false;
					}
				}
				else if (num2 == 18)
				{
					if (num1 >= 18 && num1 <= 54)
					{
						return true;
					}
					if (num1 >= 108 && num1 <= 144)
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (num2 >= 90 && num2 <= 196)
				{
					if (num1 <= 70)
					{
						return true;
					}
					if (num1 >= 144 && num1 <= 232)
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else
				{
					return false;
				}
			}
			else
			{
				return false;
			}
		}

		public static string GetInputText(string oldString)
		{
			return "";
		}

		[DllImport("user32.dll", CharSet=CharSet.Auto, ExactSpelling=true)]
		public static extern short GetKeyState(int keyCode);

		[DllImport("User32", CharSet=CharSet.None, ExactSpelling=false)]
		private static extern int GetMenuItemCount(IntPtr hWnd);

		public static string GetPlayerPathFromName(string playerName, bool cloudSave)
		{
			string str = "";
			for (int i = 0; i < playerName.Length; i++)
			{
				string str1 = playerName.Substring(i, 1);
				string str2 = "";
				if (str1 == "a" || str1 == "b" || str1 == "c" || str1 == "d" || str1 == "e" || str1 == "f" || str1 == "g" || str1 == "h" || str1 == "i" || str1 == "j" || str1 == "k" || str1 == "l" || str1 == "m" || str1 == "n" || str1 == "o" || str1 == "p" || str1 == "q" || str1 == "r" || str1 == "s" || str1 == "t" || str1 == "u" || str1 == "v" || str1 == "w" || str1 == "x" || str1 == "y" || str1 == "z" || str1 == "A" || str1 == "B" || str1 == "C" || str1 == "D" || str1 == "E" || str1 == "F" || str1 == "G" || str1 == "H" || str1 == "I" || str1 == "J" || str1 == "K" || str1 == "L" || str1 == "M" || str1 == "N" || str1 == "O" || str1 == "P" || str1 == "Q" || str1 == "R" || str1 == "S" || str1 == "T" || str1 == "U" || str1 == "V" || str1 == "W" || str1 == "X" || str1 == "Y" || str1 == "Z" || str1 == "1" || str1 == "2" || str1 == "3" || str1 == "4" || str1 == "5" || str1 == "6" || str1 == "7" || str1 == "8" || str1 == "9" || str1 == "0")
				{
					str2 = str1;
				}
				else
				{
					str2 = (str1 != " " ? "-" : "_");
				}
				str = string.Concat(str, str2);
			}
			string str3 = (cloudSave ? Main.CloudPlayerPath : Main.PlayerPath);
			object[] directorySeparatorChar = new object[] { str3, Path.DirectorySeparatorChar, str, ".plr" };
			if (FileUtilities.GetFullPath(string.Concat(directorySeparatorChar), cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal))
			{
				str = string.Concat(str, "_");
			}
			object[] objArray = new object[] { str3, Path.DirectorySeparatorChar, str, ".plr" };
			if (FileUtilities.Exists(string.Concat(objArray), cloudSave))
			{
				int num = 2;
				while (true)
				{
					object[] directorySeparatorChar1 = new object[] { str3, Path.DirectorySeparatorChar, str, num, ".plr" };
					if (!FileUtilities.Exists(string.Concat(directorySeparatorChar1), cloudSave))
					{
						break;
					}
					num++;
				}
				str = string.Concat(str, num);
			}
			object[] objArray1 = new object[] { str3, Path.DirectorySeparatorChar, str, ".plr" };
			return string.Concat(objArray1);
		}

		[DllImport("User32", CharSet=CharSet.None, ExactSpelling=false)]
		private static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

		public static int GetTreeStyle(int X)
		{
			int num = 0;
			if (X <= Main.treeX[0])
			{
				num = Main.treeStyle[0];
			}
			else if (X > Main.treeX[1])
			{
				num = (X > Main.treeX[2] ? Main.treeStyle[3] : Main.treeStyle[2]);
			}
			else
			{
				num = Main.treeStyle[1];
			}
			if (num == 0)
			{
				return 0;
			}
			if (num == 5)
			{
				return 10;
			}
			return 5 + num;
		}

		protected static int GetTreeVariant(int x, int y)
		{
			if (Main.tile[x, y] == null || !Main.tile[x, y].active())
			{
				return -1;
			}
			int num = Main.tile[x, y].type;
			if (num > 70)
			{
				if (num == 109)
				{
					return 2;
				}
				if (num == 147)
				{
					return 3;
				}
				if (num == 199)
				{
					return 4;
				}
			}
			else
			{
				if (num == 23)
				{
					return 0;
				}
				if (num == 60)
				{
					if ((double)y <= Main.worldSurface)
					{
						return 1;
					}
					return 5;
				}
				if (num == 70)
				{
					return 6;
				}
			}
			return -1;
		}

		public static string GetWorldPathFromName(string worldName, bool cloudSave)
		{
			string str = worldName;
			string str1 = "";
			for (int i = 0; i < str.Length; i++)
			{
				string str2 = str.Substring(i, 1);
				string str3 = "";
				if (str2 == "a" || str2 == "b" || str2 == "c" || str2 == "d" || str2 == "e" || str2 == "f" || str2 == "g" || str2 == "h" || str2 == "i" || str2 == "j" || str2 == "k" || str2 == "l" || str2 == "m" || str2 == "n" || str2 == "o" || str2 == "p" || str2 == "q" || str2 == "r" || str2 == "s" || str2 == "t" || str2 == "u" || str2 == "v" || str2 == "w" || str2 == "x" || str2 == "y" || str2 == "z" || str2 == "A" || str2 == "B" || str2 == "C" || str2 == "D" || str2 == "E" || str2 == "F" || str2 == "G" || str2 == "H" || str2 == "I" || str2 == "J" || str2 == "K" || str2 == "L" || str2 == "M" || str2 == "N" || str2 == "O" || str2 == "P" || str2 == "Q" || str2 == "R" || str2 == "S" || str2 == "T" || str2 == "U" || str2 == "V" || str2 == "W" || str2 == "X" || str2 == "Y" || str2 == "Z" || str2 == "1" || str2 == "2" || str2 == "3" || str2 == "4" || str2 == "5" || str2 == "6" || str2 == "7" || str2 == "8" || str2 == "9" || str2 == "0")
				{
					str3 = str2;
				}
				else
				{
					str3 = (str2 != " " ? "-" : "_");
				}
				str1 = string.Concat(str1, str3);
			}
			string str4 = (cloudSave ? Main.CloudWorldPath : Main.WorldPath);
			object[] directorySeparatorChar = new object[] { str4, Path.DirectorySeparatorChar, str1, ".wld" };
			if (FileUtilities.GetFullPath(string.Concat(directorySeparatorChar), cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal))
			{
				str1 = string.Concat(str1, "_");
			}
			object[] objArray = new object[] { str4, Path.DirectorySeparatorChar, str1, ".wld" };
			if (FileUtilities.Exists(string.Concat(objArray), cloudSave))
			{
				int num = 2;
				while (true)
				{
					object[] directorySeparatorChar1 = new object[] { str4, Path.DirectorySeparatorChar, str1, num, ".wld" };
					if (!FileUtilities.Exists(string.Concat(directorySeparatorChar1), cloudSave))
					{
						break;
					}
					num++;
				}
				str1 = string.Concat(str1, num);
			}
			object[] objArray1 = new object[] { str4, Path.DirectorySeparatorChar, str1, ".wld" };
			return string.Concat(objArray1);
		}

		public void GUIBarsDraw()
		{
			if (!Main.ignoreErrors)
			{
				this.GUIBarsDrawInner();
			}
			else
			{
				try
				{
					this.GUIBarsDrawInner();
				}
				catch (Exception exception)
				{
					TimeLogger.DrawException(exception);
				}
			}
		}

		protected void GUIBarsDrawInner()
		{
			Main.sX = Main.screenWidth - 800;
			Main.heartLife = 20f;
			int num = Main.player[Main.myPlayer].statLifeMax / 20;
			int num1 = (Main.player[Main.myPlayer].statLifeMax - 400) / 5;
			if (num1 < 0)
			{
				num1 = 0;
			}
			if (num1 > 0)
			{
				num = Main.player[Main.myPlayer].statLifeMax / (20 + num1 / 4);
				Main.heartLife = (float)Main.player[Main.myPlayer].statLifeMax / 20f;
			}
			int num2 = Main.player[Main.myPlayer].statLifeMax2 - Main.player[Main.myPlayer].statLifeMax;
			Main.heartLife = Main.heartLife + (float)(num2 / num);
			int num3 = (int)((float)Main.player[Main.myPlayer].statLifeMax2 / Main.heartLife);
			if (num3 >= 10)
			{
				num3 = 10;
			}
			object[] objArray = new object[] { Lang.inter[0], " ", Main.player[Main.myPlayer].statLifeMax2, "/", Main.player[Main.myPlayer].statLifeMax2 };
			string str = string.Concat(objArray);
			Vector2 vector2 = Main.fontMouseText.MeasureString(str);
			if (!Main.player[Main.myPlayer].ghost)
			{
				SpriteBatch spriteBatch = Main.spriteBatch;
				SpriteFont spriteFont = Main.fontMouseText;
				string str1 = Lang.inter[0];
				Vector2 vector21 = new Vector2((float)(500 + 13 * num3) - vector2.X * 0.5f + (float)Main.sX, 6f);
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
				Vector2 vector22 = new Vector2();
				spriteBatch.DrawString(spriteFont, str1, vector21, color, 0f, vector22, 1f, SpriteEffects.None, 0f);
				Main.spriteBatch.DrawString(Main.fontMouseText, string.Concat(Main.player[Main.myPlayer].statLife, "/", Main.player[Main.myPlayer].statLifeMax2), new Vector2((float)(500 + 13 * num3) + vector2.X * 0.5f + (float)Main.sX, 6f), new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor), 0f, new Vector2(Main.fontMouseText.MeasureString(string.Concat(Main.player[Main.myPlayer].statLife, "/", Main.player[Main.myPlayer].statLifeMax2)).X, 0f), 1f, SpriteEffects.None, 0f);
			}
			for (int i = 1; i < (int)((float)Main.player[Main.myPlayer].statLifeMax2 / Main.heartLife) + 1; i++)
			{
				int num4 = 255;
				float single = 1f;
				bool flag = false;
				if ((float)Main.player[Main.myPlayer].statLife < (float)i * Main.heartLife)
				{
					float single1 = ((float)Main.player[Main.myPlayer].statLife - (float)(i - 1) * Main.heartLife) / (float)Main.heartLife;
					num4 = (int)(30f + 225f * single1);
					if (num4 < 30)
					{
						num4 = 30;
					}
					single = single1 / 4f + 0.75f;
					if ((double)single < 0.75)
					{
						single = 0.75f;
					}
					if (single1 > 0f)
					{
						flag = true;
					}
				}
				else
				{
					num4 = 255;
					if ((float)Main.player[Main.myPlayer].statLife == (float)i * Main.heartLife)
					{
						flag = true;
					}
				}
				if (flag)
				{
					single = single + (Main.cursorScale - 1f);
				}
				int num5 = 0;
				int num6 = 0;
				if (i > 10)
				{
					num5 = num5 - 260;
					num6 = num6 + 26;
				}
				int num7 = (int)((double)((float)num4) * 0.9);
				if (!Main.player[Main.myPlayer].ghost)
				{
					if (num1 <= 0)
					{
						Main.spriteBatch.Draw(Main.heartTexture, new Vector2((float)(500 + 26 * (i - 1) + num5 + Main.sX + Main.heartTexture.Width / 2), 32f + ((float)Main.heartTexture.Height - (float)Main.heartTexture.Height * single) / 2f + (float)num6 + (float)(Main.heartTexture.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.heartTexture.Width, Main.heartTexture.Height)), new Microsoft.Xna.Framework.Color(num4, num4, num4, num7), 0f, new Vector2((float)(Main.heartTexture.Width / 2), (float)(Main.heartTexture.Height / 2)), single, SpriteEffects.None, 0f);
					}
					else
					{
						num1--;
						Main.spriteBatch.Draw(Main.heart2Texture, new Vector2((float)(500 + 26 * (i - 1) + num5 + Main.sX + Main.heartTexture.Width / 2), 32f + ((float)Main.heartTexture.Height - (float)Main.heartTexture.Height * single) / 2f + (float)num6 + (float)(Main.heartTexture.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.heartTexture.Width, Main.heartTexture.Height)), new Microsoft.Xna.Framework.Color(num4, num4, num4, num7), 0f, new Vector2((float)(Main.heartTexture.Width / 2), (float)(Main.heartTexture.Height / 2)), single, SpriteEffects.None, 0f);
					}
				}
			}
			Main.starMana = 20;
			if (Main.player[Main.myPlayer].statManaMax2 > 0)
			{
				int num8 = Main.player[Main.myPlayer].statManaMax2 / 20;
				SpriteBatch spriteBatch1 = Main.spriteBatch;
				SpriteFont spriteFont1 = Main.fontMouseText;
				string str2 = Lang.inter[2];
				Vector2 vector23 = new Vector2((float)(750 + Main.sX), 6f);
				Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
				Vector2 vector24 = new Vector2();
				spriteBatch1.DrawString(spriteFont1, str2, vector23, color1, 0f, vector24, 1f, SpriteEffects.None, 0f);
				for (int j = 1; j < Main.player[Main.myPlayer].statManaMax2 / Main.starMana + 1; j++)
				{
					int num9 = 255;
					bool flag1 = false;
					float single2 = 1f;
					if (Main.player[Main.myPlayer].statMana < j * Main.starMana)
					{
						float single3 = (float)(Main.player[Main.myPlayer].statMana - (j - 1) * Main.starMana) / (float)Main.starMana;
						num9 = (int)(30f + 225f * single3);
						if (num9 < 30)
						{
							num9 = 30;
						}
						single2 = single3 / 4f + 0.75f;
						if ((double)single2 < 0.75)
						{
							single2 = 0.75f;
						}
						if (single3 > 0f)
						{
							flag1 = true;
						}
					}
					else
					{
						num9 = 255;
						if (Main.player[Main.myPlayer].statMana == j * Main.starMana)
						{
							flag1 = true;
						}
					}
					if (flag1)
					{
						single2 = single2 + (Main.cursorScale - 1f);
					}
					int num10 = (int)((double)((float)num9) * 0.9);
					Main.spriteBatch.Draw(Main.manaTexture, new Vector2((float)(775 + Main.sX), (float)(30 + Main.manaTexture.Height / 2) + ((float)Main.manaTexture.Height - (float)Main.manaTexture.Height * single2) / 2f + (float)(28 * (j - 1))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.manaTexture.Width, Main.manaTexture.Height)), new Microsoft.Xna.Framework.Color(num9, num9, num9, num10), 0f, new Vector2((float)(Main.manaTexture.Width / 2), (float)(Main.manaTexture.Height / 2)), single2, SpriteEffects.None, 0f);
				}
			}
			Main.DrawBreath(num3);
			Main.buffString = "";
			Main.bannerMouseOver = false;
			if (!Main.recBigList)
			{
				Main.recStart = 0;
			}
			if (!Main.ingameOptionsWindow && !Main.playerInventory && !Main.achievementsWindow)
			{
				Main.recBigList = false;
				int num11 = -1;
				int num12 = 11;
				for (int k = 0; k < 22; k++)
				{
					if (Main.player[Main.myPlayer].buffType[k] <= 0)
					{
						Main.buffAlpha[k] = 0.4f;
					}
					else
					{
						int num13 = Main.player[Main.myPlayer].buffType[k];
						int num14 = 32 + k * 38;
						int num15 = 76;
						if (k >= num12)
						{
							num14 = 32 + (k - num12) * 38;
							num15 = num15 + 50;
						}
						Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color(Main.buffAlpha[k], Main.buffAlpha[k], Main.buffAlpha[k], Main.buffAlpha[k]);
						SpriteBatch spriteBatch2 = Main.spriteBatch;
						Texture2D texture2D = Main.buffTexture[num13];
						Vector2 vector25 = new Vector2((float)num14, (float)num15);
						Microsoft.Xna.Framework.Rectangle? nullable = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.buffTexture[num13].Width, Main.buffTexture[num13].Height));
						Vector2 vector26 = new Vector2();
						spriteBatch2.Draw(texture2D, vector25, nullable, color2, 0f, vector26, 1f, SpriteEffects.None, 0f);
						if (!Main.vanityPet[num13] && !Main.lightPet[num13] && !Main.buffNoTimeDisplay[num13] && (!Main.player[Main.myPlayer].honeyWet || num13 != 48) && (!Main.player[Main.myPlayer].wet || num13 != 46) && Main.player[Main.myPlayer].buffTime[k] > 2)
						{
							string str3 = "0 s";
							if (Main.player[Main.myPlayer].buffTime[k] / 60 < 3600)
							{
								str3 = (Main.player[Main.myPlayer].buffTime[k] / 60 < 60 ? string.Concat(Math.Round((double)Main.player[Main.myPlayer].buffTime[k] / 60), " s") : string.Concat(Math.Round((double)(Main.player[Main.myPlayer].buffTime[k] / 60) / 60), " m"));
							}
							else
							{
								str3 = string.Concat(Math.Round((double)(Main.player[Main.myPlayer].buffTime[k] / 60) / 3600), " h");
							}
							SpriteBatch spriteBatch3 = Main.spriteBatch;
							SpriteFont spriteFont2 = Main.fontItemStack;
							Vector2 vector27 = new Vector2((float)num14, (float)(num15 + Main.buffTexture[num13].Height));
							Vector2 vector28 = new Vector2();
							spriteBatch3.DrawString(spriteFont2, str3, vector27, color2, 0f, vector28, 0.8f, SpriteEffects.None, 0f);
						}
						if (Main.mouseX >= num14 + Main.buffTexture[num13].Width || Main.mouseY >= num15 + Main.buffTexture[num13].Height || Main.mouseX <= num14 || Main.mouseY <= num15)
						{
							Main.buffAlpha[k] = Main.buffAlpha[k] - 0.05f;
						}
						else
						{
							num11 = k;
							Main.buffAlpha[k] = Main.buffAlpha[k] + 0.1f;
							if (Main.mouseRight && Main.mouseRightRelease)
							{
								bool flag2 = false;
								if (!Main.debuff[num13] && num13 != 60 && num13 != 151)
								{
									if (Main.player[Main.myPlayer].mount.Active && Main.player[Main.myPlayer].mount.CheckBuff(num13))
									{
										Main.player[Main.myPlayer].mount.Dismount(Main.player[Main.myPlayer]);
										flag2 = true;
									}
									if (Main.player[Main.myPlayer].miscEquips[0].buffType == num13 && !Main.player[Main.myPlayer].hideMisc[0])
									{
										Main.player[Main.myPlayer].hideMisc[0] = true;
									}
									if (Main.player[Main.myPlayer].miscEquips[1].buffType == num13 && !Main.player[Main.myPlayer].hideMisc[1])
									{
										Main.player[Main.myPlayer].hideMisc[1] = true;
									}
									Main.PlaySound(12, -1, -1, 1);
									if (!flag2)
									{
										Main.player[Main.myPlayer].DelBuff(k);
									}
								}
							}
						}
						if (Main.buffAlpha[k] > 1f)
						{
							Main.buffAlpha[k] = 1f;
						}
						else if ((double)Main.buffAlpha[k] < 0.4)
						{
							Main.buffAlpha[k] = 0.4f;
						}
					}
				}
				if (num11 >= 0)
				{
					int num16 = Main.player[Main.myPlayer].buffType[num11];
					if (num16 > 0)
					{
						Main.buffString = Main.buffTip[num16];
						if (num16 == 26 && Main.expertMode)
						{
							Main.buffString = string.Concat(Main.buffString, Lang.misc[39]);
						}
						if (num16 == 147)
						{
							Main.bannerMouseOver = true;
						}
						if (num16 == 94)
						{
							int num17 = (int)(Main.player[Main.myPlayer].manaSickReduction * 100f) + 1;
							Main.buffString = string.Concat(Main.buffString, num17, "%");
						}
						if (Main.meleeBuff[num16])
						{
							this.MouseText(Main.buffName[num16], -10, 0);
							return;
						}
						this.MouseText(Main.buffName[num16], 0, 0);
					}
				}
			}
		}

		private void GUIBarsMouseOverLife()
		{
			if (!Main.mouseText)
			{
				int num = 26 * Main.player[Main.myPlayer].statLifeMax2 / (int)Main.heartLife;
				int num1 = 0;
				if (Main.player[Main.myPlayer].statLifeMax2 > 200)
				{
					num = 260;
					num1 = num1 + 26;
				}
				if (Main.mouseX > 500 + Main.sX && Main.mouseX < 500 + num + Main.sX && Main.mouseY > 32 && Main.mouseY < 32 + Main.heartTexture.Height + num1)
				{
					Main.player[Main.myPlayer].showItemIcon = false;
					string str = string.Concat(Main.player[Main.myPlayer].statLife, "/", Main.player[Main.myPlayer].statLifeMax2);
					this.MouseText(str, 0, 0);
					Main.mouseText = true;
				}
			}
		}

		private void GUIBarsMouseOverMana()
		{
			if (!Main.mouseText)
			{
				int num = 24;
				int num1 = 28 * Main.player[Main.myPlayer].statManaMax2 / Main.starMana;
				if (Main.mouseX > 762 + Main.sX && Main.mouseX < 762 + num + Main.sX && Main.mouseY > 30 && Main.mouseY < 30 + num1)
				{
					Main.player[Main.myPlayer].showItemIcon = false;
					string str = string.Concat(Main.player[Main.myPlayer].statMana, "/", Main.player[Main.myPlayer].statManaMax2);
					this.MouseText(str, 0, 0);
					Main.mouseText = true;
				}
			}
		}

		private void GUIChatDraw()
		{
			if (Main.ignoreErrors)
			{
				try
				{
					if ((Main.npcChatText != "" || Main.player[Main.myPlayer].sign != -1) && !Main.editChest)
					{
						this.GUIChatDrawInner();
					}
				}
				catch (Exception exception)
				{
					TimeLogger.DrawException(exception);
				}
			}
			else if ((Main.npcChatText != "" || Main.player[Main.myPlayer].sign != -1) && !Main.editChest)
			{
				this.GUIChatDrawInner();
			}
		}

		protected void GUIChatDrawInner()
		{
			int num;
			object obj;
			object[] objArray;
			if (Main.player[Main.myPlayer].talkNPC < 0 && Main.player[Main.myPlayer].sign == -1)
			{
				Main.npcChatText = "";
				return;
			}
			if (Main.netMode == 0 && Main.autoPause && Main.player[Main.myPlayer].talkNPC >= 0)
			{
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 105)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(107);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 106)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(108);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 123)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(124);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 354)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(353);
				}
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 376)
				{
					Main.npc[Main.player[Main.myPlayer].talkNPC].Transform(369);
				}
			}
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color(200, 200, 200, 200);
			int num1 = (Main.mouseTextColor * 2 + 255) / 3;
			Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color(num1, num1, num1, num1);
			string[] strArrays = Utils.WordwrapString(Main.npcChatText, Main.fontMouseText, 460, 10, out num);
			if (Main.editSign)
			{
				Main main = this;
				main.textBlinkerCount = main.textBlinkerCount + 1;
				if (this.textBlinkerCount >= 20)
				{
					if (this.textBlinkerState != 0)
					{
						this.textBlinkerState = 0;
					}
					else
					{
						this.textBlinkerState = 1;
					}
					this.textBlinkerCount = 0;
				}
				if (this.textBlinkerState == 1)
				{
					string[] strArrays1 = strArrays;
					string[] strArrays2 = strArrays1;
					int num2 = num;
					IntPtr intPtr = (IntPtr)num2;
					strArrays1[num2] = string.Concat(strArrays2[num2], "|");
				}
			}
			num++;
			SpriteBatch spriteBatch = Main.spriteBatch;
			Texture2D texture2D = Main.chatBackTexture;
			Vector2 vector2 = new Vector2((float)(Main.screenWidth / 2 - Main.chatBackTexture.Width / 2), 100f);
			Microsoft.Xna.Framework.Rectangle? nullable = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.chatBackTexture.Width, (num + 1) * 30));
			Vector2 vector21 = new Vector2();
			spriteBatch.Draw(texture2D, vector2, nullable, color, 0f, vector21, 1f, SpriteEffects.None, 0f);
			SpriteBatch spriteBatch1 = Main.spriteBatch;
			Texture2D texture2D1 = Main.chatBackTexture;
			Vector2 vector22 = new Vector2((float)(Main.screenWidth / 2 - Main.chatBackTexture.Width / 2), (float)(100 + (num + 1) * 30));
			Microsoft.Xna.Framework.Rectangle? nullable1 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.chatBackTexture.Height - 30, Main.chatBackTexture.Width, 30));
			Vector2 vector23 = new Vector2();
			spriteBatch1.Draw(texture2D1, vector22, nullable1, color, 0f, vector23, 1f, SpriteEffects.None, 0f);
			for (int i = 0; i < num; i++)
			{
				Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, strArrays[i], (float)(170 + (Main.screenWidth - 800) / 2), (float)(120 + i * 30), color1, Microsoft.Xna.Framework.Color.Black, Vector2.Zero, 1f);
			}
			Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(Main.screenWidth / 2 - Main.chatBackTexture.Width / 2, 100, Main.chatBackTexture.Width, (num + 2) * 30);
			if (Main.npcChatCornerItem != 0)
			{
				Vector2 one = new Vector2((float)(Main.screenWidth / 2 + Main.chatBackTexture.Width / 2), (float)(100 + (num + 1) * 30 + 30));
				one = one - (Vector2.One * 8f);
				Item item = new Item();
				item.netDefaults(Main.npcChatCornerItem);
				float single = 1f;
				Texture2D texture2D2 = Main.itemTexture[item.type];
				if (texture2D2.Width > 32 || texture2D2.Height > 32)
				{
					single = (texture2D2.Width <= texture2D2.Height ? 32f / (float)texture2D2.Height : 32f / (float)texture2D2.Width);
				}
				Microsoft.Xna.Framework.Rectangle? nullable2 = null;
				Main.spriteBatch.Draw(texture2D2, one, nullable2, item.GetAlpha(Microsoft.Xna.Framework.Color.White), 0f, new Vector2((float)texture2D2.Width, (float)texture2D2.Height), single, SpriteEffects.None, 0f);
				if (item.color != new Microsoft.Xna.Framework.Color())
				{
					Microsoft.Xna.Framework.Rectangle? nullable3 = null;
					Main.spriteBatch.Draw(texture2D2, one, nullable3, item.GetColor(item.color), 0f, new Vector2((float)texture2D2.Width, (float)texture2D2.Height), single, SpriteEffects.None, 0f);
				}
				if ((new Microsoft.Xna.Framework.Rectangle((int)one.X - (int)((float)texture2D2.Width * single), (int)one.Y - (int)((float)texture2D2.Height * single), (int)((float)texture2D2.Width * single), (int)((float)texture2D2.Height * single))).Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)))
				{
					this.MouseText(item.name, -11, 0);
				}
			}
			num1 = Main.mouseTextColor;
			color1 = new Microsoft.Xna.Framework.Color(num1, (int)((double)num1 / 1.1), num1 / 2, num1);
			string str = "";
			string str1 = "";
			int num3 = Main.player[Main.myPlayer].statLifeMax2 - Main.player[Main.myPlayer].statLife;
			for (int j = 0; j < 22; j++)
			{
				int num4 = Main.player[Main.myPlayer].buffType[j];
				if (Main.debuff[num4] && Main.player[Main.myPlayer].buffTime[j] > 5 && num4 != 28 && num4 != 34 && num4 != 87 && num4 != 89 && num4 != 21 && num4 != 86)
				{
					num3 = num3 + 1000;
				}
			}
			if (Main.player[Main.myPlayer].sign > -1)
			{
				str = (!Main.editSign ? Lang.inter[48] : Lang.inter[47]);
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
			{
				str = Lang.inter[28];
				str1 = Lang.inter[49];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
			{
				str = Lang.inter[28];
				str1 = Lang.inter[107];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 453)
			{
				str = Lang.inter[28];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
			{
				str = Lang.inter[28];
				str1 = "Hair Style";
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 368)
			{
				str = Lang.inter[28];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 369)
			{
				str = Lang.inter[64];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 17 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 19 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 38 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 54 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 108 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 124 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 142 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 160 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 178 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 208 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 209 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 227 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 228 || Main.npc[Main.player[Main.myPlayer].talkNPC].type == 229)
			{
				str = Lang.inter[28];
				if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
				{
					str1 = Lang.inter[19];
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 37)
			{
				if (!Main.dayTime)
				{
					str = Lang.inter[50];
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
			{
				str = Lang.inter[51];
				str1 = Lang.inter[25];
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 441)
			{
				if (Main.player[Main.myPlayer].taxMoney > 0)
				{
					string str2 = "";
					int num5 = 0;
					int num6 = 0;
					int num7 = 0;
					int num8 = 0;
					int num9 = Main.player[Main.myPlayer].taxMoney;
					if (num9 < 0)
					{
						num9 = 0;
					}
					num3 = num9;
					if (num9 >= 1000000)
					{
						num5 = num9 / 1000000;
						num9 = num9 - num5 * 1000000;
					}
					if (num9 >= 10000)
					{
						num6 = num9 / 10000;
						num9 = num9 - num6 * 10000;
					}
					if (num9 >= 100)
					{
						num7 = num9 / 100;
						num9 = num9 - num7 * 100;
					}
					if (num9 >= 1)
					{
						num8 = num9;
					}
					if (num5 > 0)
					{
						obj = str2;
						objArray = new object[] { obj, num5, " ", Lang.inter[15], " " };
						str2 = string.Concat(objArray);
					}
					if (num6 > 0)
					{
						obj = str2;
						objArray = new object[] { obj, num6, " ", Lang.inter[16], " " };
						str2 = string.Concat(objArray);
					}
					if (num7 > 0)
					{
						obj = str2;
						objArray = new object[] { obj, num7, " ", Lang.inter[17], " " };
						str2 = string.Concat(objArray);
					}
					if (num8 > 0)
					{
						obj = str2;
						objArray = new object[] { obj, num8, " ", Lang.inter[18], " " };
						str2 = string.Concat(objArray);
					}
					float single1 = (float)Main.mouseTextColor / 255f;
					if (num5 > 0)
					{
						color1 = new Microsoft.Xna.Framework.Color((int)(220f * single1), (int)(220f * single1), (int)(198f * single1), (int)Main.mouseTextColor);
					}
					else if (num6 > 0)
					{
						color1 = new Microsoft.Xna.Framework.Color((int)(224f * single1), (int)(201f * single1), (int)(92f * single1), (int)Main.mouseTextColor);
					}
					else if (num7 > 0)
					{
						color1 = new Microsoft.Xna.Framework.Color((int)(181f * single1), (int)(192f * single1), (int)(193f * single1), (int)Main.mouseTextColor);
					}
					else if (num8 > 0)
					{
						color1 = new Microsoft.Xna.Framework.Color((int)(246f * single1), (int)(138f * single1), (int)(96f * single1), (int)Main.mouseTextColor);
					}
					if (str2 != "")
					{
						str2 = str2.Substring(0, str2.Length - 1);
						str = string.Concat(Lang.inter[89], " (", str2, ")");
					}
					else
					{
						str = Lang.inter[89];
					}
				}
				else
				{
					str = Lang.inter[89];
				}
			}
			else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 18)
			{
				string str3 = "";
				int num10 = 0;
				int num11 = 0;
				int num12 = 0;
				int num13 = 0;
				int num14 = num3;
				if (num14 > 0)
				{
					num14 = (int)((double)num14 * 0.75);
					if (num14 < 1)
					{
						num14 = 1;
					}
				}
				if (num14 < 0)
				{
					num14 = 0;
				}
				num3 = num14;
				if (num14 >= 1000000)
				{
					num10 = num14 / 1000000;
					num14 = num14 - num10 * 1000000;
				}
				if (num14 >= 10000)
				{
					num11 = num14 / 10000;
					num14 = num14 - num11 * 10000;
				}
				if (num14 >= 100)
				{
					num12 = num14 / 100;
					num14 = num14 - num12 * 100;
				}
				if (num14 >= 1)
				{
					num13 = num14;
				}
				if (num10 > 0)
				{
					obj = str3;
					objArray = new object[] { obj, num10, " ", Lang.inter[15], " " };
					str3 = string.Concat(objArray);
				}
				if (num11 > 0)
				{
					obj = str3;
					objArray = new object[] { obj, num11, " ", Lang.inter[16], " " };
					str3 = string.Concat(objArray);
				}
				if (num12 > 0)
				{
					obj = str3;
					objArray = new object[] { obj, num12, " ", Lang.inter[17], " " };
					str3 = string.Concat(objArray);
				}
				if (num13 > 0)
				{
					obj = str3;
					objArray = new object[] { obj, num13, " ", Lang.inter[18], " " };
					str3 = string.Concat(objArray);
				}
				float single2 = (float)Main.mouseTextColor / 255f;
				if (num10 > 0)
				{
					color1 = new Microsoft.Xna.Framework.Color((int)(220f * single2), (int)(220f * single2), (int)(198f * single2), (int)Main.mouseTextColor);
				}
				else if (num11 > 0)
				{
					color1 = new Microsoft.Xna.Framework.Color((int)(224f * single2), (int)(201f * single2), (int)(92f * single2), (int)Main.mouseTextColor);
				}
				else if (num12 > 0)
				{
					color1 = new Microsoft.Xna.Framework.Color((int)(181f * single2), (int)(192f * single2), (int)(193f * single2), (int)Main.mouseTextColor);
				}
				else if (num13 > 0)
				{
					color1 = new Microsoft.Xna.Framework.Color((int)(246f * single2), (int)(138f * single2), (int)(96f * single2), (int)Main.mouseTextColor);
				}
				if (str3 != "")
				{
					str3 = str3.Substring(0, str3.Length - 1);
					str = string.Concat(Lang.inter[54], " (", str3, ")");
				}
				else
				{
					str = Lang.inter[54];
				}
			}
			int x = 180 + (Main.screenWidth - 800) / 2;
			int num15 = 130 + num * 30;
			float single3 = 0.9f;
			if (Main.mouseX <= x || (float)Main.mouseX >= (float)x + Main.fontMouseText.MeasureString(str).X || Main.mouseY <= num15 || (float)Main.mouseY >= (float)num15 + Main.fontMouseText.MeasureString(str).Y)
			{
				if (Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = false;
			}
			else
			{
				Main.player[Main.myPlayer].mouseInterface = true;
				single3 = 1.1f;
				if (!Main.npcChatFocus2)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus2 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
			}
			Vector2 vector24 = Main.fontMouseText.MeasureString(str) * 0.5f;
			Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, str, (float)x + vector24.X, (float)num15 + vector24.Y, color1, Microsoft.Xna.Framework.Color.Black, vector24, single3);
			string str4 = Lang.inter[52];
			color1 = new Microsoft.Xna.Framework.Color(num1, (int)((double)num1 / 1.1), num1 / 2, num1);
			x = x + (int)Main.fontMouseText.MeasureString(str).X + 20;
			int x1 = x + (int)Main.fontMouseText.MeasureString(str4).X;
			num15 = 130 + num * 30;
			single3 = 0.9f;
			if (Main.mouseX <= x || (float)Main.mouseX >= (float)x + Main.fontMouseText.MeasureString(str4).X || Main.mouseY <= num15 || (float)Main.mouseY >= (float)num15 + Main.fontMouseText.MeasureString(str4).Y)
			{
				if (Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = false;
			}
			else
			{
				single3 = 1.1f;
				if (!Main.npcChatFocus1)
				{
					Main.PlaySound(12, -1, -1, 1);
				}
				Main.npcChatFocus1 = true;
				Main.player[Main.myPlayer].releaseUseItem = false;
				Main.player[Main.myPlayer].controlUseItem = false;
			}
			vector24 = Main.fontMouseText.MeasureString(str4) * 0.5f;
			Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, str4, (float)x + vector24.X, (float)num15 + vector24.Y, color1, Microsoft.Xna.Framework.Color.Black, vector24, single3);
			if (str1 != "")
			{
				Vector2 vector25 = Main.fontMouseText.MeasureString(str1);
				x = x1 + (int)vector25.X / 3;
				num15 = 130 + num * 30;
				single3 = 0.9f;
				if (Main.mouseX <= x || (float)Main.mouseX >= (float)x + Main.fontMouseText.MeasureString(str1).X || Main.mouseY <= num15 || (float)Main.mouseY >= (float)num15 + Main.fontMouseText.MeasureString(str1).Y)
				{
					if (Main.npcChatFocus3)
					{
						Main.PlaySound(12, -1, -1, 1);
					}
					Main.npcChatFocus3 = false;
				}
				else
				{
					Main.player[Main.myPlayer].mouseInterface = true;
					single3 = 1.1f;
					if (!Main.npcChatFocus3)
					{
						Main.PlaySound(12, -1, -1, 1);
					}
					Main.npcChatFocus3 = true;
					Main.player[Main.myPlayer].releaseUseItem = false;
				}
				vector24 = Main.fontMouseText.MeasureString(str1) * 0.5f;
				Utils.DrawBorderStringFourWay(Main.spriteBatch, Main.fontMouseText, str1, (float)x + vector24.X, (float)num15 + vector24.Y, color1, Microsoft.Xna.Framework.Color.Black, vector24, single3);
			}
			if (rectangle.Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)))
			{
				Main.player[Main.myPlayer].mouseInterface = true;
			}
			if (Main.mouseLeft && Main.mouseLeftRelease && rectangle.Contains(new Microsoft.Xna.Framework.Point(Main.mouseX, Main.mouseY)))
			{
				Main.mouseLeftRelease = false;
				Main.player[Main.myPlayer].releaseUseItem = false;
				Main.player[Main.myPlayer].mouseInterface = true;
				if (Main.npcChatFocus1)
				{
					Main.player[Main.myPlayer].talkNPC = -1;
					Main.player[Main.myPlayer].sign = -1;
					Main.npcChatCornerItem = 0;
					Main.editSign = false;
					Main.npcChatText = "";
					Main.PlaySound(11, -1, -1, 1);
					return;
				}
				if (!Main.npcChatFocus2)
				{
					if (Main.npcChatFocus3 && Main.player[Main.myPlayer].talkNPC >= 0)
					{
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
						{
							Main.PlaySound(12, -1, -1, 1);
							Main.npcChatText = Lang.evilGood();
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.PlaySound(12, -1, -1, 1);
							Main.craftGuide = true;
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
						{
							Main.playerInventory = true;
							Main.npcChatText = "";
							Main.PlaySound(12, -1, -1, 1);
							Main.reforge = true;
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
						{
							Main.OpenHairWindow();
							return;
						}
						if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
						{
							Main.npcChatCornerItem = 0;
							Main.PlaySound(12, -1, -1, 1);
							bool flag = false;
							int num16 = Main.player[Main.myPlayer].FindItem(ItemID.Sets.ExoticPlantsForDyeTrade);
							if (num16 != -1)
							{
								Item item1 = Main.player[Main.myPlayer].inventory[num16];
								item1.stack = item1.stack - 1;
								if (Main.player[Main.myPlayer].inventory[num16].stack <= 0)
								{
									Main.player[Main.myPlayer].inventory[num16] = new Item();
								}
								flag = true;
								Main.PlaySound(24, -1, -1, 1);
								Main.player[Main.myPlayer].GetDyeTraderReward();
							}
							Main.npcChatText = Lang.DyeTraderQuestChat(flag);
						}
					}
				}
				else if (Main.player[Main.myPlayer].sign != -1)
				{
					if (!Main.editSign)
					{
						Main.PlaySound(12, -1, -1, 1);
						Main.editSign = true;
						Main.clrInput();
						return;
					}
					Main.PlaySound(12, -1, -1, 1);
					int num17 = Main.player[Main.myPlayer].sign;
					Sign.TextSign(num17, Main.npcChatText);
					Main.editSign = false;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(47, -1, -1, "", num17, 0f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
				else if (Main.npc[Main.player[Main.myPlayer].talkNPC].type != 369)
				{
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 17)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 1;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 19)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 2;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 124)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 8;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 142)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 9;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 353)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 18;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 368)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 19;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 453)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 20;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 37)
					{
						if (Main.netMode != 0)
						{
							NetMessage.SendData(51, -1, -1, "", Main.myPlayer, 1f, 0f, 0f, 0, 0, 0);
						}
						else
						{
							NPC.SpawnSkeletron();
						}
						Main.npcChatText = "";
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 20)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 3;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 38)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 4;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 54)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 5;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 107)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 6;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 108)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 7;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 160)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 10;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 178)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 11;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 207)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 12;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 208)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 13;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 209)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 14;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 227)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 15;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 228)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 16;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 229)
					{
						Main.playerInventory = true;
						Main.npcChatText = "";
						Main.npcShop = 17;
						this.shop[Main.npcShop].SetupShop(Main.npcShop);
						Main.PlaySound(12, -1, -1, 1);
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 22)
					{
						Main.PlaySound(12, -1, -1, 1);
						Main.HelpText();
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 441)
					{
						if (Main.player[Main.myPlayer].taxMoney <= 0)
						{
							Main.npcChatText = Lang.dialog(Main.rand.Next(390, 401), false);
							return;
						}
						int num18 = Main.player[Main.myPlayer].taxMoney;
						while (num18 > 0)
						{
							if (num18 > 1000000)
							{
								int num19 = num18 / 1000000;
								num18 = num18 - 1000000 * num19;
								Item.NewItem((int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 74, num19, false, 0, false);
							}
							else if (num18 > 10000)
							{
								int num20 = num18 / 10000;
								num18 = num18 - 10000 * num20;
								Item.NewItem((int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 73, num20, false, 0, false);
							}
							else if (num18 <= 100)
							{
								int num21 = num18;
								if (num21 < 1)
								{
									num21 = 1;
								}
								num18 = num18 - num21;
								Item.NewItem((int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 71, num21, false, 0, false);
							}
							else
							{
								int num22 = num18 / 100;
								num18 = num18 - 100 * num22;
								Item.NewItem((int)Main.player[Main.myPlayer].position.X, (int)Main.player[Main.myPlayer].position.Y, Main.player[Main.myPlayer].width, Main.player[Main.myPlayer].height, 72, num22, false, 0, false);
							}
						}
						Main.npcChatText = Lang.dialog(Main.rand.Next(380, 382), false);
						Main.player[Main.myPlayer].taxMoney = 0;
						return;
					}
					if (Main.npc[Main.player[Main.myPlayer].talkNPC].type == 18)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (num3 <= 0)
						{
							int num23 = Main.rand.Next(3);
							if (!ChildSafety.Disabled)
							{
								num23 = Main.rand.Next(1, 3);
							}
							if (num23 == 0)
							{
								Main.npcChatText = Lang.dialog(55, false);
								return;
							}
							if (num23 == 1)
							{
								Main.npcChatText = Lang.dialog(56, false);
								return;
							}
							if (num23 == 2)
							{
								Main.npcChatText = Lang.dialog(57, false);
								return;
							}
						}
						else
						{
							if (Main.player[Main.myPlayer].BuyItem(num3))
							{
								AchievementsHelper.HandleNurseService(num3);
								Main.PlaySound(2, -1, -1, 4);
								Main.player[Main.myPlayer].HealEffect(Main.player[Main.myPlayer].statLifeMax2 - Main.player[Main.myPlayer].statLife, true);
								if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.25)
								{
									Main.npcChatText = Lang.dialog(227, false);
								}
								else if ((double)Main.player[Main.myPlayer].statLife < (double)Main.player[Main.myPlayer].statLifeMax2 * 0.5)
								{
									Main.npcChatText = Lang.dialog(228, false);
								}
								else if ((double)Main.player[Main.myPlayer].statLife >= (double)Main.player[Main.myPlayer].statLifeMax2 * 0.75)
								{
									Main.npcChatText = Lang.dialog(230, false);
								}
								else
								{
									Main.npcChatText = Lang.dialog(229, false);
								}
								Main.player[Main.myPlayer].statLife = Main.player[Main.myPlayer].statLifeMax2;
								for (int k = 0; k < 22; k++)
								{
									int num24 = Main.player[Main.myPlayer].buffType[k];
									if (Main.debuff[num24] && Main.player[Main.myPlayer].buffTime[k] > 0 && num24 != 28 && num24 != 34 && num24 != 87 && num24 != 89 && num24 != 21 && num24 != 86)
									{
										Main.player[Main.myPlayer].DelBuff(k);
									}
								}
								return;
							}
							int num25 = Main.rand.Next(3);
							if (num25 == 0)
							{
								Main.npcChatText = Lang.dialog(52, false);
							}
							if (num25 == 1)
							{
								Main.npcChatText = Lang.dialog(53, false);
							}
							if (num25 == 2)
							{
								Main.npcChatText = Lang.dialog(54, false);
								return;
							}
						}
					}
				}
				else
				{
					Main.npcChatCornerItem = 0;
					Main.PlaySound(12, -1, -1, 1);
					bool flag1 = false;
					if (!Main.anglerQuestFinished && !Main.anglerWhoFinishedToday.Contains(Main.player[Main.myPlayer].name))
					{
						int num26 = Main.player[Main.myPlayer].FindItem(Main.anglerQuestItemNetIDs[Main.anglerQuest]);
						if (num26 != -1)
						{
							Item item2 = Main.player[Main.myPlayer].inventory[num26];
							item2.stack = item2.stack - 1;
							if (Main.player[Main.myPlayer].inventory[num26].stack <= 0)
							{
								Main.player[Main.myPlayer].inventory[num26] = new Item();
							}
							flag1 = true;
							Main.PlaySound(24, -1, -1, 1);
							Player player = Main.player[Main.myPlayer];
							player.anglerQuestsFinished = player.anglerQuestsFinished + 1;
							AchievementsHelper.HandleAnglerService();
							Main.player[Main.myPlayer].GetAnglerReward();
						}
					}
					Main.npcChatText = Lang.AnglerQuestChat(flag1);
					if (flag1)
					{
						Main.anglerQuestFinished = true;
						if (Main.netMode != 1)
						{
							Main.anglerWhoFinishedToday.Add(Main.player[Main.myPlayer].name);
							return;
						}
						NetMessage.SendData(75, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
		}

		private void GUIHotbarDraw()
		{
			if (!Main.ignoreErrors)
			{
				this.GUIHotbarDrawInner();
			}
			else
			{
				try
				{
					this.GUIHotbarDrawInner();
				}
				catch (Exception exception)
				{
					TimeLogger.DrawException(exception);
				}
			}
		}

		protected void GUIHotbarDrawInner()
		{
			if (!Main.playerInventory && !Main.player[Main.myPlayer].ghost)
			{
				string str = Lang.inter[37];
				if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].name != null && Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].name != "")
				{
					str = Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].AffixName();
				}
				Vector2 vector2 = Main.fontMouseText.MeasureString(str) / 2f;
				SpriteBatch spriteBatch = Main.spriteBatch;
				SpriteFont spriteFont = Main.fontMouseText;
				Vector2 vector21 = new Vector2(236f - vector2.X, 0f);
				Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
				Vector2 vector22 = new Vector2();
				spriteBatch.DrawString(spriteFont, str, vector21, color, 0f, vector22, 1f, SpriteEffects.None, 0f);
				int width = 20;
				for (int i = 0; i < 10; i++)
				{
					if (i == Main.player[Main.myPlayer].selectedItem)
					{
						if (Main.hotbarScale[i] < 1f)
						{
							Main.hotbarScale[i] = Main.hotbarScale[i] + 0.05f;
						}
					}
					else if ((double)Main.hotbarScale[i] > 0.75)
					{
						Main.hotbarScale[i] = Main.hotbarScale[i] - 0.05f;
					}
					float single = Main.hotbarScale[i];
					int num = (int)(20f + 22f * (1f - single));
					int num1 = (int)(75f + 150f * single);
					Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color(255, 255, 255, num1);
					if (!Main.player[Main.myPlayer].hbLocked && Main.mouseX >= width && (float)Main.mouseX <= (float)width + (float)Main.inventoryBackTexture.Width * Main.hotbarScale[i] && Main.mouseY >= num && (float)Main.mouseY <= (float)num + (float)Main.inventoryBackTexture.Height * Main.hotbarScale[i] && !Main.player[Main.myPlayer].channel)
					{
						Main.player[Main.myPlayer].mouseInterface = true;
						Main.player[Main.myPlayer].showItemIcon = false;
						if (Main.mouseLeft && !Main.player[Main.myPlayer].hbLocked && !Main.blockMouse)
						{
							Main.player[Main.myPlayer].changeItem = i;
						}
						Main.hoverItemName = Main.player[Main.myPlayer].inventory[i].AffixName();
						if (Main.player[Main.myPlayer].inventory[i].stack > 1)
						{
							object obj = Main.hoverItemName;
							object[] objArray = new object[] { obj, " (", Main.player[Main.myPlayer].inventory[i].stack, ")" };
							Main.hoverItemName = string.Concat(objArray);
						}
						Main.rare = Main.player[Main.myPlayer].inventory[i].rare;
					}
					float single1 = Main.inventoryScale;
					Main.inventoryScale = single;
					ItemSlot.Draw(Main.spriteBatch, Main.player[Main.myPlayer].inventory, 13, i, new Vector2((float)width, (float)num), color1);
					Main.inventoryScale = single1;
					width = width + (int)((float)Main.inventoryBackTexture.Width * Main.hotbarScale[i]) + 4;
				}
			}
		}

		private static void HelpText()
		{
			bool flag = false;
			if (Main.player[Main.myPlayer].statLifeMax > 100)
			{
				flag = true;
			}
			bool flag1 = false;
			if (Main.player[Main.myPlayer].statManaMax > 0)
			{
				flag1 = true;
			}
			bool flag2 = true;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			bool flag6 = false;
			bool flag7 = false;
			bool flag8 = false;
			for (int i = 0; i < 58; i++)
			{
				if (Main.player[Main.myPlayer].inventory[i].pick > 0 && Main.player[Main.myPlayer].inventory[i].name != "Copper Pickaxe")
				{
					flag2 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].axe > 0 && Main.player[Main.myPlayer].inventory[i].name != "Copper Axe")
				{
					flag2 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].hammer > 0)
				{
					flag2 = false;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 11 || Main.player[Main.myPlayer].inventory[i].type == 12 || Main.player[Main.myPlayer].inventory[i].type == 13 || Main.player[Main.myPlayer].inventory[i].type == 14)
				{
					flag3 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 19 || Main.player[Main.myPlayer].inventory[i].type == 20 || Main.player[Main.myPlayer].inventory[i].type == 21 || Main.player[Main.myPlayer].inventory[i].type == 22)
				{
					flag4 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 75)
				{
					flag5 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 38)
				{
					flag6 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 68 || Main.player[Main.myPlayer].inventory[i].type == 70 || Main.player[Main.myPlayer].inventory[i].type == 1330)
				{
					flag7 = true;
				}
				if (Main.player[Main.myPlayer].inventory[i].type == 84)
				{
					flag8 = true;
				}
			}
			bool flag9 = false;
			bool flag10 = false;
			bool flag11 = false;
			bool flag12 = false;
			bool flag13 = false;
			bool flag14 = false;
			bool flag15 = false;
			bool flag16 = false;
			bool flag17 = false;
			for (int j = 0; j < 200; j++)
			{
				if (Main.npc[j].active)
				{
					if (Main.npc[j].type == 17)
					{
						flag9 = true;
					}
					if (Main.npc[j].type == 18)
					{
						flag10 = true;
					}
					if (Main.npc[j].type == 19)
					{
						flag12 = true;
					}
					if (Main.npc[j].type == 20)
					{
						flag11 = true;
					}
					if (Main.npc[j].type == 54)
					{
						flag17 = true;
					}
					if (Main.npc[j].type == 124)
					{
						flag14 = true;
					}
					if (Main.npc[j].type == 107)
					{
						flag13 = true;
					}
					if (Main.npc[j].type == 108)
					{
						flag15 = true;
					}
					if (Main.npc[j].type == 38)
					{
						flag16 = true;
					}
				}
			}
			while (true)
			{
				Main.helpText = Main.helpText + 1;
				if (flag2)
				{
					if (Main.helpText == 1)
					{
						Main.npcChatText = Lang.dialog(177, false);
						return;
					}
					if (Main.helpText == 2)
					{
						Main.npcChatText = Lang.dialog(178, false);
						return;
					}
					if (Main.helpText == 3)
					{
						Main.npcChatText = Lang.dialog(179, false);
						return;
					}
					if (Main.helpText == 4)
					{
						Main.npcChatText = Lang.dialog(180, false);
						return;
					}
					if (Main.helpText == 5)
					{
						Main.npcChatText = Lang.dialog(181, false);
						return;
					}
					if (Main.helpText == 6)
					{
						Main.npcChatText = Lang.dialog(182, false);
						return;
					}
				}
				if (flag2 && !flag3 && !flag4 && Main.helpText == 11)
				{
					Main.npcChatText = Lang.dialog(183, false);
					return;
				}
				if (flag2 && flag3 && !flag4)
				{
					if (Main.helpText == 21)
					{
						Main.npcChatText = Lang.dialog(184, false);
						return;
					}
					if (Main.helpText == 22)
					{
						Main.npcChatText = Lang.dialog(185, false);
						return;
					}
				}
				if (flag2 && flag4)
				{
					if (Main.helpText == 31)
					{
						Main.npcChatText = Lang.dialog(186, false);
						return;
					}
					if (Main.helpText == 32)
					{
						Main.npcChatText = Lang.dialog(187, false);
						return;
					}
				}
				if (!flag && Main.helpText == 41)
				{
					Main.npcChatText = Lang.dialog(188, false);
					return;
				}
				if (!flag1 && Main.helpText == 42)
				{
					Main.npcChatText = Lang.dialog(189, false);
					return;
				}
				if (!flag1 && !flag5 && Main.helpText == 43)
				{
					Main.npcChatText = Lang.dialog(190, false);
					return;
				}
				if (!flag9 && !flag10)
				{
					if (Main.helpText == 51)
					{
						Main.npcChatText = Lang.dialog(191, false);
						return;
					}
					if (Main.helpText == 52)
					{
						Main.npcChatText = Lang.dialog(192, false);
						return;
					}
					if (Main.helpText == 53)
					{
						Main.npcChatText = Lang.dialog(193, false);
						return;
					}
					if (Main.helpText == 54)
					{
						Main.npcChatText = Lang.dialog(194, false);
						return;
					}
				}
				if (!flag9 && Main.helpText == 61)
				{
					Main.npcChatText = Lang.dialog(195, false);
					return;
				}
				if (!flag10 && Main.helpText == 62)
				{
					Main.npcChatText = Lang.dialog(196, false);
					return;
				}
				if (!flag12 && Main.helpText == 63)
				{
					Main.npcChatText = Lang.dialog(197, false);
					return;
				}
				if (!flag11 && Main.helpText == 64)
				{
					Main.npcChatText = Lang.dialog(198, false);
					return;
				}
				if (!flag14 && Main.helpText == 65 && NPC.downedBoss3)
				{
					Main.npcChatText = Lang.dialog(199, false);
					return;
				}
				if (!flag17 && Main.helpText == 66 && NPC.downedBoss3)
				{
					Main.npcChatText = Lang.dialog(200, false);
					return;
				}
				if (!flag13 && Main.helpText == 67)
				{
					Main.npcChatText = Lang.dialog(201, false);
					return;
				}
				if (!flag16 && NPC.downedBoss2 && Main.helpText == 68)
				{
					Main.npcChatText = Lang.dialog(202, false);
					return;
				}
				if (!flag15 && Main.hardMode && Main.helpText == 69)
				{
					Main.npcChatText = Lang.dialog(203, false);
					return;
				}
				if (flag6 && Main.helpText == 71)
				{
					Main.npcChatText = Lang.dialog(204, false);
					return;
				}
				if (flag7 && Main.helpText == 72)
				{
					Main.npcChatText = Lang.dialog((WorldGen.crimson ? 403 : 205), false);
					return;
				}
				if ((flag6 || flag7) && Main.helpText == 80)
				{
					Main.npcChatText = Lang.dialog((WorldGen.crimson ? 402 : 206), false);
					return;
				}
				if (!flag8 && Main.helpText == 201 && !Main.hardMode && !NPC.downedBoss3 && !NPC.downedBoss2)
				{
					Main.npcChatText = Lang.dialog(207, false);
					return;
				}
				if (Main.helpText == 1000 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					Main.npcChatText = Lang.dialog(208, false);
					return;
				}
				if (Main.helpText == 1001 && !NPC.downedBoss1 && !NPC.downedBoss2)
				{
					Main.npcChatText = Lang.dialog(209, false);
					return;
				}
				if (Main.helpText == 1002 && !NPC.downedBoss2)
				{
					if (WorldGen.crimson)
					{
						Main.npcChatText = Lang.dialog(331, false);
						return;
					}
					Main.npcChatText = Lang.dialog(210, false);
					return;
				}
				if (Main.helpText == 1050 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statLifeMax < 200)
				{
					Main.npcChatText = Lang.dialog(211, false);
					return;
				}
				if (Main.helpText == 1051 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statDefense <= 10)
				{
					Main.npcChatText = Lang.dialog(212, false);
					return;
				}
				if (Main.helpText == 1052 && !NPC.downedBoss1 && Main.player[Main.myPlayer].statLifeMax >= 200 && Main.player[Main.myPlayer].statDefense > 10)
				{
					Main.npcChatText = Lang.dialog(213, false);
					return;
				}
				if (Main.helpText == 1053 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax < 300)
				{
					Main.npcChatText = Lang.dialog(214, false);
					return;
				}
				if (Main.helpText == 1054 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax >= 300)
				{
					Main.npcChatText = Lang.dialog(215, false);
					return;
				}
				if (Main.helpText == 1055 && NPC.downedBoss1 && !NPC.downedBoss2 && Main.player[Main.myPlayer].statLifeMax >= 300)
				{
					Main.npcChatText = Lang.dialog(216, false);
					return;
				}
				if (Main.helpText == 1056 && NPC.downedBoss1 && NPC.downedBoss2 && !NPC.downedBoss3)
				{
					Main.npcChatText = Lang.dialog(217, false);
					return;
				}
				if (Main.helpText == 1057 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax < 400)
				{
					Main.npcChatText = Lang.dialog(218, false);
					return;
				}
				if (Main.helpText == 1058 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
				{
					Main.npcChatText = Lang.dialog(219, false);
					return;
				}
				if (Main.helpText == 1059 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
				{
					Main.npcChatText = Lang.dialog(220, false);
					return;
				}
				if (Main.helpText == 1060 && NPC.downedBoss1 && NPC.downedBoss2 && NPC.downedBoss3 && !Main.hardMode && Main.player[Main.myPlayer].statLifeMax >= 400)
				{
					Main.npcChatText = Lang.dialog(221, false);
					return;
				}
				if (Main.helpText == 1061 && Main.hardMode)
				{
					Main.npcChatText = Lang.dialog((WorldGen.crimson ? 401 : 222), false);
					return;
				}
				if (Main.helpText == 1062 && Main.hardMode)
				{
					break;
				}
				if (Main.helpText > 1100)
				{
					Main.helpText = 0;
				}
			}
			Main.npcChatText = Lang.dialog(223, false);
		}

		public static Microsoft.Xna.Framework.Color hslToRgb(float Hue, float Saturation, float Luminosity)
		{
			byte num;
			byte num1;
			byte num2;
			double num3;
			if (Saturation != 0f)
			{
				double hue = (double)Hue;
				num3 = ((double)Luminosity >= 0.5 ? (double)(Luminosity + Saturation - Luminosity * Saturation) : (double)Luminosity * (1 + (double)Saturation));
				double luminosity = 2 * (double)Luminosity - num3;
				double num4 = hue + 0.333333333333333;
				double num5 = hue;
				double num6 = hue - 0.333333333333333;
				num4 = Main.hue2rgb(num4, luminosity, num3);
				num5 = Main.hue2rgb(num5, luminosity, num3);
				num6 = Main.hue2rgb(num6, luminosity, num3);
				num = (byte)Math.Round(num4 * 255);
				num1 = (byte)Math.Round(num5 * 255);
				num2 = (byte)Math.Round(num6 * 255);
			}
			else
			{
				num = (byte)Math.Round((double)Luminosity * 255);
				num1 = (byte)Math.Round((double)Luminosity * 255);
				num2 = (byte)Math.Round((double)Luminosity * 255);
			}
			return new Microsoft.Xna.Framework.Color((int)num, (int)num1, (int)num2);
		}

		public static double hue2rgb(double c, double t1, double t2)
		{
			if (c < 0)
			{
				c = c + 1;
			}
			if (c > 1)
			{
				c = c - 1;
			}
			if (6 * c < 1)
			{
				return t1 + (t2 - t1) * 6 * c;
			}
			if (2 * c < 1)
			{
				return t2;
			}
			if (3 * c >= 2)
			{
				return t1;
			}
			return t1 + (t2 - t1) * (0.666666666666667 - c) * 6;
		}

		protected override void Initialize()
		{
			Item item;
			Main.netMode = 2;
			Main.LocalFavoriteData.Load();
			Main.CloudFavoritesData.Load();
			TileObjectData.Initialize();
			Animation.Initialize();
			Chest.Initialize();
			Wiring.Initialize();
			Framing.Initialize();
			ItemRarity.Initialize();
			TileEntity.InitializeAll();
			Main.InitializeItemAnimations();
			Mount.Initialize();
			Minecart.Initialize();
			WorldGen.RandomizeBackgrounds();
			WorldGen.RandomizeCaveBackgrounds();
			WorldGen.RandomizeMoonState();
			Main.bgAlpha[0] = 1f;
			Main.bgAlpha2[0] = 1f;
			this.invBottom = 258;
			for (int i = 0; i < 651; i++)
			{
				Main.projFrames[i] = 1;
			}
			Main.projFrames[643] = 8;
			Main.projFrames[566] = 4;
			Main.projFrames[565] = 4;
			Main.projFrames[525] = 5;
			Main.projFrames[519] = 4;
			Main.projFrames[509] = 2;
			Main.projFrames[485] = 5;
			Main.projFrames[492] = 8;
			Main.projFrames[500] = 4;
			Main.projFrames[499] = 12;
			Main.projFrames[518] = 4;
			Main.projFrames[585] = 4;
			Main.projFrames[593] = 4;
			Main.projFrames[595] = 28;
			Main.projFrames[596] = 4;
			Main.projFrames[612] = 5;
			Main.projFrames[613] = 4;
			Main.projFrames[614] = 4;
			Main.projFrames[615] = 7;
			Main.projFrames[623] = 12;
			Main.projFrames[633] = 5;
			Main.projFrames[645] = 7;
			Main.projFrames[650] = 4;
			Main.projFrames[384] = 6;
			Main.projFrames[385] = 3;
			Main.projFrames[386] = 6;
			Main.projFrames[390] = 11;
			Main.projFrames[391] = 11;
			Main.projFrames[392] = 11;
			Main.projFrames[393] = 15;
			Main.projFrames[394] = 15;
			Main.projFrames[395] = 15;
			Main.projFrames[398] = 10;
			Main.projFrames[407] = 6;
			Main.projFrames[408] = 2;
			Main.projFrames[409] = 3;
			Main.projFrames[387] = 3;
			Main.projFrames[388] = 3;
			Main.projFrames[334] = 11;
			Main.projFrames[324] = 10;
			Main.projFrames[351] = 2;
			Main.projFrames[349] = 5;
			Main.projFrames[423] = 4;
			Main.projFrames[435] = 4;
			Main.projFrames[436] = 4;
			Main.projFrames[439] = 6;
			Main.projFrames[443] = 4;
			Main.projFrames[447] = 4;
			Main.projFrames[448] = 3;
			Main.projFrames[450] = 5;
			Main.projFrames[454] = 2;
			Main.projFrames[456] = 4;
			Main.projFrames[459] = 3;
			Main.projFrames[462] = 5;
			Main.projFrames[465] = 4;
			Main.projFrames[467] = 4;
			Main.projFrames[468] = 4;
			Main.projFrames[533] = 21;
			Main.projFrames[535] = 12;
			Main.projFrames[539] = 4;
			Main.projFrames[575] = 4;
			Main.projFrames[574] = 2;
			Main.projFrames[634] = 4;
			Main.projFrames[635] = 4;
			Main.projFrames[353] = 14;
			Main.projFrames[346] = 2;
			Main.projFrames[347] = 2;
			Main.projFrames[335] = 4;
			Main.projFrames[344] = 3;
			Main.projFrames[337] = 5;
			Main.projFrames[317] = 8;
			Main.projFrames[321] = 3;
			Main.projFrames[308] = 10;
			Main.projFrames[316] = 4;
			Main.projFrames[275] = 2;
			Main.projFrames[276] = 2;
			Main.projFrames[254] = 5;
			Main.projFrames[307] = 2;
			Main.projFrames[72] = 4;
			Main.projFrames[86] = 4;
			Main.projFrames[87] = 4;
			Main.projFrames[102] = 2;
			Main.projFrames[111] = 8;
			Main.projFrames[112] = 3;
			Main.projFrames[127] = 16;
			Main.projFrames[175] = 2;
			Main.projFrames[181] = 4;
			Main.projFrames[189] = 4;
			Main.projFrames[191] = 18;
			Main.projFrames[192] = 18;
			Main.projFrames[193] = 18;
			Main.projFrames[194] = 18;
			Main.projFrames[190] = 4;
			Main.projFrames[198] = 4;
			Main.projFrames[199] = 8;
			Main.projFrames[200] = 10;
			Main.projFrames[206] = 5;
			Main.projFrames[208] = 5;
			Main.projFrames[209] = 12;
			Main.projFrames[210] = 12;
			Main.projFrames[211] = 10;
			Main.projFrames[221] = 3;
			Main.projFrames[237] = 4;
			Main.projFrames[238] = 6;
			Main.projFrames[221] = 3;
			Main.projFrames[228] = 5;
			Main.projFrames[229] = 4;
			Main.projFrames[236] = 13;
			Main.projFrames[243] = 4;
			Main.projFrames[244] = 6;
			Main.projFrames[249] = 5;
			Main.projFrames[252] = 4;
			Main.projFrames[266] = 6;
			Main.projFrames[268] = 8;
			Main.projFrames[269] = 7;
			Main.projFrames[270] = 3;
			Main.projFrames[313] = 12;
			Main.projFrames[314] = 13;
			Main.projFrames[319] = 11;
			Main.projFrames[373] = 3;
			Main.projFrames[375] = 8;
			Main.projFrames[377] = 9;
			Main.projFrames[379] = 4;
			Main.projFrames[380] = 4;
			Main.projFrames[601] = 2;
			Main.projFrames[602] = 4;
			Main.projPet[492] = true;
			Main.projPet[499] = true;
			Main.projPet[319] = true;
			Main.projPet[334] = true;
			Main.projPet[324] = true;
			Main.projPet[266] = true;
			Main.projPet[313] = true;
			Main.projPet[314] = true;
			Main.projPet[317] = true;
			Main.projPet[175] = true;
			Main.projPet[111] = true;
			Main.projPet[112] = true;
			Main.projPet[127] = true;
			Main.projPet[191] = true;
			Main.projPet[192] = true;
			Main.projPet[193] = true;
			Main.projPet[194] = true;
			Main.projPet[197] = true;
			Main.projPet[198] = true;
			Main.projPet[199] = true;
			Main.projPet[200] = true;
			Main.projPet[208] = true;
			Main.projPet[209] = true;
			Main.projPet[210] = true;
			Main.projPet[211] = true;
			Main.projPet[236] = true;
			Main.projPet[268] = true;
			Main.projPet[269] = true;
			Main.projPet[353] = true;
			Main.projPet[373] = true;
			Main.projPet[375] = true;
			Main.projPet[377] = true;
			Main.projPet[380] = true;
			Main.projPet[387] = true;
			Main.projPet[388] = true;
			Main.projPet[390] = true;
			Main.projPet[391] = true;
			Main.projPet[392] = true;
			Main.projPet[393] = true;
			Main.projPet[394] = true;
			Main.projPet[395] = true;
			Main.projPet[398] = true;
			Main.projPet[407] = true;
			Main.projPet[423] = true;
			Main.projPet[533] = true;
			Main.projPet[613] = true;
			Main.projPet[623] = true;
			Main.projPet[625] = true;
			Main.projPet[626] = true;
			Main.projPet[627] = true;
			Main.projPet[628] = true;
			Main.tileLighted[237] = true;
			Main.tileLighted[27] = true;
			Main.tileLighted[381] = true;
			Main.tileLighted[184] = true;
			Main.slimeRainNPC[1] = true;
			Main.debuff[158] = true;
			Main.debuff[160] = true;
			Main.debuff[20] = true;
			Main.debuff[21] = true;
			Main.debuff[22] = true;
			Main.debuff[23] = true;
			Main.debuff[24] = true;
			Main.debuff[25] = true;
			Main.debuff[28] = true;
			Main.debuff[30] = true;
			Main.debuff[31] = true;
			Main.debuff[32] = true;
			Main.debuff[33] = true;
			Main.debuff[34] = true;
			Main.debuff[35] = true;
			Main.debuff[36] = true;
			Main.debuff[37] = true;
			Main.debuff[38] = true;
			Main.debuff[39] = true;
			Main.debuff[44] = true;
			Main.debuff[46] = true;
			Main.debuff[47] = true;
			Main.debuff[67] = true;
			Main.debuff[68] = true;
			Main.debuff[69] = true;
			Main.debuff[70] = true;
			Main.debuff[80] = true;
			Main.debuff[86] = true;
			Main.debuff[87] = true;
			Main.debuff[88] = true;
			Main.debuff[89] = true;
			Main.debuff[94] = true;
			Main.debuff[103] = true;
			Main.debuff[119] = true;
			Main.debuff[120] = true;
			Main.debuff[137] = true;
			Main.debuff[145] = true;
			Main.debuff[146] = true;
			Main.debuff[147] = true;
			Main.debuff[148] = true;
			Main.debuff[149] = true;
			Main.debuff[156] = true;
			Main.debuff[157] = true;
			Main.debuff[163] = true;
			Main.debuff[164] = true;
			Main.pvpBuff[20] = true;
			Main.pvpBuff[24] = true;
			Main.pvpBuff[31] = true;
			Main.pvpBuff[39] = true;
			Main.pvpBuff[44] = true;
			Main.pvpBuff[20] = true;
			Main.pvpBuff[69] = true;
			Main.pvpBuff[103] = true;
			Main.pvpBuff[119] = true;
			Main.pvpBuff[120] = true;
			Main.pvpBuff[137] = true;
			Main.meleeBuff[71] = true;
			Main.meleeBuff[73] = true;
			Main.meleeBuff[74] = true;
			Main.meleeBuff[75] = true;
			Main.meleeBuff[76] = true;
			Main.meleeBuff[77] = true;
			Main.meleeBuff[78] = true;
			Main.meleeBuff[79] = true;
			Main.buffNoSave[20] = true;
			Main.buffNoSave[22] = true;
			Main.buffNoSave[23] = true;
			Main.buffNoSave[24] = true;
			Main.buffNoSave[28] = true;
			Main.buffNoSave[30] = true;
			Main.buffNoSave[31] = true;
			Main.buffNoSave[34] = true;
			Main.buffNoSave[35] = true;
			Main.buffNoSave[37] = true;
			Main.buffNoSave[38] = true;
			Main.buffNoSave[39] = true;
			Main.buffNoSave[43] = true;
			Main.buffNoSave[44] = true;
			Main.buffNoSave[46] = true;
			Main.buffNoSave[47] = true;
			Main.buffNoSave[48] = true;
			Main.buffNoSave[58] = true;
			Main.buffNoSave[59] = true;
			Main.buffNoSave[60] = true;
			Main.buffNoSave[62] = true;
			Main.buffNoSave[63] = true;
			Main.buffNoSave[64] = true;
			Main.buffNoSave[67] = true;
			Main.buffNoSave[68] = true;
			Main.buffNoSave[69] = true;
			Main.buffNoSave[70] = true;
			Main.buffNoSave[72] = true;
			Main.buffNoSave[80] = true;
			Main.buffNoSave[87] = true;
			Main.buffNoSave[158] = true;
			Main.buffNoSave[146] = true;
			Main.buffNoSave[147] = true;
			Main.buffNoSave[88] = true;
			Main.buffNoSave[89] = true;
			Main.buffNoSave[94] = true;
			Main.buffNoSave[95] = true;
			Main.buffNoSave[96] = true;
			Main.buffNoSave[97] = true;
			Main.buffNoSave[98] = true;
			Main.buffNoSave[99] = true;
			Main.buffNoSave[100] = true;
			Main.buffNoSave[103] = true;
			Main.buffNoSave[118] = true;
			Main.buffNoSave[138] = true;
			Main.buffNoSave[167] = true;
			Main.buffNoSave[166] = true;
			Main.buffNoSave[184] = true;
			Main.buffNoSave[185] = true;
			Main.buffNoSave[119] = true;
			Main.buffNoSave[120] = true;
			Main.buffNoSave[90] = true;
			Main.buffNoSave[125] = true;
			Main.buffNoSave[126] = true;
			Main.buffNoSave[128] = true;
			Main.buffNoSave[129] = true;
			Main.buffNoSave[130] = true;
			Main.buffNoSave[131] = true;
			Main.buffNoSave[132] = true;
			Main.buffNoSave[133] = true;
			Main.buffNoSave[134] = true;
			Main.buffNoSave[135] = true;
			Main.buffNoSave[139] = true;
			Main.buffNoSave[140] = true;
			Main.buffNoSave[141] = true;
			Main.buffNoSave[142] = true;
			Main.buffNoSave[143] = true;
			Main.buffNoSave[137] = true;
			Main.buffNoSave[144] = true;
			Main.buffNoSave[161] = true;
			Main.buffNoSave[162] = true;
			Main.buffNoSave[163] = true;
			Main.buffNoSave[164] = true;
			Main.buffNoSave[168] = true;
			Main.buffNoSave[170] = true;
			Main.buffNoSave[171] = true;
			Main.buffNoSave[172] = true;
			Main.buffNoSave[182] = true;
			Main.buffNoSave[187] = true;
			Main.buffNoSave[188] = true;
			for (int j = 173; j <= 181; j++)
			{
				Main.buffNoSave[j] = true;
			}
			Main.buffNoTimeDisplay[19] = true;
			Main.buffNoTimeDisplay[27] = true;
			Main.buffNoTimeDisplay[28] = true;
			Main.buffNoTimeDisplay[34] = true;
			Main.buffNoTimeDisplay[37] = true;
			Main.buffNoTimeDisplay[38] = true;
			Main.buffNoTimeDisplay[40] = true;
			Main.buffNoTimeDisplay[41] = true;
			Main.buffNoTimeDisplay[42] = true;
			Main.buffNoTimeDisplay[43] = true;
			Main.buffNoTimeDisplay[45] = true;
			Main.buffNoTimeDisplay[49] = true;
			Main.buffNoTimeDisplay[60] = true;
			Main.buffNoTimeDisplay[62] = true;
			Main.buffNoTimeDisplay[64] = true;
			Main.buffNoTimeDisplay[68] = true;
			Main.buffNoTimeDisplay[81] = true;
			Main.buffNoTimeDisplay[82] = true;
			Main.buffNoTimeDisplay[83] = true;
			Main.buffNoTimeDisplay[90] = true;
			Main.buffNoTimeDisplay[95] = true;
			Main.buffNoTimeDisplay[96] = true;
			Main.buffNoTimeDisplay[97] = true;
			Main.buffNoTimeDisplay[98] = true;
			Main.buffNoTimeDisplay[99] = true;
			Main.buffNoTimeDisplay[100] = true;
			Main.buffNoTimeDisplay[101] = true;
			Main.buffNoTimeDisplay[102] = true;
			Main.buffNoTimeDisplay[118] = true;
			Main.buffNoTimeDisplay[138] = true;
			Main.buffNoTimeDisplay[167] = true;
			Main.buffNoTimeDisplay[166] = true;
			Main.buffNoTimeDisplay[184] = true;
			Main.buffNoTimeDisplay[185] = true;
			Main.buffNoTimeDisplay[125] = true;
			Main.buffNoTimeDisplay[126] = true;
			Main.buffNoTimeDisplay[128] = true;
			Main.buffNoTimeDisplay[129] = true;
			Main.buffNoTimeDisplay[130] = true;
			Main.buffNoTimeDisplay[131] = true;
			Main.buffNoTimeDisplay[132] = true;
			Main.buffNoTimeDisplay[133] = true;
			Main.buffNoTimeDisplay[134] = true;
			Main.buffNoTimeDisplay[135] = true;
			Main.buffNoTimeDisplay[136] = true;
			Main.buffNoTimeDisplay[139] = true;
			Main.buffNoTimeDisplay[140] = true;
			Main.buffNoTimeDisplay[141] = true;
			Main.buffNoTimeDisplay[142] = true;
			Main.buffNoTimeDisplay[143] = true;
			Main.buffNoTimeDisplay[137] = true;
			Main.buffNoTimeDisplay[145] = true;
			Main.buffNoTimeDisplay[161] = true;
			Main.buffNoTimeDisplay[162] = true;
			Main.buffNoTimeDisplay[163] = true;
			Main.buffNoTimeDisplay[168] = true;
			Main.buffNoTimeDisplay[170] = true;
			Main.buffNoTimeDisplay[171] = true;
			Main.buffNoTimeDisplay[172] = true;
			Main.buffNoTimeDisplay[182] = true;
			Main.buffNoTimeDisplay[165] = true;
			Main.buffNoTimeDisplay[186] = true;
			Main.buffNoTimeDisplay[187] = true;
			Main.buffNoTimeDisplay[188] = true;
			Main.persistentBuff[71] = true;
			Main.persistentBuff[73] = true;
			Main.persistentBuff[74] = true;
			Main.persistentBuff[75] = true;
			Main.persistentBuff[76] = true;
			Main.persistentBuff[77] = true;
			Main.persistentBuff[78] = true;
			Main.persistentBuff[79] = true;
			Main.vanityPet[40] = true;
			Main.vanityPet[41] = true;
			Main.vanityPet[42] = true;
			Main.vanityPet[45] = true;
			Main.vanityPet[50] = true;
			Main.vanityPet[51] = true;
			Main.vanityPet[52] = true;
			Main.vanityPet[53] = true;
			Main.vanityPet[54] = true;
			Main.vanityPet[55] = true;
			Main.vanityPet[56] = true;
			Main.vanityPet[61] = true;
			Main.vanityPet[154] = true;
			Main.vanityPet[65] = true;
			Main.vanityPet[66] = true;
			Main.vanityPet[81] = true;
			Main.vanityPet[82] = true;
			Main.vanityPet[84] = true;
			Main.vanityPet[85] = true;
			Main.vanityPet[91] = true;
			Main.vanityPet[92] = true;
			Main.vanityPet[127] = true;
			Main.vanityPet[136] = true;
			Main.lightPet[19] = true;
			Main.lightPet[155] = true;
			Main.lightPet[27] = true;
			Main.lightPet[101] = true;
			Main.lightPet[102] = true;
			Main.lightPet[57] = true;
			Main.lightPet[190] = true;
			Main.lightPet[152] = true;
			Main.tileFlame[4] = true;
			Main.tileFlame[33] = true;
			Main.tileFlame[34] = true;
			Main.tileFlame[35] = true;
			Main.tileFlame[42] = true;
			Main.tileFlame[49] = true;
			Main.tileFlame[93] = true;
			Main.tileFlame[98] = true;
			Main.tileFlame[100] = true;
			Main.tileFlame[173] = true;
			Main.tileFlame[174] = true;
			Main.tileFlame[372] = true;
			Main.tileRope[213] = true;
			Main.tileRope[214] = true;
			Main.tileRope[353] = true;
			Main.tileRope[365] = true;
			Main.tileRope[366] = true;
			Main.tilePile[330] = true;
			Main.tilePile[331] = true;
			Main.tilePile[332] = true;
			Main.tilePile[333] = true;
			for (int k = 0; k < 540; k++)
			{
				Main.npcCatchable[k] = false;
			}
			Main.npcCatchable[46] = true;
			Main.npcCatchable[55] = true;
			Main.npcCatchable[74] = true;
			Main.npcCatchable[148] = true;
			Main.npcCatchable[149] = true;
			Main.npcCatchable[297] = true;
			Main.npcCatchable[298] = true;
			Main.npcCatchable[299] = true;
			Main.npcCatchable[300] = true;
			Main.npcCatchable[355] = true;
			Main.npcCatchable[356] = true;
			Main.npcCatchable[357] = true;
			Main.npcCatchable[358] = true;
			Main.npcCatchable[359] = true;
			Main.npcCatchable[360] = true;
			Main.npcCatchable[361] = true;
			Main.npcCatchable[362] = true;
			Main.npcCatchable[363] = true;
			Main.npcCatchable[364] = true;
			Main.npcCatchable[365] = true;
			Main.npcCatchable[366] = true;
			Main.npcCatchable[367] = true;
			Main.npcCatchable[374] = true;
			Main.npcCatchable[377] = true;
			Main.npcCatchable[539] = true;
			Main.npcCatchable[538] = true;
			Main.npcCatchable[484] = true;
			Main.npcCatchable[485] = true;
			Main.npcCatchable[486] = true;
			Main.npcCatchable[487] = true;
			for (int l = 442; l <= 448; l++)
			{
				Main.npcCatchable[l] = true;
			}
			Main.SetTileValue();
			Main.tileSpelunker[6] = true;
			Main.tileSpelunker[7] = true;
			Main.tileSpelunker[8] = true;
			Main.tileSpelunker[9] = true;
			Main.tileSpelunker[12] = true;
			Main.tileSpelunker[21] = true;
			Main.tileSpelunker[28] = true;
			Main.tileSpelunker[107] = true;
			Main.tileSpelunker[108] = true;
			Main.tileSpelunker[111] = true;
			Main.tileSpelunker[63] = true;
			Main.tileSpelunker[64] = true;
			Main.tileSpelunker[65] = true;
			Main.tileSpelunker[66] = true;
			Main.tileSpelunker[67] = true;
			Main.tileSpelunker[68] = true;
			Main.tileSpelunker[166] = true;
			Main.tileSpelunker[167] = true;
			Main.tileSpelunker[168] = true;
			Main.tileSpelunker[169] = true;
			Main.tileSpelunker[178] = true;
			Main.tileSpelunker[211] = true;
			Main.tileSpelunker[221] = true;
			Main.tileSpelunker[222] = true;
			Main.tileSpelunker[223] = true;
			Main.tileSpelunker[236] = true;
			Main.tileSpelunker[37] = true;
			Main.tileSpelunker[407] = true;
			Main.SetupTileMerge();
			Main.tileSolid[379] = true;
			Main.tileSolid[371] = true;
			Main.tileMergeDirt[371] = true;
			Main.tileBlockLight[371] = true;
			Main.tileBouncy[371] = true;
			Main.tileFrameImportant[377] = true;
			Main.tileFrameImportant[373] = true;
			Main.tileFrameImportant[375] = true;
			Main.tileFrameImportant[374] = true;
			Main.tileLighted[372] = true;
			Main.tileFrameImportant[372] = true;
			Main.tileWaterDeath[372] = true;
			Main.tileLavaDeath[372] = true;
			Main.tileSolid[357] = true;
			Main.tileBrick[357] = true;
			Main.tileSolid[408] = true;
			Main.tileMergeDirt[408] = true;
			Main.tileBrick[408] = true;
			Main.tileSolid[409] = true;
			Main.tileBrick[409] = true;
			Main.tileSolid[415] = true;
			Main.tileBrick[415] = true;
			Main.tileLighted[415] = true;
			Main.tileSolid[416] = true;
			Main.tileBrick[416] = true;
			Main.tileLighted[416] = true;
			Main.tileSolid[417] = true;
			Main.tileBrick[417] = true;
			Main.tileLighted[417] = true;
			Main.tileSolid[418] = true;
			Main.tileBrick[418] = true;
			Main.tileLighted[418] = true;
			Main.tileBrick[37] = true;
			Main.tileBrick[117] = true;
			Main.tileBrick[25] = true;
			Main.tileBrick[203] = true;
			Main.tileSolid[232] = true;
			Main.tileSolid[311] = true;
			Main.tileSolid[312] = true;
			Main.tileSolid[313] = true;
			Main.tileMergeDirt[311] = true;
			Main.tileSolid[315] = true;
			Main.tileMergeDirt[315] = true;
			Main.tileSolid[321] = true;
			Main.tileSolid[322] = true;
			Main.tileBlockLight[321] = true;
			Main.tileBlockLight[322] = true;
			Main.tileMergeDirt[321] = true;
			Main.tileMergeDirt[322] = true;
			Main.tileBrick[321] = true;
			Main.tileBrick[322] = true;
			Main.tileShine[239] = 1100;
			Main.tileSolid[239] = true;
			Main.tileSolidTop[239] = true;
			Main.tileSolid[380] = true;
			Main.tileSolidTop[380] = true;
			Main.tileFrameImportant[358] = true;
			Main.tileFrameImportant[359] = true;
			Main.tileFrameImportant[360] = true;
			Main.tileFrameImportant[361] = true;
			Main.tileFrameImportant[362] = true;
			Main.tileFrameImportant[363] = true;
			Main.tileFrameImportant[364] = true;
			Main.tileFrameImportant[391] = true;
			Main.tileLighted[391] = true;
			Main.tileFrameImportant[392] = true;
			Main.tileFrameImportant[393] = true;
			Main.tileFrameImportant[394] = true;
			Main.tileFrameImportant[356] = true;
			Main.tileFrameImportant[334] = true;
			Main.tileFrameImportant[300] = true;
			Main.tileFrameImportant[301] = true;
			Main.tileFrameImportant[302] = true;
			Main.tileFrameImportant[303] = true;
			Main.tileFrameImportant[304] = true;
			Main.tileFrameImportant[305] = true;
			Main.tileFrameImportant[306] = true;
			Main.tileFrameImportant[307] = true;
			Main.tileFrameImportant[308] = true;
			Main.tileFrameImportant[354] = true;
			Main.tileFrameImportant[355] = true;
			Main.tileFrameImportant[324] = true;
			Main.tileObsidianKill[324] = true;
			Main.tileLavaDeath[324] = true;
			Main.tileFrameImportant[283] = true;
			Main.tileFrameImportant[288] = true;
			Main.tileFrameImportant[289] = true;
			Main.tileFrameImportant[290] = true;
			Main.tileFrameImportant[291] = true;
			Main.tileFrameImportant[292] = true;
			Main.tileFrameImportant[293] = true;
			Main.tileFrameImportant[294] = true;
			Main.tileFrameImportant[295] = true;
			Main.tileFrameImportant[296] = true;
			Main.tileFrameImportant[297] = true;
			Main.tileFrameImportant[316] = true;
			Main.tileFrameImportant[317] = true;
			Main.tileFrameImportant[318] = true;
			Main.tileLargeFrames[284] = 1;
			Main.wallHouse[224] = true;
			Main.wallLargeFrames[224] = 2;
			Main.tileLargeFrames[409] = 1;
			Main.tileFrameImportant[410] = true;
			Main.wallHouse[173] = true;
			Main.wallHouse[183] = true;
			Main.wallHouse[179] = true;
			Main.wallLargeFrames[179] = 1;
			Main.tileSolid[367] = true;
			Main.tileBlockLight[367] = true;
			Main.tileMergeDirt[367] = true;
			Main.tileSolid[357] = true;
			Main.tileBlockLight[357] = true;
			Main.tileLargeFrames[357] = 1;
			Main.tileBlendAll[357] = true;
			Main.wallHouse[184] = true;
			Main.wallHouse[181] = true;
			Main.tileSolid[368] = true;
			Main.tileBlockLight[368] = true;
			Main.tileMergeDirt[368] = true;
			Main.tileSolid[369] = true;
			Main.tileBlockLight[369] = true;
			Main.tileBrick[369] = true;
			Main.tileMergeDirt[369] = true;
			Main.wallHouse[186] = true;
			Main.tileLargeFrames[325] = 1;
			Main.tileSolid[325] = true;
			Main.tileBlockLight[325] = true;
			Main.wallLargeFrames[146] = 1;
			Main.wallLargeFrames[147] = 1;
			Main.wallLargeFrames[167] = 1;
			Main.wallLargeFrames[185] = 2;
			Main.tileSolid[326] = true;
			Main.tileBlockLight[326] = true;
			Main.tileSolid[327] = true;
			Main.tileBlockLight[327] = true;
			Main.tileSolid[345] = true;
			Main.tileBlockLight[345] = true;
			Main.tileLighted[327] = true;
			Main.tileSolid[328] = true;
			Main.tileBrick[328] = true;
			Main.tileSolid[329] = true;
			Main.tileBrick[329] = true;
			Main.tileBlockLight[329] = true;
			Main.tileLighted[336] = true;
			Main.tileLighted[340] = true;
			Main.tileLighted[341] = true;
			Main.tileLighted[342] = true;
			Main.tileLighted[343] = true;
			Main.tileLighted[344] = true;
			Main.tileLighted[349] = true;
			Main.tileSolid[284] = true;
			Main.tileBlockLight[284] = true;
			Main.tileSolid[346] = true;
			Main.tileBlockLight[346] = true;
			Main.tileLighted[346] = true;
			Main.tileShine[346] = 2000;
			Main.tileShine2[346] = true;
			Main.tileBrick[346] = true;
			Main.tileMergeDirt[346] = true;
			Main.tileSolid[347] = true;
			Main.tileBlockLight[347] = true;
			Main.tileLighted[347] = true;
			Main.tileShine[347] = 1900;
			Main.tileShine2[347] = true;
			Main.tileBrick[347] = true;
			Main.tileMergeDirt[347] = true;
			Main.tileSolid[348] = true;
			Main.tileBlockLight[348] = true;
			Main.tileLighted[348] = true;
			Main.tileShine[348] = 1800;
			Main.tileShine2[348] = true;
			Main.tileBrick[348] = true;
			Main.tileMergeDirt[348] = true;
			Main.tileSolid[350] = true;
			Main.tileBlockLight[350] = true;
			Main.tileLighted[350] = true;
			Main.tileBrick[350] = true;
			Main.tileMergeDirt[350] = true;
			Main.tileGlowMask[350] = 94;
			Main.tileGlowMask[390] = 130;
			Main.tileGlowMask[381] = 126;
			Main.tileGlowMask[370] = 111;
			Main.tileGlowMask[391] = 131;
			Main.tileGlowMask[410] = 201;
			Main.tileSolid[370] = true;
			Main.tileBlockLight[370] = true;
			Main.tileLighted[370] = true;
			Main.tileShine[370] = 1900;
			Main.tileShine2[370] = true;
			Main.tileBrick[370] = true;
			Main.tileMergeDirt[370] = true;
			Main.tileContainer[21] = true;
			Main.tileContainer[88] = true;
			Main.tileSign[55] = true;
			Main.tileSign[85] = true;
			Main.tileSolid[383] = true;
			Main.tileBrick[383] = true;
			Main.tileBlockLight[383] = true;
			Main.tileSolid[385] = true;
			Main.tileBrick[385] = true;
			Main.tileBlockLight[385] = true;
			Main.tileSolid[396] = true;
			Main.tileBlockLight[396] = true;
			Main.tileSolid[397] = true;
			Main.tileBlockLight[397] = true;
			Main.tileSolid[399] = true;
			Main.tileBlockLight[399] = true;
			Main.tileSolid[401] = true;
			Main.tileBlockLight[401] = true;
			Main.tileSolid[398] = true;
			Main.tileBlockLight[398] = true;
			Main.tileSolid[400] = true;
			Main.tileBlockLight[400] = true;
			Main.tileSolid[402] = true;
			Main.tileBlockLight[402] = true;
			Main.tileSolid[403] = true;
			Main.tileBlockLight[403] = true;
			Main.tileSolid[404] = true;
			Main.tileBlockLight[404] = true;
			Main.tileSolid[407] = true;
			Main.tileBlockLight[407] = true;
			Main.tileShine2[407] = true;
			Main.tileShine[407] = 1000;
			Main.tileFrameImportant[36] = true;
			Main.tileFrameImportant[275] = true;
			Main.tileFrameImportant[276] = true;
			Main.tileFrameImportant[277] = true;
			Main.tileFrameImportant[278] = true;
			Main.tileFrameImportant[279] = true;
			Main.tileFrameImportant[280] = true;
			Main.tileFrameImportant[281] = true;
			Main.tileFrameImportant[282] = true;
			Main.tileFrameImportant[285] = true;
			Main.tileFrameImportant[286] = true;
			Main.tileFrameImportant[414] = true;
			Main.tileFrameImportant[413] = true;
			Main.tileFrameImportant[309] = true;
			Main.tileFrameImportant[310] = true;
			Main.tileFrameImportant[339] = true;
			Main.tileLighted[286] = true;
			Main.tileLighted[302] = true;
			Main.tileFrameImportant[298] = true;
			Main.tileFrameImportant[299] = true;
			Main.tileSolid[170] = true;
			Main.tileFrameImportant[171] = true;
			Main.tileLighted[171] = true;
			Main.tileFrameImportant[247] = true;
			Main.tileFrameImportant[245] = true;
			Main.tileFrameImportant[246] = true;
			Main.tileFrameImportant[239] = true;
			Main.tileFrameImportant[240] = true;
			Main.tileFrameImportant[241] = true;
			Main.tileFrameImportant[242] = true;
			Main.tileFrameImportant[243] = true;
			Main.tileFrameImportant[244] = true;
			Main.tileFrameImportant[254] = true;
			Main.tileSolid[221] = true;
			Main.tileBlockLight[221] = true;
			Main.tileMergeDirt[221] = true;
			Main.tileLighted[96] = true;
			Main.tileMergeDirt[250] = true;
			Main.tileSolid[272] = true;
			Main.tileBlockLight[272] = true;
			Main.tileSolid[229] = true;
			Main.tileBlockLight[229] = true;
			Main.tileMergeDirt[229] = true;
			Main.tileSolid[230] = true;
			Main.tileBlockLight[230] = true;
			Main.tileMergeDirt[230] = true;
			Main.tileSolid[222] = true;
			Main.tileBlockLight[222] = true;
			Main.tileMergeDirt[222] = true;
			Main.tileSolid[223] = true;
			Main.tileBlockLight[223] = true;
			Main.tileMergeDirt[223] = true;
			Main.tileSolid[224] = true;
			Main.tileBlockLight[224] = true;
			Main.tileFrameImportant[237] = true;
			Main.tileFrameImportant[238] = true;
			Main.tileSolid[225] = true;
			Main.tileBlockLight[225] = true;
			Main.tileBrick[225] = true;
			Main.tileSolid[226] = true;
			Main.tileBlockLight[226] = true;
			Main.tileBrick[226] = true;
			Main.tileSolid[235] = true;
			Main.tileBlockLight[235] = true;
			Main.tileFrameImportant[235] = true;
			Main.tileLighted[238] = true;
			Main.tileFrameImportant[236] = true;
			Main.tileCut[236] = true;
			Main.tileSolid[191] = true;
			Main.tileBrick[191] = true;
			Main.tileBlockLight[191] = true;
			Main.tileSolid[211] = true;
			Main.tileBlockLight[211] = true;
			Main.tileSolid[208] = true;
			Main.tileBrick[208] = true;
			Main.tileBlockLight[208] = true;
			Main.tileSolid[192] = true;
			Main.tileBrick[192] = true;
			Main.tileBlockLight[192] = true;
			Main.tileSolid[193] = true;
			Main.tileBrick[193] = true;
			Main.tileBlockLight[193] = true;
			Main.tileMergeDirt[193] = true;
			Main.tileSolid[194] = true;
			Main.tileBrick[194] = true;
			Main.tileBlockLight[194] = true;
			Main.tileSolid[195] = true;
			Main.tileBrick[195] = true;
			Main.tileMergeDirt[195] = true;
			Main.tileBlockLight[195] = true;
			Main.tileBlockLight[200] = true;
			Main.tileSolid[200] = true;
			Main.tileBrick[200] = true;
			Main.tileBlockLight[203] = true;
			Main.tileSolid[203] = true;
			Main.tileMergeDirt[203] = true;
			Main.tileBlockLight[204] = true;
			Main.tileSolid[204] = true;
			Main.tileMergeDirt[204] = true;
			Main.tileBlockLight[165] = true;
			Main.tileShine2[147] = true;
			Main.tileShine2[161] = true;
			Main.tileShine2[163] = true;
			Main.tileShine2[164] = true;
			Main.tileSolid[189] = true;
			Main.tileBlockLight[51] = true;
			Main.tileLighted[204] = true;
			Main.tileShine[204] = 1150;
			Main.tileShine2[204] = true;
			Main.tileSolid[190] = true;
			Main.tileBlockLight[190] = true;
			Main.tileBrick[190] = true;
			Main.tileSolid[198] = true;
			Main.tileMergeDirt[198] = true;
			Main.tileBrick[198] = true;
			Main.tileBlockLight[198] = true;
			Main.tileSolid[206] = true;
			Main.tileBlockLight[206] = true;
			Main.tileMergeDirt[206] = true;
			Main.tileBrick[206] = true;
			Main.tileBlockLight[234] = true;
			Main.tileSolid[248] = true;
			Main.tileSolid[249] = true;
			Main.tileSolid[250] = true;
			Main.tileBrick[248] = true;
			Main.tileBrick[249] = true;
			Main.tileBrick[250] = true;
			Main.tileSolid[251] = true;
			Main.tileSolid[252] = true;
			Main.tileBrick[252] = true;
			Main.tileSolid[253] = true;
			Main.tileBrick[253] = true;
			Main.tileMergeDirt[251] = true;
			Main.tileMergeDirt[252] = true;
			Main.tileMergeDirt[253] = true;
			Main.tileBlockLight[251] = true;
			Main.tileBlockLight[252] = true;
			Main.tileBlockLight[253] = true;
			Main.tileBlockLight[248] = true;
			Main.tileBlockLight[249] = true;
			Main.tileBlockLight[250] = true;
			Main.tileLargeFrames[273] = 1;
			Main.tileSolid[273] = true;
			Main.tileBlockLight[273] = true;
			Main.tileLargeFrames[274] = 1;
			Main.tileSolid[274] = true;
			Main.tileBlockLight[274] = true;
			for (int m = 255; m <= 268; m++)
			{
				Main.tileSolid[m] = true;
				if (m > 261)
				{
					Main.tileLighted[m] = true;
					Main.tileShine2[m] = true;
				}
			}
			Main.tileFrameImportant[269] = true;
			Main.tileFrameImportant[334] = true;
			Main.tileFrameImportant[390] = true;
			Main.tileNoAttach[390] = true;
			Main.tileLavaDeath[390] = true;
			Main.tileLighted[390] = true;
			Main.wallHouse[168] = true;
			Main.wallHouse[169] = true;
			Main.wallHouse[142] = true;
			Main.wallHouse[143] = true;
			Main.wallHouse[144] = true;
			Main.wallHouse[149] = true;
			Main.wallHouse[151] = true;
			Main.wallHouse[150] = true;
			Main.wallHouse[152] = true;
			Main.wallHouse[175] = true;
			Main.wallHouse[176] = true;
			Main.wallHouse[182] = true;
			for (int n = 153; n < 167; n++)
			{
				Main.wallHouse[n] = true;
			}
			Main.wallHouse[146] = true;
			Main.wallHouse[147] = true;
			Main.wallHouse[149] = true;
			Main.wallHouse[167] = true;
			Main.wallHouse[168] = true;
			Main.wallHouse[133] = true;
			Main.wallHouse[134] = true;
			Main.wallHouse[135] = true;
			Main.wallHouse[136] = true;
			Main.wallHouse[137] = true;
			Main.wallHouse[75] = true;
			Main.wallHouse[76] = true;
			Main.wallHouse[78] = true;
			Main.wallHouse[82] = true;
			Main.wallHouse[77] = true;
			Main.wallHouse[1] = true;
			Main.wallHouse[4] = true;
			Main.wallHouse[5] = true;
			Main.wallHouse[6] = true;
			Main.wallHouse[10] = true;
			Main.wallHouse[11] = true;
			Main.wallHouse[12] = true;
			Main.wallHouse[16] = true;
			Main.wallHouse[17] = true;
			Main.wallHouse[18] = true;
			Main.wallHouse[19] = true;
			Main.wallHouse[20] = true;
			Main.wallHouse[21] = true;
			Main.wallHouse[22] = true;
			Main.wallHouse[23] = true;
			Main.wallHouse[24] = true;
			Main.wallHouse[25] = true;
			Main.wallHouse[26] = true;
			Main.wallHouse[27] = true;
			Main.wallHouse[29] = true;
			Main.wallHouse[30] = true;
			Main.wallHouse[31] = true;
			Main.wallHouse[32] = true;
			Main.wallHouse[33] = true;
			Main.wallHouse[34] = true;
			Main.wallHouse[35] = true;
			Main.wallHouse[36] = true;
			Main.wallHouse[37] = true;
			Main.wallHouse[38] = true;
			Main.wallHouse[39] = true;
			Main.wallHouse[41] = true;
			Main.wallHouse[42] = true;
			Main.wallHouse[43] = true;
			Main.wallHouse[44] = true;
			Main.wallHouse[45] = true;
			Main.wallHouse[46] = true;
			Main.wallHouse[47] = true;
			Main.wallHouse[66] = true;
			Main.wallHouse[67] = true;
			Main.wallHouse[68] = true;
			Main.wallHouse[72] = true;
			Main.wallHouse[73] = true;
			Main.wallHouse[107] = true;
			Main.wallHouse[106] = true;
			Main.wallHouse[109] = true;
			Main.wallHouse[110] = true;
			Main.wallHouse[111] = true;
			Main.wallHouse[112] = true;
			Main.wallHouse[113] = true;
			Main.wallHouse[114] = true;
			Main.wallHouse[115] = true;
			Main.wallHouse[116] = true;
			Main.wallHouse[117] = true;
			Main.wallHouse[118] = true;
			Main.wallHouse[119] = true;
			Main.wallHouse[120] = true;
			Main.wallHouse[121] = true;
			Main.wallHouse[122] = true;
			Main.wallHouse[123] = true;
			Main.wallHouse[124] = true;
			Main.wallHouse[125] = true;
			Main.wallHouse[108] = true;
			Main.wallHouse[100] = true;
			Main.wallHouse[101] = true;
			Main.wallHouse[102] = true;
			Main.wallHouse[103] = true;
			Main.wallHouse[104] = true;
			Main.wallHouse[105] = true;
			Main.wallHouse[84] = true;
			Main.wallHouse[74] = true;
			Main.wallHouse[85] = true;
			Main.wallHouse[88] = true;
			Main.wallHouse[89] = true;
			Main.wallHouse[90] = true;
			Main.wallHouse[91] = true;
			Main.wallHouse[92] = true;
			Main.wallHouse[93] = true;
			Main.wallHouse[126] = true;
			Main.wallHouse[127] = true;
			Main.wallHouse[128] = true;
			Main.wallHouse[129] = true;
			Main.wallHouse[130] = true;
			Main.wallHouse[131] = true;
			Main.wallHouse[132] = true;
			Main.wallHouse[138] = true;
			Main.wallHouse[139] = true;
			Main.wallHouse[140] = true;
			Main.wallHouse[141] = true;
			Main.wallHouse[177] = true;
			Main.wallHouse[172] = true;
			Main.wallHouse[174] = true;
			Main.wallHouse[223] = true;
			Main.wallLight[0] = true;
			Main.wallLight[21] = true;
			Main.wallLight[106] = true;
			Main.wallLight[107] = true;
			Main.wallLight[138] = true;
			Main.wallLight[140] = true;
			Main.wallLight[141] = true;
			Main.wallLight[139] = true;
			Main.wallLight[145] = true;
			Main.wallLight[150] = true;
			Main.wallLight[152] = true;
			Main.wallLight[168] = true;
			for (int o = 0; o < 225; o++)
			{
				Main.wallDungeon[o] = false;
			}
			Main.wallDungeon[7] = true;
			Main.wallDungeon[8] = true;
			Main.wallDungeon[9] = true;
			Main.wallDungeon[94] = true;
			Main.wallDungeon[95] = true;
			Main.wallDungeon[96] = true;
			Main.wallDungeon[97] = true;
			Main.wallDungeon[98] = true;
			Main.wallDungeon[99] = true;
			for (int p = 0; p < 10; p++)
			{
				Main.recentWorld[p] = "";
				Main.recentIP[p] = "";
				Main.recentPort[p] = 0;
			}
			if (Main.rand == null)
			{
				Main.rand = new Random((int)DateTime.Now.Ticks);
			}
			if (WorldGen.genRand == null)
			{
				WorldGen.genRand = new Random((int)DateTime.Now.Ticks);
			}
			this.SetTitle();
			Main.lo = Main.rand.Next(6);
			Main.critterCage = true;
			for (int q = 0; q < 3600; q++)
			{
				Main.CritterCages();
			}
			Main.critterCage = false;
			Main.tileBrick[1] = true;
			Main.tileBrick[54] = true;
			Main.tileBrick[118] = true;
			Main.tileBrick[119] = true;
			Main.tileBrick[120] = true;
			Main.tileBrick[121] = true;
			Main.tileBrick[122] = true;
			Main.tileBrick[140] = true;
			Main.tileBrick[148] = true;
			Main.tileBrick[150] = true;
			Main.tileBrick[151] = true;
			Main.tileBrick[152] = true;
			Main.tileBrick[30] = true;
			Main.tileBrick[38] = true;
			Main.tileBrick[39] = true;
			Main.tileBrick[41] = true;
			Main.tileBrick[43] = true;
			Main.tileBrick[44] = true;
			Main.tileBrick[45] = true;
			Main.tileBrick[46] = true;
			Main.tileBrick[47] = true;
			Main.tileBrick[75] = true;
			Main.tileBrick[76] = true;
			Main.tileBrick[160] = true;
			Main.tileBrick[2] = true;
			Main.tileBrick[199] = true;
			Main.tileBrick[23] = true;
			Main.tileBrick[60] = true;
			Main.tileBrick[70] = true;
			Main.tileBrick[109] = true;
			Main.tileBrick[53] = true;
			Main.tileBrick[116] = true;
			Main.tileBrick[234] = true;
			Main.tileBrick[112] = true;
			Main.tileBrick[147] = true;
			Main.tileBrick[153] = true;
			Main.tileBrick[154] = true;
			Main.tileBrick[155] = true;
			Main.tileBrick[156] = true;
			Main.tileBrick[157] = true;
			Main.tileBrick[158] = true;
			Main.tileBrick[159] = true;
			Main.tileMergeDirt[202] = true;
			Main.tileBrick[202] = true;
			Main.tileSolid[202] = true;
			Main.tileBlockLight[202] = true;
			Main.tileBrick[161] = true;
			Main.tileBlockLight[161] = true;
			Main.tileBlockLight[163] = true;
			Main.tileBlockLight[164] = true;
			Main.tileSolid[188] = true;
			Main.tileBlockLight[188] = true;
			Main.tileBrick[188] = true;
			Main.tileMergeDirt[188] = true;
			Main.tileBrick[179] = true;
			Main.tileSolid[179] = true;
			Main.tileBlockLight[179] = true;
			Main.tileMoss[179] = true;
			Main.tileBrick[381] = true;
			Main.tileSolid[381] = true;
			Main.tileBlockLight[381] = true;
			Main.tileMoss[381] = true;
			Main.tileBrick[180] = true;
			Main.tileSolid[180] = true;
			Main.tileBlockLight[180] = true;
			Main.tileMoss[180] = true;
			Main.tileBrick[181] = true;
			Main.tileSolid[181] = true;
			Main.tileBlockLight[181] = true;
			Main.tileMoss[181] = true;
			Main.tileBrick[182] = true;
			Main.tileSolid[182] = true;
			Main.tileBlockLight[182] = true;
			Main.tileMoss[182] = true;
			Main.tileBrick[183] = true;
			Main.tileSolid[183] = true;
			Main.tileBlockLight[183] = true;
			Main.tileMoss[183] = true;
			Main.tileMergeDirt[177] = true;
			Main.tileMergeDirt[190] = true;
			Main.tileSolid[196] = true;
			Main.tileSolid[197] = true;
			Main.tileMergeDirt[197] = true;
			Main.tileBlockLight[197] = true;
			Main.tileNoSunLight[197] = true;
			Main.tileBrick[175] = true;
			Main.tileSolid[175] = true;
			Main.tileBlockLight[175] = true;
			Main.tileBrick[176] = true;
			Main.tileSolid[176] = true;
			Main.tileBlockLight[176] = true;
			Main.tileBrick[177] = true;
			Main.tileSolid[177] = true;
			Main.tileBlockLight[177] = true;
			Main.tileBrick[225] = true;
			Main.tileBrick[229] = true;
			Main.tileShine[221] = 925;
			Main.tileShine[222] = 875;
			Main.tileShine[223] = 825;
			Main.tileShine2[221] = true;
			Main.tileShine2[222] = true;
			Main.tileShine2[223] = true;
			Main.tileMergeDirt[175] = true;
			Main.tileMergeDirt[176] = true;
			Main.tileMergeDirt[177] = true;
			Main.tileMergeDirt[208] = true;
			Main.tileBrick[162] = true;
			Main.tileSolid[162] = true;
			Main.tileBlockLight[162] = false;
			Main.tileBrick[163] = true;
			Main.tileSolid[163] = true;
			Main.tileBrick[164] = true;
			Main.tileSolid[164] = true;
			Main.tileShine2[6] = true;
			Main.tileShine2[7] = true;
			Main.tileShine2[8] = true;
			Main.tileShine2[9] = true;
			Main.tileShine2[166] = true;
			Main.tileShine2[167] = true;
			Main.tileShine2[168] = true;
			Main.tileShine2[169] = true;
			Main.tileShine2[12] = true;
			Main.tileShine2[21] = true;
			Main.tileShine2[22] = true;
			Main.tileShine2[25] = true;
			Main.tileShine2[45] = true;
			Main.tileShine2[46] = true;
			Main.tileShine2[47] = true;
			Main.tileShine2[63] = true;
			Main.tileShine2[64] = true;
			Main.tileShine2[65] = true;
			Main.tileShine2[66] = true;
			Main.tileShine2[67] = true;
			Main.tileShine2[68] = true;
			Main.tileShine2[107] = true;
			Main.tileShine2[108] = true;
			Main.tileShine2[111] = true;
			Main.tileShine2[121] = true;
			Main.tileShine2[122] = true;
			Main.tileShine2[117] = true;
			Main.tileShine2[211] = true;
			Main.tileShine[129] = 300;
			Main.tileNoFail[330] = true;
			Main.tileNoFail[331] = true;
			Main.tileNoFail[332] = true;
			Main.tileNoFail[333] = true;
			Main.tileNoFail[129] = true;
			Main.tileNoFail[192] = true;
			Main.tileHammer[26] = true;
			Main.tileHammer[31] = true;
			Main.tileAxe[5] = true;
			Main.tileAxe[72] = true;
			Main.tileAxe[80] = true;
			Main.tileAxe[323] = true;
			Main.tileBrick[59] = true;
			Main.tileBrick[234] = true;
			Main.tileSolid[234] = true;
			Main.tileMergeDirt[234] = true;
			Main.tileSand[53] = true;
			Main.tileSand[112] = true;
			Main.tileSand[116] = true;
			Main.tileSand[234] = true;
			Main.tileFrameImportant[233] = true;
			Main.tileLighted[215] = true;
			Main.tileFrameImportant[227] = true;
			Main.tileFrameImportant[228] = true;
			Main.tileFrameImportant[231] = true;
			Main.tileCut[231] = true;
			Main.tileFrameImportant[216] = true;
			Main.tileFrameImportant[217] = true;
			Main.tileFrameImportant[218] = true;
			Main.tileFrameImportant[219] = true;
			Main.tileFrameImportant[220] = true;
			Main.tileFrameImportant[338] = true;
			Main.tileFrameImportant[165] = true;
			Main.tileFrameImportant[209] = true;
			Main.tileFrameImportant[215] = true;
			Main.tileFrameImportant[210] = true;
			Main.tileFrameImportant[212] = true;
			Main.tileFrameImportant[207] = true;
			Main.tileFrameImportant[178] = true;
			Main.tileFrameImportant[184] = true;
			Main.tileFrameImportant[185] = true;
			Main.tileFrameImportant[186] = true;
			Main.tileFrameImportant[187] = true;
			Main.tileFrameImportant[173] = true;
			Main.tileFrameImportant[174] = true;
			Main.tileLighted[173] = true;
			Main.tileLighted[174] = true;
			Main.tileFrameImportant[139] = true;
			Main.tileLighted[160] = true;
			Main.tileLighted[149] = true;
			Main.tileFrameImportant[149] = true;
			Main.tileFrameImportant[142] = true;
			Main.tileFrameImportant[143] = true;
			Main.tileFrameImportant[144] = true;
			Main.tileStone[131] = true;
			Main.tileFrameImportant[136] = true;
			Main.tileFrameImportant[137] = true;
			Main.tileFrameImportant[138] = true;
			Main.tileBlockLight[137] = true;
			Main.tileSolid[137] = true;
			Main.tileBlockLight[160] = true;
			Main.tileSolid[160] = true;
			Main.tileMergeDirt[160] = true;
			Main.tileBlockLight[161] = true;
			Main.tileSolid[161] = true;
			Main.tileBlockLight[145] = true;
			Main.tileSolid[145] = true;
			Main.tileMergeDirt[145] = true;
			Main.tileBlockLight[146] = true;
			Main.tileSolid[146] = true;
			Main.tileMergeDirt[146] = true;
			Main.tileBlockLight[147] = true;
			Main.tileSolid[147] = true;
			Main.tileBlockLight[148] = true;
			Main.tileSolid[148] = true;
			Main.tileMergeDirt[148] = true;
			Main.tileBlockLight[138] = true;
			Main.tileSolid[138] = true;
			Main.tileBlockLight[140] = true;
			Main.tileSolid[140] = true;
			Main.tileBlockLight[151] = true;
			Main.tileSolid[151] = true;
			Main.tileMergeDirt[151] = true;
			Main.tileBlockLight[152] = true;
			Main.tileSolid[152] = true;
			Main.tileMergeDirt[152] = true;
			Main.tileBlockLight[153] = true;
			Main.tileSolid[153] = true;
			Main.tileMergeDirt[153] = true;
			Main.tileBlockLight[154] = true;
			Main.tileSolid[154] = true;
			Main.tileMergeDirt[154] = true;
			Main.tileBlockLight[155] = true;
			Main.tileSolid[155] = true;
			Main.tileMergeDirt[155] = true;
			Main.tileBlockLight[156] = true;
			Main.tileSolid[156] = true;
			Main.tileMergeDirt[156] = true;
			Main.tileMergeDirt[150] = true;
			Main.tileBlockLight[157] = true;
			Main.tileSolid[157] = true;
			Main.tileMergeDirt[157] = true;
			Main.tileBlockLight[158] = true;
			Main.tileSolid[158] = true;
			Main.tileMergeDirt[158] = true;
			Main.tileBlockLight[159] = true;
			Main.tileSolid[159] = true;
			Main.tileMergeDirt[159] = true;
			Main.tileFrameImportant[320] = true;
			Main.tileShine[22] = 1150;
			Main.tileShine[6] = 1150;
			Main.tileShine[7] = 1100;
			Main.tileShine[8] = 1000;
			Main.tileShine[9] = 1050;
			Main.tileShine[166] = 1125;
			Main.tileShine[167] = 1075;
			Main.tileShine[168] = 1025;
			Main.tileShine[169] = 975;
			Main.tileShine[178] = 500;
			Main.tileShine2[178] = true;
			Main.tileShine[12] = 300;
			Main.tileShine[21] = 1200;
			Main.tileShine[63] = 900;
			Main.tileShine[64] = 900;
			Main.tileShine[65] = 900;
			Main.tileShine[66] = 900;
			Main.tileShine[67] = 900;
			Main.tileShine[68] = 900;
			Main.tileShine[45] = 1900;
			Main.tileShine[46] = 2000;
			Main.tileShine[47] = 2100;
			Main.tileShine[122] = 1800;
			Main.tileShine[121] = 1850;
			Main.tileShine[125] = 600;
			Main.tileShine[109] = 9000;
			Main.tileShine[110] = 9000;
			Main.tileShine[116] = 9000;
			Main.tileShine[117] = 9000;
			Main.tileShine[118] = 8000;
			Main.tileShine[107] = 950;
			Main.tileShine[108] = 900;
			Main.tileShine[111] = 850;
			Main.tileShine[211] = 800;
			Main.tileLighted[4] = true;
			Main.tileLighted[17] = true;
			Main.tileLighted[133] = true;
			Main.tileLighted[31] = true;
			Main.tileLighted[33] = true;
			Main.tileLighted[34] = true;
			Main.tileLighted[35] = true;
			Main.tileLighted[37] = true;
			Main.tileLighted[42] = true;
			Main.tileLighted[49] = true;
			Main.tileLighted[58] = true;
			Main.tileLighted[61] = true;
			Main.tileLighted[70] = true;
			Main.tileLighted[71] = true;
			Main.tileLighted[72] = true;
			Main.tileLighted[76] = true;
			Main.tileLighted[77] = true;
			Main.tileLighted[19] = true;
			Main.tileLighted[22] = true;
			Main.tileLighted[26] = true;
			Main.tileLighted[83] = true;
			Main.tileLighted[84] = true;
			Main.tileLighted[92] = true;
			Main.tileLighted[93] = true;
			Main.tileLighted[95] = true;
			Main.tileLighted[98] = true;
			Main.tileLighted[100] = true;
			Main.tileLighted[109] = true;
			Main.tileLighted[125] = true;
			Main.tileLighted[126] = true;
			Main.tileLighted[129] = true;
			Main.tileLighted[140] = true;
			Main.tileLighted[270] = true;
			Main.tileLighted[271] = true;
			Main.tileMergeDirt[1] = true;
			Main.tileMergeDirt[6] = true;
			Main.tileMergeDirt[7] = true;
			Main.tileMergeDirt[8] = true;
			Main.tileMergeDirt[9] = true;
			Main.tileMergeDirt[166] = true;
			Main.tileMergeDirt[167] = true;
			Main.tileMergeDirt[168] = true;
			Main.tileMergeDirt[169] = true;
			Main.tileMergeDirt[22] = true;
			Main.tileMergeDirt[25] = true;
			Main.tileMergeDirt[30] = true;
			Main.tileMergeDirt[37] = true;
			Main.tileMergeDirt[38] = true;
			Main.tileMergeDirt[40] = true;
			Main.tileMergeDirt[53] = true;
			Main.tileMergeDirt[56] = true;
			Main.tileMergeDirt[107] = true;
			Main.tileMergeDirt[108] = true;
			Main.tileMergeDirt[111] = true;
			Main.tileMergeDirt[112] = true;
			Main.tileMergeDirt[116] = true;
			Main.tileMergeDirt[117] = true;
			Main.tileMergeDirt[123] = true;
			Main.tileMergeDirt[140] = true;
			Main.tileMergeDirt[39] = true;
			Main.tileMergeDirt[122] = true;
			Main.tileMergeDirt[121] = true;
			Main.tileMergeDirt[120] = true;
			Main.tileMergeDirt[119] = true;
			Main.tileMergeDirt[118] = true;
			Main.tileMergeDirt[47] = true;
			Main.tileMergeDirt[46] = true;
			Main.tileMergeDirt[45] = true;
			Main.tileMergeDirt[44] = true;
			Main.tileMergeDirt[43] = true;
			Main.tileMergeDirt[41] = true;
			Main.tileFrameImportant[380] = true;
			Main.tileFrameImportant[201] = true;
			Main.tileFrameImportant[3] = true;
			Main.tileFrameImportant[4] = true;
			Main.tileFrameImportant[5] = true;
			Main.tileFrameImportant[10] = true;
			Main.tileFrameImportant[11] = true;
			Main.tileFrameImportant[12] = true;
			Main.tileFrameImportant[13] = true;
			Main.tileFrameImportant[14] = true;
			Main.tileFrameImportant[15] = true;
			Main.tileFrameImportant[16] = true;
			Main.tileFrameImportant[17] = true;
			Main.tileFrameImportant[18] = true;
			Main.tileFrameImportant[19] = true;
			Main.tileFrameImportant[20] = true;
			Main.tileFrameImportant[21] = true;
			Main.tileFrameImportant[24] = true;
			Main.tileFrameImportant[26] = true;
			Main.tileFrameImportant[27] = true;
			Main.tileFrameImportant[28] = true;
			Main.tileFrameImportant[29] = true;
			Main.tileFrameImportant[31] = true;
			Main.tileFrameImportant[33] = true;
			Main.tileFrameImportant[34] = true;
			Main.tileFrameImportant[35] = true;
			Main.tileFrameImportant[42] = true;
			Main.tileFrameImportant[50] = true;
			Main.tileFrameImportant[55] = true;
			Main.tileFrameImportant[61] = true;
			Main.tileFrameImportant[71] = true;
			Main.tileFrameImportant[72] = true;
			Main.tileFrameImportant[73] = true;
			Main.tileFrameImportant[74] = true;
			Main.tileFrameImportant[77] = true;
			Main.tileFrameImportant[78] = true;
			Main.tileFrameImportant[79] = true;
			Main.tileFrameImportant[81] = true;
			Main.tileFrameImportant[82] = true;
			Main.tileFrameImportant[83] = true;
			Main.tileFrameImportant[84] = true;
			Main.tileFrameImportant[85] = true;
			Main.tileFrameImportant[86] = true;
			Main.tileFrameImportant[87] = true;
			Main.tileFrameImportant[88] = true;
			Main.tileFrameImportant[89] = true;
			Main.tileFrameImportant[90] = true;
			Main.tileFrameImportant[91] = true;
			Main.tileFrameImportant[92] = true;
			Main.tileFrameImportant[93] = true;
			Main.tileFrameImportant[94] = true;
			Main.tileFrameImportant[95] = true;
			Main.tileFrameImportant[96] = true;
			Main.tileFrameImportant[97] = true;
			Main.tileFrameImportant[98] = true;
			Main.tileFrameImportant[99] = true;
			Main.tileFrameImportant[101] = true;
			Main.tileFrameImportant[102] = true;
			Main.tileFrameImportant[103] = true;
			Main.tileFrameImportant[104] = true;
			Main.tileFrameImportant[105] = true;
			Main.tileFrameImportant[100] = true;
			Main.tileFrameImportant[106] = true;
			Main.tileFrameImportant[110] = true;
			Main.tileFrameImportant[113] = true;
			Main.tileFrameImportant[114] = true;
			Main.tileFrameImportant[125] = true;
			Main.tileFrameImportant[287] = true;
			Main.tileFrameImportant[126] = true;
			Main.tileFrameImportant[128] = true;
			Main.tileFrameImportant[129] = true;
			Main.tileFrameImportant[132] = true;
			Main.tileFrameImportant[133] = true;
			Main.tileFrameImportant[134] = true;
			Main.tileFrameImportant[135] = true;
			Main.tileFrameImportant[172] = true;
			Main.tileFrameImportant[319] = true;
			Main.tileFrameImportant[323] = true;
			Main.tileFrameImportant[335] = true;
			Main.tileFrameImportant[337] = true;
			Main.tileFrameImportant[349] = true;
			Main.tileFrameImportant[376] = true;
			Main.tileFrameImportant[378] = true;
			Main.tileFrameImportant[141] = true;
			Main.tileFrameImportant[270] = true;
			Main.tileFrameImportant[271] = true;
			Main.tileFrameImportant[314] = true;
			Main.tileSolidTop[376] = true;
			Main.tileTable[376] = true;
			Main.tileTable[380] = true;
			Main.tileCut[201] = true;
			Main.tileCut[3] = true;
			Main.tileCut[24] = true;
			Main.tileCut[28] = true;
			Main.tileCut[32] = true;
			Main.tileCut[51] = true;
			Main.tileCut[52] = true;
			Main.tileCut[61] = true;
			Main.tileCut[62] = true;
			Main.tileCut[69] = true;
			Main.tileCut[71] = true;
			Main.tileCut[73] = true;
			Main.tileCut[74] = true;
			Main.tileCut[82] = true;
			Main.tileCut[83] = true;
			Main.tileCut[84] = true;
			Main.tileCut[110] = true;
			Main.tileCut[113] = true;
			Main.tileCut[115] = true;
			Main.tileCut[184] = true;
			Main.tileCut[205] = true;
			Main.tileCut[352] = true;
			Main.tileCut[382] = true;
			Main.tileAlch[82] = true;
			Main.tileAlch[83] = true;
			Main.tileAlch[84] = true;
			Main.tileSolid[127] = true;
			Main.tileSolid[130] = true;
			Main.tileBlockLight[130] = true;
			Main.tileBlockLight[131] = true;
			Main.tileNoAttach[232] = true;
			Main.tileSolid[107] = true;
			Main.tileBlockLight[107] = true;
			Main.tileSolid[108] = true;
			Main.tileBlockLight[108] = true;
			Main.tileSolid[111] = true;
			Main.tileBlockLight[111] = true;
			Main.tileSolid[109] = true;
			Main.tileBlockLight[109] = true;
			Main.tileSolid[110] = false;
			Main.tileNoAttach[110] = true;
			Main.tileNoFail[110] = true;
			Main.tileSolid[112] = true;
			Main.tileBlockLight[112] = true;
			Main.tileSolid[116] = true;
			Main.tileBlockLight[116] = true;
			Main.tileBrick[117] = true;
			Main.tileBrick[25] = true;
			Main.tileBrick[203] = true;
			Main.tileSolid[117] = true;
			Main.tileBlockLight[117] = true;
			Main.tileSolid[123] = true;
			Main.tileBlockLight[123] = true;
			Main.tileNoFail[165] = true;
			Main.tileNoFail[184] = true;
			Main.tileNoFail[185] = true;
			Main.tileNoFail[186] = true;
			Main.tileNoFail[187] = true;
			Main.tileSolid[118] = true;
			Main.tileBlockLight[118] = true;
			Main.tileSolid[119] = true;
			Main.tileBlockLight[119] = true;
			Main.tileSolid[120] = true;
			Main.tileBlockLight[120] = true;
			Main.tileSolid[121] = true;
			Main.tileBlockLight[121] = true;
			Main.tileSolid[122] = true;
			Main.tileBlockLight[122] = true;
			Main.tileSolid[150] = true;
			Main.tileBlockLight[150] = true;
			Main.tileBlockLight[115] = true;
			Main.tileSolid[199] = true;
			Main.tileBlockLight[199] = true;
			Main.tileNoFail[162] = true;
			Main.tileSolid[0] = true;
			Main.tileBlockLight[0] = true;
			Main.tileSolid[1] = true;
			Main.tileBlockLight[1] = true;
			Main.tileSolid[2] = true;
			Main.tileBlockLight[2] = true;
			Main.tileSolid[3] = false;
			Main.tileNoAttach[3] = true;
			Main.tileNoFail[3] = true;
			Main.tileNoFail[201] = true;
			Main.tileSolid[4] = false;
			Main.tileNoAttach[4] = true;
			Main.tileNoFail[4] = true;
			Main.tileNoFail[24] = true;
			Main.tileSolid[5] = false;
			Main.tileSolid[6] = true;
			Main.tileBlockLight[6] = true;
			Main.tileSolid[7] = true;
			Main.tileBlockLight[7] = true;
			Main.tileSolid[8] = true;
			Main.tileBlockLight[8] = true;
			Main.tileSolid[9] = true;
			Main.tileBlockLight[9] = true;
			Main.tileSolid[166] = true;
			Main.tileBlockLight[166] = true;
			Main.tileSolid[167] = true;
			Main.tileBlockLight[167] = true;
			Main.tileSolid[168] = true;
			Main.tileBlockLight[168] = true;
			Main.tileSolid[169] = true;
			Main.tileBlockLight[169] = true;
			Main.tileBlockLight[10] = true;
			Main.tileSolid[10] = true;
			Main.tileNoAttach[10] = true;
			Main.tileBlockLight[10] = true;
			Main.tileSolid[11] = false;
			Main.tileSolidTop[19] = true;
			Main.tileSolid[19] = true;
			Main.tileSolid[22] = true;
			Main.tileSolid[23] = true;
			Main.tileSolid[25] = true;
			Main.tileSolid[30] = true;
			Main.tileNoFail[32] = true;
			Main.tileBlockLight[32] = true;
			Main.tileNoFail[352] = true;
			Main.tileBlockLight[352] = true;
			Main.tileSolid[37] = true;
			Main.tileBlockLight[37] = true;
			Main.tileSolid[38] = true;
			Main.tileBlockLight[38] = true;
			Main.tileSolid[39] = true;
			Main.tileBlockLight[39] = true;
			Main.tileSolid[40] = true;
			Main.tileBlockLight[40] = true;
			Main.tileSolid[41] = true;
			Main.tileBlockLight[41] = true;
			Main.tileSolid[43] = true;
			Main.tileBlockLight[43] = true;
			Main.tileSolid[44] = true;
			Main.tileBlockLight[44] = true;
			Main.tileSolid[45] = true;
			Main.tileBlockLight[45] = true;
			Main.tileSolid[46] = true;
			Main.tileBlockLight[46] = true;
			Main.tileSolid[47] = true;
			Main.tileBlockLight[47] = true;
			Main.tileSolid[48] = true;
			Main.tileBlockLight[48] = true;
			Main.tileSolid[53] = true;
			Main.tileBlockLight[53] = true;
			Main.tileSolid[54] = true;
			Main.tileBlockLight[52] = true;
			Main.tileBlockLight[205] = true;
			Main.tileSolid[56] = true;
			Main.tileBlockLight[56] = true;
			Main.tileSolid[57] = true;
			Main.tileBlockLight[57] = true;
			Main.tileSolid[58] = true;
			Main.tileBlockLight[58] = true;
			Main.tileBlockLight[382] = true;
			Main.tileSolid[59] = true;
			Main.tileBlockLight[59] = true;
			Main.tileSolid[60] = true;
			Main.tileBlockLight[60] = true;
			Main.tileSolid[63] = true;
			Main.tileBlockLight[63] = true;
			Main.tileStone[63] = true;
			Main.tileStone[130] = true;
			Main.tileSolid[64] = true;
			Main.tileBlockLight[64] = true;
			Main.tileStone[64] = true;
			Main.tileSolid[65] = true;
			Main.tileBlockLight[65] = true;
			Main.tileStone[65] = true;
			Main.tileSolid[66] = true;
			Main.tileBlockLight[66] = true;
			Main.tileStone[66] = true;
			Main.tileSolid[67] = true;
			Main.tileBlockLight[67] = true;
			Main.tileStone[67] = true;
			Main.tileSolid[68] = true;
			Main.tileBlockLight[68] = true;
			Main.tileStone[68] = true;
			Main.tileSolid[75] = true;
			Main.tileBlockLight[75] = true;
			Main.tileSolid[76] = true;
			Main.tileBlockLight[76] = true;
			Main.tileSolid[70] = true;
			Main.tileBlockLight[70] = true;
			Main.tileNoFail[50] = true;
			Main.tileNoAttach[50] = true;
			Main.tileDungeon[41] = true;
			Main.tileDungeon[43] = true;
			Main.tileDungeon[44] = true;
			Main.tileBlockLight[30] = true;
			Main.tileBlockLight[25] = true;
			Main.tileBlockLight[23] = true;
			Main.tileBlockLight[22] = true;
			Main.tileBlockLight[62] = true;
			Main.tileSolidTop[18] = true;
			Main.tileSolidTop[14] = true;
			Main.tileSolidTop[16] = true;
			Main.tileSolidTop[134] = true;
			Main.tileSolidTop[114] = true;
			Main.tileNoAttach[20] = true;
			Main.tileNoAttach[19] = true;
			Main.tileNoAttach[13] = true;
			Main.tileNoAttach[14] = true;
			Main.tileNoAttach[15] = true;
			Main.tileNoAttach[16] = true;
			Main.tileNoAttach[134] = true;
			Main.tileNoAttach[17] = true;
			Main.tileNoAttach[18] = true;
			Main.tileNoAttach[19] = true;
			Main.tileNoAttach[21] = true;
			Main.tileNoAttach[27] = true;
			Main.tileNoAttach[114] = true;
			Main.tileTable[14] = true;
			Main.tileTable[18] = true;
			Main.tileTable[19] = true;
			Main.tileTable[114] = true;
			Main.tileNoAttach[86] = true;
			Main.tileNoAttach[87] = true;
			Main.tileNoAttach[88] = true;
			Main.tileNoAttach[89] = true;
			Main.tileNoAttach[90] = true;
			Main.tileTable[101] = true;
			Main.tileNoAttach[101] = true;
			Main.tileNoAttach[102] = true;
			Main.tileNoAttach[94] = true;
			Main.tileNoAttach[95] = true;
			Main.tileNoAttach[96] = true;
			Main.tileNoAttach[97] = true;
			Main.tileNoAttach[98] = true;
			Main.tileNoAttach[99] = true;
			Main.tileTable[87] = true;
			Main.tileTable[88] = true;
			Main.tileSolidTop[87] = true;
			Main.tileSolidTop[88] = true;
			Main.tileSolidTop[101] = true;
			Main.tileNoAttach[91] = true;
			Main.tileNoAttach[92] = true;
			Main.tileNoAttach[93] = true;
			Main.tileLighted[190] = true;
			Main.tileBlockLight[192] = true;
			Main.tileBrick[192] = false;
			Main.tileWaterDeath[215] = true;
			Main.tileWaterDeath[4] = true;
			Main.tileWaterDeath[51] = true;
			Main.tileWaterDeath[93] = true;
			Main.tileWaterDeath[98] = true;
			Main.tileLavaDeath[3] = true;
			Main.tileLavaDeath[5] = true;
			Main.tileLavaDeath[10] = true;
			Main.tileLavaDeath[11] = true;
			Main.tileLavaDeath[12] = true;
			Main.tileLavaDeath[13] = true;
			Main.tileLavaDeath[14] = true;
			Main.tileLavaDeath[15] = true;
			Main.tileLavaDeath[16] = true;
			Main.tileLavaDeath[17] = true;
			Main.tileLavaDeath[18] = true;
			Main.tileLavaDeath[19] = true;
			Main.tileLavaDeath[20] = true;
			Main.tileLavaDeath[24] = true;
			Main.tileLavaDeath[27] = true;
			Main.tileLavaDeath[28] = true;
			Main.tileLavaDeath[29] = true;
			Main.tileLavaDeath[32] = true;
			Main.tileLavaDeath[33] = true;
			Main.tileLavaDeath[34] = true;
			Main.tileLavaDeath[35] = true;
			Main.tileLavaDeath[36] = true;
			Main.tileLavaDeath[42] = true;
			Main.tileLavaDeath[49] = true;
			Main.tileLavaDeath[50] = true;
			Main.tileLavaDeath[51] = true;
			Main.tileLavaDeath[52] = true;
			Main.tileLavaDeath[55] = true;
			Main.tileLavaDeath[61] = true;
			Main.tileLavaDeath[62] = true;
			Main.tileLavaDeath[69] = true;
			Main.tileLavaDeath[71] = true;
			Main.tileLavaDeath[72] = true;
			Main.tileLavaDeath[73] = true;
			Main.tileLavaDeath[74] = true;
			Main.tileLavaDeath[79] = true;
			Main.tileLavaDeath[80] = true;
			Main.tileLavaDeath[81] = true;
			Main.tileLavaDeath[86] = true;
			Main.tileLavaDeath[87] = true;
			Main.tileLavaDeath[88] = true;
			Main.tileLavaDeath[89] = true;
			Main.tileLavaDeath[90] = true;
			Main.tileLavaDeath[91] = true;
			Main.tileLavaDeath[92] = true;
			Main.tileLavaDeath[93] = true;
			Main.tileLavaDeath[94] = true;
			Main.tileLavaDeath[95] = true;
			Main.tileLavaDeath[96] = true;
			Main.tileLavaDeath[97] = true;
			Main.tileLavaDeath[98] = true;
			Main.tileLavaDeath[100] = true;
			Main.tileLavaDeath[101] = true;
			Main.tileLavaDeath[102] = true;
			Main.tileLavaDeath[103] = true;
			Main.tileLavaDeath[104] = true;
			Main.tileLavaDeath[106] = true;
			Main.tileLavaDeath[110] = true;
			Main.tileLavaDeath[113] = true;
			Main.tileLavaDeath[115] = true;
			Main.tileLavaDeath[125] = true;
			Main.tileLavaDeath[126] = true;
			Main.tileLavaDeath[128] = true;
			Main.tileLavaDeath[149] = true;
			Main.tileLavaDeath[172] = true;
			Main.tileLavaDeath[173] = true;
			Main.tileLavaDeath[174] = true;
			Main.tileLavaDeath[184] = true;
			Main.tileLavaDeath[201] = true;
			Main.tileLavaDeath[205] = true;
			Main.tileLavaDeath[201] = true;
			Main.tileLavaDeath[209] = true;
			Main.tileLavaDeath[210] = true;
			Main.tileLavaDeath[212] = true;
			Main.tileLavaDeath[213] = true;
			Main.tileLavaDeath[353] = true;
			Main.tileLavaDeath[214] = true;
			Main.tileLavaDeath[215] = true;
			Main.tileLavaDeath[216] = true;
			Main.tileLavaDeath[217] = true;
			Main.tileLavaDeath[218] = true;
			Main.tileLavaDeath[219] = true;
			Main.tileLavaDeath[220] = true;
			Main.tileLavaDeath[227] = true;
			Main.tileLavaDeath[228] = true;
			Main.tileLavaDeath[233] = true;
			Main.tileLavaDeath[236] = true;
			Main.tileLavaDeath[238] = true;
			Main.tileLavaDeath[240] = true;
			Main.tileLavaDeath[241] = true;
			Main.tileLavaDeath[242] = true;
			Main.tileLavaDeath[243] = true;
			Main.tileLavaDeath[244] = true;
			Main.tileLavaDeath[245] = true;
			Main.tileLavaDeath[246] = true;
			Main.tileLavaDeath[247] = true;
			Main.tileLavaDeath[254] = true;
			Main.tileLavaDeath[269] = true;
			Main.tileLavaDeath[270] = true;
			Main.tileLavaDeath[271] = true;
			Main.tileLavaDeath[275] = true;
			Main.tileLavaDeath[413] = true;
			Main.tileLavaDeath[276] = true;
			Main.tileLavaDeath[277] = true;
			Main.tileLavaDeath[278] = true;
			Main.tileLavaDeath[279] = true;
			Main.tileLavaDeath[280] = true;
			Main.tileLavaDeath[281] = true;
			Main.tileLavaDeath[282] = true;
			Main.tileLavaDeath[283] = true;
			Main.tileLavaDeath[285] = true;
			Main.tileLavaDeath[286] = true;
			Main.tileLavaDeath[287] = true;
			Main.tileLavaDeath[288] = true;
			Main.tileLavaDeath[289] = true;
			Main.tileLavaDeath[290] = true;
			Main.tileLavaDeath[291] = true;
			Main.tileLavaDeath[292] = true;
			Main.tileLavaDeath[293] = true;
			Main.tileLavaDeath[294] = true;
			Main.tileLavaDeath[295] = true;
			Main.tileLavaDeath[296] = true;
			Main.tileLavaDeath[297] = true;
			Main.tileLavaDeath[298] = true;
			Main.tileLavaDeath[299] = true;
			Main.tileLavaDeath[300] = true;
			Main.tileLavaDeath[301] = true;
			Main.tileLavaDeath[302] = true;
			Main.tileLavaDeath[303] = true;
			Main.tileLavaDeath[304] = true;
			Main.tileLavaDeath[305] = true;
			Main.tileLavaDeath[306] = true;
			Main.tileLavaDeath[307] = true;
			Main.tileLavaDeath[308] = true;
			Main.tileLavaDeath[309] = true;
			Main.tileLavaDeath[310] = true;
			Main.tileLavaDeath[316] = true;
			Main.tileLavaDeath[317] = true;
			Main.tileLavaDeath[318] = true;
			Main.tileLavaDeath[319] = true;
			Main.tileLavaDeath[354] = true;
			Main.tileLavaDeath[355] = true;
			Main.tileLavaDeath[323] = true;
			Main.tileLavaDeath[335] = true;
			Main.tileLavaDeath[338] = true;
			Main.tileLavaDeath[339] = true;
			Main.tileLavaDeath[352] = true;
			Main.tileLavaDeath[382] = true;
			Main.tileLighted[316] = true;
			Main.tileLighted[317] = true;
			Main.tileLighted[318] = true;
			for (int r = 0; r < 419; r++)
			{
				if (Main.tileLavaDeath[r])
				{
					Main.tileObsidianKill[r] = true;
				}
			}
			Main.tileObsidianKill[77] = true;
			Main.tileObsidianKill[78] = true;
			Main.tileObsidianKill[82] = true;
			Main.tileObsidianKill[83] = true;
			Main.tileObsidianKill[84] = true;
			Main.tileObsidianKill[85] = true;
			Main.tileObsidianKill[105] = true;
			Main.tileObsidianKill[129] = true;
			Main.tileObsidianKill[132] = true;
			Main.tileObsidianKill[133] = true;
			Main.tileObsidianKill[134] = true;
			Main.tileObsidianKill[135] = true;
			Main.tileObsidianKill[136] = true;
			Main.tileObsidianKill[139] = true;
			Main.tileObsidianKill[165] = true;
			Main.tileObsidianKill[178] = true;
			Main.tileObsidianKill[185] = true;
			Main.tileObsidianKill[186] = true;
			Main.tileObsidianKill[187] = true;
			Main.tileObsidianKill[231] = true;
			Main.tileObsidianKill[337] = true;
			Main.tileObsidianKill[349] = true;
			Main.tileSolid[384] = true;
			Main.tileBlockLight[384] = true;
			Main.tileNoFail[384] = true;
			Main.tileFrameImportant[395] = true;
			Main.tileLavaDeath[395] = true;
			Main.tileFrameImportant[405] = true;
			Main.tileLavaDeath[405] = true;
			Main.tileSolidTop[405] = true;
			Main.tileTable[405] = true;
			Main.tileLighted[405] = true;
			Main.tileWaterDeath[405] = true;
			Main.tileFrameImportant[406] = true;
			Main.tileLavaDeath[406] = true;
			Main.tileFrameImportant[411] = true;
			Main.tileLavaDeath[411] = true;
			Main.tileFrameImportant[412] = true;
			for (int s = 0; s < 225; s++)
			{
				if (s == 20)
				{
					Main.wallBlend[s] = 14;
				}
				else if (s == 19)
				{
					Main.wallBlend[s] = 9;
				}
				else if (s == 18)
				{
					Main.wallBlend[s] = 8;
				}
				else if (s == 17)
				{
					Main.wallBlend[s] = 7;
				}
				else if (s == 16 || s == 59)
				{
					Main.wallBlend[s] = 2;
				}
				else if (s == 1 || s >= 48 && s <= 53)
				{
					Main.wallBlend[s] = 1;
				}
				else
				{
					Main.wallBlend[s] = s;
				}
			}
			Main.wallBlend[65] = 63;
			Main.wallBlend[66] = 63;
			Main.wallBlend[68] = 63;
			Main.wallBlend[67] = 64;
			Main.wallBlend[80] = 74;
			Main.wallBlend[81] = 77;
			Main.wallBlend[94] = 7;
			Main.wallBlend[95] = 7;
			Main.wallBlend[100] = 7;
			Main.wallBlend[101] = 7;
			Main.wallBlend[96] = 8;
			Main.wallBlend[97] = 8;
			Main.wallBlend[102] = 8;
			Main.wallBlend[103] = 8;
			Main.wallBlend[98] = 9;
			Main.wallBlend[99] = 9;
			Main.wallBlend[104] = 9;
			Main.wallBlend[105] = 9;
			Main.tileNoFail[24] = true;
			Main.tileNoFail[3] = true;
			Main.tileNoFail[52] = true;
			Main.tileNoFail[62] = true;
			Main.tileNoFail[32] = true;
			Main.tileNoFail[61] = true;
			Main.tileNoFail[69] = true;
			Main.tileNoFail[73] = true;
			Main.tileNoFail[74] = true;
			Main.tileNoFail[82] = true;
			Main.tileNoFail[83] = true;
			Main.tileNoFail[84] = true;
			Main.tileNoFail[110] = true;
			Main.tileNoFail[113] = true;
			Main.tileNoFail[115] = true;
			Main.tileNoFail[165] = true;
			Main.tileNoFail[184] = true;
			Main.tileNoFail[201] = true;
			Main.tileNoFail[205] = true;
			Main.tileNoFail[227] = true;
			Main.tileNoFail[233] = true;
			Main.tileNoFail[352] = true;
			Main.tileNoFail[382] = true;
			Main.tileFrameImportant[387] = true;
			Main.tileSolid[387] = true;
			Main.tileBlockLight[387] = true;
			Main.tileNoAttach[387] = true;
			Main.tileLavaDeath[387] = true;
			Main.tileFrameImportant[386] = true;
			Main.tileLavaDeath[386] = true;
			Main.tileNoSunLight[386] = true;
			Main.tileFrameImportant[388] = true;
			Main.tileSolid[388] = true;
			Main.tileBlockLight[388] = true;
			Main.tileNoAttach[388] = true;
			Main.tileLavaDeath[388] = true;
			Main.tileFrameImportant[389] = true;
			Main.tileLavaDeath[389] = true;
			Main.tileNoSunLight[389] = true;
			for (int t = 0; t < 419; t++)
			{
				if (Main.tileSolid[t])
				{
					Main.tileNoSunLight[t] = true;
				}
				Main.tileFrame[t] = 0;
				Main.tileFrameCounter[t] = 0;
			}
			Main.tileNoSunLight[379] = false;
			Main.tileNoSunLight[54] = false;
			Main.tileNoSunLight[328] = false;
			Main.tileNoSunLight[19] = false;
			Main.tileNoSunLight[11] = true;
			Main.tileNoSunLight[189] = false;
			Main.tileNoSunLight[196] = false;
			for (int u = 0; u < Main.maxMenuItems; u++)
			{
				this.menuItemScale[u] = 0.8f;
			}
			for (int v = 0; v < 6001; v++)
			{
				Main.dust[v] = new Dust();
			}
			for (int w = 0; w < 401; w++)
			{
				Main.item[w] = new Item();
			}
			for (int x = 0; x < 201; x++)
			{
				Main.npc[x] = new NPC();
				Main.npc[x].whoAmI = x;
			}
			for (int y = 0; y < 256; y++)
			{
				Main.player[y] = new Player();
			}
			for (int a = 0; a < 1001; a++)
			{
				Main.projectile[a] = new Projectile();
			}
			for (int b = 0; b < 501; b++)
			{
				Main.gore[b] = new Gore();
			}
			for (int c = 0; c < Main.maxRain + 1; c++)
			{
				Main.rain[c] = new Rain();
			}
			for (int d = 0; d < 200; d++)
			{
				Main.cloud[d] = new Cloud();
			}
			for (int e = 0; e < 100; e++)
			{
				Main.combatText[e] = new CombatText();
			}
			for (int f = 0; f < 20; f++)
			{
				Main.itemText[f] = new ItemText();
			}
			int num = 0;
		Label3:
			while (num < 3601)
			{
				item = new Item();
				item.SetDefaults(num, false);
				Main.itemName[num] = item.name;
				if (item.headSlot > 0)
				{
					Item.headType[item.headSlot] = item.type;
				}
				if (item.bodySlot > 0)
				{
					Item.bodyType[item.bodySlot] = item.type;
				}
				if (item.legSlot > 0)
				{
					Item.legType[item.legSlot] = item.type;
				}
				int num1 = item.type;
				if (num1 <= 1827)
				{
					if (num1 > 788)
					{
						if (num1 > 1326)
						{
							switch (num1)
							{
								case 1444:
								case 1445:
								case 1446:
								{
									break;
								}
								default:
								{
									if (num1 == 1801)
									{
										break;
									}
									if (num1 == 1827)
									{
										goto Label1;
									}
									goto Label0;
								}
							}
						}
						else
						{
							if (num1 == 1308 || num1 == 1326)
							{
								goto Label2;
							}
							goto Label0;
						}
					}
					else if (num1 <= 723)
					{
						if (num1 == 683 || num1 == 723)
						{
							goto Label2;
						}
						goto Label0;
					}
					else if (num1 != 726)
					{
						switch (num1)
						{
							case 739:
							case 740:
							case 741:
							case 742:
							case 743:
							case 744:
							{
								break;
							}
							default:
							{
								if (num1 == 788)
								{
									break;
								}
								goto Label0;
							}
						}
					}
				}
				else if (num1 <= 3051)
				{
					if (num1 > 2188)
					{
						if (num1 == 2750 || num1 == 3006 || num1 == 3051)
						{
							goto Label2;
						}
						goto Label0;
					}
					else
					{
						switch (num1)
						{
							case 1930:
							case 1931:
							{
								break;
							}
							default:
							{
								if (num1 == 2188)
								{
									break;
								}
								goto Label0;
							}
						}
					}
				}
				else if (num1 <= 3245)
				{
					switch (num1)
					{
						case 3209:
						case 3210:
						{
							break;
						}
						default:
						{
							if (num1 == 3245)
							{
								goto Label1;
							}
							goto Label0;
						}
					}
				}
				else if (num1 != 3377 && num1 != 3476)
				{
					switch (num1)
					{
						case 3569:
						case 3571:
						{
							break;
						}
						default:
						{
							goto Label0;
						}
					}
				}
			Label2:
				Item.staff[item.type] = true;
				goto Label0;
			}
			Main.InitLifeBytes();
			for (int g = 0; g < Recipe.maxRecipes; g++)
			{
				Main.recipe[g] = new Recipe();
				Main.availableRecipeY[g] = (float)(65 * g);
			}
			Recipe.SetupRecipes();
			for (int h = 0; h < Main.numChatLines; h++)
			{
				Main.chatLine[h] = new ChatLine();
			}
			for (int i1 = 0; i1 < Liquid.resLiquid; i1++)
			{
				Main.liquid[i1] = new Liquid();
			}
			for (int j1 = 0; j1 < 10000; j1++)
			{
				Main.liquidBuffer[j1] = new LiquidBuffer();
			}
			this.waterfallManager = new WaterfallManager();
			Lighting.LightingThreads = Environment.ProcessorCount - 1;
			this.shop[0] = new Chest(false);
			Chest.SetupTravelShop();
			for (int k1 = 1; k1 < Main.numShops; k1++)
			{
				this.shop[k1] = new Chest(false);
				this.shop[k1].SetupShop(k1);
			}
			Main.teamColor[0] = Microsoft.Xna.Framework.Color.White;
			Main.teamColor[1] = new Microsoft.Xna.Framework.Color(218, 59, 59);
			Main.teamColor[2] = new Microsoft.Xna.Framework.Color(59, 218, 85);
			Main.teamColor[3] = new Microsoft.Xna.Framework.Color(59, 149, 218);
			Main.teamColor[4] = new Microsoft.Xna.Framework.Color(242, 221, 100);
			Main.teamColor[5] = new Microsoft.Xna.Framework.Color(224, 100, 242);
			if (Main.menuMode == 1)
			{
				Main.LoadPlayers();
			}
			for (int l1 = 1; l1 < 651; l1++)
			{
				Projectile projectile = new Projectile();
				projectile.SetDefaults(l1);
				if (projectile.hostile)
				{
					Main.projHostile[l1] = true;
				}
				if (projectile.aiStyle == 7)
				{
					Main.projHook[l1] = true;
				}
			}
			Netplay.Initialize();
			NetworkInitializer.Load();
			if (!Main.skipMenu)
			{
				IntPtr systemMenu = Main.GetSystemMenu(base.Window.Handle, false);
				int menuItemCount = Main.GetMenuItemCount(systemMenu);
				Main.RemoveMenu(systemMenu, menuItemCount - 1, 1024);
			}
			else
			{
				WorldGen.clearWorld();
				Main.gameMenu = false;
				Main.LoadPlayers();
				Main.PlayerList[0].SetAsActive();
				Main.LoadWorlds();
				WorldGen.generateWorld(-1, null);
				WorldGen.EveryTileFrame();
				Main.player[Main.myPlayer].Spawn();
				Main.ActivePlayerFileData.StartPlayTimer();
				Player.EnterWorld(Main.player[Main.myPlayer]);
			}
			if (Main.dedServ)
			{
				return;
			}
			Main.clientUUID = Guid.NewGuid().ToString();
			base.Initialize();
			base.Window.AllowUserResizing = true;
			this.OpenSettings();
			if (Main.screenWidth > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width)
			{
				Main.screenWidth = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width;
			}
			if (Main.screenHeight > GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height)
			{
				Main.screenHeight = GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height;
			}
			Main.graphics.ApplyChanges();
			this.CheckBunny();
			if (Lang.lang > 1)
			{
				Lang.setLang(true);
			}
			Lang.setLang(false);
			if (Lang.lang == 0)
			{
				Main.menuMode = 1212;
			}
			this.SetTitle();
			this.OpenRecent();
			Star.SpawnStars();
			WorldGen.RandomizeWeather();
			foreach (DisplayMode supportedDisplayMode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
			{
				if (supportedDisplayMode.Width < Main.minScreenW || supportedDisplayMode.Height < Main.minScreenH || supportedDisplayMode.Width > Main.maxScreenW || supportedDisplayMode.Height > Main.maxScreenH)
				{
					continue;
				}
				bool flag = true;
				int num2 = 0;
				while (num2 < Main.numDisplayModes)
				{
					if (supportedDisplayMode.Width != Main.displayWidth[num2] || supportedDisplayMode.Height != Main.displayHeight[num2])
					{
						num2++;
					}
					else
					{
						flag = false;
						break;
					}
				}
				if (!flag)
				{
					continue;
				}
				Main.displayHeight[Main.numDisplayModes] = supportedDisplayMode.Height;
				Main.displayWidth[Main.numDisplayModes] = supportedDisplayMode.Width;
				Main.numDisplayModes = Main.numDisplayModes + 1;
			}
			if (Main.autoJoin)
			{
				Main.LoadPlayers();
				Main.menuMode = 1;
				Main.menuMultiplayer = true;
			}
			Main.fpsTimer.Start();
			Main.updateTimer.Start();
			return;
		Label0:
			num++;
			goto Label3;
		Label1:
			Item.claw[item.type] = true;
			goto Label0;
		}

		public static void InitializeItemAnimations()
		{
			for (int i = 0; i < (int)Main.itemAnimations.Length; i++)
			{
				Main.itemAnimations[i] = null;
			}
			Main.itemAnimationsRegistered.Clear();
			Main.RegisterItemAnimation(3581, new DrawAnimationVertical(4, 4));
			Main.RegisterItemAnimation(3580, new DrawAnimationVertical(4, 4));
			Main.RegisterItemAnimation(575, new DrawAnimationVertical(5, 4));
			Main.RegisterItemAnimation(547, new DrawAnimationVertical(5, 4));
			Main.RegisterItemAnimation(520, new DrawAnimationVertical(5, 4));
			Main.RegisterItemAnimation(548, new DrawAnimationVertical(5, 4));
			Main.RegisterItemAnimation(521, new DrawAnimationVertical(5, 4));
			Main.RegisterItemAnimation(549, new DrawAnimationVertical(5, 4));
		}

		public static void InitLifeBytes()
		{
			NPC nPC = new NPC();
			for (int i = -65; i < 540; i++)
			{
				if (i != 0)
				{
					nPC.netDefaults(i);
					if (nPC.lifeMax > 32767)
					{
						Main.npcLifeBytes[i] = 4;
					}
					else if (nPC.lifeMax <= 127)
					{
						Main.npcLifeBytes[i] = 1;
					}
					else
					{
						Main.npcLifeBytes[i] = 2;
					}
				}
			}
			nPC = null;
		}

		protected void InitMap()
		{
			int num = Main.mapTargetX;
			int num1 = Main.mapTargetY;
			if (Main.mapEnabled)
			{
				try
				{
					for (int i = 0; i < num; i++)
					{
						for (int j = 0; j < num1; j++)
						{
							this.mapTarget[i, j] = new RenderTarget2D(base.GraphicsDevice, Main.textureMaxWidth, Main.textureMaxHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
						}
					}
					Main.mapInit = true;
				}
				catch
				{
					Main.mapEnabled = false;
					for (int k = 0; k < num; k++)
					{
						for (int l = 0; l < num1; l++)
						{
							try
							{
								if (this.mapTarget[k, l] != null)
								{
									this.mapTarget[k, l].Dispose();
								}
							}
							catch (Exception ex)
							{
#if DEBUG
								Console.WriteLine(ex);
								System.Diagnostics.Debugger.Break();

#endif
							}
						}
					}
				}
			}
		}

		protected void InitTargets()
		{
			this.UpdateDisplaySettings();
			this.InitTargets(base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight);
		}

		protected void InitTargets(int width, int height)
		{
			this.ReleaseTargets();
			Main.offScreenRange = 192;
			if (width + Main.offScreenRange * 2 > 2048)
			{
				Main.offScreenRange = (2048 - width) / 2;
			}
			width = width + Main.offScreenRange * 2;
			height = height + Main.offScreenRange * 2;
			try
			{
				if (!Main.dedServ)
				{
					Main.targetSet = true;
					this.waterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.backWaterTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.blackTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.tileTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.tile2Target = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.wallTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.backgroundTarget = new RenderTarget2D(base.GraphicsDevice, width, height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
					this.screenTarget = new RenderTarget2D(base.GraphicsDevice, base.GraphicsDevice.PresentationParameters.BackBufferWidth, base.GraphicsDevice.PresentationParameters.BackBufferHeight, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24);
				}
			}
			catch
			{
				Lighting.lightMode = 2;
				Main.mapEnabled = false;
				Main.SaveSettings();
				try
				{
					this.ReleaseTargets();
				}
				catch (Exception ex)
				{
#if DEBUG
					Console.WriteLine(ex);
					System.Diagnostics.Debugger.Break();

#endif
				}
			}
		}

		private static void InvasionWarning()
		{
			string str = "";
			if (Main.invasionSize <= 0)
			{
				if (Main.invasionType == 2)
				{
					str = Lang.misc[4];
				}
				else if (Main.invasionType == 3)
				{
					str = Lang.misc[24];
				}
				else if (Main.invasionType != 4)
				{
					string str1 = Lang.misc[0];
					str = str1;
					str = str1;
				}
				else
				{
					str = Lang.misc[42];
				}
			}
			else if (Main.invasionX < (double)Main.spawnTileX)
			{
				if (Main.invasionType == 2)
				{
					str = Lang.misc[5];
				}
				else if (Main.invasionType == 3)
				{
					str = Lang.misc[25];
				}
				else if (Main.invasionType != 4)
				{
					string str2 = Lang.misc[1];
					str = str2;
					str = str2;
				}
				else
				{
					str = "";
				}
			}
			else if (Main.invasionX > (double)Main.spawnTileX)
			{
				if (Main.invasionType == 2)
				{
					str = Lang.misc[6];
				}
				else if (Main.invasionType == 3)
				{
					str = Lang.misc[26];
				}
				else if (Main.invasionType != 4)
				{
					string str3 = Lang.misc[2];
					str = str3;
					str = str3;
				}
				else
				{
					str = "";
				}
			}
			else if (Main.invasionType == 2)
			{
				str = Lang.misc[7];
			}
			else if (Main.invasionType == 3)
			{
				str = Lang.misc[27];
			}
			else if (Main.invasionType != 4)
			{
				string str4 = Lang.misc[3];
				str = str4;
				str = str4;
			}
			else
			{
				str = Lang.misc[41];
			}
			if (Main.netMode == 0)
			{
				Main.NewText(str, 175, 75, 255, false);
				return;
			}
			if (Main.netMode == 2)
			{
				NetMessage.SendData(25, -1, -1, str, 255, 175f, 75f, 255f, 0, 0, 0);
			}
		}

		protected void LoadAccBack(int i)
		{
			if (!Main.accBackLoaded[i])
			{
				Main.accBackTexture[i] = base.Content.Load<Texture2D>(string.Concat("Images/Acc_Back_", i));
				Main.accBackLoaded[i] = true;
			}
		}

		protected void LoadAccBalloon(int i)
		{
			if (!Main.accballoonLoaded[i])
			{
				Main.accBalloonTexture[i] = base.Content.Load<Texture2D>(string.Concat("Images/Acc_Balloon_", i));
				Main.accballoonLoaded[i] = true;
			}
		}

		protected void LoadAccFace(int i)
		{
			if (!Main.accFaceLoaded[i])
			{
				Main.accFaceTexture[i] = base.Content.Load<Texture2D>(string.Concat("Images/Acc_Face_", i));
				Main.accFaceLoaded[i] = true;
			}
		}

		protected void LoadAccFront(int i)
		{
			if (!Main.accFrontLoaded[i])
			{
				Main.accFrontTexture[i] = base.Content.Load<Texture2D>(string.Concat("Images/Acc_Front_", i));
				Main.accFrontLoaded[i] = true;
			}
		}

		protected void LoadAccHandsOff(int i)
		{
			if (!Main.accHandsOffLoaded[i])
			{
				Main.accHandsOffTexture[i] = base.Content.Load<Texture2D>(string.Concat("Images/Acc_HandsOff_", i));
				Main.accHandsOffLoaded[i] = true;
			}
		}

		protected void LoadAccHandsOn(int i)
		{
			if (!Main.accHandsOnLoaded[i])
			{
				Main.accHandsOnTexture[i] = base.Content.Load<Texture2D>(string.Concat("Images/Acc_HandsOn_", i));
				Main.accHandsOnLoaded[i] = true;
			}
		}

		protected void LoadAccNeck(int i)
		{
			if (!Main.accNeckLoaded[i])
			{
				Main.accNeckTexture[i] = base.Content.Load<Texture2D>(string.Concat("Images/Acc_Neck_", i));
				Main.accNeckLoaded[i] = true;
			}
		}

		protected void LoadAccShield(int i)
		{
			if (!Main.accShieldLoaded[i])
			{
				Main.accShieldTexture[i] = base.Content.Load<Texture2D>(string.Concat("Images/Acc_Shield_", i));
				Main.accShieldLoaded[i] = true;
			}
		}

		protected void LoadAccShoes(int i)
		{
			if (!Main.accShoesLoaded[i])
			{
				Main.accShoesTexture[i] = base.Content.Load<Texture2D>(string.Concat("Images/Acc_Shoes_", i));
				Main.accShoesLoaded[i] = true;
			}
		}

		protected void LoadAccWaist(int i)
		{
			if (!Main.accWaistLoaded[i])
			{
				Main.accWaistTexture[i] = base.Content.Load<Texture2D>(string.Concat("Images/Acc_Waist_", i));
				Main.accWaistLoaded[i] = true;
			}
		}

		protected void LoadArmorBody(int i)
		{
			if (!Main.armorBodyLoaded[i])
			{
				Texture2D[] texture2DArray = Main.femaleBodyTexture;
				ContentManager content = base.Content;
				object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Female_Body_", i };
				texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				Texture2D[] texture2DArray1 = Main.armorBodyTexture;
				ContentManager contentManager = base.Content;
				object[] objArray = new object[] { "Images", Path.DirectorySeparatorChar, "Armor_Body_", i };
				texture2DArray1[i] = contentManager.Load<Texture2D>(string.Concat(objArray));
				Texture2D[] texture2DArray2 = Main.armorArmTexture;
				ContentManager content1 = base.Content;
				object[] directorySeparatorChar1 = new object[] { "Images", Path.DirectorySeparatorChar, "Armor_Arm_", i };
				texture2DArray2[i] = content1.Load<Texture2D>(string.Concat(directorySeparatorChar1));
				Main.armorBodyLoaded[i] = true;
			}
		}

		protected void LoadArmorHead(int i)
		{
			if (!Main.armorHeadLoaded[i])
			{
				Texture2D[] texture2DArray = Main.armorHeadTexture;
				ContentManager content = base.Content;
				object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Armor_Head_", i };
				texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				Main.armorHeadLoaded[i] = true;
			}
		}

		protected void LoadArmorLegs(int i)
		{
			if (!Main.armorLegsLoaded[i])
			{
				Texture2D[] texture2DArray = Main.armorLegTexture;
				ContentManager content = base.Content;
				object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Armor_Legs_", i };
				texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				Main.armorLegsLoaded[i] = true;
			}
		}

		public void LoadBackground(int i)
		{
			if (i >= 0 && !Main.backgroundLoaded[i])
			{
				Texture2D[] texture2DArray = Main.backgroundTexture;
				ContentManager content = base.Content;
				object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Background_", i };
				texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				Main.backgroundWidth[i] = Main.backgroundTexture[i].Width;
				Main.backgroundHeight[i] = Main.backgroundTexture[i].Height;
				Main.backgroundLoaded[i] = true;
			}
		}

		protected override void LoadContent()
		{
			object[] directorySeparatorChar;
			TextureManager.Initialize();
			try
			{
				this.mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
				Main.pixelShader = base.Content.Load<Effect>("PixelShader");
				Main.tileShader = base.Content.Load<Effect>("TileShader");
				Main.screenShader = base.Content.Load<Effect>("ScreenShader");
				Main.engine = new AudioEngine(string.Concat("Content", Path.DirectorySeparatorChar, "TerrariaMusic.xgs"));
				Main.soundBank = new SoundBank(Main.engine, string.Concat("Content", Path.DirectorySeparatorChar, "Sound Bank.xsb"));
				Main.waveBank = new WaveBank(Main.engine, string.Concat("Content", Path.DirectorySeparatorChar, "Wave Bank.xwb"));
				for (int i = 1; i < 40; i++)
				{
					Main.music[i] = Main.soundBank.GetCue(string.Concat("Music_", i));
				}
				Main.soundMech[0] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Mech_0"));
				Main.soundInstanceMech[0] = Main.soundMech[0].CreateInstance();
				Main.soundGrab = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Grab"));
				Main.soundInstanceGrab = Main.soundGrab.CreateInstance();
				Main.soundPixie = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Pixie"));
				Main.soundInstancePixie = Main.soundGrab.CreateInstance();
				Main.soundDig[0] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Dig_0"));
				Main.soundInstanceDig[0] = Main.soundDig[0].CreateInstance();
				Main.soundDig[1] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Dig_1"));
				Main.soundInstanceDig[1] = Main.soundDig[1].CreateInstance();
				Main.soundDig[2] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Dig_2"));
				Main.soundInstanceDig[2] = Main.soundDig[2].CreateInstance();
				Main.soundTink[0] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Tink_0"));
				Main.soundInstanceTink[0] = Main.soundTink[0].CreateInstance();
				Main.soundTink[1] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Tink_1"));
				Main.soundInstanceTink[1] = Main.soundTink[1].CreateInstance();
				Main.soundTink[2] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Tink_2"));
				Main.soundInstanceTink[2] = Main.soundTink[2].CreateInstance();
				Main.soundPlayerHit[0] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Player_Hit_0"));
				Main.soundInstancePlayerHit[0] = Main.soundPlayerHit[0].CreateInstance();
				Main.soundPlayerHit[1] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Player_Hit_1"));
				Main.soundInstancePlayerHit[1] = Main.soundPlayerHit[1].CreateInstance();
				Main.soundPlayerHit[2] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Player_Hit_2"));
				Main.soundInstancePlayerHit[2] = Main.soundPlayerHit[2].CreateInstance();
				Main.soundFemaleHit[0] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Female_Hit_0"));
				Main.soundInstanceFemaleHit[0] = Main.soundFemaleHit[0].CreateInstance();
				Main.soundFemaleHit[1] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Female_Hit_1"));
				Main.soundInstanceFemaleHit[1] = Main.soundFemaleHit[1].CreateInstance();
				Main.soundFemaleHit[2] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Female_Hit_2"));
				Main.soundInstanceFemaleHit[2] = Main.soundFemaleHit[2].CreateInstance();
				Main.soundPlayerKilled = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Player_Killed"));
				Main.soundInstancePlayerKilled = Main.soundPlayerKilled.CreateInstance();
				Main.soundChat = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Chat"));
				Main.soundInstanceChat = Main.soundChat.CreateInstance();
				Main.soundGrass = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Grass"));
				Main.soundInstanceGrass = Main.soundGrass.CreateInstance();
				Main.soundDoorOpen = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Door_Opened"));
				Main.soundInstanceDoorOpen = Main.soundDoorOpen.CreateInstance();
				Main.soundDoorClosed = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Door_Closed"));
				Main.soundInstanceDoorClosed = Main.soundDoorClosed.CreateInstance();
				Main.soundMenuTick = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Menu_Tick"));
				Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
				Main.soundMenuOpen = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Menu_Open"));
				Main.soundInstanceMenuOpen = Main.soundMenuOpen.CreateInstance();
				Main.soundMenuClose = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Menu_Close"));
				Main.soundInstanceMenuClose = Main.soundMenuClose.CreateInstance();
				Main.soundShatter = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Shatter"));
				Main.soundInstanceShatter = Main.soundShatter.CreateInstance();
				Main.soundCamera = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Camera"));
				Main.soundInstanceCamera = Main.soundShatter.CreateInstance();
				for (int j = 0; j < (int)Main.soundCoin.Length; j++)
				{
					SoundEffect[] soundEffectArray = Main.soundCoin;
					ContentManager content = base.Content;
					directorySeparatorChar = new object[] { "Sounds", Path.DirectorySeparatorChar, "Coin_", j };
					soundEffectArray[j] = content.Load<SoundEffect>(string.Concat(directorySeparatorChar));
					Main.soundInstanceCoin[j] = Main.soundCoin[j].CreateInstance();
				}
				for (int k = 0; k < (int)Main.soundDrip.Length; k++)
				{
					SoundEffect[] soundEffectArray1 = Main.soundDrip;
					ContentManager contentManager = base.Content;
					object[] objArray = new object[] { "Sounds", Path.DirectorySeparatorChar, "Drip_", k };
					soundEffectArray1[k] = contentManager.Load<SoundEffect>(string.Concat(objArray));
					Main.soundInstanceDrip[k] = Main.soundDrip[k].CreateInstance();
				}
				for (int l = 0; l < (int)Main.soundZombie.Length; l++)
				{
					SoundEffect[] soundEffectArray2 = Main.soundZombie;
					ContentManager content1 = base.Content;
					object[] directorySeparatorChar1 = new object[] { "Sounds", Path.DirectorySeparatorChar, "Zombie_", l };
					soundEffectArray2[l] = content1.Load<SoundEffect>(string.Concat(directorySeparatorChar1));
					Main.soundInstanceZombie[l] = Main.soundZombie[l].CreateInstance();
				}
				for (int m = 0; m < (int)Main.soundLiquid.Length; m++)
				{
					SoundEffect[] soundEffectArray3 = Main.soundLiquid;
					ContentManager contentManager1 = base.Content;
					object[] objArray1 = new object[] { "Sounds", Path.DirectorySeparatorChar, "Liquid_", m };
					soundEffectArray3[m] = contentManager1.Load<SoundEffect>(string.Concat(objArray1));
					Main.soundInstanceLiquid[m] = Main.soundLiquid[m].CreateInstance();
				}
				for (int n = 0; n < (int)Main.soundRoar.Length; n++)
				{
					SoundEffect[] soundEffectArray4 = Main.soundRoar;
					ContentManager content2 = base.Content;
					object[] directorySeparatorChar2 = new object[] { "Sounds", Path.DirectorySeparatorChar, "Roar_", n };
					soundEffectArray4[n] = content2.Load<SoundEffect>(string.Concat(directorySeparatorChar2));
					Main.soundInstanceRoar[n] = Main.soundRoar[n].CreateInstance();
				}
				Main.soundSplash[0] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Splash_0"));
				Main.soundInstanceSplash[0] = Main.soundRoar[0].CreateInstance();
				Main.soundSplash[1] = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Splash_1"));
				Main.soundInstanceSplash[1] = Main.soundSplash[1].CreateInstance();
				Main.soundDoubleJump = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Double_Jump"));
				Main.soundInstanceDoubleJump = Main.soundRoar[0].CreateInstance();
				Main.soundRun = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Run"));
				Main.soundInstanceRun = Main.soundRun.CreateInstance();
				Main.soundCoins = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Coins"));
				Main.soundInstanceCoins = Main.soundCoins.CreateInstance();
				Main.soundUnlock = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Unlock"));
				Main.soundInstanceUnlock = Main.soundUnlock.CreateInstance();
				Main.soundMaxMana = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "MaxMana"));
				Main.soundInstanceMaxMana = Main.soundMaxMana.CreateInstance();
				Main.soundDrown = base.Content.Load<SoundEffect>(string.Concat("Sounds", Path.DirectorySeparatorChar, "Drown"));
				Main.soundInstanceDrown = Main.soundDrown.CreateInstance();
				for (int o = 1; o < 126; o++)
				{
					SoundEffect[] soundEffectArray5 = Main.soundItem;
					ContentManager contentManager2 = base.Content;
					object[] objArray2 = new object[] { "Sounds", Path.DirectorySeparatorChar, "Item_", o };
					soundEffectArray5[o] = contentManager2.Load<SoundEffect>(string.Concat(objArray2));
					Main.soundInstanceItem[o] = Main.soundItem[o].CreateInstance();
				}
				for (int p = 1; p < 58; p++)
				{
					SoundEffect[] soundEffectArray6 = Main.soundNPCHit;
					ContentManager content3 = base.Content;
					object[] directorySeparatorChar3 = new object[] { "Sounds", Path.DirectorySeparatorChar, "NPC_Hit_", p };
					soundEffectArray6[p] = content3.Load<SoundEffect>(string.Concat(directorySeparatorChar3));
					Main.soundInstanceNPCHit[p] = Main.soundNPCHit[p].CreateInstance();
				}
				for (int q = 1; q < 63; q++)
				{
					SoundEffect[] soundEffectArray7 = Main.soundNPCKilled;
					ContentManager contentManager3 = base.Content;
					object[] objArray3 = new object[] { "Sounds", Path.DirectorySeparatorChar, "NPC_Killed_", q };
					soundEffectArray7[q] = contentManager3.Load<SoundEffect>(string.Concat(objArray3));
					Main.soundInstanceNPCKilled[q] = Main.soundNPCKilled[q].CreateInstance();
				}
				Main.soundInstanceMoonlordCry = Main.soundNPCKilled[10].CreateInstance();
			}
			catch
			{
				Main.musicVolume = 0f;
				Main.soundVolume = 0f;
			}
			Main.tileCrackTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "TileCracks"));
			Main.chestStackTexture[0] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "ChestStack_0"));
			Main.chestStackTexture[1] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "ChestStack_1"));
			Main.smartDigTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "SmartDig"));
			this.iceBarrierTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "IceBarrier"));
			Main.frozenTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Frozen"));
			for (int r = 0; r < (int)Main.PVPTexture.Length; r++)
			{
				Texture2D[] pVPTexture = Main.PVPTexture;
				ContentManager content4 = base.Content;
				object[] directorySeparatorChar4 = new object[] { "Images", Path.DirectorySeparatorChar, "UI", Path.DirectorySeparatorChar, "PVP_", r };
				pVPTexture[r] = content4.Load<Texture2D>(string.Concat(directorySeparatorChar4));
			}
			for (int s = 0; s < (int)Main.EquipPageTexture.Length; s++)
			{
				Texture2D[] equipPageTexture = Main.EquipPageTexture;
				ContentManager contentManager4 = base.Content;
				object[] objArray4 = new object[] { "Images", Path.DirectorySeparatorChar, "UI", Path.DirectorySeparatorChar, "DisplaySlots_", s };
				equipPageTexture[s] = contentManager4.Load<Texture2D>(string.Concat(objArray4));
			}
			for (int t = 0; t < (int)Main.craftToggleTexture.Length; t++)
			{
				Texture2D[] texture2DArray = Main.craftToggleTexture;
				ContentManager content5 = base.Content;
				object[] directorySeparatorChar5 = new object[] { "Images", Path.DirectorySeparatorChar, "UI", Path.DirectorySeparatorChar, "Craft_Toggle_", t };
				texture2DArray[t] = content5.Load<Texture2D>(string.Concat(directorySeparatorChar5));
			}
			for (int u = 0; u < (int)this.infoIconTexture.Length; u++)
			{
				Texture2D[] texture2DArray1 = this.infoIconTexture;
				ContentManager contentManager5 = base.Content;
				object[] objArray5 = new object[] { "Images", Path.DirectorySeparatorChar, "UI", Path.DirectorySeparatorChar, "InfoIcon_", u };
				texture2DArray1[u] = contentManager5.Load<Texture2D>(string.Concat(objArray5));
			}
			for (int v = 0; v < (int)Main.reforgeTexture.Length; v++)
			{
				Texture2D[] texture2DArray2 = Main.reforgeTexture;
				ContentManager content6 = base.Content;
				object[] directorySeparatorChar6 = new object[] { "Images", Path.DirectorySeparatorChar, "UI", Path.DirectorySeparatorChar, "Reforge_", v };
				texture2DArray2[v] = content6.Load<Texture2D>(string.Concat(directorySeparatorChar6));
			}
			for (int w = 0; w < (int)Main.cameraTexture.Length; w++)
			{
				Texture2D[] texture2DArray3 = Main.cameraTexture;
				ContentManager contentManager6 = base.Content;
				object[] objArray6 = new object[] { "Images", Path.DirectorySeparatorChar, "UI", Path.DirectorySeparatorChar, "Camera_", w };
				texture2DArray3[w] = contentManager6.Load<Texture2D>(string.Concat(objArray6));
			}
			Main.craftUpButtonTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "RecUp"));
			Main.craftDownButtonTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "RecDown"));
			Main.scrollLeftButtonTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "RecLeft"));
			Main.scrollRightButtonTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "RecRight"));
			Main.oneDropLogo = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "OneDropLogo"));
			Main.pulleyTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "PlayerPulley"));
			Main.timerTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Timer"));
			Main.wofTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "WallOfFlesh"));
			Main.wallOutlineTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Wall_Outline"));
			Main.fadeTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "fade-out"));
			Main.ghostTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Ghost"));
			Main.evilCactusTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Evil_Cactus"));
			Main.goodCactusTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Good_Cactus"));
			Main.crimsonCactusTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Crimson_Cactus"));
			Main.wraithEyeTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Wraith_Eyes"));
			Main.fireflyTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Firefly"));
			Main.fireflyJarTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "FireflyJar"));
			Main.lightningbugTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "LightningBug"));
			Main.lightningbugJarTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "LightningBugJar"));
			AchievementCompleteUI.LoadContent();
			for (int x = 1; x <= 3; x++)
			{
				Texture2D[] texture2DArray4 = Main.jellyfishBowlTexture;
				ContentManager content7 = base.Content;
				object[] directorySeparatorChar7 = new object[] { "Images", Path.DirectorySeparatorChar, "jellyfishBowl", x };
				texture2DArray4[x - 1] = content7.Load<Texture2D>(string.Concat(directorySeparatorChar7));
			}
			Main.glowSnailTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "GlowSnail"));
			Main.iceQueenTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "IceQueen"));
			Main.santaTankTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "SantaTank"));
			Main.jackHatTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "JackHat"));
			Main.treeFaceTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "TreeFace"));
			Main.pumpkingFaceTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "PumpkingFace"));
			Main.reaperEyeTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Reaper_Eyes"));
			this.mapDeathTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapDeath"));
			Main.dukeFishronTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "DukeFishron"));
			Main.miniMinotaurTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MiniMinotaur"));
			Main.mapTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Map"));
			this.mapBG1Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG1"));
			this.mapBG2Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG2"));
			this.mapBG3Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG3"));
			this.mapBG4Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG4"));
			this.mapBG5Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG5"));
			this.mapBG6Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG6"));
			this.mapBG7Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG7"));
			this.mapBG8Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG8"));
			this.mapBG9Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG9"));
			this.mapBG10Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG10"));
			this.mapBG11Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG11"));
			this.mapBG12Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG12"));
			this.mapBG13Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG13"));
			this.mapBG14Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG14"));
			this.mapBG15Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MapBG15"));
			this.hueTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Hue"));
			Main.colorSliderTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "ColorSlider"));
			Main.colorBarTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "ColorBar"));
			Main.colorBlipTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "ColorBlip"));
			Main.rainTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Rain"));
			for (int y = 0; y < 214; y++)
			{
				Texture2D[] texture2DArray5 = Main.glowMaskTexture;
				ContentManager contentManager7 = base.Content;
				object[] objArray7 = new object[] { "Images", Path.DirectorySeparatorChar, "Glow_", y };
				texture2DArray5[y] = contentManager7.Load<Texture2D>(string.Concat(objArray7));
			}
			for (int a = 0; a < 69; a++)
			{
				Texture2D[] texture2DArray6 = Main.extraTexture;
				ContentManager content8 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Extra_", a };
				texture2DArray6[a] = content8.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int b = 0; b < 4; b++)
			{
				Texture2D[] texture2DArray7 = Main.coinTexture;
				ContentManager contentManager8 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Coin_", b };
				texture2DArray7[b] = contentManager8.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			Main.magicPixel = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MagicPixel"));
			Main.miniMapFrameTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MiniMapFrame"));
			Main.miniMapFrame2Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "MiniMapFrame2"));
			for (int c = 0; c < (int)Main.xmasTree.Length; c++)
			{
				Texture2D[] texture2DArray8 = Main.xmasTree;
				ContentManager content9 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Xmas_", c };
				texture2DArray8[c] = content9.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int d = 0; d < 4; d++)
			{
				Texture2D[] texture2DArray9 = Main.clothesTexture;
				ContentManager contentManager9 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Clothes_", d };
				texture2DArray9[d] = contentManager9.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int e = 0; e < (int)Main.FlameTexture.Length; e++)
			{
				Texture2D[] flameTexture = Main.FlameTexture;
				ContentManager content10 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Flame_", e };
				flameTexture[e] = content10.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int f = 0; f < 3; f++)
			{
				Texture2D[] texture2DArray10 = Main.miniMapButtonTexture;
				ContentManager contentManager10 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "MiniMapButton_", f };
				texture2DArray10[f] = contentManager10.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int g = 0; g < 8; g++)
			{
				Texture2D[] texture2DArray11 = Main.mapIconTexture;
				ContentManager content11 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Map_", g };
				texture2DArray11[g] = content11.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int h = 0; h < (int)Main.underworldTexture.Length; h++)
			{
				Main.underworldTexture[h] = base.Content.Load<Texture2D>(string.Concat("Images/Backgrounds/Underworld ", h));
			}
			Main.destTexture[0] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Dest1"));
			Main.destTexture[1] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Dest2"));
			Main.destTexture[2] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Dest3"));
			Main.actuatorTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Actuator"));
			Main.wireTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Wires"));
			Main.wire2Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Wires2"));
			Main.wire3Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Wires3"));
			Main.flyingCarpetTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "FlyingCarpet"));
			Main.hbTexture1 = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "HealthBar1"));
			Main.hbTexture2 = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "HealthBar2"));
			ContentManager contentManager11 = base.Content;
			directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "logo_", Main.rand.Next(1, 9) };
			Main.loTexture = contentManager11.Load<Texture2D>(string.Concat(directorySeparatorChar));
			Main.spriteBatch = new SpriteBatch(base.GraphicsDevice);
			Main.tileBatch = new TileBatch(base.GraphicsDevice);
			for (int i1 = 1; i1 < 2; i1++)
			{
				Texture2D[] texture2DArray12 = Main.bannerTexture;
				ContentManager content12 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "House_Banner_", i1 };
				texture2DArray12[i1] = content12.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int j1 = 0; j1 < (int)Main.npcHeadTexture.Length; j1++)
			{
				Texture2D[] texture2DArray13 = Main.npcHeadTexture;
				ContentManager contentManager12 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "NPC_Head_", j1 };
				texture2DArray13[j1] = contentManager12.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int k1 = 0; k1 < (int)Main.npcHeadBossTexture.Length; k1++)
			{
				Texture2D[] texture2DArray14 = Main.npcHeadBossTexture;
				ContentManager content13 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "NPC_Head_Boss_", k1 };
				texture2DArray14[k1] = content13.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int l1 = 1; l1 < (int)Main.BackPackTexture.Length; l1++)
			{
				Texture2D[] backPackTexture = Main.BackPackTexture;
				ContentManager contentManager13 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "BackPack_", l1 };
				backPackTexture[l1] = contentManager13.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int m1 = 1; m1 < 191; m1++)
			{
				Texture2D[] texture2DArray15 = Main.buffTexture;
				ContentManager content14 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Buff_", m1 };
				texture2DArray15[m1] = content14.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			this.LoadBackground(0);
			this.LoadBackground(49);
			Main.minecartMountTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_Minecart"));
			for (int n1 = 0; n1 < (int)Main.rudolphMountTexture.Length; n1++)
			{
				Texture2D[] texture2DArray16 = Main.rudolphMountTexture;
				ContentManager contentManager14 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Rudolph_", n1 };
				texture2DArray16[n1] = contentManager14.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			Main.bunnyMountTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_Bunny"));
			Main.pigronMountTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_Pigron"));
			Main.slimeMountTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_Slime"));
			Main.turtleMountTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_Turtle"));
			Main.unicornMountTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_Unicorn"));
			Main.minecartMechMountTexture[0] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_MinecartMech"));
			Main.minecartMechMountTexture[1] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_MinecartMechGlow"));
			Main.cuteFishronMountTexture[0] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_CuteFishron1"));
			Main.cuteFishronMountTexture[1] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_CuteFishron2"));
			Main.minecartWoodMountTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_MinecartWood"));
			Main.beeMountTexture[0] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_Bee"));
			Main.beeMountTexture[1] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_BeeWings"));
			Main.UFOMountTexture[0] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_UFO"));
			Main.UFOMountTexture[1] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_UFOGlow"));
			Main.drillMountTexture[0] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_DrillRing"));
			Main.drillMountTexture[1] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_DrillSeat"));
			Main.drillMountTexture[2] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_DrillDiode"));
			Main.drillMountTexture[3] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_Glow_DrillRing"));
			Main.drillMountTexture[4] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_Glow_DrillSeat"));
			Main.drillMountTexture[5] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_Glow_DrillDiode"));
			Main.scutlixMountTexture[0] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_Scutlix"));
			Main.scutlixMountTexture[1] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_ScutlixEyes"));
			Main.scutlixMountTexture[2] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mount_ScutlixEyeGlow"));
			for (int o1 = 0; o1 < 3601; o1++)
			{
				Texture2D[] texture2DArray17 = Main.itemTexture;
				ContentManager content15 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Item_", o1 };
				texture2DArray17[o1] = content15.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int p1 = 0; p1 < 6; p1++)
			{
				Texture2D[] texture2DArray18 = Main.gemTexture;
				ContentManager contentManager15 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Gem_", p1 };
				texture2DArray18[p1] = contentManager15.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int q1 = 0; q1 < 540; q1++)
			{
				NPC nPC = new NPC();
				nPC.SetDefaults(q1, -1f);
				Main.npcName[q1] = nPC.name;
			}
			for (int r1 = 0; r1 < 22; r1++)
			{
				Texture2D[] texture2DArray19 = Main.cloudTexture;
				ContentManager content16 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Cloud_", r1 };
				texture2DArray19[r1] = content16.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int s1 = 0; s1 < 5; s1++)
			{
				Texture2D[] texture2DArray20 = Main.starTexture;
				ContentManager contentManager16 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Star_", s1 };
				texture2DArray20[s1] = contentManager16.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int t1 = 0; t1 < 12; t1++)
			{
				Texture2D[] texture2DArray21 = Main.liquidTexture;
				ContentManager content17 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Liquid_", t1 };
				texture2DArray21[t1] = content17.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			this.waterfallManager.LoadContent(base.Content);
			Main.npcToggleTexture[0] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "House_1"));
			Main.npcToggleTexture[1] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "House_2"));
			Main.HBLockTexture[0] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Lock_0"));
			Main.HBLockTexture[1] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Lock_1"));
			Main.gridTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Grid"));
			Main.trashTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Trash"));
			Main.cdTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "CoolDown"));
			Main.logoTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Logo"));
			Main.logo2Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Logo2"));
			Main.dustTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Dust"));
			Main.sunTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Sun"));
			Main.sun2Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Sun2"));
			Main.sun3Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Sun3"));
			Main.blackTileTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Black_Tile"));
			Main.heartTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Heart"));
			Main.heart2Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Heart2"));
			Main.bubbleTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Bubble"));
			Main.flameTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Flame"));
			Main.manaTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Mana"));
			for (int u1 = 0; u1 < (int)Main.cursorTextures.Length; u1++)
			{
				Texture2D[] texture2DArray22 = Main.cursorTextures;
				ContentManager contentManager17 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "UI", Path.DirectorySeparatorChar, "Cursor_", u1 };
				texture2DArray22[u1] = contentManager17.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			Main.ninjaTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Ninja"));
			Main.antLionTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "AntlionBody"));
			Main.spikeBaseTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Spike_Base"));
			Main.woodTexture[0] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Tiles_5_0"));
			Main.woodTexture[1] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Tiles_5_1"));
			Main.woodTexture[2] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Tiles_5_2"));
			Main.woodTexture[3] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Tiles_5_3"));
			Main.woodTexture[4] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Tiles_5_4"));
			Main.woodTexture[5] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Tiles_5_5"));
			Main.woodTexture[6] = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Tiles_5_6"));
			Main.pumpkinMoonTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Moon_Pumpkin"));
			Main.snowMoonTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Moon_Snow"));
			for (int v1 = 0; v1 < (int)Main.moonTexture.Length; v1++)
			{
				Texture2D[] texture2DArray23 = Main.moonTexture;
				ContentManager content18 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Moon_", v1 };
				texture2DArray23[v1] = content18.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int w1 = 0; w1 < (int)Main.treeTopTexture.Length; w1++)
			{
				Texture2D[] texture2DArray24 = Main.treeTopTexture;
				ContentManager contentManager18 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Tree_Tops_", w1 };
				texture2DArray24[w1] = contentManager18.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int x1 = 0; x1 < (int)Main.treeBranchTexture.Length; x1++)
			{
				Texture2D[] texture2DArray25 = Main.treeBranchTexture;
				ContentManager content19 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Tree_Branches_", x1 };
				texture2DArray25[x1] = content19.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			Main.shroomCapTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Shroom_Tops"));
			Main.inventoryBackTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back"));
			Main.inventoryBack2Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back2"));
			Main.inventoryBack3Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back3"));
			Main.inventoryBack4Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back4"));
			Main.inventoryBack5Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back5"));
			Main.inventoryBack6Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back6"));
			Main.inventoryBack7Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back7"));
			Main.inventoryBack8Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back8"));
			Main.inventoryBack9Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back9"));
			Main.inventoryBack10Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back10"));
			Main.inventoryBack11Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back11"));
			Main.inventoryBack12Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back12"));
			Main.inventoryBack13Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back13"));
			Main.inventoryBack14Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Back14"));
			Main.hairStyleBackTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "HairStyleBack"));
			Main.clothesStyleBackTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "ClothesStyleBack"));
			Main.inventoryTickOffTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Tick_Off"));
			Main.inventoryTickOnTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Inventory_Tick_On"));
			Main.textBackTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Text_Back"));
			Main.chatTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chat"));
			Main.chat2Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chat2"));
			Main.chatBackTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chat_Back"));
			Main.teamTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Team"));
			PlayerDataInitializer.Load();
			Main.chaosTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chaos"));
			Main.EyeLaserTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Eye_Laser"));
			Main.BoneEyesTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Bone_Eyes"));
			Main.BoneLaserTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Bone_Laser"));
			Main.lightDiscTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Light_Disc"));
			Main.confuseTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Confuse"));
			Main.probeTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Probe"));
			Main.sunOrbTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "SunOrb"));
			Main.sunAltarTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "SunAltar"));
			Main.xmasLightTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "XmasLight"));
			Main.beetleTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "BeetleOrb"));
			for (int y1 = 0; y1 < 16; y1++)
			{
				Texture2D[] texture2DArray26 = Main.chainsTexture;
				ContentManager contentManager19 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Chains_", y1 };
				texture2DArray26[y1] = contentManager19.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			Main.chain20Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain20"));
			Main.fishingLineTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "FishingLine"));
			Main.chainTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain"));
			Main.chain2Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain2"));
			Main.chain3Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain3"));
			Main.chain4Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain4"));
			Main.chain5Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain5"));
			Main.chain6Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain6"));
			Main.chain7Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain7"));
			Main.chain8Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain8"));
			Main.chain9Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain9"));
			Main.chain10Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain10"));
			Main.chain11Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain11"));
			Main.chain12Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain12"));
			Main.chain13Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain13"));
			Main.chain14Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain14"));
			Main.chain15Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain15"));
			Main.chain16Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain16"));
			Main.chain17Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain17"));
			Main.chain18Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain18"));
			Main.chain19Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain19"));
			Main.chain20Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain20"));
			Main.chain21Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain21"));
			Main.chain22Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain22"));
			Main.chain23Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain23"));
			Main.chain24Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain24"));
			Main.chain25Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain25"));
			Main.chain26Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain26"));
			Main.chain27Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain27"));
			Main.chain28Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain28"));
			Main.chain29Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain29"));
			Main.chain30Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain30"));
			Main.chain31Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain31"));
			Main.chain32Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain32"));
			Main.chain33Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain33"));
			Main.chain34Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain34"));
			Main.chain35Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain35"));
			Main.chain36Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain36"));
			Main.chain37Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain37"));
			Main.chain38Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain38"));
			Main.chain39Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain39"));
			Main.chain40Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Chain40"));
			Main.eyeLaserSmallTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Eye_Laser_Small"));
			Main.boneArmTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Arm_Bone"));
			Main.pumpkingArmTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "PumpkingArm"));
			Main.pumpkingCloakTexture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "PumpkingCloak"));
			Main.boneArm2Texture = base.Content.Load<Texture2D>(string.Concat("Images", Path.DirectorySeparatorChar, "Arm_Bone_2"));
			for (int a1 = 1; a1 < (int)Main.gemChainTexture.Length; a1++)
			{
				Texture2D[] texture2DArray27 = Main.gemChainTexture;
				ContentManager content20 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "GemChain_", a1 };
				texture2DArray27[a1] = content20.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			for (int b1 = 1; b1 < (int)Main.golemTexture.Length; b1++)
			{
				Texture2D[] texture2DArray28 = Main.golemTexture;
				ContentManager contentManager20 = base.Content;
				directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "GolemLights", b1 };
				texture2DArray28[b1] = contentManager20.Load<Texture2D>(string.Concat(directorySeparatorChar));
			}
			Main.fontItemStack = base.Content.Load<SpriteFont>(string.Concat("Fonts", Path.DirectorySeparatorChar, "Item_Stack"));
			Main.fontMouseText = base.Content.Load<SpriteFont>(string.Concat("Fonts", Path.DirectorySeparatorChar, "Mouse_Text"));
			Main.fontDeathText = base.Content.Load<SpriteFont>(string.Concat("Fonts", Path.DirectorySeparatorChar, "Death_Text"));
			Main.fontCombatText[0] = base.Content.Load<SpriteFont>(string.Concat("Fonts", Path.DirectorySeparatorChar, "Combat_Text"));
			Main.fontCombatText[1] = base.Content.Load<SpriteFont>(string.Concat("Fonts", Path.DirectorySeparatorChar, "Combat_Crit"));
			Mount.Initialize();
			Minecart.Initialize();
		}

		public void LoadDedConfig(string configPath)
		{
			if (File.Exists(configPath))
			{
				using (StreamReader streamReader = new StreamReader(configPath))
				{
					while (true)
					{
						string str = streamReader.ReadLine();
						string str1 = str;
						if (str == null)
						{
							break;
						}
						try
						{
							if (str1.Length > 6 && str1.Substring(0, 6).ToLower() == "world=")
							{
								string str2 = str1.Substring(6);
								Main.ActiveWorldFileData = WorldFile.GetAllMetadata(str2, false);
							}
							if (str1.Length > 5 && str1.Substring(0, 5).ToLower() == "port=")
							{
								string str3 = str1.Substring(5);
								try
								{
									Netplay.ListenPort = Convert.ToInt32(str3);
								}
								catch (Exception ex)
								{
#if DEBUG
									Console.WriteLine(ex);
									System.Diagnostics.Debugger.Break();

#endif
								}
							}
							if (str1.Length > 11 && str1.Substring(0, 11).ToLower() == "maxplayers=")
							{
								string str4 = str1.Substring(11);
								try
								{
									Main.maxNetPlayers = Convert.ToInt32(str4);
								}
								catch (Exception ex)
								{
#if DEBUG
									Console.WriteLine(ex);
									System.Diagnostics.Debugger.Break();

#endif
								}
							}
							if (str1.Length > 11 && str1.Substring(0, 9).ToLower() == "priority=")
							{
								string str5 = str1.Substring(9);
								try
								{
									int num = Convert.ToInt32(str5);
									if (num >= 0 && num <= 5)
									{
										Process currentProcess = Process.GetCurrentProcess();
										if (num == 0)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.RealTime;
										}
										else if (num == 1)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.High;
										}
										else if (num == 2)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.AboveNormal;
										}
										else if (num == 3)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.Normal;
										}
										else if (num == 4)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.BelowNormal;
										}
										else if (num == 5)
										{
											currentProcess.PriorityClass = ProcessPriorityClass.Idle;
										}
									}
								}
								catch (Exception ex)
								{
#if DEBUG
									Console.WriteLine(ex);
									System.Diagnostics.Debugger.Break();

#endif
								}
							}
							if (str1.Length > 9 && str1.Substring(0, 9).ToLower() == "password=")
							{
								Netplay.ServerPassword = str1.Substring(9);
							}
							if (str1.Length > 5 && str1.Substring(0, 5).ToLower() == "motd=")
							{
								Main.motd = str1.Substring(5);
							}
							if (str1.Length > 5 && str1.Substring(0, 5).ToLower() == "lang=")
							{
								Lang.lang = Convert.ToInt32(str1.Substring(5));
							}
							if (str1.Length >= 10 && str1.Substring(0, 10).ToLower() == "worldpath=")
							{
								Main.WorldPath = str1.Substring(10);
							}
							if (str1.Length >= 10 && str1.Substring(0, 10).ToLower() == "worldname=")
							{
								Main.worldName = str1.Substring(10);
							}
							if (str1.Length > 8 && str1.Substring(0, 8).ToLower() == "banlist=")
							{
								Netplay.BanFilePath = str1.Substring(8);
							}
							if (str1.Length > 11 && str1.Substring(0, 11).ToLower() == "difficulty=")
							{
								string str6 = str1.Substring(11);
								if (str6 == "0")
								{
									Main.expertMode = false;
								}
								else if (str6 == "1")
								{
									Main.expertMode = true;
								}
							}
							if (str1.Length > 11 && str1.Substring(0, 11).ToLower() == "autocreate=")
							{
								string str7 = str1.Substring(11);
								if (str7 == "0")
								{
									Main.autoGen = false;
								}
								else if (str7 == "1")
								{
									Main.maxTilesX = 4200;
									Main.maxTilesY = 1200;
									Main.autoGen = true;
								}
								else if (str7 == "2")
								{
									Main.maxTilesX = 6300;
									Main.maxTilesY = 1800;
									Main.autoGen = true;
								}
								else if (str7 == "3")
								{
									Main.maxTilesX = 8400;
									Main.maxTilesY = 2400;
									Main.autoGen = true;
								}
							}
							if (str1.Length > 7 && str1.Substring(0, 7).ToLower() == "secure=" && str1.Substring(7) == "1")
							{
								Netplay.spamCheck = true;
							}
							if (str1.Length > 5 && str1.Substring(0, 5).ToLower() == "upnp=" && str1.Substring(5) != "1")
							{
								Netplay.UseUPNP = false;
							}
							if (str1.Length > 5 && str1.Substring(0, 10).ToLower() == "npcstream=")
							{
								string str8 = str1.Substring(10);
								try
								{
									Main.npcStreamSpeed = Convert.ToInt32(str8);
								}
								catch (Exception ex)
								{
#if DEBUG
									Console.WriteLine(ex);
									System.Diagnostics.Debugger.Break();

#endif
								}
							}
						}
						catch (Exception ex)
						{
#if DEBUG
							Console.WriteLine(ex);
							System.Diagnostics.Debugger.Break();

#endif
						}
					}
				}
			}
		}

		protected void LoadFlameRing()
		{
			if (!Main.flameRingLoaded)
			{
				this.flameRingTexture = base.Content.Load<Texture2D>("Images/FlameRing");
				Main.flameRingLoaded = true;
			}
		}

		protected void LoadGore(int i)
		{
			if (!Main.goreLoaded[i])
			{
				Texture2D[] texture2DArray = Main.goreTexture;
				ContentManager content = base.Content;
				object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Gore_", i };
				texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				Main.goreLoaded[i] = true;
			}
		}

		protected void LoadHair(int i)
		{
			if (!Main.hairLoaded[i])
			{
				Texture2D[] texture2DArray = Main.playerHairTexture;
				ContentManager content = base.Content;
				object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Player_Hair_", i + 1 };
				texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				Texture2D[] texture2DArray1 = Main.playerHairAltTexture;
				ContentManager contentManager = base.Content;
				object[] objArray = new object[] { "Images", Path.DirectorySeparatorChar, "Player_HairAlt_", i + 1 };
				texture2DArray1[i] = contentManager.Load<Texture2D>(string.Concat(objArray));
				Main.hairLoaded[i] = true;
			}
		}

		protected void LoadItemFlames(int i)
		{
			if (!Main.itemFlameLoaded[i])
			{
				try
				{
					Texture2D[] texture2DArray = Main.itemFlameTexture;
					ContentManager content = base.Content;
					object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "ItemFlame_", i };
					texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				}
				catch (Exception ex)
				{
#if DEBUG
					Console.WriteLine(ex);
					System.Diagnostics.Debugger.Break();

#endif
				}
				Main.itemFlameLoaded[i] = true;
			}
		}

		public void loadLib(string path)
		{
			Main.libPath = path;
			Main.LoadLibrary(Main.libPath);
		}

		[DllImport("kernel32.dll", CharSet=CharSet.None, ExactSpelling=false)]
		public static extern IntPtr LoadLibrary(string dllToLoad);

		protected void LoadNPC(int i)
		{
			if (!Main.NPCLoaded[i] || Main.npcTexture[i] == null)
			{
				Texture2D[] texture2DArray = Main.npcTexture;
				ContentManager content = base.Content;
				object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "NPC_", i };
				texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				Main.NPCLoaded[i] = true;
			}
		}

		public static void LoadPlayers()
		{
			Main.PlayerList.Clear();
			Directory.CreateDirectory(Main.PlayerPath);
			string[] files = Directory.GetFiles(Main.PlayerPath, "*.plr");
			int num = Math.Min(Main.maxLoadPlayer, (int)files.Length);
			for (int i = 0; i < num; i++)
			{
				PlayerFileData fileData = Player.GetFileData(files[i], false);
				if (fileData != null)
				{
					Main.PlayerList.Add(fileData);
				}
			}
			if (SocialAPI.Cloud != null)
			{
				List<string> strs = SocialAPI.Cloud.GetFiles(string.Concat(Main.CloudPlayerPath, "/.+\\.plr"));
				foreach (string file in strs)
				{
					PlayerFileData playerFileDatum = Player.GetFileData(file, true);
					if (playerFileDatum == null)
					{
						continue;
					}
					Main.PlayerList.Add(playerFileDatum);
				}
			}
			Main.PlayerList.Sort(new Comparison<PlayerFileData>(Main.PlayerListSortMethod));
		}

		protected void LoadProjectile(int i)
		{
			if (!Main.projectileLoaded[i])
			{
				Texture2D[] texture2DArray = Main.projectileTexture;
				ContentManager content = base.Content;
				object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Projectile_", i };
				texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				Main.projectileLoaded[i] = true;
			}
		}

		protected void LoadTiles(int i)
		{
			if (!Main.tileSetsLoaded[i])
			{
				Texture2D[] texture2DArray = Main.tileTexture;
				ContentManager content = base.Content;
				object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Tiles_", i };
				texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				Main.tileSetsLoaded[i] = true;
			}
		}

		protected void LoadWall(int i)
		{
			if (!Main.wallLoaded[i])
			{
				Texture2D[] texture2DArray = Main.wallTexture;
				ContentManager content = base.Content;
				object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Wall_", i };
				texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				Main.wallLoaded[i] = true;
			}
		}

		protected void LoadWings(int i)
		{
			if (!Main.wingsLoaded[i])
			{
				Texture2D[] texture2DArray = Main.wingsTexture;
				ContentManager content = base.Content;
				object[] directorySeparatorChar = new object[] { "Images", Path.DirectorySeparatorChar, "Wings_", i };
				texture2DArray[i] = content.Load<Texture2D>(string.Concat(directorySeparatorChar));
				Main.wingsLoaded[i] = true;
			}
		}

		public static void LoadWorlds()
		{
			Main.WorldList.Clear();
			Directory.CreateDirectory(Main.WorldPath);
			string[] files = Directory.GetFiles(Main.WorldPath, "*.wld");
			int num = Math.Min((int)files.Length, Main.maxLoadWorld);
			for (int i = 0; i < num; i++)
			{
				WorldFileData allMetadata = WorldFile.GetAllMetadata(files[i], false);
				if (allMetadata != null)
				{
					Main.WorldList.Add(allMetadata);
				}
			}
			if (SocialAPI.Cloud != null)
			{
				List<string> strs = SocialAPI.Cloud.GetFiles(string.Concat(Main.CloudWorldPath, "/.+\\.wld"));
				foreach (string file in strs)
				{
					WorldFileData worldFileDatum = WorldFile.GetAllMetadata(file, true);
					if (worldFileDatum == null)
					{
						continue;
					}
					Main.WorldList.Add(worldFileDatum);
				}
			}
			Main.WorldList.Sort(new Comparison<WorldFileData>(Main.WorldListSortMethod));
		}

		protected void lookForColorTiles()
		{
			int x = (int)(Main.screenPosition.X / 16f - 2f);
			int num = (int)((Main.screenPosition.X + (float)Main.screenWidth) / 16f) + 3;
			int y = (int)(Main.screenPosition.Y / 16f - 2f);
			int y1 = (int)((Main.screenPosition.Y + (float)Main.screenHeight) / 16f) + 3;
			if (x < 1)
			{
				x = 1;
			}
			if (num > Main.maxTilesX - 2)
			{
				num = Main.maxTilesX - 2;
			}
			for (int i = x; i < num; i++)
			{
				if (i > 0)
				{
					for (int j = y; j < y1; j++)
					{
						if (Main.tile[i, j] != null)
						{
							int treeVariant = Main.GetTreeVariant(i, j);
							if (treeVariant != -1)
							{
								this.woodColorCheck(treeVariant, (int)Main.tile[i, j].color());
							}
							if (Main.tile[i, j].active() && Main.tile[i, j].color() > 0)
							{
								this.tileColorCheck((int)Main.tile[i, j].type, (int)Main.tile[i, j].color());
							}
							if (Main.tile[i, j].wall > 0 && Main.tile[i, j].wallColor() > 0)
							{
								this.wallColorCheck((int)Main.tile[i, j].wall, (int)Main.tile[i, j].wallColor());
							}
						}
					}
				}
			}
			for (int k = 0; k < Main.numTreeStyles; k++)
			{
				for (int l = 0; l < Main.numTileColors; l++)
				{
					if (Main.checkTreeAlt[k, l])
					{
						this.treeColorCheck(k, l);
						Main.checkTreeAlt[k, l] = false;
					}
				}
			}
		}

		public void MouseText(string cursorText, int rare = 0, byte diff = 0)
		{
			float single;
			string[] strArrays;
			object obj;
			object[] objArray;
			IntPtr intPtr;
			Vector2 vector2;
			int num = -1;
			if (this.mouseNPC > -1)
			{
				return;
			}
			if (cursorText == null)
			{
				return;
			}
			int x = Main.mouseX + 10;
			int y = Main.mouseY + 10;
			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
			if (Main.toolTip.type <= 0)
			{
				if (Main.buffString != "" && Main.buffString != null)
				{
					for (int i = 0; i < 5; i++)
					{
						int num1 = x;
						int y1 = y + (int)Main.fontMouseText.MeasureString(Main.buffString).Y;
						Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
						if (i == 0)
						{
							num1 = num1 - 2;
						}
						else if (i == 1)
						{
							num1 = num1 + 2;
						}
						else if (i == 2)
						{
							y1 = y1 - 2;
						}
						else if (i != 3)
						{
							black = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
						}
						else
						{
							y1 = y1 + 2;
						}
						SpriteBatch spriteBatch = Main.spriteBatch;
						SpriteFont spriteFont = Main.fontMouseText;
						string str = Main.buffString;
						Vector2 vector21 = new Vector2((float)num1, (float)y1);
						vector2 = new Vector2();
						spriteBatch.DrawString(spriteFont, str, vector21, black, 0f, vector2, 1f, SpriteEffects.None, 0f);
					}
					if (Main.bannerMouseOver)
					{
						int num2 = 0;
						for (int j = 0; j < 251; j++)
						{
							if (Item.BannerToNPC(j) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[j])
							{
								num2++;
								for (int k = 0; k < 5; k++)
								{
									int num3 = x;
									int y2 = y + (int)Main.fontMouseText.MeasureString(Main.buffString).Y + num2 * 20 + 10;
									int num4 = (Main.screenHeight - 250) / 20;
									if (num2 > num4)
									{
										num3 = num3 + 260;
										y2 = y2 - num4 * 20;
									}
									if (num2 > num4 * 2)
									{
										num3 = num3 + 260;
										y2 = y2 - num4 * 20;
									}
									if (num2 > num4 * 3)
									{
										num3 = num3 + 260;
										y2 = y2 - num4 * 20;
									}
									Microsoft.Xna.Framework.Color black1 = Microsoft.Xna.Framework.Color.Black;
									if (k == 0)
									{
										num3 = num3 - 2;
									}
									else if (k == 1)
									{
										num3 = num3 + 2;
									}
									else if (k == 2)
									{
										y2 = y2 - 2;
									}
									else if (k != 3)
									{
										single = (float)Main.mouseTextColor / 255f;
										black1 = new Microsoft.Xna.Framework.Color((int)(80f * single), (int)(255f * single), (int)(120f * single), (int)Main.mouseTextColor);
									}
									else
									{
										y2 = y2 + 2;
									}
									SpriteBatch spriteBatch1 = Main.spriteBatch;
									SpriteFont spriteFont1 = Main.fontMouseText;
									string str1 = Lang.npcName(Item.BannerToNPC(j), false);
									Vector2 vector22 = new Vector2((float)num3, (float)y2);
									vector2 = new Vector2();
									spriteBatch1.DrawString(spriteFont1, str1, vector22, black1, 0f, vector2, 1f, SpriteEffects.None, 0f);
								}
							}
						}
					}
				}
				Vector2 vector23 = Main.fontMouseText.MeasureString(cursorText);
				if ((float)x + vector23.X + 4f > (float)Main.screenWidth)
				{
					x = (int)((float)Main.screenWidth - vector23.X - 4f);
				}
				if ((float)y + vector23.Y + 4f > (float)Main.screenHeight)
				{
					y = (int)((float)Main.screenHeight - vector23.Y - 4f);
				}
				SpriteBatch spriteBatch2 = Main.spriteBatch;
				SpriteFont spriteFont2 = Main.fontMouseText;
				Vector2 vector24 = new Vector2((float)x, (float)(y - 2));
				Microsoft.Xna.Framework.Color color1 = Microsoft.Xna.Framework.Color.Black;
				vector2 = new Vector2();
				spriteBatch2.DrawString(spriteFont2, cursorText, vector24, color1, 0f, vector2, 1f, SpriteEffects.None, 0f);
				SpriteBatch spriteBatch3 = Main.spriteBatch;
				SpriteFont spriteFont3 = Main.fontMouseText;
				Vector2 vector25 = new Vector2((float)x, (float)(y + 2));
				Microsoft.Xna.Framework.Color black2 = Microsoft.Xna.Framework.Color.Black;
				vector2 = new Vector2();
				spriteBatch3.DrawString(spriteFont3, cursorText, vector25, black2, 0f, vector2, 1f, SpriteEffects.None, 0f);
				SpriteBatch spriteBatch4 = Main.spriteBatch;
				SpriteFont spriteFont4 = Main.fontMouseText;
				Vector2 vector26 = new Vector2((float)(x - 2), (float)y);
				Microsoft.Xna.Framework.Color color2 = Microsoft.Xna.Framework.Color.Black;
				vector2 = new Vector2();
				spriteBatch4.DrawString(spriteFont4, cursorText, vector26, color2, 0f, vector2, 1f, SpriteEffects.None, 0f);
				SpriteBatch spriteBatch5 = Main.spriteBatch;
				SpriteFont spriteFont5 = Main.fontMouseText;
				Vector2 vector27 = new Vector2((float)(x + 2), (float)y);
				Microsoft.Xna.Framework.Color black3 = Microsoft.Xna.Framework.Color.Black;
				vector2 = new Vector2();
				spriteBatch5.DrawString(spriteFont5, cursorText, vector27, black3, 0f, vector2, 1f, SpriteEffects.None, 0f);
				single = (float)Main.mouseTextColor / 255f;
				Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
				if (rare == -11)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(175f * single), (int)(0f * single), (int)Main.mouseTextColor);
				}
				if (rare == -10)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(65f * single), (int)(255f * single), (int)(110f * single), (int)Main.mouseTextColor);
				}
				if (rare == -1)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(130f * single), (int)(130f * single), (int)(130f * single), (int)Main.mouseTextColor);
				}
				if (rare == 1)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(150f * single), (int)(150f * single), (int)(255f * single), (int)Main.mouseTextColor);
				}
				if (rare == 2)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(150f * single), (int)(255f * single), (int)(150f * single), (int)Main.mouseTextColor);
				}
				if (rare == 3)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(200f * single), (int)(150f * single), (int)Main.mouseTextColor);
				}
				if (rare == 4)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(150f * single), (int)(150f * single), (int)Main.mouseTextColor);
				}
				if (rare == 5)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(150f * single), (int)(255f * single), (int)Main.mouseTextColor);
				}
				if (rare == 6)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(210f * single), (int)(160f * single), (int)(255f * single), (int)Main.mouseTextColor);
				}
				if (rare == 7)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(150f * single), (int)(255f * single), (int)(10f * single), (int)Main.mouseTextColor);
				}
				if (rare == 8)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(255f * single), (int)(10f * single), (int)Main.mouseTextColor);
				}
				if (rare == 9)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(5f * single), (int)(200f * single), (int)(255f * single), (int)Main.mouseTextColor);
				}
				if (rare == 10)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(40f * single), (int)(100f * single), (int)Main.mouseTextColor);
				}
				if (rare >= 11)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)(180f * single), (int)(40f * single), (int)(255f * single), (int)Main.mouseTextColor);
				}
				if (Main.toolTip.expert || rare == -12)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)((float)Main.DiscoR * single), (int)((float)Main.DiscoG * single), (int)((float)Main.DiscoB * single), (int)Main.mouseTextColor);
				}
				if (diff == 1)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)((float)Main.mcColor.R * single), (int)((float)Main.mcColor.G * single), (int)((float)Main.mcColor.B * single), (int)Main.mouseTextColor);
				}
				if (diff == 2)
				{
					color3 = new Microsoft.Xna.Framework.Color((int)((float)Main.hcColor.R * single), (int)((float)Main.hcColor.G * single), (int)((float)Main.hcColor.B * single), (int)Main.mouseTextColor);
				}
				SpriteBatch spriteBatch6 = Main.spriteBatch;
				SpriteFont spriteFont6 = Main.fontMouseText;
				Vector2 vector28 = new Vector2((float)x, (float)y);
				vector2 = new Vector2();
				spriteBatch6.DrawString(spriteFont6, cursorText, vector28, color3, 0f, vector2, 1f, SpriteEffects.None, 0f);
				return;
			}
			rare = Main.toolTip.rare;
			float single1 = Main.toolTip.knockBack;
			float single2 = 1f;
			if (Main.toolTip.melee && Main.player[Main.myPlayer].kbGlove)
			{
				single2 = single2 + 1f;
			}
			if (Main.player[Main.myPlayer].kbBuff)
			{
				single2 = single2 + 0.5f;
			}
			if (single2 != 1f)
			{
				Item item = Main.toolTip;
				item.knockBack = item.knockBack * single2;
			}
			if (Main.toolTip.ranged && Main.player[Main.myPlayer].shroomiteStealth)
			{
				Item item1 = Main.toolTip;
				item1.knockBack = item1.knockBack * (1f + (1f - Main.player[Main.myPlayer].stealth) * 0.5f);
			}
			int num5 = 20;
			int num6 = 1;
			string[] strArrays1 = new string[num5];
			bool[] flagArray = new bool[num5];
			bool[] flagArray1 = new bool[num5];
			for (int l = 0; l < num5; l++)
			{
				flagArray[l] = false;
				flagArray1[l] = false;
			}
			strArrays1[0] = Main.toolTip.AffixName();
			if (Main.toolTip.stack > 1)
			{
				string[] strArrays2 = strArrays1;
				obj = strArrays2[0];
				objArray = new object[] { obj, " (", Main.toolTip.stack, ")" };
				strArrays2[0] = string.Concat(objArray);
			}
			if (Main.toolTip.favorited)
			{
				int num7 = num6;
				num6 = num7 + 1;
				strArrays1[num7] = Lang.tip[56];
				int num8 = num6;
				num6 = num8 + 1;
				strArrays1[num8] = Lang.tip[57];
			}
			if (!Main.toolTip.social)
			{
				if (Main.toolTip.damage > 0 && (!Main.toolTip.notAmmo || Main.toolTip.useStyle > 0))
				{
					float single3 = 5E-06f;
					int num9 = Main.toolTip.damage;
					if (Main.toolTip.melee)
					{
						strArrays1[num6] = string.Concat((int)(Main.player[Main.myPlayer].meleeDamage * (float)num9 + single3));
						string[] strArrays3 = strArrays1;
						strArrays = strArrays3;
						int num10 = num6;
						intPtr = (IntPtr)num10;
						strArrays3[num10] = string.Concat(strArrays[num10], Lang.tip[2]);
					}
					else if (Main.toolTip.ranged)
					{
						float single4 = (float)num9 * Main.player[Main.myPlayer].rangedDamage;
						if (Main.toolTip.useAmmo == 1 || Main.toolTip.useAmmo == 323)
						{
							single4 = single4 * Main.player[Main.myPlayer].arrowDamage;
						}
						if (Main.toolTip.useAmmo == 1 && Main.player[Main.myPlayer].archery)
						{
							single4 = single4 * 1.2f;
						}
						if (Main.toolTip.useAmmo == 14 || Main.toolTip.useAmmo == 311)
						{
							single4 = single4 * Main.player[Main.myPlayer].bulletDamage;
						}
						if (Main.toolTip.useAmmo == 771 || Main.toolTip.useAmmo == 246 || Main.toolTip.useAmmo == 312 || Main.toolTip.useAmmo == 514)
						{
							single4 = single4 * Main.player[Main.myPlayer].rocketDamage;
						}
						strArrays1[num6] = string.Concat((int)(single4 + single3));
						string[] strArrays4 = strArrays1;
						strArrays = strArrays4;
						int num11 = num6;
						intPtr = (IntPtr)num11;
						strArrays4[num11] = string.Concat(strArrays[num11], Lang.tip[3]);
					}
					else if (Main.toolTip.magic)
					{
						strArrays1[num6] = string.Concat((int)(Main.player[Main.myPlayer].magicDamage * (float)num9 + single3));
						string[] strArrays5 = strArrays1;
						strArrays = strArrays5;
						int num12 = num6;
						intPtr = (IntPtr)num12;
						strArrays5[num12] = string.Concat(strArrays[num12], Lang.tip[4]);
					}
					else if (Main.toolTip.thrown)
					{
						strArrays1[num6] = string.Concat((int)(Main.player[Main.myPlayer].thrownDamage * (float)num9 + single3));
						string[] strArrays6 = strArrays1;
						strArrays = strArrays6;
						int num13 = num6;
						intPtr = (IntPtr)num13;
						strArrays6[num13] = string.Concat(strArrays[num13], Lang.tip[58]);
					}
					else if (!Main.toolTip.summon)
					{
						strArrays1[num6] = string.Concat(num9);
						string[] strArrays7 = strArrays1;
						strArrays = strArrays7;
						int num14 = num6;
						intPtr = (IntPtr)num14;
						strArrays7[num14] = string.Concat(strArrays[num14], Lang.tip[55]);
					}
					else
					{
						strArrays1[num6] = string.Concat((int)(Main.player[Main.myPlayer].minionDamage * (float)num9 + single3));
						string[] strArrays8 = strArrays1;
						strArrays = strArrays8;
						int num15 = num6;
						intPtr = (IntPtr)num15;
						strArrays8[num15] = string.Concat(strArrays[num15], Lang.tip[53]);
					}
					num6++;
					if (Main.toolTip.melee)
					{
						int num16 = Main.player[Main.myPlayer].meleeCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
						strArrays1[num6] = string.Concat(num16, Lang.tip[5]);
						num6++;
					}
					else if (Main.toolTip.ranged)
					{
						int num17 = Main.player[Main.myPlayer].rangedCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
						strArrays1[num6] = string.Concat(num17, Lang.tip[5]);
						num6++;
					}
					else if (Main.toolTip.magic)
					{
						int num18 = Main.player[Main.myPlayer].magicCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
						strArrays1[num6] = string.Concat(num18, Lang.tip[5]);
						num6++;
					}
					else if (Main.toolTip.thrown)
					{
						int num19 = Main.player[Main.myPlayer].thrownCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.toolTip.crit;
						strArrays1[num6] = string.Concat(num19, Lang.tip[5]);
						num6++;
					}
					if (Main.toolTip.useStyle > 0 && !Main.toolTip.summon)
					{
						if (Main.toolTip.useAnimation <= 8)
						{
							strArrays1[num6] = Lang.tip[6];
						}
						else if (Main.toolTip.useAnimation <= 20)
						{
							strArrays1[num6] = Lang.tip[7];
						}
						else if (Main.toolTip.useAnimation <= 25)
						{
							strArrays1[num6] = Lang.tip[8];
						}
						else if (Main.toolTip.useAnimation <= 30)
						{
							strArrays1[num6] = Lang.tip[9];
						}
						else if (Main.toolTip.useAnimation <= 35)
						{
							strArrays1[num6] = Lang.tip[10];
						}
						else if (Main.toolTip.useAnimation <= 45)
						{
							strArrays1[num6] = Lang.tip[11];
						}
						else if (Main.toolTip.useAnimation > 55)
						{
							strArrays1[num6] = Lang.tip[13];
						}
						else
						{
							strArrays1[num6] = Lang.tip[12];
						}
						num6++;
					}
					float single5 = Main.toolTip.knockBack;
					if (Main.toolTip.summon)
					{
						single5 = single5 + Main.player[Main.myPlayer].minionKB;
					}
					if (Main.player[Main.myPlayer].magicQuiver && Main.toolTip.useAmmo == 1 || Main.toolTip.useAmmo == 323)
					{
						single5 = (float)((int)(single5 * 1.1f));
					}
					if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 3106 && Main.toolTip.type == 3106)
					{
						single5 = single5 + single5 * (1f - Main.player[Main.myPlayer].stealth);
					}
					if (single5 == 0f)
					{
						strArrays1[num6] = Lang.tip[14];
					}
					else if ((double)single5 <= 1.5)
					{
						strArrays1[num6] = Lang.tip[15];
					}
					else if (single5 <= 3f)
					{
						strArrays1[num6] = Lang.tip[16];
					}
					else if (single5 <= 4f)
					{
						strArrays1[num6] = Lang.tip[17];
					}
					else if (single5 <= 6f)
					{
						strArrays1[num6] = Lang.tip[18];
					}
					else if (single5 <= 7f)
					{
						strArrays1[num6] = Lang.tip[19];
					}
					else if (single5 <= 9f)
					{
						strArrays1[num6] = Lang.tip[20];
					}
					else if (single5 > 11f)
					{
						strArrays1[num6] = Lang.tip[22];
					}
					else
					{
						strArrays1[num6] = Lang.tip[21];
					}
					num6++;
				}
				if (Main.toolTip.fishingPole > 0)
				{
					strArrays1[num6] = string.Concat(Main.toolTip.fishingPole, "% fishing power");
					num6++;
					strArrays1[num6] = "Requires bait to catch fish";
					num6++;
				}
				if (Main.toolTip.bait > 0)
				{
					strArrays1[num6] = string.Concat(Main.toolTip.bait, "% bait power");
					num6++;
				}
				if (Main.toolTip.headSlot > 0 || Main.toolTip.bodySlot > 0 || Main.toolTip.legSlot > 0 || Main.toolTip.accessory || Main.projHook[Main.toolTip.shoot] || Main.toolTip.mountType != -1 || Main.toolTip.buffType > 0 && (Main.lightPet[Main.toolTip.buffType] || Main.vanityPet[Main.toolTip.buffType]))
				{
					strArrays1[num6] = Lang.tip[23];
					num6++;
				}
				if (Main.toolTip.tileWand > 0)
				{
					strArrays1[num6] = string.Concat(Lang.tip[52], Lang.itemName(Main.toolTip.tileWand, false));
					num6++;
				}
				if (Main.toolTip.questItem)
				{
					strArrays1[num6] = Lang.inter[65];
					num6++;
				}
				if (Main.toolTip.vanity)
				{
					strArrays1[num6] = Lang.tip[24];
					num6++;
				}
				if (Main.toolTip.defense > 0)
				{
					strArrays1[num6] = string.Concat(Main.toolTip.defense, Lang.tip[25]);
					num6++;
				}
				if (Main.toolTip.pick > 0)
				{
					strArrays1[num6] = string.Concat(Main.toolTip.pick, Lang.tip[26]);
					num6++;
				}
				if (Main.toolTip.axe > 0)
				{
					strArrays1[num6] = string.Concat(Main.toolTip.axe * 5, Lang.tip[27]);
					num6++;
				}
				if (Main.toolTip.hammer > 0)
				{
					strArrays1[num6] = string.Concat(Main.toolTip.hammer, Lang.tip[28]);
					num6++;
				}
				if (Main.toolTip.tileBoost != 0)
				{
					int num20 = Main.toolTip.tileBoost;
					if (num20 <= 0)
					{
						strArrays1[num6] = string.Concat(num20, Lang.tip[54]);
					}
					else
					{
						strArrays1[num6] = string.Concat("+", num20, Lang.tip[54]);
					}
					num6++;
				}
				if (Main.toolTip.healLife > 0)
				{
					objArray = new object[] { Lang.tip[29], " ", Main.toolTip.healLife, " ", Lang.tip[30] };
					strArrays1[num6] = string.Concat(objArray);
					num6++;
				}
				if (Main.toolTip.healMana > 0)
				{
					objArray = new object[] { Lang.tip[29], " ", Main.toolTip.healMana, " ", Lang.tip[31] };
					strArrays1[num6] = string.Concat(objArray);
					num6++;
				}
				if (Main.toolTip.mana > 0 && (Main.toolTip.type != 127 || !Main.player[Main.myPlayer].spaceGun))
				{
					objArray = new object[] { Lang.tip[32], " ", (int)((float)Main.toolTip.mana * Main.player[Main.myPlayer].manaCost), " ", Lang.tip[31] };
					strArrays1[num6] = string.Concat(objArray);
					num6++;
				}
				if (Main.toolTip.createWall > 0 || Main.toolTip.createTile > -1)
				{
					if (Main.toolTip.type != 213 && Main.toolTip.tileWand < 1)
					{
						strArrays1[num6] = Lang.tip[33];
						num6++;
					}
				}
				else if (Main.toolTip.ammo > 0 && !Main.toolTip.notAmmo)
				{
					strArrays1[num6] = Lang.tip[34];
					num6++;
				}
				else if (Main.toolTip.consumable)
				{
					strArrays1[num6] = Lang.tip[35];
					num6++;
				}
				if (Main.toolTip.material)
				{
					strArrays1[num6] = Lang.tip[36];
					num6++;
				}
				if (Main.toolTip.toolTip != null)
				{
					if (Main.toolTip.type < 1533 || Main.toolTip.type > 1537 || NPC.downedPlantBoss)
					{
						strArrays1[num6] = Main.toolTip.toolTip;
					}
					else
					{
						strArrays1[num6] = Lang.tip[59];
					}
					num6++;
				}
				if (Main.toolTip.toolTip2 != null)
				{
					strArrays1[num6] = Main.toolTip.toolTip2;
					num6++;
				}
				if (Main.toolTip.buffType == 26 && Main.expertMode)
				{
					strArrays1[num6] = Lang.misc[40];
					num6++;
				}
				if (Main.toolTip.buffTime > 0)
				{
					string str2 = "0 s";
					str2 = (Main.toolTip.buffTime / 60 < 60 ? string.Concat(Math.Round((double)Main.toolTip.buffTime / 60), Lang.tip[38]) : string.Concat(Math.Round((double)(Main.toolTip.buffTime / 60) / 60), Lang.tip[37]));
					strArrays1[num6] = str2;
					num6++;
				}
				if (Main.toolTip.type == 3262 || Main.toolTip.type == 3282 || Main.toolTip.type == 3283 || Main.toolTip.type == 3284 || Main.toolTip.type == 3285 || Main.toolTip.type == 3286 || Main.toolTip.type == 3316 || Main.toolTip.type == 3315 || Main.toolTip.type == 3317 || Main.toolTip.type == 3389)
				{
					strArrays1[num6] = " ";
					num = num6;
					num6++;
				}
				if (Main.toolTip.prefix > 0)
				{
					if (Main.cpItem == null || Main.cpItem.netID != Main.toolTip.netID)
					{
						Main.cpItem = new Item();
						Main.cpItem.netDefaults(Main.toolTip.netID);
					}
					if (Main.cpItem.damage != Main.toolTip.damage)
					{
						double num21 = (double)((float)Main.toolTip.damage - (float)Main.cpItem.damage);
						num21 = num21 / (double)((float)Main.cpItem.damage) * 100;
						num21 = Math.Round(num21);
						if (num21 <= 0)
						{
							strArrays1[num6] = string.Concat(num21, Lang.tip[39]);
						}
						else
						{
							strArrays1[num6] = string.Concat("+", num21, Lang.tip[39]);
						}
						if (num21 < 0)
						{
							flagArray1[num6] = true;
						}
						flagArray[num6] = true;
						num6++;
					}
					if (Main.cpItem.useAnimation != Main.toolTip.useAnimation)
					{
						double num22 = (double)((float)Main.toolTip.useAnimation - (float)Main.cpItem.useAnimation);
						num22 = num22 / (double)((float)Main.cpItem.useAnimation) * 100;
						num22 = Math.Round(num22);
						num22 = num22 * -1;
						if (num22 <= 0)
						{
							strArrays1[num6] = string.Concat(num22, Lang.tip[40]);
						}
						else
						{
							strArrays1[num6] = string.Concat("+", num22, Lang.tip[40]);
						}
						if (num22 < 0)
						{
							flagArray1[num6] = true;
						}
						flagArray[num6] = true;
						num6++;
					}
					if (Main.cpItem.crit != Main.toolTip.crit)
					{
						double num23 = (double)((float)Main.toolTip.crit - (float)Main.cpItem.crit);
						if (num23 <= 0)
						{
							strArrays1[num6] = string.Concat(num23, Lang.tip[41]);
						}
						else
						{
							strArrays1[num6] = string.Concat("+", num23, Lang.tip[41]);
						}
						if (num23 < 0)
						{
							flagArray1[num6] = true;
						}
						flagArray[num6] = true;
						num6++;
					}
					if (Main.cpItem.mana != Main.toolTip.mana)
					{
						double num24 = (double)((float)Main.toolTip.mana - (float)Main.cpItem.mana);
						num24 = num24 / (double)((float)Main.cpItem.mana) * 100;
						num24 = Math.Round(num24);
						if (num24 <= 0)
						{
							strArrays1[num6] = string.Concat(num24, Lang.tip[42]);
						}
						else
						{
							strArrays1[num6] = string.Concat("+", num24, Lang.tip[42]);
						}
						if (num24 > 0)
						{
							flagArray1[num6] = true;
						}
						flagArray[num6] = true;
						num6++;
					}
					if (Main.cpItem.scale != Main.toolTip.scale)
					{
						double num25 = (double)((float)Main.toolTip.scale - (float)Main.cpItem.scale);
						num25 = num25 / (double)((float)Main.cpItem.scale) * 100;
						num25 = Math.Round(num25);
						if (num25 <= 0)
						{
							strArrays1[num6] = string.Concat(num25, Lang.tip[43]);
						}
						else
						{
							strArrays1[num6] = string.Concat("+", num25, Lang.tip[43]);
						}
						if (num25 < 0)
						{
							flagArray1[num6] = true;
						}
						flagArray[num6] = true;
						num6++;
					}
					if (Main.cpItem.shootSpeed != Main.toolTip.shootSpeed)
					{
						double num26 = (double)((float)Main.toolTip.shootSpeed - (float)Main.cpItem.shootSpeed);
						num26 = num26 / (double)((float)Main.cpItem.shootSpeed) * 100;
						num26 = Math.Round(num26);
						if (num26 <= 0)
						{
							strArrays1[num6] = string.Concat(num26, Lang.tip[44]);
						}
						else
						{
							strArrays1[num6] = string.Concat("+", num26, Lang.tip[44]);
						}
						if (num26 < 0)
						{
							flagArray1[num6] = true;
						}
						flagArray[num6] = true;
						num6++;
					}
					if (Main.cpItem.knockBack != single1)
					{
						double num27 = (double)((float)single1 - (float)Main.cpItem.knockBack);
						num27 = num27 / (double)((float)Main.cpItem.knockBack) * 100;
						num27 = Math.Round(num27);
						if (num27 <= 0)
						{
							strArrays1[num6] = string.Concat(num27, Lang.tip[45]);
						}
						else
						{
							strArrays1[num6] = string.Concat("+", num27, Lang.tip[45]);
						}
						if (num27 < 0)
						{
							flagArray1[num6] = true;
						}
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 62)
					{
						strArrays1[num6] = string.Concat("+1", Lang.tip[25]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 63)
					{
						strArrays1[num6] = string.Concat("+2", Lang.tip[25]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 64)
					{
						strArrays1[num6] = string.Concat("+3", Lang.tip[25]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 65)
					{
						strArrays1[num6] = string.Concat("+4", Lang.tip[25]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 66)
					{
						strArrays1[num6] = string.Concat("+20 ", Lang.tip[31]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 67)
					{
						strArrays1[num6] = string.Concat("+2", Lang.tip[5]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 68)
					{
						strArrays1[num6] = string.Concat("+4", Lang.tip[5]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 69)
					{
						strArrays1[num6] = string.Concat("+1", Lang.tip[39]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 70)
					{
						strArrays1[num6] = string.Concat("+2", Lang.tip[39]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 71)
					{
						strArrays1[num6] = string.Concat("+3", Lang.tip[39]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 72)
					{
						strArrays1[num6] = string.Concat("+4", Lang.tip[39]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 73)
					{
						strArrays1[num6] = string.Concat("+1", Lang.tip[46]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 74)
					{
						strArrays1[num6] = string.Concat("+2", Lang.tip[46]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 75)
					{
						strArrays1[num6] = string.Concat("+3", Lang.tip[46]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 76)
					{
						strArrays1[num6] = string.Concat("+4", Lang.tip[46]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 77)
					{
						strArrays1[num6] = string.Concat("+1", Lang.tip[47]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 78)
					{
						strArrays1[num6] = string.Concat("+2", Lang.tip[47]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 79)
					{
						strArrays1[num6] = string.Concat("+3", Lang.tip[47]);
						flagArray[num6] = true;
						num6++;
					}
					if (Main.toolTip.prefix == 80)
					{
						strArrays1[num6] = string.Concat("+4", Lang.tip[47]);
						flagArray[num6] = true;
						num6++;
					}
				}
				if (Main.toolTip.wornArmor && Main.player[Main.myPlayer].setBonus != "")
				{
					strArrays1[num6] = string.Concat(Lang.tip[48], " ", Main.player[Main.myPlayer].setBonus);
					num6++;
				}
			}
			else
			{
				strArrays1[num6] = Lang.tip[0];
				num6++;
				strArrays1[num6] = Lang.tip[1];
				num6++;
			}
			if (Main.toolTip.expert)
			{
				strArrays1[num6] = "Expert";
				num6++;
			}
			if (Main.npcShop > 0)
			{
				if (Main.toolTip.@value <= 0)
				{
					single = (float)Main.mouseTextColor / 255f;
					strArrays1[num6] = Lang.tip[51];
					num6++;
					color = new Microsoft.Xna.Framework.Color((int)(120f * single), (int)(120f * single), (int)(120f * single), (int)Main.mouseTextColor);
				}
				else
				{
					string str3 = "";
					int num28 = 0;
					int num29 = 0;
					int num30 = 0;
					int num31 = 0;
					int num32 = Main.toolTip.@value * Main.toolTip.stack;
					if (!Main.toolTip.buy)
					{
						num32 = Main.toolTip.@value / 5 * Main.toolTip.stack;
					}
					if (num32 < 1)
					{
						num32 = 1;
					}
					if (num32 >= 1000000)
					{
						num28 = num32 / 1000000;
						num32 = num32 - num28 * 1000000;
					}
					if (num32 >= 10000)
					{
						num29 = num32 / 10000;
						num32 = num32 - num29 * 10000;
					}
					if (num32 >= 100)
					{
						num30 = num32 / 100;
						num32 = num32 - num30 * 100;
					}
					if (num32 >= 1)
					{
						num31 = num32;
					}
					if (num28 > 0)
					{
						obj = str3;
						objArray = new object[] { obj, num28, " ", Lang.inter[15], " " };
						str3 = string.Concat(objArray);
					}
					if (num29 > 0)
					{
						obj = str3;
						objArray = new object[] { obj, num29, " ", Lang.inter[16], " " };
						str3 = string.Concat(objArray);
					}
					if (num30 > 0)
					{
						obj = str3;
						objArray = new object[] { obj, num30, " ", Lang.inter[17], " " };
						str3 = string.Concat(objArray);
					}
					if (num31 > 0)
					{
						obj = str3;
						objArray = new object[] { obj, num31, " ", Lang.inter[18], " " };
						str3 = string.Concat(objArray);
					}
					if (Main.toolTip.buy)
					{
						strArrays1[num6] = string.Concat(Lang.tip[50], " ", str3);
					}
					else
					{
						strArrays1[num6] = string.Concat(Lang.tip[49], " ", str3);
					}
					num6++;
					single = (float)Main.mouseTextColor / 255f;
					if (num28 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((int)(220f * single), (int)(220f * single), (int)(198f * single), (int)Main.mouseTextColor);
					}
					else if (num29 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((int)(224f * single), (int)(201f * single), (int)(92f * single), (int)Main.mouseTextColor);
					}
					else if (num30 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((int)(181f * single), (int)(192f * single), (int)(193f * single), (int)Main.mouseTextColor);
					}
					else if (num31 > 0)
					{
						color = new Microsoft.Xna.Framework.Color((int)(246f * single), (int)(138f * single), (int)(96f * single), (int)Main.mouseTextColor);
					}
				}
			}
			Vector2 zero = Vector2.Zero;
			int num33 = 0;
			for (int m = 0; m < num6; m++)
			{
				Vector2 vector29 = Main.fontMouseText.MeasureString(strArrays1[m]);
				if (vector29.X > zero.X)
				{
					zero.X = vector29.X;
				}
				zero.Y = zero.Y + (vector29.Y + (float)num33);
			}
			x = x + Main.toolTipDistance;
			y = y + Main.toolTipDistance;
			if ((float)x + zero.X + 4f > (float)Main.screenWidth)
			{
				x = (int)((float)Main.screenWidth - zero.X - 4f);
			}
			if ((float)y + zero.Y + 4f > (float)Main.screenHeight)
			{
				y = (int)((float)Main.screenHeight - zero.Y - 4f);
			}
			int y3 = 0;
			single = (float)Main.mouseTextColor / 255f;
			for (int n = 0; n < num6; n++)
			{
				if (n != num)
				{
					for (int o = 0; o < 5; o++)
					{
						int num34 = x;
						int num35 = y + y3;
						Microsoft.Xna.Framework.Color black4 = Microsoft.Xna.Framework.Color.Black;
						if (o == 0)
						{
							num34 = num34 - 2;
						}
						else if (o == 1)
						{
							num34 = num34 + 2;
						}
						else if (o == 2)
						{
							num35 = num35 - 2;
						}
						else if (o != 3)
						{
							black4 = new Microsoft.Xna.Framework.Color((int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor, (int)Main.mouseTextColor);
							if (n == 0)
							{
								if (rare == -11)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(175f * single), (int)(0f * single), (int)Main.mouseTextColor);
								}
								if (rare == -1)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(130f * single), (int)(130f * single), (int)(130f * single), (int)Main.mouseTextColor);
								}
								if (rare == 1)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(150f * single), (int)(150f * single), (int)(255f * single), (int)Main.mouseTextColor);
								}
								if (rare == 2)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(150f * single), (int)(255f * single), (int)(150f * single), (int)Main.mouseTextColor);
								}
								if (rare == 3)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(200f * single), (int)(150f * single), (int)Main.mouseTextColor);
								}
								if (rare == 4)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(150f * single), (int)(150f * single), (int)Main.mouseTextColor);
								}
								if (rare == 5)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(150f * single), (int)(255f * single), (int)Main.mouseTextColor);
								}
								if (rare == 6)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(210f * single), (int)(160f * single), (int)(255f * single), (int)Main.mouseTextColor);
								}
								if (rare == 7)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(150f * single), (int)(255f * single), (int)(10f * single), (int)Main.mouseTextColor);
								}
								if (rare == 8)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(255f * single), (int)(10f * single), (int)Main.mouseTextColor);
								}
								if (rare == 9)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(5f * single), (int)(200f * single), (int)(255f * single), (int)Main.mouseTextColor);
								}
								if (rare == 10)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(255f * single), (int)(40f * single), (int)(100f * single), (int)Main.mouseTextColor);
								}
								if (rare >= 11)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)(180f * single), (int)(40f * single), (int)(255f * single), (int)Main.mouseTextColor);
								}
								if (diff == 1)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)((float)Main.mcColor.R * single), (int)((float)Main.mcColor.G * single), (int)((float)Main.mcColor.B * single), (int)Main.mouseTextColor);
								}
								if (diff == 2)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)((float)Main.hcColor.R * single), (int)((float)Main.hcColor.G * single), (int)((float)Main.hcColor.B * single), (int)Main.mouseTextColor);
								}
								if (Main.toolTip.expert || rare == -12)
								{
									black4 = new Microsoft.Xna.Framework.Color((int)((float)Main.DiscoR * single), (int)((float)Main.DiscoG * single), (int)((float)Main.DiscoB * single), (int)Main.mouseTextColor);
								}
							}
							else if (flagArray[n])
							{
								black4 = (!flagArray1[n] ? new Microsoft.Xna.Framework.Color((int)(120f * single), (int)(190f * single), (int)(120f * single), (int)Main.mouseTextColor) : new Microsoft.Xna.Framework.Color((int)(190f * single), (int)(120f * single), (int)(120f * single), (int)Main.mouseTextColor));
							}
							else if (n == num6 - 1)
							{
								black4 = color;
							}
						}
						else
						{
							num35 = num35 + 2;
						}
						SpriteBatch spriteBatch7 = Main.spriteBatch;
						SpriteFont spriteFont7 = Main.fontMouseText;
						string str4 = strArrays1[n];
						Vector2 vector210 = new Vector2((float)num34, (float)num35);
						vector2 = new Vector2();
						spriteBatch7.DrawString(spriteFont7, str4, vector210, black4, 0f, vector2, 1f, SpriteEffects.None, 0f);
					}
				}
				else
				{
					int num36 = (int)((float)Main.mouseTextColor * 1f);
					Microsoft.Xna.Framework.Color color4 = Microsoft.Xna.Framework.Color.Black;
					for (int p = 0; p < 5; p++)
					{
						int num37 = x;
						int num38 = y + y3;
						if (p == 4)
						{
							color4 = new Microsoft.Xna.Framework.Color(num36, num36, num36, num36);
						}
						if (p == 0)
						{
							num37--;
						}
						else if (p == 1)
						{
							num37++;
						}
						else if (p == 2)
						{
							num38--;
						}
						else if (p == 3)
						{
							num38++;
						}
						SpriteBatch spriteBatch8 = Main.spriteBatch;
						Texture2D texture2D = Main.oneDropLogo;
						Vector2 vector211 = new Vector2((float)num37, (float)num38);
						Microsoft.Xna.Framework.Rectangle? nullable = null;
						vector2 = new Vector2();
						spriteBatch8.Draw(texture2D, vector211, nullable, color4, 0f, vector2, 1f, SpriteEffects.None, 0f);
					}
				}
				y3 = y3 + (int)(Main.fontMouseText.MeasureString(strArrays1[n]).Y + (float)num33);
			}
		}

		public static void MoveCoins(Item[] pInv, Item[] cInv)
		{
			int[] numArray = new int[4];
			List<int> nums = new List<int>();
			List<int> nums1 = new List<int>();
			bool flag = false;
			int[] numArray1 = new int[40];
			for (int i = 0; i < (int)cInv.Length; i++)
			{
				numArray1[i] = -1;
				if (cInv[i].stack < 1 || cInv[i].type < 1)
				{
					nums1.Add(i);
					cInv[i] = new Item();
				}
				if (cInv[i] != null && cInv[i].stack > 0)
				{
					int num = 0;
					if (cInv[i].type == 71)
					{
						num = 1;
					}
					if (cInv[i].type == 72)
					{
						num = 2;
					}
					if (cInv[i].type == 73)
					{
						num = 3;
					}
					if (cInv[i].type == 74)
					{
						num = 4;
					}
					numArray1[i] = num - 1;
					if (num > 0)
					{
						numArray[num - 1] = numArray[num - 1] + cInv[i].stack;
						nums1.Add(i);
						cInv[i] = new Item();
						flag = true;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			Main.PlaySound(7, -1, -1, 1);
			for (int j = 0; j < (int)pInv.Length; j++)
			{
				if (j != 58 && pInv[j] != null && pInv[j].stack > 0)
				{
					int num1 = 0;
					if (pInv[j].type == 71)
					{
						num1 = 1;
					}
					if (pInv[j].type == 72)
					{
						num1 = 2;
					}
					if (pInv[j].type == 73)
					{
						num1 = 3;
					}
					if (pInv[j].type == 74)
					{
						num1 = 4;
					}
					if (num1 > 0)
					{
						numArray[num1 - 1] = numArray[num1 - 1] + pInv[j].stack;
						nums.Add(j);
						pInv[j] = new Item();
					}
				}
			}
			for (int k = 0; k < 3; k++)
			{
				while (numArray[k] >= 100)
				{
					numArray[k] = numArray[k] - 100;
					numArray[k + 1] = numArray[k + 1] + 1;
				}
			}
			for (int l = 0; l < 40; l++)
			{
				if (numArray1[l] >= 0 && cInv[l].type == 0)
				{
					int num2 = l;
					int num3 = numArray1[l];
					if (numArray[num3] > 0)
					{
						cInv[num2].SetDefaults(71 + num3, false);
						cInv[num2].stack = numArray[num3];
						if (cInv[num2].stack > cInv[num2].maxStack)
						{
							cInv[num2].stack = cInv[num2].maxStack;
						}
						numArray[num3] = numArray[num3] - cInv[num2].stack;
						numArray1[l] = -1;
					}
					if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
					{
						NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num2, 0f, 0f, 0, 0, 0);
					}
					nums1.Remove(num2);
				}
			}
			for (int m = 0; m < 40; m++)
			{
				if (numArray1[m] >= 0 && cInv[m].type == 0)
				{
					int num4 = m;
					int num5 = 3;
					while (num5 >= 0)
					{
						if (numArray[num5] <= 0)
						{
							num5--;
						}
						else
						{
							cInv[num4].SetDefaults(71 + num5, false);
							cInv[num4].stack = numArray[num5];
							if (cInv[num4].stack > cInv[num4].maxStack)
							{
								cInv[num4].stack = cInv[num4].maxStack;
							}
							numArray[num5] = numArray[num5] - cInv[num4].stack;
							numArray1[m] = -1;
							break;
						}
					}
					if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
					{
						NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)num4, 0f, 0f, 0, 0, 0);
					}
					nums1.Remove(num4);
				}
			}
			while (nums1.Count > 0)
			{
				int item = nums1[0];
				int num6 = 3;
				while (num6 >= 0)
				{
					if (numArray[num6] <= 0)
					{
						num6--;
					}
					else
					{
						cInv[item].SetDefaults(71 + num6, false);
						cInv[item].stack = numArray[num6];
						if (cInv[item].stack > cInv[item].maxStack)
						{
							cInv[item].stack = cInv[item].maxStack;
						}
						numArray[num6] = numArray[num6] - cInv[item].stack;
						break;
					}
				}
				if (Main.netMode == 1 && Main.player[Main.myPlayer].chest > -1)
				{
					NetMessage.SendData(32, -1, -1, "", Main.player[Main.myPlayer].chest, (float)nums1[0], 0f, 0f, 0, 0, 0);
				}
				nums1.RemoveAt(0);
			}
			while (nums.Count > 0)
			{
				int item1 = nums[0];
				for (int n = 3; n >= 0; n--)
				{
					if (numArray[n] > 0)
					{
						pInv[item1].SetDefaults(71 + n, false);
						pInv[item1].stack = numArray[n];
						if (pInv[item1].stack > pInv[item1].maxStack)
						{
							pInv[item1].stack = pInv[item1].maxStack;
						}
						numArray[n] = numArray[n] - pInv[item1].stack;
					}
				}
				nums.RemoveAt(0);
			}
		}

		public void NewMOTD(string newMOTD)
		{
			Main.motd = newMOTD;
		}

		public static void NewText(string newText, byte R = 255, byte G = 255, byte B = 255, bool force = false)
		{
			int num = 80;
			if (force || newText.Length <= num)
			{
				for (int i = Main.numChatLines - 1; i > 0; i--)
				{
					Main.chatLine[i].text = Main.chatLine[i - 1].text;
					Main.chatLine[i].parsedText = Main.chatLine[i - 1].parsedText;
					Main.chatLine[i].showTime = Main.chatLine[i - 1].showTime;
					Main.chatLine[i].color = Main.chatLine[i - 1].color;
				}
				if (R != 0 || G != 0 || B != 0)
				{
					Main.chatLine[0].color = new Microsoft.Xna.Framework.Color((int)R, (int)G, (int)B);
				}
				else
				{
					Main.chatLine[0].color = Microsoft.Xna.Framework.Color.White;
				}
				Main.chatLine[0].text = newText;
				Main.chatLine[0].parsedText = ChatManager.ParseMessage(Main.chatLine[0].text, Main.chatLine[0].color);
				Main.chatLine[0].showTime = Main.chatLength;
				Main.PlaySound(12, -1, -1, 1);
				return;
			}
			string str = newText;
			while (str.Length > num)
			{
				int length = num;
				int num1 = length;
				do
				{
					if (str.Substring(num1, 1) == " ")
					{
						break;
					}
					num1--;
				}
				while (num1 >= 1);
				if (num1 != 0)
				{
					length = num1;
				}
				else
				{
					while (str.Substring(length, 1) != " ")
					{
						length++;
						if (length >= str.Length - 1)
						{
							goto Label0;
						}
					}
				}
			Label0:
				if (length >= str.Length - 1)
				{
					length = str.Length;
				}
				string str1 = str.Substring(0, length);
				Main.NewText(str1, R, G, B, true);
				str = str.Substring(length);
				if (str.Length <= 0)
				{
					continue;
				}
				while (str.Substring(0, 1) == " ")
				{
					str = str.Substring(1);
				}
			}
			if (str.Length > 0)
			{
				Main.NewText(str, R, G, B, true);
			}
		}

		public static float NPCAddHeight(int i)
		{
			float single = 0f;
			if (Main.npc[i].type == 125)
			{
				single = 30f;
			}
			else if (Main.npc[i].type == 54)
			{
				single = 2f;
			}
			else if (Main.npc[i].type == 205)
			{
				single = 8f;
			}
			else if (Main.npc[i].type == 182)
			{
				single = 24f;
			}
			else if (Main.npc[i].type == 178)
			{
				single = 2f;
			}
			else if (Main.npc[i].type == 126)
			{
				single = 30f;
			}
			else if (Main.npc[i].type == 6 || Main.npc[i].type == 173)
			{
				single = 26f;
			}
			else if (Main.npc[i].type == 94)
			{
				single = 14f;
			}
			else if (Main.npc[i].type == 7 || Main.npc[i].type == 8 || Main.npc[i].type == 9)
			{
				single = 13f;
			}
			else if (Main.npc[i].type == 98 || Main.npc[i].type == 99 || Main.npc[i].type == 100)
			{
				single = 13f;
			}
			else if (Main.npc[i].type == 95 || Main.npc[i].type == 96 || Main.npc[i].type == 97)
			{
				single = 13f;
			}
			else if (Main.npc[i].type == 10 || Main.npc[i].type == 11 || Main.npc[i].type == 12)
			{
				single = 8f;
			}
			else if (Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15)
			{
				single = 26f;
			}
			else if (Main.npc[i].type == 175)
			{
				single = 4f;
			}
			else if (Main.npc[i].type == 520)
			{
				single = 2f;
			}
			else if (Main.npc[i].type >= 412 && Main.npc[i].type <= 414)
			{
				single = 18f;
			}
			else if (Main.npc[i].type == 48)
			{
				single = 32f;
			}
			else if (Main.npc[i].type == 49 || Main.npc[i].type == 51)
			{
				single = 4f;
			}
			else if (Main.npc[i].type == 60)
			{
				single = 10f;
			}
			else if (Main.npc[i].type == 62 || Main.npc[i].type == 66 || Main.npc[i].type == 156)
			{
				single = 14f;
			}
			else if (Main.npc[i].type == 63 || Main.npc[i].type == 64 || Main.npc[i].type == 103)
			{
				single = 4f;
			}
			else if (Main.npc[i].type == 65)
			{
				single = 14f;
			}
			else if (Main.npc[i].type == 69)
			{
				single = 4f;
			}
			else if (Main.npc[i].type == 70)
			{
				single = -4f;
			}
			else if (Main.npc[i].type == 72)
			{
				single = -2f;
			}
			else if (Main.npc[i].type == 83 || Main.npc[i].type == 84)
			{
				single = 20f;
			}
			else if (Main.npc[i].type == 150 || Main.npc[i].type == 151 || Main.npc[i].type == 158)
			{
				single = 10f;
			}
			else if (Main.npc[i].type == 152)
			{
				single = 6f;
			}
			else if (Main.npc[i].type == 153 || Main.npc[i].type == 154)
			{
				single = 4f;
			}
			else if (Main.npc[i].type == 165 || Main.npc[i].type == 237 || Main.npc[i].type == 238 || Main.npc[i].type == 240)
			{
				single = 10f;
			}
			else if (Main.npc[i].type == 39 || Main.npc[i].type == 40 || Main.npc[i].type == 41)
			{
				single = 26f;
			}
			else if (Main.npc[i].type >= 87 && Main.npc[i].type <= 92)
			{
				single = 56f;
			}
			else if (Main.npc[i].type >= 134 && Main.npc[i].type <= 136)
			{
				single = 30f;
			}
			else if (Main.npc[i].type == 169)
			{
				single = 8f;
			}
			else if (Main.npc[i].type == 174)
			{
				single = 6f;
			}
			else if (Main.npc[i].type == 369)
			{
				single = 2f;
			}
			else if (Main.npc[i].type == 376)
			{
				single = 6f;
			}
			if (Main.npc[i].townNPC && Main.npc[i].ai[0] == 5f)
			{
				single = single - 4f;
			}
			single = single * Main.npc[i].scale;
			return single;
		}

		protected void OldDrawBackground()
		{
			vertexColors vertexColor;
			Vector2 vector2;
			Microsoft.Xna.Framework.Color[] colorArray = new Microsoft.Xna.Framework.Color[9];
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			int num = (int)(255f * (1f - Main.gfxQuality) + 140f * Main.gfxQuality);
			int num1 = (int)(200f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			int num2 = 128;
			Vector2 zero = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				zero = Vector2.Zero;
			}
			float single = 0.9f;
			float single1 = single;
			float single2 = single;
			float single3 = single;
			float single4 = 0f;
			if (Main.bloodTiles > Main.evilTiles && Main.bloodTiles > Main.holyTiles)
			{
				single4 = (float)Main.bloodTiles;
			}
			else if (Main.holyTiles > Main.evilTiles)
			{
				single4 = (float)Main.holyTiles;
			}
			else if (Main.evilTiles > Main.holyTiles)
			{
				single4 = (float)Main.evilTiles;
			}
			single4 = MathHelper.Clamp(single4 / 800f, 0f, 1f);
			float y = (float)((double)Main.screenPosition.Y - Main.worldSurface * 16) / 300f;
			if (y < 0f)
			{
				y = 0f;
			}
			else if (y > 1f)
			{
				y = 1f;
			}
			float single5 = 1f * (1f - y) + single1 * y;
			Lighting.brightness = Lighting.defBrightness * (1f - y) + 1f * y;
			float y1 = (float)((double)(Main.screenPosition.Y - (float)(Main.screenHeight / 2) + 200f) - Main.rockLayer * 16) / 300f;
			y1 = MathHelper.Clamp(y1, 0f, 1f);
			if (Main.bloodTiles > Main.evilTiles && Main.bloodTiles > Main.holyTiles)
			{
				single1 = 1f * single4 + single1 * (1f - single4);
				single2 = 0.55f * single4 + single2 * (1f - single4);
				single3 = 0.5f * single4 + single3 * (1f - single4);
			}
			else if (Main.evilTiles > 0)
			{
				single1 = 0.8f * single4 + single1 * (1f - single4);
				single2 = 0.75f * single4 + single2 * (1f - single4);
				single3 = 1.1f * single4 + single3 * (1f - single4);
			}
			else if (Main.holyTiles > 0)
			{
				single1 = 1f * single4 + single1 * (1f - single4);
				single2 = 0.7f * single4 + single2 * (1f - single4);
				single3 = 0.9f * single4 + single3 * (1f - single4);
			}
			single1 = 1f * (single5 - y1) + single1 * y1;
			single2 = 1f * (single5 - y1) + single2 * y1;
			single3 = 1f * (single5 - y1) + single3 * y1;
			int x = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
			int num3 = 3;
			if (x <= Main.caveBackX[0])
			{
				num3 = Main.caveBackStyle[0];
			}
			else if (x > Main.treeX[1])
			{
				num3 = (x > Main.treeX[2] ? Main.caveBackStyle[3] : Main.caveBackStyle[2]);
			}
			else
			{
				num3 = Main.caveBackStyle[1];
			}
			num3 = num3 + 3;
			if (Main.snowTiles > 300 && (Main.screenPosition.Y + (float)Main.screenHeight) / 16f < (float)(Main.maxTilesY - 250))
			{
				num3 = 1;
			}
			if (Main.jungleTiles > 80)
			{
				if (num3 != 1)
				{
					num3 = 11;
				}
				else if (Main.jungleTiles > Main.snowTiles)
				{
					num3 = 11;
				}
			}
			if (Main.shroomTiles > 200)
			{
				num3 = 2;
			}
			if (num3 != Main.ugBack)
			{
				Main.oldUgBack = Main.ugBack;
				Main.ugBack = num3;
				Main.ugBackTransition = 1f;
			}
			if (Main.ugBackTransition > 0f)
			{
				Main.ugBackTransition = Main.ugBackTransition - 0.25f;
			}
			if (Main.ugBackTransition < 0f)
			{
				Main.ugBackTransition = 0f;
			}
			int[] numArray = new int[6];
			int[] numArray1 = new int[6];
			for (int i = 0; i < 2; i++)
			{
				int num4 = Main.ugBack;
				if (i == 1)
				{
					num4 = Main.oldUgBack;
				}
				int[] numArray2 = new int[6];
				if (num4 == 0)
				{
					numArray2[0] = 1;
					numArray2[1] = 2;
					numArray2[2] = 4;
					numArray2[3] = 3;
					numArray2[4] = 6;
					numArray2[5] = 5;
				}
				else if (num4 == 1)
				{
					if (Main.iceBackStyle == 0)
					{
						numArray2[1] = 33;
						numArray2[3] = 32;
						numArray2[0] = 40;
						numArray2[2] = 34;
					}
					else if (Main.iceBackStyle == 1)
					{
						numArray2[1] = 118;
						numArray2[3] = 117;
						numArray2[0] = 160;
						numArray2[2] = 161;
					}
					else if (Main.iceBackStyle != 2)
					{
						numArray2[1] = 120;
						numArray2[3] = 119;
						numArray2[0] = 162;
						numArray2[2] = 163;
					}
					else
					{
						numArray2[1] = 165;
						numArray2[3] = 167;
						numArray2[0] = 164;
						numArray2[2] = 166;
					}
					numArray2[4] = numArray2[3];
				}
				else if (num4 == 2)
				{
					numArray2[0] = 62;
					numArray2[1] = 63;
					numArray2[2] = 64;
					numArray2[3] = 65;
					numArray2[4] = 143 + Main.hellBackStyle;
				}
				else if (num4 == 3)
				{
					numArray2[0] = 66;
					numArray2[1] = 67;
					numArray2[2] = 68;
					numArray2[3] = 69;
					numArray2[4] = 128 + Main.hellBackStyle;
				}
				else if (num4 == 4)
				{
					numArray2[0] = 70;
					numArray2[1] = 71;
					numArray2[2] = 68;
					numArray2[3] = 72;
					numArray2[4] = 128 + Main.hellBackStyle;
				}
				else if (num4 == 5)
				{
					numArray2[0] = 73;
					numArray2[1] = 74;
					numArray2[2] = 75;
					numArray2[3] = 76;
					numArray2[4] = 131 + Main.hellBackStyle;
				}
				else if (num4 == 6)
				{
					numArray2[0] = 77;
					numArray2[1] = 78;
					numArray2[2] = 79;
					numArray2[3] = 80;
					numArray2[4] = 134 + Main.hellBackStyle;
				}
				else if (num4 == 7)
				{
					numArray2[0] = 77;
					numArray2[1] = 81;
					numArray2[2] = 79;
					numArray2[3] = 82;
					numArray2[4] = 134 + Main.hellBackStyle;
				}
				else if (num4 == 8)
				{
					numArray2[0] = 83;
					numArray2[1] = 84;
					numArray2[2] = 85;
					numArray2[3] = 86;
					numArray2[4] = 137 + Main.hellBackStyle;
				}
				else if (num4 == 9)
				{
					numArray2[0] = 83;
					numArray2[1] = 87;
					numArray2[2] = 88;
					numArray2[3] = 89;
					numArray2[4] = 137 + Main.hellBackStyle;
				}
				else if (num4 == 10)
				{
					numArray2[0] = 121;
					numArray2[1] = 122;
					numArray2[2] = 123;
					numArray2[3] = 124;
					numArray2[4] = 140 + Main.hellBackStyle;
				}
				else if (num4 == 11)
				{
					if (Main.jungleBackStyle != 0)
					{
						numArray2[0] = 146;
						numArray2[1] = 154;
						numArray2[2] = 155;
						numArray2[3] = 156;
						numArray2[4] = 157 + Main.hellBackStyle;
					}
					else
					{
						numArray2[0] = 153;
						numArray2[1] = 147;
						numArray2[2] = 148;
						numArray2[3] = 149;
						numArray2[4] = 150 + Main.hellBackStyle;
					}
				}
				if (Main.hellBackStyle == 0)
				{
					numArray2[5] = 125;
				}
				if (Main.hellBackStyle == 1)
				{
					numArray2[5] = 126;
				}
				if (Main.hellBackStyle == 2)
				{
					numArray2[5] = 127;
				}
				this.LoadBackground(numArray2[0]);
				this.LoadBackground(numArray2[1]);
				this.LoadBackground(numArray2[2]);
				this.LoadBackground(numArray2[3]);
				this.LoadBackground(numArray2[4]);
				this.LoadBackground(numArray2[5]);
				if (i != 0)
				{
					for (int j = 0; j < 6; j++)
					{
						numArray1[j] = numArray2[j];
					}
				}
				else
				{
					for (int k = 0; k < 6; k++)
					{
						numArray[k] = numArray2[k];
					}
				}
			}
			Lighting.defBrightness = 1.2f * (1f - y1) + 1f * y1;
			this.bgParallax = (double)Main.caveParallax;
			this.bgStart = (int)(-Math.IEEERemainder((double)num2 + (double)Main.screenPosition.X * this.bgParallax, (double)num2) - (double)(num2 / 2)) - (int)zero.X;
			this.bgLoops = Main.screenWidth / num2 + 2;
			this.bgTop = (int)((float)((int)Main.worldSurface * 16 - 16) - Main.screenPosition.Y + 16f);
			for (int l = 0; l < this.bgLoops; l++)
			{
				for (int m = 0; m < num2 / 16; m++)
				{
					float x1 = (float)this.bgStart + Main.screenPosition.X;
					x1 = -(float)Math.IEEERemainder((double)x1, 16);
					int num5 = (int)((float)Math.Round((double)x1));
					if (num5 == -8)
					{
						num5 = 8;
					}
					float single6 = (float)(this.bgStart + num2 * l + m * 16 + 8);
					float single7 = (float)this.bgTop;
					Microsoft.Xna.Framework.Color color = Lighting.GetColor((int)((single6 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + single7) / 16f));
					color.R = (byte)((float)color.R * single1);
					color.G = (byte)((float)color.G * single2);
					color.B = (byte)((float)color.B * single3);
					Main.spriteBatch.Draw(Main.backgroundTexture[numArray[0]], new Vector2((float)(this.bgStart + num2 * l + 16 * m + num5), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num5 + 16, 0, 16, 16)), color);
					if (Main.ugBackTransition > 0f)
					{
						Microsoft.Xna.Framework.Color r = color;
						r.R = (byte)((float)r.R * Main.ugBackTransition);
						r.G = (byte)((float)r.G * Main.ugBackTransition);
						r.B = (byte)((float)r.B * Main.ugBackTransition);
						r.A = (byte)((float)r.A * Main.ugBackTransition);
						Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[0]], new Vector2((float)(this.bgStart + num2 * l + 16 * m + num5), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * m + num5 + 16, 0, 16, 16)), r);
					}
				}
			}
			double num6 = (double)(Main.maxTilesY - 230);
			double num7 = (double)((int)((num6 - Main.worldSurface) / 6) * 6);
			num6 = Main.worldSurface + num7 - 5;
			bool flag = false;
			bool flag1 = false;
			this.bgTop = (int)((float)((int)Main.worldSurface * 16) - Main.screenPosition.Y + 16f);
			if (Main.worldSurface * 16 <= (double)(Main.screenPosition.Y + (float)Main.screenHeight + (float)Main.offScreenRange))
			{
				this.bgParallax = (double)Main.caveParallax;
				this.bgStart = (int)(-Math.IEEERemainder((double)num2 + (double)Main.screenPosition.X * this.bgParallax, (double)num2) - (double)(num2 / 2)) - (int)zero.X;
				this.bgLoops = (Main.screenWidth + (int)zero.X * 2) / num2 + 2;
				if (Main.worldSurface * 16 >= (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (Main.rockLayer * 16 < (double)(Main.screenPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(Main.rockLayer * 16 - (double)Main.screenPosition.Y + 600 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag1 = true;
				}
				float x2 = (float)this.bgStart + Main.screenPosition.X;
				x2 = -(float)Math.IEEERemainder((double)x2, 16);
				int num8 = (int)((float)Math.Round((double)x2));
				if (num8 == -8)
				{
					num8 = 8;
				}
				for (int n = 0; n < this.bgLoops; n++)
				{
					for (int o = 0; o < this.bgLoopsY; o++)
					{
						for (int p = 0; p < num2 / 16; p++)
						{
							for (int q = 0; q < 6; q++)
							{
								float single8 = (float)(this.bgStartY + o * 96 + q * 16 + 8);
								float single9 = (float)(this.bgStart + num2 * n + p * 16 + 8);
								int x3 = (int)((single9 + Main.screenPosition.X) / 16f);
								int y2 = (int)((single8 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color g = Lighting.GetColor(x3, y2);
								if (Main.tile[x3, y2] == null)
								{
									Main.tile[x3, y2] = new Tile();
								}
								if (g.R <= 0 && g.G <= 0 && g.B <= 0)
								{
									g.R = (byte)((float)g.R * single1);
									g.G = (byte)((float)g.G * single2);
									g.B = (byte)((float)g.B * single3);
									Main.spriteBatch.Draw(Main.backgroundTexture[numArray[1]], new Vector2((float)(this.bgStart + num2 * n + 16 * p + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray[1]] * o + 16 * q)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num8 + 16, 16 * q, 16, 16)), g);
								}
								else if ((g.R > num || (double)g.G > (double)num * 1.1 || (double)g.B > (double)num * 1.2) && !Main.tile[x3, y2].active() && Main.wallLight[Main.tile[x3, y2].wall] && Main.ugBackTransition == 0f)
								{
									Lighting.GetColor9Slice(x3, y2, ref colorArray);
									try
									{
										for (int r1 = 0; r1 < 9; r1++)
										{
											int num9 = 0;
											int num10 = 0;
											int num11 = 4;
											int num12 = 4;
											Microsoft.Xna.Framework.Color b = g;
											Microsoft.Xna.Framework.Color color1 = g;
											switch (r1)
											{
												case 0:
												{
													if (Main.tile[x3 - 1, y2 - 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 1:
												{
													num11 = 8;
													num9 = 4;
													if (Main.tile[x3, y2 - 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 2:
												{
													num9 = 12;
													if (Main.tile[x3 + 1, y2 - 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 3:
												{
													num12 = 8;
													num10 = 4;
													if (Main.tile[x3 - 1, y2].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 4:
												{
													num11 = 8;
													num12 = 8;
													num9 = 4;
													num10 = 4;
													break;
												}
												case 5:
												{
													num9 = 12;
													num10 = 4;
													num12 = 8;
													if (Main.tile[x3 + 1, y2].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 6:
												{
													num10 = 12;
													if (Main.tile[x3 - 1, y2 + 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 7:
												{
													num11 = 8;
													num12 = 4;
													num9 = 4;
													num10 = 12;
													if (Main.tile[x3, y2 + 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
												case 8:
												{
													num9 = 12;
													num10 = 12;
													if (Main.tile[x3 + 1, y2 + 1].active())
													{
														break;
													}
													color1 = colorArray[r1];
													break;
												}
											}
											b.R = (byte)((g.R + color1.R) / 2);
											b.G = (byte)((g.G + color1.G) / 2);
											b.B = (byte)((g.B + color1.B) / 2);
											b.R = (byte)((float)b.R * single1);
											b.G = (byte)((float)b.G * single2);
											b.B = (byte)((float)b.B * single3);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray[1]], new Vector2((float)(this.bgStart + num2 * n + 16 * p + num9 + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray[1]] * o + 16 * q + num10)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num9 + num8 + 16, 16 * q + num10, num11, num12)), b);
											if (Main.ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color a = b;
												a.R = (byte)((float)a.R * Main.ugBackTransition);
												a.G = (byte)((float)a.G * Main.ugBackTransition);
												a.B = (byte)((float)a.B * Main.ugBackTransition);
												a.A = (byte)((float)a.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[1]], new Vector2((float)(this.bgStart + num2 * n + 16 * p + num9 + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray1[1]] * o + 16 * q + num10)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num9 + num8 + 16, 16 * q + num10, num11, num12)), a);
											}
										}
									}
									catch
									{
										g.R = (byte)((float)g.R * single1);
										g.G = (byte)((float)g.G * single2);
										g.B = (byte)((float)g.B * single3);
										Main.spriteBatch.Draw(Main.backgroundTexture[numArray[1]], new Vector2((float)(this.bgStart + num2 * n + 16 * p + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray[1]] * o + 16 * q)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num8 + 16, 16 * q, 16, 16)), g);
									}
								}
								else if ((g.R > num1 || (double)g.G > (double)num1 * 1.1 || (double)g.B > (double)num1 * 1.2) && Main.ugBackTransition == 0f)
								{
									Lighting.GetColor4Slice(x3, y2, ref colorArray);
									for (int s = 0; s < 4; s++)
									{
										int num13 = 0;
										int num14 = 0;
										Microsoft.Xna.Framework.Color g1 = g;
										Microsoft.Xna.Framework.Color color2 = colorArray[s];
										switch (s)
										{
											case 0:
											{
												if (Main.tile[x3 - 1, y2 - 1].active())
												{
													break;
												}
												color2 = colorArray[s];
												break;
											}
											case 1:
											{
												num13 = 4;
												if (Main.tile[x3, y2 - 1].active())
												{
													break;
												}
												color2 = colorArray[s];
												break;
											}
											case 2:
											{
												num13 = 12;
												if (Main.tile[x3 + 1, y2 - 1].active())
												{
													break;
												}
												color2 = colorArray[s];
												break;
											}
											case 3:
											{
												num14 = 4;
												if (Main.tile[x3 - 1, y2].active())
												{
													break;
												}
												color2 = colorArray[s];
												break;
											}
											case 4:
											{
												num13 = 4;
												num14 = 4;
												break;
											}
											case 5:
											{
												num13 = 12;
												num14 = 4;
												if (Main.tile[x3 + 1, y2].active())
												{
													break;
												}
												color2 = colorArray[s];
												break;
											}
											case 6:
											{
												num14 = 12;
												if (Main.tile[x3 - 1, y2 + 1].active())
												{
													break;
												}
												color2 = colorArray[s];
												break;
											}
											case 7:
											{
												num13 = 4;
												num14 = 12;
												if (Main.tile[x3, y2 + 1].active())
												{
													break;
												}
												color2 = colorArray[s];
												break;
											}
											case 8:
											{
												num13 = 12;
												num14 = 12;
												if (Main.tile[x3 + 1, y2 + 1].active())
												{
													break;
												}
												color2 = colorArray[s];
												break;
											}
										}
										g1.R = (byte)((g.R + color2.R) / 2);
										g1.G = (byte)((g.G + color2.G) / 2);
										g1.B = (byte)((g.B + color2.B) / 2);
										g1.R = (byte)((float)g1.R * single1);
										g1.G = (byte)((float)g1.G * single2);
										g1.B = (byte)((float)g1.B * single3);
										Main.spriteBatch.Draw(Main.backgroundTexture[numArray[1]], new Vector2((float)(this.bgStart + num2 * n + 16 * p + num13 + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray[1]] * o + 16 * q + num14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num13 + num8 + 16, 16 * q + num14, 8, 8)), g1);
										if (Main.ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color b1 = g1;
											b1.R = (byte)((float)b1.R * Main.ugBackTransition);
											b1.G = (byte)((float)b1.G * Main.ugBackTransition);
											b1.B = (byte)((float)b1.B * Main.ugBackTransition);
											b1.A = (byte)((float)b1.A * Main.ugBackTransition);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[1]], new Vector2((float)(this.bgStart + num2 * n + 16 * p + num13 + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray1[1]] * o + 16 * q + num14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num13 + num8 + 16, 16 * q + num14, 8, 8)), b1);
										}
									}
								}
								else
								{
									g.R = (byte)((float)g.R * single1);
									g.G = (byte)((float)g.G * single2);
									g.B = (byte)((float)g.B * single3);
									Main.spriteBatch.Draw(Main.backgroundTexture[numArray[1]], new Vector2((float)(this.bgStart + num2 * n + 16 * p + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray[1]] * o + 16 * q)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num8 + 16, 16 * q, 16, 16)), g);
									if (Main.ugBackTransition > 0f)
									{
										Microsoft.Xna.Framework.Color a1 = g;
										a1.R = (byte)((float)a1.R * Main.ugBackTransition);
										a1.G = (byte)((float)a1.G * Main.ugBackTransition);
										a1.B = (byte)((float)a1.B * Main.ugBackTransition);
										a1.A = (byte)((float)a1.A * Main.ugBackTransition);
										Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[1]], new Vector2((float)(this.bgStart + num2 * n + 16 * p + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray1[1]] * o + 16 * q)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * p + num8 + 16, 16 * q, 16, 16)), a1);
									}
								}
							}
						}
					}
				}
				if (Main.ugBackTransition > 0f)
				{
					for (int t = 0; t < this.bgLoops; t++)
					{
						for (int u = 0; u < this.bgLoopsY; u++)
						{
							for (int v = 0; v < num2 / 16; v++)
							{
								for (int w = 0; w < 6; w++)
								{
									float single10 = (float)(this.bgStartY + u * 96 + w * 16 + 8);
									float single11 = (float)(this.bgStart + num2 * t + v * 16 + 8);
									int x4 = (int)((single11 + Main.screenPosition.X) / 16f);
									int y3 = (int)((single10 + Main.screenPosition.Y) / 16f);
									Microsoft.Xna.Framework.Color color3 = Lighting.GetColor(x4, y3);
									if (Main.tile[x4, y3] == null)
									{
										Main.tile[x4, y3] = new Tile();
									}
									if (color3.R > 0 || color3.G > 0 || color3.B > 0)
									{
										Lighting.GetColor4Slice_New(x4, y3, out vertexColor, Main.ugBackTransition);
										byte num15 = (byte)(255f * Main.ugBackTransition);
										vertexColor.bottomLeftColor.A = num15;
										vertexColor.BottomRightColor.A = num15;
										vertexColor.TopLeftColor.A = num15;
										vertexColor.TopRightColor.A = num15;
										Main.tileBatch.Draw(Main.backgroundTexture[numArray1[1]], new Vector2((float)(this.bgStart + num2 * t + 16 * v + num8), (float)(this.bgStartY + Main.backgroundHeight[numArray1[1]] * u + 16 * w)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * v + num8 + 16, 16 * w, 16, 16)), vertexColor, Vector2.Zero, 1f, SpriteEffects.None);
									}
								}
							}
						}
					}
				}
				if (flag1)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num2 + (double)Main.screenPosition.X * this.bgParallax, (double)num2) - (double)(num2 / 2)) - (int)zero.X;
					this.bgLoops = (Main.screenWidth + (int)zero.X * 2) / num2 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					if (this.bgTop > -32)
					{
						for (int x5 = 0; x5 < this.bgLoops; x5++)
						{
							for (int y4 = 0; y4 < num2 / 16; y4++)
							{
								float single12 = (float)(this.bgStart + num2 * x5 + y4 * 16 + 8);
								float single13 = (float)this.bgTop;
								Microsoft.Xna.Framework.Color r2 = Lighting.GetColor((int)((single12 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + single13) / 16f));
								r2.R = (byte)((float)r2.R * single1);
								r2.G = (byte)((float)r2.G * single2);
								r2.B = (byte)((float)r2.B * single3);
								Main.spriteBatch.Draw(Main.backgroundTexture[numArray[2]], new Vector2((float)(this.bgStart + num2 * x5 + 16 * y4 + num8), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * y4 + num8 + 16, 0, 16, 16)), r2);
								if (Main.ugBackTransition > 0f)
								{
									Microsoft.Xna.Framework.Color g2 = r2;
									g2.R = (byte)((float)g2.R * Main.ugBackTransition);
									g2.G = (byte)((float)g2.G * Main.ugBackTransition);
									g2.B = (byte)((float)g2.B * Main.ugBackTransition);
									g2.A = (byte)((float)g2.A * Main.ugBackTransition);
									Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[2]], new Vector2((float)(this.bgStart + num2 * x5 + 16 * y4 + num8), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * y4 + num8 + 16, 0, 16, 16)), g2);
								}
							}
						}
					}
				}
			}
			this.bgTop = (int)((float)((int)Main.rockLayer * 16) - Main.screenPosition.Y + 16f + 600f - 8f);
			if (Main.rockLayer * 16 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgParallax = (double)Main.caveParallax;
				this.bgStart = (int)(-Math.IEEERemainder((double)num2 + (double)Main.screenPosition.X * this.bgParallax, (double)num2) - (double)(num2 / 2)) - (int)zero.X;
				this.bgLoops = (Main.screenWidth + (int)zero.X * 2) / num2 + 2;
				if (Main.rockLayer * 16 + (double)Main.screenHeight >= (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[3]) - (double)Main.backgroundHeight[3]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				if (num6 * 16 < (double)(Main.screenPosition.Y + 600f))
				{
					this.bgLoopsY = (int)(num6 * 16 - (double)Main.screenPosition.Y + 600 - (double)this.bgStartY) / Main.backgroundHeight[2];
					flag = true;
				}
				float x6 = (float)this.bgStart + Main.screenPosition.X;
				x6 = -(float)Math.IEEERemainder((double)x6, 16);
				int num16 = (int)((float)Math.Round((double)x6));
				if (num16 == -8)
				{
					num16 = 8;
				}
				for (int a2 = 0; a2 < this.bgLoops; a2++)
				{
					for (int b2 = 0; b2 < this.bgLoopsY; b2++)
					{
						for (int c = 0; c < num2 / 16; c++)
						{
							for (int d = 0; d < 6; d++)
							{
								float single14 = (float)(this.bgStartY + b2 * 96 + d * 16 + 8);
								float single15 = (float)(this.bgStart + num2 * a2 + c * 16 + 8);
								int x7 = (int)((single15 + Main.screenPosition.X) / 16f);
								int y5 = (int)((single14 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color r3 = Lighting.GetColor(x7, y5);
								if (Main.tile[x7, y5] == null)
								{
									Main.tile[x7, y5] = new Tile();
								}
								bool flag2 = false;
								if (Main.caveParallax != 0f)
								{
									if (Main.tile[x7 - 1, y5] == null)
									{
										Main.tile[x7 - 1, y5] = new Tile();
									}
									if (Main.tile[x7 + 1, y5] == null)
									{
										Main.tile[x7 + 1, y5] = new Tile();
									}
									if (Main.wallLight[Main.tile[x7, y5].wall] || Main.wallLight[Main.tile[x7 - 1, y5].wall] || Main.wallLight[Main.tile[x7 + 1, y5].wall])
									{
										flag2 = true;
									}
								}
								else if (Main.wallLight[Main.tile[x7, y5].wall])
								{
									flag2 = true;
								}
								if ((flag2 || r3.R == 0 || r3.G == 0 || r3.B == 0) && (r3.R > 0 || r3.G > 0 || r3.B > 0) && (Main.wallLight[Main.tile[x7, y5].wall] || Main.caveParallax != 0f))
								{
									if (Lighting.lightMode >= 2 || r3.R >= 230 || r3.G >= 230 || r3.B >= 230 || Main.ugBackTransition != 0f)
									{
										r3.R = (byte)((float)r3.R * single1);
										r3.G = (byte)((float)r3.G * single2);
										r3.B = (byte)((float)r3.B * single3);
										Main.spriteBatch.Draw(Main.backgroundTexture[numArray[3]], new Vector2((float)(this.bgStart + num2 * a2 + 16 * c + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray[3]] * b2 + 16 * d)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num16 + 16, 16 * d, 16, 16)), r3);
										if (Main.ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color g3 = r3;
											g3.R = (byte)((float)g3.R * Main.ugBackTransition);
											g3.G = (byte)((float)g3.G * Main.ugBackTransition);
											g3.B = (byte)((float)g3.B * Main.ugBackTransition);
											g3.A = (byte)((float)g3.A * Main.ugBackTransition);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[3]], new Vector2((float)(this.bgStart + num2 * a2 + 16 * c + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray1[3]] * b2 + 16 * d)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num16 + 16, 16 * d, 16, 16)), g3);
										}
									}
									else if ((r3.R > num || (double)r3.G > (double)num * 1.1 || (double)r3.B > (double)num * 1.2) && !Main.tile[x7, y5].active())
									{
										Lighting.GetColor9Slice(x7, y5, ref colorArray);
										for (int e = 0; e < 9; e++)
										{
											int num17 = 0;
											int num18 = 0;
											int num19 = 4;
											int num20 = 4;
											Microsoft.Xna.Framework.Color b3 = r3;
											Microsoft.Xna.Framework.Color color4 = r3;
											switch (e)
											{
												case 0:
												{
													if (Main.tile[x7 - 1, y5 - 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 1:
												{
													num19 = 8;
													num17 = 4;
													if (Main.tile[x7, y5 - 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 2:
												{
													num17 = 12;
													if (Main.tile[x7 + 1, y5 - 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 3:
												{
													num20 = 8;
													num18 = 4;
													if (Main.tile[x7 - 1, y5].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 4:
												{
													num19 = 8;
													num20 = 8;
													num17 = 4;
													num18 = 4;
													break;
												}
												case 5:
												{
													num17 = 12;
													num18 = 4;
													num20 = 8;
													if (Main.tile[x7 + 1, y5].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 6:
												{
													num18 = 12;
													if (Main.tile[x7 - 1, y5 + 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 7:
												{
													num19 = 8;
													num20 = 4;
													num17 = 4;
													num18 = 12;
													if (Main.tile[x7, y5 + 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
												case 8:
												{
													num17 = 12;
													num18 = 12;
													if (Main.tile[x7 + 1, y5 + 1].active())
													{
														break;
													}
													color4 = colorArray[e];
													break;
												}
											}
											b3.R = (byte)((r3.R + color4.R) / 2);
											b3.G = (byte)((r3.G + color4.G) / 2);
											b3.B = (byte)((r3.B + color4.B) / 2);
											b3.R = (byte)((float)b3.R * single1);
											b3.G = (byte)((float)b3.G * single2);
											b3.B = (byte)((float)b3.B * single3);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray[3]], new Vector2((float)(this.bgStart + num2 * a2 + 16 * c + num17 + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray[3]] * b2 + 16 * d + num18)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num17 + num16 + 16, 16 * d + num18, num19, num20)), b3);
											if (Main.ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color a3 = b3;
												a3.R = (byte)((float)a3.R * Main.ugBackTransition);
												a3.G = (byte)((float)a3.G * Main.ugBackTransition);
												a3.B = (byte)((float)a3.B * Main.ugBackTransition);
												a3.A = (byte)((float)a3.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[3]], new Vector2((float)(this.bgStart + num2 * a2 + 16 * c + num17 + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray1[3]] * b2 + 16 * d + num18)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num17 + num16 + 16, 16 * d + num18, num19, num20)), a3);
											}
										}
									}
									else if (r3.R > num1 || (double)r3.G > (double)num1 * 1.1 || (double)r3.B > (double)num1 * 1.2)
									{
										Lighting.GetColor4Slice(x7, y5, ref colorArray);
										for (int f = 0; f < 4; f++)
										{
											int num21 = 0;
											int num22 = 0;
											Microsoft.Xna.Framework.Color r4 = r3;
											Microsoft.Xna.Framework.Color color5 = colorArray[f];
											switch (f)
											{
												case 1:
												{
													num21 = 8;
													break;
												}
												case 2:
												{
													num22 = 8;
													break;
												}
												case 3:
												{
													num21 = 8;
													num22 = 8;
													break;
												}
											}
											r4.R = (byte)((r3.R + color5.R) / 2);
											r4.G = (byte)((r3.G + color5.G) / 2);
											r4.B = (byte)((r3.B + color5.B) / 2);
											r4.R = (byte)((float)r4.R * single1);
											r4.G = (byte)((float)r4.G * single2);
											r4.B = (byte)((float)r4.B * single3);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray[3]], new Vector2((float)(this.bgStart + num2 * a2 + 16 * c + num21 + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray[3]] * b2 + 16 * d + num22)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num21 + num16 + 16, 16 * d + num22, 8, 8)), r4);
											if (Main.ugBackTransition > 0f)
											{
												Microsoft.Xna.Framework.Color g4 = r4;
												g4.R = (byte)((float)g4.R * Main.ugBackTransition);
												g4.G = (byte)((float)g4.G * Main.ugBackTransition);
												g4.B = (byte)((float)g4.B * Main.ugBackTransition);
												g4.A = (byte)((float)g4.A * Main.ugBackTransition);
												Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[3]], new Vector2((float)(this.bgStart + num2 * a2 + 16 * c + num21 + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray1[3]] * b2 + 16 * d + num22)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num21 + num16 + 16, 16 * d + num22, 8, 8)), g4);
											}
										}
									}
									else
									{
										r3.R = (byte)((float)r3.R * single1);
										r3.G = (byte)((float)r3.G * single2);
										r3.B = (byte)((float)r3.B * single3);
										Main.spriteBatch.Draw(Main.backgroundTexture[numArray[3]], new Vector2((float)(this.bgStart + num2 * a2 + 16 * c + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray[3]] * b2 + 16 * d)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num16 + 16, 16 * d, 16, 16)), r3);
										if (Main.ugBackTransition > 0f)
										{
											Microsoft.Xna.Framework.Color b4 = r3;
											b4.R = (byte)((float)b4.R * Main.ugBackTransition);
											b4.G = (byte)((float)b4.G * Main.ugBackTransition);
											b4.B = (byte)((float)b4.B * Main.ugBackTransition);
											b4.A = (byte)((float)b4.A * Main.ugBackTransition);
											Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[3]], new Vector2((float)(this.bgStart + num2 * a2 + 16 * c + num16), (float)(this.bgStartY + Main.backgroundHeight[numArray1[3]] * b2 + 16 * d)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * c + num16 + 16, 16 * d, 16, 16)), b4);
										}
									}
								}
							}
						}
					}
				}
				num2 = 128;
				if (flag)
				{
					this.bgParallax = (double)Main.caveParallax;
					this.bgStart = (int)(-Math.IEEERemainder((double)num2 + (double)Main.screenPosition.X * this.bgParallax, (double)num2) - (double)(num2 / 2)) - (int)zero.X;
					this.bgLoops = (Main.screenWidth + (int)zero.X * 2) / num2 + 2;
					this.bgTop = this.bgStartY + this.bgLoopsY * Main.backgroundHeight[2];
					for (int g5 = 0; g5 < this.bgLoops; g5++)
					{
						for (int h = 0; h < num2 / 16; h++)
						{
							float single16 = (float)(this.bgStart + num2 * g5 + h * 16 + 8);
							float single17 = (float)this.bgTop;
							Microsoft.Xna.Framework.Color r5 = Lighting.GetColor((int)((single16 + Main.screenPosition.X) / 16f), (int)((Main.screenPosition.Y + single17) / 16f));
							r5.R = (byte)((float)r5.R * single1);
							r5.G = (byte)((float)r5.G * single2);
							r5.B = (byte)((float)r5.B * single3);
							Main.spriteBatch.Draw(Main.backgroundTexture[numArray[4]], new Vector2((float)(this.bgStart + num2 * g5 + 16 * h + num16), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * h + num16 + 16, Main.magmaBGFrame * 16, 16, 16)), r5);
							if (Main.ugBackTransition > 0f)
							{
								Microsoft.Xna.Framework.Color a4 = r5;
								a4.R = (byte)((float)a4.R * Main.ugBackTransition);
								a4.G = (byte)((float)a4.G * Main.ugBackTransition);
								a4.B = (byte)((float)a4.B * Main.ugBackTransition);
								a4.A = (byte)((float)a4.A * Main.ugBackTransition);
								Main.spriteBatch.Draw(Main.backgroundTexture[numArray1[4]], new Vector2((float)(this.bgStart + num2 * g5 + 16 * h + num16), (float)this.bgTop) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * h + num16 + 16, Main.magmaBGFrame * 16, 16, 16)), a4);
							}
						}
					}
				}
			}
			this.bgTop = (int)((float)((int)num6 * 16) - Main.screenPosition.Y + 16f + 600f) - 8;
			if (num6 * 16 <= (double)(Main.screenPosition.Y + 600f))
			{
				this.bgStart = (int)(-Math.IEEERemainder((double)num2 + (double)Main.screenPosition.X * this.bgParallax, (double)num2) - (double)(num2 / 2)) - (int)zero.X;
				this.bgLoops = (Main.screenWidth + (int)zero.X * 2) / num2 + 2;
				if (num6 * 16 + (double)Main.screenHeight >= (double)(Main.screenPosition.Y - 16f))
				{
					this.bgStartY = this.bgTop;
					this.bgLoopsY = (Main.screenHeight - this.bgTop + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				else
				{
					this.bgStartY = (int)(Math.IEEERemainder((double)this.bgTop, (double)Main.backgroundHeight[2]) - (double)Main.backgroundHeight[2]);
					this.bgLoopsY = (Main.screenHeight - this.bgStartY + (int)zero.Y * 2) / Main.backgroundHeight[2] + 1;
				}
				num = (int)((double)num * 1.5);
				num1 = (int)((double)num1 * 1.5);
				float x8 = (float)this.bgStart + Main.screenPosition.X;
				x8 = -(float)Math.IEEERemainder((double)x8, 16);
				int num23 = (int)((float)Math.Round((double)x8));
				if (num23 == -8)
				{
					num23 = 8;
				}
				for (int i1 = 0; i1 < this.bgLoops; i1++)
				{
					for (int j1 = 0; j1 < this.bgLoopsY; j1++)
					{
						for (int k1 = 0; k1 < num2 / 16; k1++)
						{
							for (int l1 = 0; l1 < 6; l1++)
							{
								float single18 = (float)(this.bgStartY + j1 * 96 + l1 * 16 + 8);
								float single19 = (float)(this.bgStart + num2 * i1 + k1 * 16 + 8);
								int x9 = (int)((single19 + Main.screenPosition.X) / 16f);
								int y6 = (int)((single18 + Main.screenPosition.Y) / 16f);
								Microsoft.Xna.Framework.Color b5 = Lighting.GetColor(x9, y6);
								if (Main.tile[x9, y6] == null)
								{
									Main.tile[x9, y6] = new Tile();
								}
								bool flag3 = false;
								if (Main.caveParallax != 0f)
								{
									if (Main.tile[x9 - 1, y6] == null)
									{
										Main.tile[x9 - 1, y6] = new Tile();
									}
									if (Main.tile[x9 + 1, y6] == null)
									{
										Main.tile[x9 + 1, y6] = new Tile();
									}
									if (Main.wallLight[Main.tile[x9, y6].wall] || Main.wallLight[Main.tile[x9 - 1, y6].wall] || Main.wallLight[Main.tile[x9 + 1, y6].wall])
									{
										flag3 = true;
									}
								}
								else if (Main.wallLight[Main.tile[x9, y6].wall])
								{
									flag3 = true;
								}
								if ((flag3 || b5.R == 0 || b5.G == 0 || b5.B == 0) && (b5.R > 0 || b5.G > 0 || b5.B > 0) && (Main.wallLight[Main.tile[x9, y6].wall] || Main.caveParallax != 0f))
								{
									if (Lighting.lightMode >= 2 || b5.R >= 230 || b5.G >= 230 || b5.B >= 230)
									{
										b5.R = (byte)((float)b5.R * single1);
										b5.G = (byte)((float)b5.G * single2);
										b5.B = (byte)((float)b5.B * single3);
										SpriteBatch spriteBatch = Main.spriteBatch;
										Texture2D texture2D = Main.backgroundTexture[numArray[5]];
										Vector2 vector21 = new Vector2((float)(this.bgStart + num2 * i1 + 16 * k1 + num23), (float)(this.bgStartY + Main.backgroundHeight[2] * j1 + 16 * l1)) + zero;
										Microsoft.Xna.Framework.Rectangle? nullable = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * k1 + num23 + 16, 16 * l1 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16));
										vector2 = new Vector2();
										spriteBatch.Draw(texture2D, vector21, nullable, b5, 0f, vector2, 1f, SpriteEffects.None, 0f);
									}
									else if ((b5.R > num || (double)b5.G > (double)num * 1.1 || (double)b5.B > (double)num * 1.2) && !Main.tile[x9, y6].active())
									{
										Lighting.GetColor9Slice(x9, y6, ref colorArray);
										for (int m1 = 0; m1 < 9; m1++)
										{
											int num24 = 0;
											int num25 = 0;
											int num26 = 4;
											int num27 = 4;
											Microsoft.Xna.Framework.Color r6 = b5;
											Microsoft.Xna.Framework.Color color6 = b5;
											switch (m1)
											{
												case 0:
												{
													if (Main.tile[x9 - 1, y6 - 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 1:
												{
													num26 = 8;
													num24 = 4;
													if (Main.tile[x9, y6 - 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 2:
												{
													num24 = 12;
													if (Main.tile[x9 + 1, y6 - 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 3:
												{
													num27 = 8;
													num25 = 4;
													if (Main.tile[x9 - 1, y6].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 4:
												{
													num26 = 8;
													num27 = 8;
													num24 = 4;
													num25 = 4;
													break;
												}
												case 5:
												{
													num24 = 12;
													num25 = 4;
													num27 = 8;
													if (Main.tile[x9 + 1, y6].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 6:
												{
													num25 = 12;
													if (Main.tile[x9 - 1, y6 + 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 7:
												{
													num26 = 8;
													num27 = 4;
													num24 = 4;
													num25 = 12;
													if (Main.tile[x9, y6 + 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
												case 8:
												{
													num24 = 12;
													num25 = 12;
													if (Main.tile[x9 + 1, y6 + 1].active())
													{
														break;
													}
													color6 = colorArray[m1];
													break;
												}
											}
											r6.R = (byte)((b5.R + color6.R) / 2);
											r6.G = (byte)((b5.G + color6.G) / 2);
											r6.B = (byte)((b5.B + color6.B) / 2);
											r6.R = (byte)((float)r6.R * single1);
											r6.G = (byte)((float)r6.G * single2);
											r6.B = (byte)((float)r6.B * single3);
											SpriteBatch spriteBatch1 = Main.spriteBatch;
											Texture2D texture2D1 = Main.backgroundTexture[numArray[5]];
											Vector2 vector22 = new Vector2((float)(this.bgStart + num2 * i1 + 16 * k1 + num24 + num23), (float)(this.bgStartY + Main.backgroundHeight[2] * j1 + 16 * l1 + num25)) + zero;
											Microsoft.Xna.Framework.Rectangle? nullable1 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * k1 + num24 + num23 + 16, 16 * l1 + Main.backgroundHeight[2] * Main.magmaBGFrame + num25, num26, num27));
											vector2 = new Vector2();
											spriteBatch1.Draw(texture2D1, vector22, nullable1, r6, 0f, vector2, 1f, SpriteEffects.None, 0f);
										}
									}
									else if (b5.R > num1 || (double)b5.G > (double)num1 * 1.1 || (double)b5.B > (double)num1 * 1.2)
									{
										Lighting.GetColor4Slice(x9, y6, ref colorArray);
										for (int n1 = 0; n1 < 4; n1++)
										{
											int num28 = 0;
											int num29 = 0;
											Microsoft.Xna.Framework.Color g6 = b5;
											Microsoft.Xna.Framework.Color color7 = colorArray[n1];
											switch (n1)
											{
												case 1:
												{
													num28 = 8;
													break;
												}
												case 2:
												{
													num29 = 8;
													break;
												}
												case 3:
												{
													num28 = 8;
													num29 = 8;
													break;
												}
											}
											g6.R = (byte)((b5.R + color7.R) / 2);
											g6.G = (byte)((b5.G + color7.G) / 2);
											g6.B = (byte)((b5.B + color7.B) / 2);
											g6.R = (byte)((float)g6.R * single1);
											g6.G = (byte)((float)g6.G * single2);
											g6.B = (byte)((float)g6.B * single3);
											SpriteBatch spriteBatch2 = Main.spriteBatch;
											Texture2D texture2D2 = Main.backgroundTexture[numArray[5]];
											Vector2 vector23 = new Vector2((float)(this.bgStart + num2 * i1 + 16 * k1 + num28 + num23), (float)(this.bgStartY + Main.backgroundHeight[2] * j1 + 16 * l1 + num29)) + zero;
											Microsoft.Xna.Framework.Rectangle? nullable2 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * k1 + num28 + num23 + 16, 16 * l1 + Main.backgroundHeight[2] * Main.magmaBGFrame + num29, 8, 8));
											vector2 = new Vector2();
											spriteBatch2.Draw(texture2D2, vector23, nullable2, g6, 0f, vector2, 1f, SpriteEffects.None, 0f);
										}
									}
									else
									{
										b5.R = (byte)((float)b5.R * single1);
										b5.G = (byte)((float)b5.G * single2);
										b5.B = (byte)((float)b5.B * single3);
										SpriteBatch spriteBatch3 = Main.spriteBatch;
										Texture2D texture2D3 = Main.backgroundTexture[numArray[5]];
										Vector2 vector24 = new Vector2((float)(this.bgStart + num2 * i1 + 16 * k1 + num23), (float)(this.bgStartY + Main.backgroundHeight[2] * j1 + 16 * l1)) + zero;
										Microsoft.Xna.Framework.Rectangle? nullable3 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(16 * k1 + num23 + 16, 16 * l1 + Main.backgroundHeight[2] * Main.magmaBGFrame, 16, 16));
										vector2 = new Vector2();
										spriteBatch3.Draw(texture2D3, vector24, nullable3, b5, 0f, vector2, 1f, SpriteEffects.None, 0f);
									}
								}
							}
						}
					}
				}
			}
			Lighting.brightness = Lighting.defBrightness;
			TimeLogger.DrawTime(3, stopwatch.Elapsed.TotalMilliseconds);
		}

		public void oldDrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
		{
			float single = 0f;
			float single1 = 99999f;
			float single2 = 99999f;
			int num = -1;
			int num1 = -1;
			Vector2 vector2 = new Vector2((float)Main.offScreenRange, (float)Main.offScreenRange);
			if (Main.drawToScreen)
			{
				vector2 = Vector2.Zero;
			}
			int num2 = (int)(255f * (1f - Main.gfxQuality) + 40f * Main.gfxQuality);
			float single3 = Main.gfxQuality;
			float single4 = Main.gfxQuality;
			int x = (int)((Main.screenPosition.X - vector2.X) / 16f - 1f);
			int x1 = (int)((Main.screenPosition.X + (float)Main.screenWidth + vector2.X) / 16f) + 2;
			int y = (int)((Main.screenPosition.Y - vector2.Y) / 16f - 1f);
			int y1 = (int)((Main.screenPosition.Y + (float)Main.screenHeight + vector2.Y) / 16f) + 5;
			if (x < 5)
			{
				x = 5;
			}
			if (x1 > Main.maxTilesX - 5)
			{
				x1 = Main.maxTilesX - 5;
			}
			if (y < 5)
			{
				y = 5;
			}
			if (y1 > Main.maxTilesY - 5)
			{
				y1 = Main.maxTilesY - 5;
			}
			for (int i = y; i < y1 + 4; i++)
			{
				for (int j = x - 2; j < x1 + 2; j++)
				{
					if (Main.tile[j, i] == null)
					{
						Main.tile[j, i] = new Tile();
					}
					if (Main.tile[j, i].liquid > 0 && (!Main.tile[j, i].nactive() || !Main.tileSolid[Main.tile[j, i].type] || Main.tileSolidTop[Main.tile[j, i].type]) && (Lighting.Brightness(j, i) > 0f || bg))
					{
						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
						float single5 = (float)(256 - Main.tile[j, i].liquid);
						single5 = single5 / 32f;
						int style = 0;
						if (Main.tile[j, i].lava())
						{
							if (Main.drewLava)
							{
								goto Label0;
							}
							float single6 = Math.Abs((float)(j * 16 + 8) - (Main.screenPosition.X + (float)(Main.screenWidth / 2)));
							float single7 = Math.Abs((float)(i * 16 + 8) - (Main.screenPosition.Y + (float)(Main.screenHeight / 2)));
							if (single6 < (float)(Main.screenWidth * 2) && single7 < (float)(Main.screenHeight * 2))
							{
								float single8 = (float)Math.Sqrt((double)(single6 * single6 + single7 * single7));
								float single9 = 1f - single8 / ((float)Main.screenWidth * 0.75f);
								if (single9 > 0f)
								{
									single = single + single9;
								}
							}
							if (single6 < single1)
							{
								single1 = single6;
								num = j * 16 + 8;
							}
							if (single7 < single2)
							{
								single2 = single6;
								num1 = i * 16 + 8;
							}
							style = 1;
						}
						else if (Main.tile[j, i].honey())
						{
							style = 11;
						}
						if (style == 0)
						{
							style = Style;
						}
						if (style != 1 && style != 11 || !Main.drewLava)
						{
							float alpha = 0.5f;
							if (bg)
							{
								alpha = 1f;
							}
							if (style != 1 && style != 11)
							{
								alpha = alpha * Alpha;
							}
							Vector2 vector21 = new Vector2((float)(j * 16), (float)(i * 16 + (int)single5 * 2));
							Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle(0, 0, 16, 16 - (int)single5 * 2);
							if (Main.tile[j, i + 1].liquid < 245 && (!Main.tile[j, i + 1].nactive() || !Main.tileSolid[Main.tile[j, i + 1].type] || Main.tileSolidTop[Main.tile[j, i + 1].type]))
							{
								float single10 = (float)(256 - Main.tile[j, i + 1].liquid);
								single10 = single10 / 32f;
								alpha = 0.5f * (8f - single5) / 4f;
								if ((double)alpha > 0.55)
								{
									alpha = 0.55f;
								}
								if ((double)alpha < 0.35)
								{
									alpha = 0.35f;
								}
								float single11 = single5 / 2f;
								if (Main.tile[j, i + 1].liquid >= 200)
								{
									alpha = 0.5f;
									rectangle = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16 - (int)single5 * 2 + (int)single10 * 2);
								}
								else
								{
									if (bg)
									{
										goto Label0;
									}
									if (Main.tile[j, i - 1].liquid > 0 && Main.tile[j, i - 1].liquid > 0)
									{
										rectangle = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
										alpha = 0.5f;
									}
									else if (Main.tile[j, i - 1].liquid > 0)
									{
										vector21 = new Vector2((float)(j * 16), (float)(i * 16 + 4));
										rectangle = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 12);
										alpha = 0.5f;
									}
									else if (Main.tile[j, i + 1].liquid <= 0)
									{
										vector21 = new Vector2((float)(j * 16 + (int)single11), (float)(i * 16 + (int)single11 * 2 + (int)single10 * 2));
										rectangle = new Microsoft.Xna.Framework.Rectangle(0, 4, 16 - (int)single11 * 2, 16 - (int)single11 * 2);
									}
									else
									{
										vector21 = new Vector2((float)(j * 16), (float)(i * 16 + (int)single5 * 2 + (int)single10 * 2));
										rectangle = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16 - (int)single5 * 2);
									}
								}
							}
							else if (Main.tile[j, i - 1].liquid > 32)
							{
								rectangle = new Microsoft.Xna.Framework.Rectangle(0, 4, rectangle.Width, rectangle.Height);
							}
							else if (single5 >= 1f || !Main.tile[j, i - 1].nactive() || !Main.tileSolid[Main.tile[j, i - 1].type] || Main.tileSolidTop[Main.tile[j, i - 1].type])
							{
								bool flag = true;
								int num3 = i + 1;
								while (num3 < i + 6 && (!Main.tile[j, num3].nactive() || !Main.tileSolid[Main.tile[j, num3].type] || Main.tileSolidTop[Main.tile[j, num3].type]))
								{
									if (Main.tile[j, num3].liquid >= 200)
									{
										num3++;
									}
									else
									{
										flag = false;
										break;
									}
								}
								if (!flag)
								{
									alpha = 0.5f;
									rectangle = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
								}
								else if (Main.tile[j, i - 1].liquid > 0)
								{
									rectangle = new Microsoft.Xna.Framework.Rectangle(0, 2, rectangle.Width, rectangle.Height);
								}
							}
							else
							{
								vector21 = new Vector2((float)(j * 16), (float)(i * 16));
								rectangle = new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 16);
							}
							if ((color.R > 20 || color.B > 20 || color.G > 20) && rectangle.Y < 4)
							{
								int r = color.R;
								if (color.G > r)
								{
									r = color.G;
								}
								if (color.B > r)
								{
									r = color.B;
								}
								r = r / 30;
								if (Main.rand.Next(20000) < r)
								{
									Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color(255, 255, 255);
									if (Main.tile[j, i].honey())
									{
										color1 = new Microsoft.Xna.Framework.Color(255, 255, 50);
									}
									int num4 = Dust.NewDust(new Vector2((float)(j * 16), vector21.Y - 2f), 16, 8, 43, 0f, 0f, 254, color1, 0.75f);
									Dust dust = Main.dust[num4];
									dust.velocity = dust.velocity * 0f;
								}
							}
							if (Main.tile[j, i].honey())
							{
								alpha = alpha * 1.6f;
								if (alpha > 1f)
								{
									alpha = 1f;
								}
							}
							if (Main.tile[j, i].lava())
							{
								alpha = alpha * 1.8f;
								if (alpha > 1f)
								{
									alpha = 1f;
								}
								if (base.IsActive && !Main.gamePaused && Dust.lavaBubbles < 200)
								{
									if (Main.tile[j, i].liquid > 200 && Main.rand.Next(700) == 0)
									{
										Vector2 vector22 = new Vector2((float)(j * 16), (float)(i * 16));
										Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color();
										Dust.NewDust(vector22, 16, 16, 35, 0f, 0f, 0, color2, 1f);
									}
									if (rectangle.Y == 0 && Main.rand.Next(350) == 0)
									{
										Vector2 vector23 = new Vector2((float)(j * 16), (float)(i * 16) + single5 * 2f - 8f);
										Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color();
										int num5 = Dust.NewDust(vector23, 16, 8, 35, 0f, 0f, 50, color3, 1.5f);
										Dust dust1 = Main.dust[num5];
										dust1.velocity = dust1.velocity * 0.8f;
										Main.dust[num5].velocity.X = Main.dust[num5].velocity.X * 2f;
										Main.dust[num5].velocity.Y = Main.dust[num5].velocity.Y - (float)Main.rand.Next(1, 7) * 0.1f;
										if (Main.rand.Next(10) == 0)
										{
											Main.dust[num5].velocity.Y = Main.dust[num5].velocity.Y * (float)Main.rand.Next(2, 5);
										}
										Main.dust[num5].noGravity = true;
									}
								}
							}
							float r1 = (float)color.R * alpha;
							float g = (float)color.G * alpha;
							float b = (float)color.B * alpha;
							float a = (float)color.A * alpha;
							color = new Microsoft.Xna.Framework.Color((int)r1, (int)g, (int)b, (int)a);
							if (Lighting.lightMode >= 2 || bg)
							{
								if (rectangle.Y < 4)
								{
									rectangle.X = rectangle.X + (int)(Main.wFrame * 18f);
								}
								SpriteBatch spriteBatch = Main.spriteBatch;
								Texture2D texture2D = Main.liquidTexture[style];
								Vector2 vector24 = (vector21 - Main.screenPosition) + vector2;
								Microsoft.Xna.Framework.Rectangle? nullable = new Microsoft.Xna.Framework.Rectangle?(rectangle);
								Vector2 vector25 = new Vector2();
								spriteBatch.Draw(texture2D, vector24, nullable, color, 0f, vector25, 1f, SpriteEffects.None, 0f);
							}
							else
							{
								Microsoft.Xna.Framework.Color color4 = color;
								if (style == 1 || (double)color4.R <= (double)num2 * 0.6 && (double)color4.G <= (double)num2 * 0.65 && (double)color4.B <= (double)num2 * 0.7)
								{
									SpriteBatch spriteBatch1 = Main.spriteBatch;
									Texture2D texture2D1 = Main.liquidTexture[style];
									Vector2 vector26 = (vector21 - Main.screenPosition) + vector2;
									Microsoft.Xna.Framework.Rectangle? nullable1 = new Microsoft.Xna.Framework.Rectangle?(rectangle);
									Vector2 vector27 = new Vector2();
									spriteBatch1.Draw(texture2D1, vector26, nullable1, color, 0f, vector27, 1f, SpriteEffects.None, 0f);
								}
								else
								{
									for (int k = 0; k < 4; k++)
									{
										int num6 = 0;
										int num7 = 0;
										int num8 = 8;
										int height = 8;
										Microsoft.Xna.Framework.Color g1 = color4;
										Microsoft.Xna.Framework.Color color5 = Lighting.GetColor(j, i);
										if (k == 0)
										{
											color5 = Lighting.GetColor(j - 1, i - 1);
											if (rectangle.Height < 8)
											{
												height = rectangle.Height;
											}
										}
										if (k == 1)
										{
											color5 = Lighting.GetColor(j + 1, i - 1);
											num6 = 8;
											if (rectangle.Height < 8)
											{
												height = rectangle.Height;
											}
										}
										if (k == 2)
										{
											color5 = Lighting.GetColor(j - 1, i + 1);
											num7 = 8;
											height = 8 - (16 - rectangle.Height);
										}
										if (k == 3)
										{
											color5 = Lighting.GetColor(j + 1, i + 1);
											num6 = 8;
											num7 = 8;
											height = 8 - (16 - rectangle.Height);
										}
										r1 = (float)color5.R * alpha;
										g = (float)color5.G * alpha;
										b = (float)color5.B * alpha;
										a = (float)color5.A * alpha;
										color5 = new Microsoft.Xna.Framework.Color((int)r1, (int)g, (int)b, (int)a);
										g1.R = (byte)((color4.R * 3 + color5.R * 2) / 5);
										g1.G = (byte)((color4.G * 3 + color5.G * 2) / 5);
										g1.B = (byte)((color4.B * 3 + color5.B * 2) / 5);
										g1.A = (byte)((color4.A * 3 + color5.A * 2) / 5);
										SpriteBatch spriteBatch2 = Main.spriteBatch;
										Texture2D texture2D2 = Main.liquidTexture[style];
										Vector2 vector28 = ((vector21 - Main.screenPosition) + new Vector2((float)num6, (float)num7)) + vector2;
										Microsoft.Xna.Framework.Rectangle? nullable2 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(rectangle.X + num6, rectangle.Y + num7, num8, height));
										Vector2 vector29 = new Vector2();
										spriteBatch2.Draw(texture2D2, vector28, nullable2, g1, 0f, vector29, 1f, SpriteEffects.None, 0f);
									}
								}
							}
							if (Main.tile[j, i + 1].halfBrick())
							{
								color = Lighting.GetColor(j, i + 1);
								r1 = (float)color.R * alpha;
								g = (float)color.G * alpha;
								b = (float)color.B * alpha;
								a = (float)color.A * alpha;
								color = new Microsoft.Xna.Framework.Color((int)r1, (int)g, (int)b, (int)a);
								vector21 = new Vector2((float)(j * 16), (float)(i * 16 + 16));
								SpriteBatch spriteBatch3 = Main.spriteBatch;
								Texture2D texture2D3 = Main.liquidTexture[style];
								Vector2 vector210 = (vector21 - Main.screenPosition) + vector2;
								Microsoft.Xna.Framework.Rectangle? nullable3 = new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 4, 16, 8));
								Vector2 vector211 = new Vector2();
								spriteBatch3.Draw(texture2D3, vector210, nullable3, color, 0f, vector211, 1f, SpriteEffects.None, 0f);
							}
						}
					}
				Label0:
					continue;
				}
			}
			if (!Main.drewLava)
			{
				Main.ambientLavaX = (float)num;
				Main.ambientLavaY = (float)num1;
				Main.ambientLavaStrength = single;
			}
			Main.drewLava = true;
		}

		public static void OpenClothesWindow()
		{
			Main.hBar = -1f;
			Main.lBar = -1f;
			Main.sBar = -1f;
			Main.playerInventory = false;
			Main.npcChatText = "";
			Main.clothesWindow = true;
			Main.PlaySound(10, -1, -1, 1);
			Main.selClothes = 0;
			Main.oldClothesColor[0] = Main.player[Main.myPlayer].shirtColor;
			Main.oldClothesColor[1] = Main.player[Main.myPlayer].underShirtColor;
			Main.oldClothesColor[2] = Main.player[Main.myPlayer].pantsColor;
			Main.oldClothesColor[3] = Main.player[Main.myPlayer].shoeColor;
		}

		public static void OpenHairWindow()
		{
			Main.hBar = -1f;
			Main.lBar = -1f;
			Main.sBar = -1f;
			Main.playerInventory = false;
			Main.npcChatText = "";
			Main.oldHairStyle = Main.player[Main.myPlayer].hair;
			Main.oldHairColor = Main.player[Main.myPlayer].hairColor;
			Main.hairWindow = true;
			Main.PlaySound(10, -1, -1, 1);
		}

		protected void OpenLegacySettings()
		{
			try
			{
				if (File.Exists(string.Concat(Main.SavePath, Path.DirectorySeparatorChar, "config.dat")))
				{
					using (FileStream fileStream = new FileStream(string.Concat(Main.SavePath, Path.DirectorySeparatorChar, "config.dat"), FileMode.Open))
					{
						using (BinaryReader binaryReader = new BinaryReader(fileStream))
						{
							int num = binaryReader.ReadInt32();
							if (num >= 68)
							{
								if (num >= 67)
								{
									Main.clientUUID = binaryReader.ReadString();
								}
								bool flag = binaryReader.ReadBoolean();
								Main.mouseColor.R = binaryReader.ReadByte();
								Main.mouseColor.G = binaryReader.ReadByte();
								Main.mouseColor.B = binaryReader.ReadByte();
								Main.soundVolume = binaryReader.ReadSingle();
								if (num >= 90)
								{
									Main.ambientVolume = binaryReader.ReadSingle();
								}
								Main.musicVolume = binaryReader.ReadSingle();
								Main.cUp = binaryReader.ReadString();
								Main.cDown = binaryReader.ReadString();
								Main.cLeft = binaryReader.ReadString();
								Main.cRight = binaryReader.ReadString();
								Main.cJump = binaryReader.ReadString();
								Main.cThrowItem = binaryReader.ReadString();
								if (num >= 1)
								{
									Main.cInv = binaryReader.ReadString();
								}
								if (num >= 12)
								{
									Main.cHeal = binaryReader.ReadString();
									Main.cMana = binaryReader.ReadString();
									Main.cBuff = binaryReader.ReadString();
								}
								if (num >= 13)
								{
									Main.cHook = binaryReader.ReadString();
								}
								Main.caveParallax = binaryReader.ReadSingle();
								if (num >= 2)
								{
									Main.fixedTiming = binaryReader.ReadBoolean();
								}
								if (num >= 91)
								{
									binaryReader.ReadBoolean();
								}
								if (num >= 4)
								{
									Main.SetDisplayMode(binaryReader.ReadInt32(), binaryReader.ReadInt32(), flag);
								}
								if (num >= 8)
								{
									Main.autoSave = binaryReader.ReadBoolean();
								}
								if (num >= 9)
								{
									Main.autoPause = binaryReader.ReadBoolean();
								}
								if (num >= 19)
								{
									Main.showItemText = binaryReader.ReadBoolean();
								}
								if (num >= 30)
								{
									Main.cTorch = binaryReader.ReadString();
									Lighting.lightMode = binaryReader.ReadByte();
									Main.qaStyle = binaryReader.ReadByte();
								}
								if (num >= 37)
								{
									Main.owBack = binaryReader.ReadBoolean();
								}
								if (num >= 39)
								{
									Lang.lang = binaryReader.ReadByte();
								}
								if (num >= 46)
								{
									Main.mapEnabled = binaryReader.ReadBoolean();
									Main.cMapStyle = binaryReader.ReadString();
									Main.cMapFull = binaryReader.ReadString();
									Main.cMapZoomIn = binaryReader.ReadString();
									Main.cMapZoomOut = binaryReader.ReadString();
									Main.cMapAlphaUp = binaryReader.ReadString();
									Main.cMapAlphaDown = binaryReader.ReadString();
								}
								if (num >= 89)
								{
									Lighting.LightingThreads = binaryReader.ReadInt32();
									if (Lighting.LightingThreads >= Environment.ProcessorCount)
									{
										Lighting.LightingThreads = Environment.ProcessorCount - 1;
									}
								}
								if (num >= 100)
								{
									Main.cSmart = binaryReader.ReadString();
									Main.cSmartToggle = binaryReader.ReadBoolean();
								}
								if (num >= 107)
								{
									Main.invasionProgressMode = binaryReader.ReadByte();
								}
								if (num >= 111)
								{
									Main.placementPreview = binaryReader.ReadBoolean();
								}
								if (num >= 111)
								{
									Main.placementPreview = binaryReader.ReadBoolean();
								}
								Main.SetFullScreen(flag);
							}
							binaryReader.Close();
						}
					}
				}
			}
			catch (Exception ex)
			{
#if DEBUG
				Console.WriteLine(ex);
				System.Diagnostics.Debugger.Break();

#endif
			}
		}

		public static void OpenPlayerSelect(Main.OnPlayerSelected method)
		{
			if (Main.gameMenu && (Main.menuMode == 10 || Main.menuMode == 14))
			{
				return;
			}
			Main._pendingCharacterSelect = method;
			if (Main.gameMenu)
			{
				Main.LoadPlayers();
				Main.menuMode = 1;
				return;
			}
			WorldGen.SaveAndQuit(() => {
				Main.LoadPlayers();
				Main.menuMode = 1;
			});
		}

		protected void OpenRecent()
		{
			try
			{
				if (File.Exists(string.Concat(Main.SavePath, Path.DirectorySeparatorChar, "servers.dat")))
				{
					using (FileStream fileStream = new FileStream(string.Concat(Main.SavePath, Path.DirectorySeparatorChar, "servers.dat"), FileMode.Open))
					{
						using (BinaryReader binaryReader = new BinaryReader(fileStream))
						{
							binaryReader.ReadInt32();
							for (int i = 0; i < 10; i++)
							{
								Main.recentWorld[i] = binaryReader.ReadString();
								Main.recentIP[i] = binaryReader.ReadString();
								Main.recentPort[i] = binaryReader.ReadInt32();
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
#if DEBUG
				Console.WriteLine(ex);
				System.Diagnostics.Debugger.Break();

#endif
			}
		}

		protected void OpenSettings()
		{
			if (File.Exists(string.Concat(Main.SavePath, Path.DirectorySeparatorChar, "config.dat")))
			{
				this.OpenLegacySettings();
				if (Main.SaveSettings())
				{
					File.Delete(string.Concat(Main.SavePath, Path.DirectorySeparatorChar, "config.dat"));
				}
				return;
			}
			Main.Configuration.Load();
			Main.Configuration.Get<bool>("SmartCursorToggle", ref Main.cSmartToggle);
			Main.Configuration.Get<bool>("MapEnabled", ref Main.mapEnabled);
			Main.Configuration.Get<int>("InvasionBarMode", ref Main.invasionProgressMode);
			Main.Configuration.Get<bool>("AutoSave", ref Main.autoSave);
			Main.Configuration.Get<bool>("AutoPause", ref Main.autoPause);
			Main.Configuration.Get<int>("Language", ref Lang.lang);
			Main.Configuration.Get<bool>("PlacementPreview", ref Main.placementPreview);
			Main.Configuration.Get<bool>("GoreVisualsAllowed", ref ChildSafety.Disabled);
			Main.Configuration.Get<float>("VolumeSound", ref Main.soundVolume);
			Main.Configuration.Get<float>("VolumeAmbient", ref Main.ambientVolume);
			Main.Configuration.Get<float>("VolumeMusic", ref Main.musicVolume);
			Main.Configuration.Get<string>("KeyUp", ref Main.cUp);
			Main.Configuration.Get<string>("KeyDown", ref Main.cDown);
			Main.Configuration.Get<string>("KeyLeft", ref Main.cLeft);
			Main.Configuration.Get<string>("KeyRight", ref Main.cRight);
			Main.Configuration.Get<string>("KeyJump", ref Main.cJump);
			Main.Configuration.Get<string>("KeyThrowItem", ref Main.cThrowItem);
			Main.Configuration.Get<string>("KeyInventory", ref Main.cInv);
			Main.Configuration.Get<string>("KeyQuickHeal", ref Main.cHeal);
			Main.Configuration.Get<string>("KeyQuickMana", ref Main.cMana);
			Main.Configuration.Get<string>("KeyQuickBuff", ref Main.cBuff);
			Main.Configuration.Get<string>("KeyUseHook", ref Main.cHook);
			Main.Configuration.Get<string>("KeyAutoSelect", ref Main.cTorch);
			Main.Configuration.Get<string>("KeySmartCursor", ref Main.cSmart);
			Main.Configuration.Get<string>("KeyMount", ref Main.cMount);
			Main.Configuration.Get<string>("KeyMapStyle", ref Main.cMapStyle);
			Main.Configuration.Get<string>("KeyFullscreenMap", ref Main.cMapFull);
			Main.Configuration.Get<string>("KeyMapZoomIn", ref Main.cMapZoomIn);
			Main.Configuration.Get<string>("KeyMapZoomOut", ref Main.cMapZoomOut);
			Main.Configuration.Get<string>("KeyMapAlphaUp", ref Main.cMapAlphaUp);
			Main.Configuration.Get<string>("KeyMapAlphaDown", ref Main.cMapAlphaDown);
			Main.Configuration.Get<bool>("WindowMaximized", ref Main.screenMaximized);
			Main.Configuration.Get<int>("GraphicsQuality", ref Main.qaStyle);
			Main.Configuration.Get<bool>("BackgroundEnabled", ref Main.owBack);
			Main.Configuration.Get<bool>("FrameSkip", ref Main.fixedTiming);
			Main.Configuration.Get<int>("LightingMode", ref Lighting.lightMode);
			Main.Configuration.Get<int>("LightingThreads", ref Lighting.LightingThreads);
			Main.Configuration.Get<float>("Parallax", ref Main.caveParallax);
			Main.Configuration.Get<bool>("ShowItemText", ref Main.showItemText);
			Main.Configuration.Get<bool>("UseSmartCursorForCommonBlocks", ref Player.SmartCursorSettings.SmartBlocksEnabled);
			bool flag = false;
			int preferredBackBufferWidth = Main.graphics.PreferredBackBufferWidth;
			int preferredBackBufferHeight = Main.graphics.PreferredBackBufferHeight;
			Main.Configuration.Get<bool>("Fullscreen", ref flag);
			Main.Configuration.Get<int>("DisplayWidth", ref preferredBackBufferWidth);
			Main.Configuration.Get<int>("DisplayHeight", ref preferredBackBufferHeight);
			Main.mouseColor.R = Main.Configuration.Get<byte>("MouseColorR", Main.mouseColor.R);
			Main.mouseColor.G = Main.Configuration.Get<byte>("MouseColorG", Main.mouseColor.G);
			Main.mouseColor.B = Main.Configuration.Get<byte>("MouseColorB", Main.mouseColor.B);
			Main.SetDisplayMode(preferredBackBufferWidth, preferredBackBufferHeight, flag);
			int num = 0;
			Main.Configuration.Get<int>("LastLaunchedVersion", ref num);
			if (num != Main.curRelease)
			{
				Main.SaveSettings();
			}
		}

		private static int PlayerListSortMethod(PlayerFileData data1, PlayerFileData data2)
		{
			return data1.Name.CompareTo(data2.Name);
		}

		public static void PlaySound(int type, Vector2 position, int Style = 1)
		{
			Main.PlaySound(type, (int)position.X, (int)position.Y, Style);
		}

		public static void PlaySound(int type, int x = -1, int y = -1, int Style = 1)
		{
			object obj;
			int style = Style;
			try
			{
				if (!Main.dedServ)
				{
					if (Main.soundVolume != 0f || type >= 30 && type <= 35 && type != 39)
					{
						bool flag = false;
						float single = 1f;
						float single1 = 0f;
						if (x == -1 || y == -1)
						{
							flag = true;
						}
						else if (WorldGen.gen)
						{
							return;
						}
						else if (Main.netMode != 2)
						{
							Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)(Main.screenPosition.X - (float)(Main.screenWidth * 2)), (int)(Main.screenPosition.Y - (float)(Main.screenHeight * 2)), Main.screenWidth * 5, Main.screenHeight * 5);
							Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle(x, y, 1, 1);
							Vector2 vector2 = new Vector2(Main.screenPosition.X + (float)Main.screenWidth * 0.5f, Main.screenPosition.Y + (float)Main.screenHeight * 0.5f);
							if (rectangle1.Intersects(rectangle))
							{
								flag = true;
							}
							if (flag)
							{
								single1 = ((float)x - vector2.X) / ((float)Main.screenWidth * 0.5f);
								float single2 = Math.Abs((float)x - vector2.X);
								float single3 = Math.Abs((float)y - vector2.Y);
								float single4 = (float)Math.Sqrt((double)(single2 * single2 + single3 * single3));
								single = 1f - single4 / ((float)Main.screenWidth * 1.5f);
							}
						}
						else
						{
							return;
						}
						if (single1 < -1f)
						{
							single1 = -1f;
						}
						if (single1 > 1f)
						{
							single1 = 1f;
						}
						if (single > 1f)
						{
							single = 1f;
						}
						if (single > 0f || type >= 34 && type <= 35 && type <= 39)
						{
							if (flag)
							{
								if ((type < 30 || type > 35) && type != 39)
								{
									single = single * Main.soundVolume;
								}
								else
								{
									float single5 = single;
									float single6 = Main.ambientVolume;
									if (Main.gameInactive)
									{
										obj = null;
									}
									else
									{
										obj = 1;
									}
									single = single5 * (single6 * (float)obj);
								}
								if (single > 1f)
								{
									single = 1f;
								}
								if (single <= 0f && (type < 30 || type > 35) && type != 39)
								{
									return;
								}
								else if (type == 0)
								{
									int num = Main.rand.Next(3);
									Main.soundInstanceDig[num].Stop();
									Main.soundInstanceDig[num] = Main.soundDig[num].CreateInstance();
									Main.soundInstanceDig[num].Volume = single;
									Main.soundInstanceDig[num].Pan = single1;
									Main.soundInstanceDig[num].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
									Main.soundInstanceDig[num].Play();
								}
								else if (type == 1)
								{
									int num1 = Main.rand.Next(3);
									Main.soundInstancePlayerHit[num1].Stop();
									Main.soundInstancePlayerHit[num1] = Main.soundPlayerHit[num1].CreateInstance();
									Main.soundInstancePlayerHit[num1].Volume = single;
									Main.soundInstancePlayerHit[num1].Pan = single1;
									Main.soundInstancePlayerHit[num1].Play();
								}
								else if (type == 2)
								{
									if (style == 123)
									{
										single = single * 0.5f;
									}
									if (style == 124 || style == 125)
									{
										single = single * 0.65f;
									}
									if (style == 1)
									{
										int num2 = Main.rand.Next(3);
										if (num2 == 1)
										{
											style = 18;
										}
										if (num2 == 2)
										{
											style = 19;
										}
									}
									else if (style == 55 || style == 53)
									{
										single = single * 0.75f;
										if (style == 55)
										{
											single = single * 0.75f;
										}
										if (Main.soundInstanceItem[style].State == SoundState.Playing)
										{
											return;
										}
									}
									else if (style == 37)
									{
										single = single * 0.5f;
									}
									if (style != 9 && style != 10 && style != 24 && style != 26 && style != 34 && style != 43 && style != 103)
									{
										Main.soundInstanceItem[style].Stop();
									}
									Main.soundInstanceItem[style] = Main.soundItem[style].CreateInstance();
									Main.soundInstanceItem[style].Volume = single;
									Main.soundInstanceItem[style].Pan = single1;
									if (style == 47)
									{
										Main.soundInstanceItem[style].Pitch = (float)Main.rand.Next(-5, 6) * 0.19f;
									}
									else if (style == 53)
									{
										Main.soundInstanceItem[style].Pitch = (float)Main.rand.Next(-20, -11) * 0.02f;
									}
									else if (style != 55)
									{
										Main.soundInstanceItem[style].Pitch = (float)Main.rand.Next(-6, 7) * 0.01f;
									}
									else
									{
										Main.soundInstanceItem[style].Pitch = (float)(-Main.rand.Next(-20, -11)) * 0.02f;
									}
									if (style == 26 || style == 35)
									{
										Main.soundInstanceItem[style].Volume = single * 0.75f;
										Main.soundInstanceItem[style].Pitch = Main.harpNote;
									}
									Main.soundInstanceItem[style].Play();
								}
								else if (type == 3)
								{
									if (style >= 20 && style <= 54)
									{
										single = single * 0.5f;
									}
									if (style != 57 || Main.soundInstanceNPCHit[style].State != SoundState.Playing)
									{
										if (style == 57)
										{
											single = single * 0.6f;
										}
										if (style == 55 || style == 56)
										{
											single = single * 0.5f;
										}
										Main.soundInstanceNPCHit[style].Stop();
										Main.soundInstanceNPCHit[style] = Main.soundNPCHit[style].CreateInstance();
										Main.soundInstanceNPCHit[style].Volume = single;
										Main.soundInstanceNPCHit[style].Pan = single1;
										Main.soundInstanceNPCHit[style].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
										Main.soundInstanceNPCHit[style].Play();
									}
									else
									{
										return;
									}
								}
								else if (type == 4)
								{
									if (style >= 23 && style <= 57)
									{
										single = single * 0.5f;
									}
									if (style == 61)
									{
										single = single * 0.6f;
									}
									if (style == 62)
									{
										single = single * 0.6f;
									}
									if (style != 10 || Main.soundInstanceNPCKilled[style].State != SoundState.Playing)
									{
										Main.soundInstanceNPCKilled[style] = Main.soundNPCKilled[style].CreateInstance();
										Main.soundInstanceNPCKilled[style].Volume = single;
										Main.soundInstanceNPCKilled[style].Pan = single1;
										Main.soundInstanceNPCKilled[style].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
										Main.soundInstanceNPCKilled[style].Play();
									}
									else
									{
										return;
									}
								}
								else if (type == 5)
								{
									Main.soundInstancePlayerKilled.Stop();
									Main.soundInstancePlayerKilled = Main.soundPlayerKilled.CreateInstance();
									Main.soundInstancePlayerKilled.Volume = single;
									Main.soundInstancePlayerKilled.Pan = single1;
									Main.soundInstancePlayerKilled.Play();
								}
								else if (type == 6)
								{
									Main.soundInstanceGrass.Stop();
									Main.soundInstanceGrass = Main.soundGrass.CreateInstance();
									Main.soundInstanceGrass.Volume = single;
									Main.soundInstanceGrass.Pan = single1;
									Main.soundInstanceGrass.Pitch = (float)Main.rand.Next(-30, 31) * 0.01f;
									Main.soundInstanceGrass.Play();
								}
								else if (type == 7)
								{
									Main.soundInstanceGrab.Stop();
									Main.soundInstanceGrab = Main.soundGrab.CreateInstance();
									Main.soundInstanceGrab.Volume = single;
									Main.soundInstanceGrab.Pan = single1;
									Main.soundInstanceGrab.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
									Main.soundInstanceGrab.Play();
								}
								else if (type == 8)
								{
									Main.soundInstanceDoorOpen.Stop();
									Main.soundInstanceDoorOpen = Main.soundDoorOpen.CreateInstance();
									Main.soundInstanceDoorOpen.Volume = single;
									Main.soundInstanceDoorOpen.Pan = single1;
									Main.soundInstanceDoorOpen.Pitch = (float)Main.rand.Next(-20, 21) * 0.01f;
									Main.soundInstanceDoorOpen.Play();
								}
								else if (type == 9)
								{
									Main.soundInstanceDoorClosed.Stop();
									Main.soundInstanceDoorClosed = Main.soundDoorClosed.CreateInstance();
									Main.soundInstanceDoorClosed.Volume = single;
									Main.soundInstanceDoorClosed.Pan = single1;
									Main.soundInstanceDoorOpen.Pitch = (float)Main.rand.Next(-20, 21) * 0.01f;
									Main.soundInstanceDoorClosed.Play();
								}
								else if (type == 10)
								{
									Main.soundInstanceMenuOpen.Stop();
									Main.soundInstanceMenuOpen = Main.soundMenuOpen.CreateInstance();
									Main.soundInstanceMenuOpen.Volume = single;
									Main.soundInstanceMenuOpen.Pan = single1;
									Main.soundInstanceMenuOpen.Play();
								}
								else if (type == 11)
								{
									Main.soundInstanceMenuClose.Stop();
									Main.soundInstanceMenuClose = Main.soundMenuClose.CreateInstance();
									Main.soundInstanceMenuClose.Volume = single;
									Main.soundInstanceMenuClose.Pan = single1;
									Main.soundInstanceMenuClose.Play();
								}
								else if (type == 12)
								{
									Main.soundInstanceMenuTick.Stop();
									Main.soundInstanceMenuTick = Main.soundMenuTick.CreateInstance();
									Main.soundInstanceMenuTick.Volume = single;
									Main.soundInstanceMenuTick.Pan = single1;
									Main.soundInstanceMenuTick.Play();
								}
								else if (type == 13)
								{
									Main.soundInstanceShatter.Stop();
									Main.soundInstanceShatter = Main.soundShatter.CreateInstance();
									Main.soundInstanceShatter.Volume = single;
									Main.soundInstanceShatter.Pan = single1;
									Main.soundInstanceShatter.Play();
								}
								else if (type == 14)
								{
									if (Style != 489)
									{
										int num3 = Main.rand.Next(3);
										Main.soundInstanceZombie[num3] = Main.soundZombie[num3].CreateInstance();
										Main.soundInstanceZombie[num3].Volume = single * 0.4f;
										Main.soundInstanceZombie[num3].Pan = single1;
										Main.soundInstanceZombie[num3].Play();
									}
									else
									{
										int num4 = Main.rand.Next(21, 24);
										Main.soundInstanceZombie[num4] = Main.soundZombie[num4].CreateInstance();
										Main.soundInstanceZombie[num4].Volume = single * 0.4f;
										Main.soundInstanceZombie[num4].Pan = single1;
										Main.soundInstanceZombie[num4].Play();
									}
								}
								else if (type == 15)
								{
									if (Main.soundInstanceRoar[style].State == SoundState.Stopped)
									{
										Main.soundInstanceRoar[style] = Main.soundRoar[style].CreateInstance();
										Main.soundInstanceRoar[style].Volume = single;
										Main.soundInstanceRoar[style].Pan = single1;
										Main.soundInstanceRoar[style].Play();
									}
								}
								else if (type == 16)
								{
									Main.soundInstanceDoubleJump.Stop();
									Main.soundInstanceDoubleJump = Main.soundDoubleJump.CreateInstance();
									Main.soundInstanceDoubleJump.Volume = single;
									Main.soundInstanceDoubleJump.Pan = single1;
									Main.soundInstanceDoubleJump.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
									Main.soundInstanceDoubleJump.Play();
								}
								else if (type == 17)
								{
									Main.soundInstanceRun.Stop();
									Main.soundInstanceRun = Main.soundRun.CreateInstance();
									Main.soundInstanceRun.Volume = single;
									Main.soundInstanceRun.Pan = single1;
									Main.soundInstanceRun.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
									Main.soundInstanceRun.Play();
								}
								else if (type == 18)
								{
									Main.soundInstanceCoins = Main.soundCoins.CreateInstance();
									Main.soundInstanceCoins.Volume = single;
									Main.soundInstanceCoins.Pan = single1;
									Main.soundInstanceCoins.Play();
								}
								else if (type == 19)
								{
									if (Main.soundInstanceSplash[style].State == SoundState.Stopped)
									{
										Main.soundInstanceSplash[style] = Main.soundSplash[style].CreateInstance();
										Main.soundInstanceSplash[style].Volume = single;
										Main.soundInstanceSplash[style].Pan = single1;
										Main.soundInstanceSplash[style].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
										Main.soundInstanceSplash[style].Play();
									}
								}
								else if (type == 20)
								{
									int num5 = Main.rand.Next(3);
									Main.soundInstanceFemaleHit[num5].Stop();
									Main.soundInstanceFemaleHit[num5] = Main.soundFemaleHit[num5].CreateInstance();
									Main.soundInstanceFemaleHit[num5].Volume = single;
									Main.soundInstanceFemaleHit[num5].Pan = single1;
									Main.soundInstanceFemaleHit[num5].Play();
								}
								else if (type == 21)
								{
									int num6 = Main.rand.Next(3);
									Main.soundInstanceTink[num6].Stop();
									Main.soundInstanceTink[num6] = Main.soundTink[num6].CreateInstance();
									Main.soundInstanceTink[num6].Volume = single;
									Main.soundInstanceTink[num6].Pan = single1;
									Main.soundInstanceTink[num6].Play();
								}
								else if (type == 22)
								{
									Main.soundInstanceUnlock.Stop();
									Main.soundInstanceUnlock = Main.soundUnlock.CreateInstance();
									Main.soundInstanceUnlock.Volume = single;
									Main.soundInstanceUnlock.Pan = single1;
									Main.soundInstanceUnlock.Play();
								}
								else if (type == 23)
								{
									Main.soundInstanceDrown.Stop();
									Main.soundInstanceDrown = Main.soundDrown.CreateInstance();
									Main.soundInstanceDrown.Volume = single;
									Main.soundInstanceDrown.Pan = single1;
									Main.soundInstanceDrown.Play();
								}
								else if (type == 24)
								{
									Main.soundInstanceChat = Main.soundChat.CreateInstance();
									Main.soundInstanceChat.Volume = single;
									Main.soundInstanceChat.Pan = single1;
									Main.soundInstanceChat.Play();
								}
								else if (type == 25)
								{
									Main.soundInstanceMaxMana = Main.soundMaxMana.CreateInstance();
									Main.soundInstanceMaxMana.Volume = single;
									Main.soundInstanceMaxMana.Pan = single1;
									Main.soundInstanceMaxMana.Play();
								}
								else if (type == 26)
								{
									int num7 = Main.rand.Next(3, 5);
									Main.soundInstanceZombie[num7] = Main.soundZombie[num7].CreateInstance();
									Main.soundInstanceZombie[num7].Volume = single * 0.9f;
									Main.soundInstanceZombie[num7].Pan = single1;
									Main.soundInstanceZombie[num7].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
									Main.soundInstanceZombie[num7].Play();
								}
								else if (type == 27)
								{
									if (Main.soundInstancePixie.State != SoundState.Playing)
									{
										Main.soundInstancePixie.Stop();
										Main.soundInstancePixie = Main.soundPixie.CreateInstance();
										Main.soundInstancePixie.Volume = single;
										Main.soundInstancePixie.Pan = single1;
										Main.soundInstancePixie.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
										Main.soundInstancePixie.Play();
									}
									else
									{
										Main.soundInstancePixie.Volume = single;
										Main.soundInstancePixie.Pan = single1;
										Main.soundInstancePixie.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
										return;
									}
								}
								else if (type == 28)
								{
									if (Main.soundInstanceMech[style].State != SoundState.Playing)
									{
										Main.soundInstanceMech[style] = Main.soundMech[style].CreateInstance();
										Main.soundInstanceMech[style].Volume = single;
										Main.soundInstanceMech[style].Pan = single1;
										Main.soundInstanceMech[style].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
										Main.soundInstanceMech[style].Play();
									}
									else
									{
										return;
									}
								}
								else if (type == 29)
								{
									if (style >= 24 && style <= 87)
									{
										single = single * 0.5f;
									}
									if (style >= 88 && style <= 91)
									{
										single = single * 0.7f;
									}
									if (style >= 93 && style <= 99)
									{
										single = single * 0.4f;
									}
									if (style == 92)
									{
										single = single * 0.5f;
									}
									if (style == 103)
									{
										single = single * 0.4f;
									}
									if (style == 104)
									{
										single = single * 0.55f;
									}
									if (style == 100 || style == 101)
									{
										single = single * 0.25f;
									}
									if (style == 102)
									{
										single = single * 0.4f;
									}
									if (Main.soundInstanceZombie[style].State != SoundState.Playing)
									{
										Main.soundInstanceZombie[style] = Main.soundZombie[style].CreateInstance();
										Main.soundInstanceZombie[style].Volume = single;
										Main.soundInstanceZombie[style].Pan = single1;
										Main.soundInstanceZombie[style].Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
										Main.soundInstanceZombie[style].Play();
									}
									else
									{
										return;
									}
								}
								else if (type == 30)
								{
									style = Main.rand.Next(10, 12);
									if (Main.rand.Next(300) == 0)
									{
										style = 12;
										if (Main.soundInstanceZombie[style].State == SoundState.Playing)
										{
											return;
										}
									}
									Main.soundInstanceZombie[style] = Main.soundZombie[style].CreateInstance();
									Main.soundInstanceZombie[style].Volume = single * 0.75f;
									Main.soundInstanceZombie[style].Pan = single1;
									if (style == 12)
									{
										Main.soundInstanceZombie[style].Pitch = (float)Main.rand.Next(-40, 21) * 0.01f;
									}
									else
									{
										Main.soundInstanceZombie[style].Pitch = (float)Main.rand.Next(-70, 1) * 0.01f;
									}
									Main.soundInstanceZombie[style].Play();
								}
								else if (type == 31)
								{
									style = 13;
									Main.soundInstanceZombie[style] = Main.soundZombie[style].CreateInstance();
									Main.soundInstanceZombie[style].Volume = single * 0.35f;
									Main.soundInstanceZombie[style].Pan = single1;
									Main.soundInstanceZombie[style].Pitch = (float)Main.rand.Next(-40, 21) * 0.01f;
									Main.soundInstanceZombie[style].Play();
								}
								else if (type == 32)
								{
									if (Main.soundInstanceZombie[style].State != SoundState.Playing)
									{
										Main.soundInstanceZombie[style] = Main.soundZombie[style].CreateInstance();
										Main.soundInstanceZombie[style].Volume = single * 0.15f;
										Main.soundInstanceZombie[style].Pan = single1;
										Main.soundInstanceZombie[style].Pitch = (float)Main.rand.Next(-70, 26) * 0.01f;
										Main.soundInstanceZombie[style].Play();
									}
									else
									{
										return;
									}
								}
								else if (type == 33)
								{
									style = 15;
									if (Main.soundInstanceZombie[style].State != SoundState.Playing)
									{
										Main.soundInstanceZombie[style] = Main.soundZombie[style].CreateInstance();
										Main.soundInstanceZombie[style].Volume = single * 0.2f;
										Main.soundInstanceZombie[style].Pan = single1;
										Main.soundInstanceZombie[style].Pitch = (float)Main.rand.Next(-10, 31) * 0.01f;
										Main.soundInstanceZombie[style].Play();
									}
									else
									{
										return;
									}
								}
								else if (type == 34)
								{
									float single7 = (float)style / 50f;
									if (single7 > 1f)
									{
										single7 = 1f;
									}
									single = single * single7;
									single = single * 0.2f;
									if (single > 0f && x != -1 && y != -1)
									{
										if (Main.soundInstanceLiquid[0].State != SoundState.Playing)
										{
											Main.soundInstanceLiquid[0] = Main.soundLiquid[0].CreateInstance();
											Main.soundInstanceLiquid[0].Volume = single;
											Main.soundInstanceLiquid[0].Pan = single1;
											Main.soundInstanceLiquid[0].Play();
										}
										else
										{
											Main.soundInstanceLiquid[0].Volume = single;
											Main.soundInstanceLiquid[0].Pan = single1;
											Main.soundInstanceLiquid[0].Pitch = -0.2f;
										}
									}
									else if (Main.soundInstanceLiquid[0].State == SoundState.Playing)
									{
										Main.soundInstanceLiquid[0].Stop();
									}
								}
								else if (type == 35)
								{
									float single8 = (float)style / 50f;
									if (single8 > 1f)
									{
										single8 = 1f;
									}
									single = single * single8;
									single = single * 0.65f;
									if (single > 0f && x != -1 && y != -1)
									{
										if (Main.soundInstanceLiquid[1].State != SoundState.Playing)
										{
											Main.soundInstanceLiquid[1] = Main.soundLiquid[1].CreateInstance();
											Main.soundInstanceLiquid[1].Volume = single;
											Main.soundInstanceLiquid[1].Pan = single1;
											Main.soundInstanceLiquid[1].Play();
										}
										else
										{
											Main.soundInstanceLiquid[1].Volume = single;
											Main.soundInstanceLiquid[1].Pan = single1;
											Main.soundInstanceLiquid[1].Pitch = 0f;
										}
									}
									else if (Main.soundInstanceLiquid[1].State == SoundState.Playing)
									{
										Main.soundInstanceLiquid[1].Stop();
									}
								}
								else if (type == 36)
								{
									int style1 = Style;
									if (Style == -1)
									{
										style1 = 0;
									}
									Main.soundInstanceRoar[style1] = Main.soundRoar[style1].CreateInstance();
									Main.soundInstanceRoar[style1].Volume = single;
									Main.soundInstanceRoar[style1].Pan = single1;
									if (Style == -1)
									{
										SoundEffectInstance pitch = Main.soundInstanceRoar[style1];
										pitch.Pitch = pitch.Pitch + 0.6f;
									}
									Main.soundInstanceRoar[style1].Play();
								}
								else if (type == 37)
								{
									int num8 = Main.rand.Next(57, 59);
									single = single * ((float)Style * 0.05f);
									Main.soundInstanceItem[num8] = Main.soundItem[num8].CreateInstance();
									Main.soundInstanceItem[num8].Volume = single;
									Main.soundInstanceItem[num8].Pan = single1;
									Main.soundInstanceItem[num8].Pitch = (float)Main.rand.Next(-40, 41) * 0.01f;
									Main.soundInstanceItem[num8].Play();
								}
								else if (type == 38)
								{
									int num9 = Main.rand.Next(5);
									Main.soundInstanceCoin[num9] = Main.soundCoin[num9].CreateInstance();
									Main.soundInstanceCoin[num9].Volume = single;
									Main.soundInstanceCoin[num9].Pan = single1;
									Main.soundInstanceCoin[num9].Pitch = (float)Main.rand.Next(-40, 41) * 0.002f;
									Main.soundInstanceCoin[num9].Play();
								}
								else if (type == 39)
								{
									style = Style;
									Main.soundInstanceDrip[style] = Main.soundDrip[style].CreateInstance();
									Main.soundInstanceDrip[style].Volume = single * 0.5f;
									Main.soundInstanceDrip[style].Pan = single1;
									Main.soundInstanceDrip[style].Pitch = (float)Main.rand.Next(-30, 31) * 0.01f;
									Main.soundInstanceDrip[style].Play();
								}
								else if (type == 40)
								{
									Main.soundInstanceCamera.Stop();
									Main.soundInstanceCamera = Main.soundCamera.CreateInstance();
									Main.soundInstanceCamera.Volume = single;
									Main.soundInstanceCamera.Pan = single1;
									Main.soundInstanceCamera.Play();
								}
								else if (type == 41)
								{
									Main.soundInstanceMoonlordCry = Main.soundNPCKilled[10].CreateInstance();
									SoundEffectInstance soundEffectInstance = Main.soundInstanceMoonlordCry;
									Vector2 vector21 = new Vector2((float)x, (float)y) - Main.player[Main.myPlayer].position;
									soundEffectInstance.Volume = 1f / (1f + vector21.Length());
									Main.soundInstanceMoonlordCry.Pan = single1;
									Main.soundInstanceMoonlordCry.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
									Main.soundInstanceMoonlordCry.Play();
								}
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
#if DEBUG
				Console.WriteLine(ex);
				System.Diagnostics.Debugger.Break();

#endif
			}
		}

		protected Microsoft.Xna.Framework.Color quickAlpha(Microsoft.Xna.Framework.Color oldColor, float Alpha)
		{
			Microsoft.Xna.Framework.Color r = oldColor;
			r.R = (byte)((float)r.R * Alpha);
			r.G = (byte)((float)r.G * Alpha);
			r.B = (byte)((float)r.B * Alpha);
			r.A = (byte)((float)r.A * Alpha);
			return r;
		}

		protected void QuitGame()
		{
			Main.SaveSettings();
			base.Exit();
		}

		protected Microsoft.Xna.Framework.Color randColor()
		{
			int i;
			int num = 0;
			int num1 = 0;
			for (i = 0; num + i + num1 <= 150; i = Main.rand.Next(256))
			{
				num = Main.rand.Next(256);
				num1 = Main.rand.Next(256);
			}
			return new Microsoft.Xna.Framework.Color(num, num1, i, 255);
		}

		public static void RegisterItemAnimation(int index, DrawAnimation animation)
		{
			if (!Main.itemAnimationsRegistered.Contains(index))
			{
				Main.itemAnimationsRegistered.Add(index);
			}
			Main.itemAnimations[index] = animation;
		}

		protected void ReleaseTargets()
		{
			try
			{
				if (!Main.dedServ)
				{
					Main.offScreenRange = 0;
					Main.targetSet = false;
					if (this.waterTarget != null)
					{
						this.waterTarget.Dispose();
					}
					if (this.backWaterTarget != null)
					{
						this.backWaterTarget.Dispose();
					}
					if (this.blackTarget != null)
					{
						this.blackTarget.Dispose();
					}
					if (this.tileTarget != null)
					{
						this.tileTarget.Dispose();
					}
					if (this.tile2Target != null)
					{
						this.tile2Target.Dispose();
					}
					if (this.wallTarget != null)
					{
						this.wallTarget.Dispose();
					}
					if (this.screenTarget != null)
					{
						this.screenTarget.Dispose();
					}
					if (this.backgroundTarget != null)
					{
						this.backgroundTarget.Dispose();
					}
				}
			}
			catch (Exception ex)
			{
#if DEBUG
				Console.WriteLine(ex);
				System.Diagnostics.Debugger.Break();

#endif
			}
		}

		[DllImport("User32", CharSet=CharSet.None, ExactSpelling=false)]
		private static extern int RemoveMenu(IntPtr hMenu, int nPosition, int wFlags);

		protected void RenderBackground()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.backWaterTarget);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			Main.tileBatch.Begin();
			try
			{
				this.drawWaters(true, -1, true);
			}
			catch (Exception ex)
			{
#if DEBUG
				Console.WriteLine(ex);
				System.Diagnostics.Debugger.Break();

#endif
			}
			Main.tileBatch.End();
			Main.spriteBatch.End();
			base.GraphicsDevice.SetRenderTarget(null);
			base.GraphicsDevice.SetRenderTarget(this.backgroundTarget);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			Main.tileBatch.Begin();
			if (!Main.ignoreErrors)
			{
				this.DrawBackground();
			}
			else
			{
				try
				{
					this.DrawBackground();
				}
				catch (Exception exception)
				{
					TimeLogger.DrawException(exception);
				}
			}
			TimeLogger.DetailedDrawReset();
			Main.spriteBatch.End();
			Main.tileBatch.End();
			TimeLogger.DetailedDrawTime(33);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void RenderBlack()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.blackTarget);
			base.GraphicsDevice.DepthStencilState = new DepthStencilState()
			{
				DepthBufferEnable = true
			};
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			this.DrawBlack(false);
			TimeLogger.DetailedDrawReset();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(30);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		public void RenderFrameBuffers()
		{
			Main.spriteBatch.Begin();
			Main.spriteBatch.Draw(this.blackTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(this.backWaterTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(this.wallTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(this.tileTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(this.tile2Target, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.Draw(this.waterTarget, Vector2.Zero, Microsoft.Xna.Framework.Color.White);
			Main.spriteBatch.End();
		}

		protected void RenderTiles()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			this.RenderBlack();
			base.GraphicsDevice.SetRenderTarget(this.tileTarget);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			if (!Main.ignoreErrors)
			{
				this.DrawTiles(true, -1);
			}
			else
			{
				try
				{
					this.DrawTiles(true, -1);
				}
				catch (Exception exception)
				{
					TimeLogger.DrawException(exception);
				}
			}
			TimeLogger.DetailedDrawReset();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(28);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void RenderTiles2()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.tile2Target);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			if (!Main.ignoreErrors)
			{
				this.DrawTiles(false, -1);
			}
			else
			{
				try
				{
					this.DrawTiles(false, -1);
				}
				catch (Exception exception)
				{
					TimeLogger.DrawException(exception);
				}
			}
			TimeLogger.DetailedDrawReset();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(29);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void RenderWalls()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.wallTarget);
			base.GraphicsDevice.DepthStencilState = new DepthStencilState()
			{
				DepthBufferEnable = true
			};
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			Main.tileBatch.Begin();
			if (!Main.ignoreErrors)
			{
				this.DrawWalls();
			}
			else
			{
				try
				{
					this.DrawWalls();
				}
				catch (Exception exception)
				{
					TimeLogger.DrawException(exception);
				}
			}
			TimeLogger.DetailedDrawReset();
			Main.tileBatch.End();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(32);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		protected void RenderWater()
		{
			if (Main.drawToScreen)
			{
				return;
			}
			base.GraphicsDevice.SetRenderTarget(this.waterTarget);
			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
			Main.spriteBatch.Begin();
			Main.tileBatch.Begin();
			try
			{
				this.drawWaters(false, -1, true);
				if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].mech)
				{
					this.DrawWires();
				}
			}
			catch (Exception ex)
			{
#if DEBUG
				Console.WriteLine(ex);
				System.Diagnostics.Debugger.Break();

#endif
			}
			TimeLogger.DetailedDrawReset();
			Main.tileBatch.End();
			Main.spriteBatch.End();
			TimeLogger.DetailedDrawTime(31);
			base.GraphicsDevice.SetRenderTarget(null);
		}

		public static void ReportInvasionProgress(int progress, int progressMax, int icon, int progressWave)
		{
			Main.invasionProgress = progress;
			Main.invasionProgressMax = progressMax;
			Main.invasionProgressIcon = icon;
			Main.invasionProgressWave = progressWave;
			Main.invasionProgressDisplayLeft = 160;
		}

		public static void ResetKeyBindings()
		{
			Main.cUp = "W";
			Main.cDown = "S";
			Main.cLeft = "A";
			Main.cRight = "D";
			Main.cJump = "Space";
			Main.cThrowItem = "T";
			Main.cInv = "Escape";
			Main.cHeal = "H";
			Main.cMana = "J";
			Main.cBuff = "B";
			Main.cHook = "E";
			Main.cTorch = "LeftShift";
			Main.cSmart = "LeftControl";
			Main.cMount = "R";
		}

		public static Vector2 ReverseGravitySupport(Vector2 pos, float height = 0f)
		{
			if (Main.player[Main.myPlayer].gravDir != -1f)
			{
				return pos;
			}
			pos.Y = (float)Main.screenHeight - pos.Y - height;
			return pos;
		}

		public static Microsoft.Xna.Framework.Point ReverseGravitySupport(Microsoft.Xna.Framework.Point pos, int height = 0)
		{
			if (Main.player[Main.myPlayer].gravDir != -1f)
			{
				return pos;
			}
			pos.Y = Main.screenHeight - pos.Y - height;
			return pos;
		}

		public static Microsoft.Xna.Framework.Rectangle ReverseGravitySupport(Microsoft.Xna.Framework.Rectangle box)
		{
			if (Main.player[Main.myPlayer].gravDir != -1f)
			{
				return box;
			}
			box.Y = Main.screenHeight - box.Y - box.Height;
			return box;
		}

		public static Vector3 rgbToHsl(Microsoft.Xna.Framework.Color newColor)
		{
			float single;
			float r = (float)newColor.R;
			float g = (float)newColor.G;
			float b = (float)newColor.B;
			r = r / 255f;
			g = g / 255f;
			b = b / 255f;
			float single1 = Math.Max(r, g);
			single1 = Math.Max(single1, b);
			float single2 = Math.Min(r, g);
			single2 = Math.Min(single2, b);
			float single3 = 0f;
			float single4 = (single1 + single2) / 2f;
			if (single1 != single2)
			{
				float single5 = single1 - single2;
				single = ((double)single4 > 0.5 ? single5 / (2f - single1 - single2) : single5 / (single1 + single2));
				if (single1 == r)
				{
					float single6 = (g - b) / single5;
					float single7 = 0;
					if (g < b)
					{
						single7 = 6;
					}
					single3 = single6 + (float)single7;
				}
				if (single1 == g)
				{
					single3 = (b - r) / single5 + 2f;
				}
				if (single1 == b)
				{
					single3 = (r - g) / single5 + 4f;
				}
				single3 = single3 / 6f;
			}
			else
			{
				float single7 = 0f;
				single = single7;
				single3 = single7;
			}
			return new Vector3(single3, single, single4);
		}

		public static void SaveClothesWindow()
		{
			Main.PlaySound(7, -1, -1, 1);
			Main.clothesWindow = false;
			NetMessage.SendData(4, -1, -1, Main.player[Main.myPlayer].name, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
		}

		public static void SaveRecent()
		{
			Directory.CreateDirectory(Main.SavePath);
			try
			{
				File.SetAttributes(string.Concat(Main.SavePath, Path.DirectorySeparatorChar, "servers.dat"), FileAttributes.Normal);
			}
			catch (Exception ex)
			{
#if DEBUG
				Console.WriteLine(ex);
				System.Diagnostics.Debugger.Break();

#endif
			}
			try
			{
				using (FileStream fileStream = new FileStream(string.Concat(Main.SavePath, Path.DirectorySeparatorChar, "servers.dat"), FileMode.Create))
				{
					using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
					{
						binaryWriter.Write(Main.curRelease);
						for (int i = 0; i < 10; i++)
						{
							binaryWriter.Write(Main.recentWorld[i]);
							binaryWriter.Write(Main.recentIP[i]);
							binaryWriter.Write(Main.recentPort[i]);
						}
					}
				}
			}
			catch (Exception ex)
			{
#if DEBUG
				Console.WriteLine(ex);
				System.Diagnostics.Debugger.Break();

#endif
			}
		}

		public static bool SaveSettings()
		{
			Main.Configuration.Put("SmartCursorToggle", Main.cSmartToggle);
			Main.Configuration.Put("MapEnabled", Main.mapEnabled);
			Main.Configuration.Put("InvasionBarMode", Main.invasionProgressMode);
			Main.Configuration.Put("AutoSave", Main.autoSave);
			Main.Configuration.Put("AutoPause", Main.autoPause);
			Main.Configuration.Put("Language", Lang.lang);
			Main.Configuration.Put("PlacementPreview", Main.placementPreview);
			Main.Configuration.Put("GoreVisualsAllowed", ChildSafety.Disabled);
			Main.Configuration.Put("VolumeSound", Main.soundVolume);
			Main.Configuration.Put("VolumeAmbient", Main.ambientVolume);
			Main.Configuration.Put("VolumeMusic", Main.musicVolume);
			Main.Configuration.Put("KeyUp", Main.cUp);
			Main.Configuration.Put("KeyDown", Main.cDown);
			Main.Configuration.Put("KeyLeft", Main.cLeft);
			Main.Configuration.Put("KeyRight", Main.cRight);
			Main.Configuration.Put("KeyJump", Main.cJump);
			Main.Configuration.Put("KeyThrowItem", Main.cThrowItem);
			Main.Configuration.Put("KeyInventory", Main.cInv);
			Main.Configuration.Put("KeyQuickHeal", Main.cHeal);
			Main.Configuration.Put("KeyQuickMana", Main.cMana);
			Main.Configuration.Put("KeyQuickBuff", Main.cBuff);
			Main.Configuration.Put("KeyUseHook", Main.cHook);
			Main.Configuration.Put("KeyAutoSelect", Main.cTorch);
			Main.Configuration.Put("KeySmartCursor", Main.cSmart);
			Main.Configuration.Put("KeyMount", Main.cMount);
			Main.Configuration.Put("KeyMapStyle", Main.cMapStyle);
			Main.Configuration.Put("KeyFullscreenMap", Main.cMapFull);
			Main.Configuration.Put("KeyMapZoomIn", Main.cMapZoomIn);
			Main.Configuration.Put("KeyMapZoomOut", Main.cMapZoomOut);
			Main.Configuration.Put("KeyMapAlphaUp", Main.cMapAlphaUp);
			Main.Configuration.Put("KeyMapAlphaDown", Main.cMapAlphaDown);
			Main.Configuration.Put("Fullscreen", Main.graphics.IsFullScreen);
			Main.Configuration.Put("WindowMaximized", Main.screenMaximized);
			Main.Configuration.Put("DisplayWidth", Main.graphics.PreferredBackBufferWidth);
			Main.Configuration.Put("DisplayHeight", Main.graphics.PreferredBackBufferHeight);
			Main.Configuration.Put("GraphicsQuality", Main.qaStyle);
			Main.Configuration.Put("BackgroundEnabled", Main.owBack);
			Main.Configuration.Put("FrameSkip", Main.fixedTiming);
			Main.Configuration.Put("LightingMode", Lighting.lightMode);
			Main.Configuration.Put("LightingThreads", Lighting.LightingThreads);
			Main.Configuration.Put("MouseColorR", Main.mouseColor.R);
			Main.Configuration.Put("MouseColorG", Main.mouseColor.G);
			Main.Configuration.Put("MouseColorB", Main.mouseColor.B);
			Main.Configuration.Put("Parallax", Main.caveParallax);
			Main.Configuration.Put("ShowItemText", Main.showItemText);
			Main.Configuration.Put("LastLaunchedVersion", Main.curRelease);
			Main.Configuration.Put("UseSmartCursorForCommonBlocks", Player.SmartCursorSettings.SmartBlocksEnabled);
			return Main.Configuration.Save(true);
		}

		public static void SelectPlayer(PlayerFileData data)
		{
			if (Main._pendingCharacterSelect != null)
			{
				Main._pendingCharacterSelect(data);
				Main._pendingCharacterSelect = null;
				return;
			}
			if (!Main.menuMultiplayer)
			{
				Main.ServerSideCharacter = false;
				Main.myPlayer = 0;
				data.SetAsActive();
				Main.player[Main.myPlayer].position = Vector2.Zero;
				Main.LoadWorlds();
				Main.PlaySound(10, -1, -1, 1);
				Main.menuMode = 6;
				return;
			}
			Main.ServerSideCharacter = false;
			data.SetAsActive();
			Main.PlaySound(10, -1, -1, 1);
			if (Main.autoJoin)
			{
				if (Netplay.SetRemoteIP(Main.getIP))
				{
					Main.menuMode = 10;
					Netplay.StartTcpClient();
				}
				Main.autoJoin = false;
				return;
			}
			if (Main.menuServer)
			{
				Main.LoadWorlds();
				Main.menuMode = 6;
				return;
			}
			Main.menuMode = 13;
			Main.clrInput();
		}

		public static void SetDisplayMode(int width, int height, bool fullscreen)
		{
			int preferredBackBufferWidth;
			int preferredBackBufferHeight;
			if (Main.graphics.IsFullScreen != fullscreen)
			{
				Main.graphics.ToggleFullScreen();
			}
			Main.screenMaximized = ((Form)Control.FromHandle(Main.instance.Window.Handle)).WindowState == FormWindowState.Maximized;
			Form size = (Form)Control.FromHandle(Main.instance.Window.Handle);
			if (!Main.instance.IsActive && (Main.screenMaximized || Main.graphics.IsFullScreen))
			{
				return;
			}
			bool flag = false;
			if (Main.screenMaximized || Main.graphics.IsFullScreen)
			{
				size.MinimumSize = new Size(0, 0);
				if (width > Main.maxScreenW)
				{
					float single = (float)height / (float)width;
					width = Main.maxScreenW;
					height = (int)(single * (float)width);
				}
				if (height > Main.maxScreenH)
				{
					float single1 = (float)width / (float)height;
					height = Main.maxScreenH;
					width = (int)(single1 * (float)height);
				}
				preferredBackBufferWidth = Main.graphics.PreferredBackBufferWidth;
				preferredBackBufferHeight = Main.graphics.PreferredBackBufferHeight;
			}
			else
			{
				size.MinimumSize = new Size(Main.minScreenW, Main.minScreenH);
				width = Math.Min(width, Main.maxScreenW);
				height = Math.Min(height, Main.maxScreenH);
				preferredBackBufferWidth = Main.graphics.GraphicsDevice.Viewport.Width;
				preferredBackBufferHeight = Main.graphics.GraphicsDevice.Viewport.Height;
				flag = (Main.graphics.PreferredBackBufferWidth != Main.graphics.GraphicsDevice.Viewport.Width ? true : Main.graphics.PreferredBackBufferHeight != Main.graphics.GraphicsDevice.Viewport.Height);
			}
			if (!fullscreen && !flag)
			{
				if (size.ClientSize.Width < Main.graphics.PreferredBackBufferWidth)
				{
					width = size.ClientSize.Width;
					flag = true;
				}
				if (size.ClientSize.Height < Main.graphics.PreferredBackBufferHeight)
				{
					height = size.ClientSize.Height;
					flag = true;
				}
			}
			width = width & 2147483646;
			height = height & 2147483646;
			width = Math.Max(width, Main.minScreenW);
			height = Math.Max(height, Main.minScreenH);
			if (width != preferredBackBufferWidth || height != preferredBackBufferHeight || flag)
			{
				Main.mapTime = 0;
				if (Main.gamePaused)
				{
					Main.renderNow = true;
				}
				Main.screenWidth = width;
				Main.screenHeight = height;
				Main.graphics.PreferredBackBufferWidth = Main.screenWidth;
				Main.graphics.PreferredBackBufferHeight = Main.screenHeight;
				Main.graphics.ApplyChanges();
				Main.PendingResolutionWidth = Main.screenWidth;
				Main.PendingResolutionHeight = Main.screenHeight;
				if (!fullscreen)
				{
					size.SendToBack();
					size.BringToFront();
				}
				Lighting.Initialize(true);
				if (!Main.drawToScreen)
				{
					Main.instance.InitTargets();
				}
				UserInterface.ActiveInstance.Recalculate();
				object[] objArray = new object[] { "Resolution changed to: ", width, "x", height, "." };
				Console.WriteLine(string.Concat(objArray));
			}
			if (!Main.graphics.SynchronizeWithVerticalRetrace)
			{
				Main.graphics.SynchronizeWithVerticalRetrace = true;
				Main.graphics.ApplyChanges();
			}
		}

		public static void SetFullScreen(bool fullscreen)
		{
			Main.SetDisplayMode(Main.PendingResolutionWidth, Main.PendingResolutionHeight, fullscreen);
		}

		public void SetNetPlayers(int mPlayers)
		{
			Main.maxNetPlayers = mPlayers;
		}

		public static void SetResolution(int width, int height)
		{
			Main.SetDisplayMode(width, height, Main.graphics.IsFullScreen);
		}

		private static void SetTileValue()
		{
			Main.tileValue[28] = 100;
			Main.tileValue[7] = 200;
			Main.tileValue[166] = 210;
			Main.tileValue[6] = 220;
			Main.tileValue[167] = 230;
			Main.tileValue[9] = 240;
			Main.tileValue[168] = 250;
			Main.tileValue[37] = 300;
			Main.tileValue[22] = 310;
			Main.tileValue[204] = 320;
			Main.tileValue[407] = 350;
			Main.tileValue[8] = 400;
			Main.tileValue[169] = 410;
			Main.tileValue[21] = 500;
			Main.tileValue[107] = 600;
			Main.tileValue[221] = 610;
			Main.tileValue[108] = 620;
			Main.tileValue[222] = 630;
			Main.tileValue[111] = 640;
			Main.tileValue[223] = 650;
			Main.tileValue[211] = 700;
			Main.tileValue[12] = 800;
			Main.tileValue[236] = 810;
		}

		protected void SetTitle()
		{
			base.Window.Title = Lang.title();
		}

		public static void SetupTileMerge()
		{
			int num = 419;
			Main.tileMerge = new bool[num][];
			for (int i = 0; i < (int)Main.tileMerge.Length; i++)
			{
				Main.tileMerge[i] = new bool[num];
			}
		}

		public void SetWorld(string world, bool cloud)
		{
			Main.ActiveWorldFileData = WorldFile.GetAllMetadata(world, cloud);
		}

		public void SetWorldName(string world)
		{
			Main.worldName = world;
		}

		public static Microsoft.Xna.Framework.Color shine(Microsoft.Xna.Framework.Color newColor, int type)
		{
			int r = newColor.R;
			int g = newColor.G;
			int b = newColor.B;
			float single = 0.6f;
			if (type == 25)
			{
				r = (int)((float)newColor.R * 0.95f);
				g = (int)((float)newColor.G * 0.85f);
				b = (int)((double)((float)newColor.B) * 1.1);
			}
			else if (type != 117)
			{
				if (type == 204)
				{
					single = 0.3f + (float)Main.mouseTextColor / 300f;
					r = (int)((float)newColor.R * (1.3f * single));
					if (r > 255)
					{
						r = 255;
					}
					return new Microsoft.Xna.Framework.Color(r, g, b, 255);
				}
				if (type == 211)
				{
					single = 0.3f + (float)Main.mouseTextColor / 300f;
					g = (int)((float)newColor.G * (1.5f * single));
					b = (int)((float)newColor.B * (1.1f * single));
				}
				else if (type == 147 || type == 161)
				{
					r = (int)((float)newColor.R * 1.1f);
					g = (int)((float)newColor.G * 1.12f);
					b = (int)((double)((float)newColor.B) * 1.15);
				}
				else if (type == 163)
				{
					r = (int)((float)newColor.R * 1.05f);
					g = (int)((float)newColor.G * 1.1f);
					b = (int)((double)((float)newColor.B) * 1.15);
				}
				else if (type == 164)
				{
					r = (int)((float)newColor.R * 1.1f);
					g = (int)((float)newColor.G * 1.1f);
					b = (int)((double)((float)newColor.B) * 1.2);
				}
				else if (type == 178)
				{
					single = 0.5f;
					r = (int)((float)newColor.R * (1f + single));
					g = (int)((float)newColor.G * (1f + single));
					b = (int)((float)newColor.B * (1f + single));
				}
				else if (type == 185 || type == 186)
				{
					single = 0.3f;
					r = (int)((float)newColor.R * (1f + single));
					g = (int)((float)newColor.G * (1f + single));
					b = (int)((float)newColor.B * (1f + single));
				}
				else if (type < 262 || type > 268)
				{
					r = (int)((float)newColor.R * (1f + single));
					g = (int)((float)newColor.G * (1f + single));
					b = (int)((float)newColor.B * (1f + single));
				}
				else
				{
					b = b + 100;
					r = r + 100;
					g = g + 100;
				}
			}
			else
			{
				r = (int)((float)newColor.R * 1.1f);
				g = (int)((float)newColor.G * 1f);
				b = (int)((double)((float)newColor.B) * 1.2);
			}
			if (r > 255)
			{
				r = 255;
			}
			if (g > 255)
			{
				g = 255;
			}
			if (b > 255)
			{
				b = 255;
			}
			newColor.R = (byte)r;
			newColor.G = (byte)g;
			newColor.B = (byte)b;
			return new Microsoft.Xna.Framework.Color((int)r, (int)g, (int)b, (int)newColor.A);
		}

		[DllImport("user32.dll", CharSet=CharSet.None, ExactSpelling=false)]
		private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

		public static void snowing()
		{
			if (Main.gamePaused)
			{
				return;
			}
			if (Main.snowTiles > 0 && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16)
			{
				int num = 800 / Main.snowTiles;
				int num1 = (int)(500f * ((float)Main.screenWidth / 1920f));
				num1 = (int)((float)num1 * (1f + 2f * Main.cloudAlpha));
				float single = 1f + 50f * Main.cloudAlpha;
				for (int i = 0; (float)i < single; i++)
				{
					try
					{
						if ((float)Main.snowDust >= (float)num1 * (Main.gfxQuality / 2f + 0.5f) + (float)num1 * 0.1f)
						{
							break;
						}
						else if (Main.rand.Next(num) == 0)
						{
							int x = Main.rand.Next(Main.screenWidth + 1000) - 500;
							int y = (int)Main.screenPosition.Y - Main.rand.Next(50);
							if (Main.player[Main.myPlayer].velocity.Y > 0f)
							{
								y = y - (int)Main.player[Main.myPlayer].velocity.Y;
							}
							if (Main.rand.Next(5) == 0)
							{
								x = Main.rand.Next(500) - 500;
							}
							else if (Main.rand.Next(5) == 0)
							{
								x = Main.rand.Next(500) + Main.screenWidth;
							}
							if (x < 0 || x > Main.screenWidth)
							{
								y = y + Main.rand.Next((int)((double)Main.screenHeight * 0.5)) + (int)((double)Main.screenHeight * 0.1);
							}
							x = x + (int)Main.screenPosition.X;
							int num2 = x / 16;
							int num3 = y / 16;
							if (Main.tile[num2, num3] != null && Main.tile[num2, num3].wall == 0)
							{
								Vector2 vector2 = new Vector2((float)x, (float)y);
								Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color();
								int num4 = Dust.NewDust(vector2, 10, 10, 76, 0f, 0f, 0, color, 1f);
								Dust dust = Main.dust[num4];
								dust.scale = dust.scale + Main.cloudAlpha * 0.2f;
								Main.dust[num4].velocity.Y = 3f + (float)Main.rand.Next(30) * 0.1f;
								Main.dust[num4].velocity.Y = Main.dust[num4].velocity.Y * Main.dust[num4].scale;
								Main.dust[num4].velocity.X = Main.windSpeed + (float)Main.rand.Next(-10, 10) * 0.1f;
								Main.dust[num4].velocity.X = Main.dust[num4].velocity.X + Main.windSpeed * Main.cloudAlpha * 10f;
								Main.dust[num4].velocity.Y = Main.dust[num4].velocity.Y * (1f + 0.3f * Main.cloudAlpha);
								Dust dust1 = Main.dust[num4];
								dust1.scale = dust1.scale + Main.cloudAlpha * 0.2f;
								Dust dust2 = Main.dust[num4];
								dust2.velocity = dust2.velocity * (1f + Main.cloudAlpha * 0.5f);
							}
						}
					}
					catch (Exception ex)
					{
#if DEBUG
						Console.WriteLine(ex);
						System.Diagnostics.Debugger.Break();

#endif
					}
				}
			}
		}

		protected void SortDrawCacheWorms()
		{
			List<int> drawCacheProjsWorms = this.DrawCacheProjsWorms;
			if (drawCacheProjsWorms.Count == 0)
			{
				return;
			}
			List<List<int>> lists = new List<List<int>>();
			for (int i = 0; i < drawCacheProjsWorms.Count; i++)
			{
				int item = drawCacheProjsWorms[i];
				if (Main.projectile[item].type == 628)
				{
					drawCacheProjsWorms.Remove(item);
					List<int> nums = new List<int>();
					nums.Insert(0, item);
					for (int j = (int)Main.projectile[item].ai[0]; !nums.Contains(j) && Main.projectile[j].active && Main.projectile[j].type >= 625 && Main.projectile[j].type <= 627; j = (int)Main.projectile[j].ai[0])
					{
						nums.Insert(0, j);
						drawCacheProjsWorms.Remove(j);
					}
					lists.Add(nums);
					i = -1;
				}
			}
			lists.Add(new List<int>(this.DrawCacheProjsWorms));
			this.DrawCacheProjsWorms.Clear();
			for (int k = 0; k < lists.Count; k++)
			{
				for (int l = 0; l < lists[k].Count; l++)
				{
					this.DrawCacheProjsWorms.Add(lists[k][l]);
				}
			}
			for (int m = 0; m < this.DrawCacheProjsWorms.Count; m++)
			{
				Projectile projectile = Main.projectile[this.DrawCacheProjsWorms[m]];
				if (projectile.type != 625)
				{
					Vector2 center = Main.projectile[(int)projectile.ai[0]].Center - projectile.Center;
					if (center != Vector2.Zero)
					{
						float single = Main.projectile[(int)projectile.ai[0]].scale * 16f;
						float single1 = single - center.Length();
						if (single1 != 0f)
						{
							Projectile center1 = projectile;
							center1.Center = center1.Center + (Vector2.Normalize(center) * -single1);
						}
					}
				}
			}
		}

		public static void startDedInput()
		{
			ThreadPool.QueueUserWorkItem(new WaitCallback(Main.startDedInputCallBack), 1);
		}

		public static void startDedInputCallBack(object threadContext)
		{
			while (!Netplay.disconnect)
			{
				Console.Write(": ");
				string lower = Console.ReadLine();
				if (lower == null)
				{
					Console.WriteLine("Quit");
					WorldFile.saveWorld();
					Netplay.disconnect = true;
					SocialAPI.Shutdown();
					break;
				}
				string str = lower;
				lower = lower.ToLower();
				try
				{
					if (lower == "help")
					{
						Console.WriteLine("Available commands:");
						Console.WriteLine("");
						object[] objArray = new object[] { "help ", '\t', '\t', " Displays a list of commands." };
						Console.WriteLine(string.Concat(objArray));
						Console.WriteLine(string.Concat("playing ", '\t', " Shows the list of players"));
						object[] objArray1 = new object[] { "clear ", '\t', '\t', " Clear the console window." };
						Console.WriteLine(string.Concat(objArray1));
						object[] objArray2 = new object[] { "exit ", '\t', '\t', " Shutdown the server and save." };
						Console.WriteLine(string.Concat(objArray2));
						Console.WriteLine(string.Concat("exit-nosave ", '\t', " Shutdown the server without saving."));
						object[] objArray3 = new object[] { "save ", '\t', '\t', " Save the game world." };
						Console.WriteLine(string.Concat(objArray3));
						Console.WriteLine(string.Concat("kick <player> ", '\t', " Kicks a player from the server."));
						Console.WriteLine(string.Concat("ban <player> ", '\t', " Bans a player from the server."));
						Console.WriteLine(string.Concat("password", '\t', " Show password."));
						Console.WriteLine(string.Concat("password <pass>", '\t', " Change password."));
						object[] objArray4 = new object[] { "version", '\t', '\t', " Print version number." };
						Console.WriteLine(string.Concat(objArray4));
						object[] objArray5 = new object[] { "time", '\t', '\t', " Display game time." };
						Console.WriteLine(string.Concat(objArray5));
						object[] objArray6 = new object[] { "port", '\t', '\t', " Print the listening port." };
						Console.WriteLine(string.Concat(objArray6));
						Console.WriteLine(string.Concat("maxplayers", '\t', " Print the max number of players."));
						Console.WriteLine(string.Concat("say <words>", '\t', " Send a message."));
						object[] objArray7 = new object[] { "motd", '\t', '\t', " Print MOTD." };
						Console.WriteLine(string.Concat(objArray7));
						Console.WriteLine(string.Concat("motd <words>", '\t', " Change MOTD."));
						object[] objArray8 = new object[] { "dawn", '\t', '\t', " Change time to dawn." };
						Console.WriteLine(string.Concat(objArray8));
						object[] objArray9 = new object[] { "noon", '\t', '\t', " Change time to noon." };
						Console.WriteLine(string.Concat(objArray9));
						object[] objArray10 = new object[] { "dusk", '\t', '\t', " Change time to dusk." };
						Console.WriteLine(string.Concat(objArray10));
						Console.WriteLine(string.Concat("midnight", '\t', " Change time to midnight."));
						object[] objArray11 = new object[] { "settle", '\t', '\t', " Settle all water." };
						Console.WriteLine(string.Concat(objArray11));
					}
					else if (lower == "settle")
					{
						if (Liquid.panicMode)
						{
							Console.WriteLine("Water is already settling");
						}
						else
						{
							Liquid.StartPanic();
						}
					}
					else if (lower == "dawn")
					{
						Main.dayTime = true;
						Main.time = 0;
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (lower == "dusk")
					{
						Main.dayTime = false;
						Main.time = 0;
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (lower == "noon")
					{
						Main.dayTime = true;
						Main.time = 27000;
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (lower == "midnight")
					{
						Main.dayTime = false;
						Main.time = 16200;
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
					else if (lower == "exit-nosave")
					{
						Netplay.disconnect = true;
					}
					else if (lower == "exit")
					{
						WorldFile.saveWorld();
						Netplay.disconnect = true;
						SocialAPI.Shutdown();
					}
					else if (lower == "fps")
					{
						if (Main.dedServFPS)
						{
							Main.dedServCount1 = 0;
							Main.dedServCount2 = 0;
							Main.dedServFPS = false;
						}
						else
						{
							Main.dedServFPS = true;
							Main.fpsTimer.Reset();
						}
					}
					else if (lower == "save")
					{
						WorldFile.saveWorld();
					}
					else if (lower == "time")
					{
						string str1 = "AM";
						double num = Main.time;
						if (!Main.dayTime)
						{
							num = num + 54000;
						}
						num = num / 86400 * 24;
						num = num - 7.5 - 12;
						if (num < 0)
						{
							num = num + 24;
						}
						if (num >= 12)
						{
							str1 = "PM";
						}
						int num1 = (int)num;
						double num2 = num - (double)num1;
						num2 = (double)((int)(num2 * 60));
						string str2 = string.Concat(num2);
						if (num2 < 10)
						{
							str2 = string.Concat("0", str2);
						}
						if (num1 > 12)
						{
							num1 = num1 - 12;
						}
						if (num1 == 0)
						{
							num1 = 12;
						}
						object[] objArray12 = new object[] { "Time: ", num1, ":", str2, " ", str1 };
						Console.WriteLine(string.Concat(objArray12));
					}
					else if (lower == "maxplayers")
					{
						Console.WriteLine(string.Concat("Player limit: ", Main.maxNetPlayers));
					}
					else if (lower == "port")
					{
						Console.WriteLine(string.Concat("Port: ", Netplay.ListenPort));
					}
					else if (lower == "version")
					{
						Console.WriteLine(string.Concat("Terraria Server ", Main.versionNumber));
					}
					else if (lower == "clear")
					{
						try
						{
							Console.Clear();
						}
						catch (Exception ex)
						{
#if DEBUG
							Console.WriteLine(ex);
							System.Diagnostics.Debugger.Break();

#endif
						}
					}
					else if (lower == "playing")
					{
						int num3 = 0;
						for (int i = 0; i < 255; i++)
						{
							if (Main.player[i].active)
							{
								num3++;
								object[] remoteAddress = new object[] { Main.player[i].name, " (", Netplay.Clients[i].Socket.GetRemoteAddress(), ")" };
								Console.WriteLine(string.Concat(remoteAddress));
							}
						}
						if (num3 == 0)
						{
							Console.WriteLine("No players connected.");
						}
						else if (num3 != 1)
						{
							Console.WriteLine(string.Concat(num3, " players connected."));
						}
						else
						{
							Console.WriteLine("1 player connected.");
						}
					}
					else if (lower != "")
					{
						if (lower == "motd")
						{
							if (Main.motd != "")
							{
								Console.WriteLine(string.Concat("MOTD: ", Main.motd));
							}
							else
							{
								Console.WriteLine(string.Concat("Welcome to ", Main.worldName, "!"));
							}
						}
						else if (lower.Length >= 5 && lower.Substring(0, 5) == "motd ")
						{
							Main.motd = str.Substring(5);
						}
						else if (lower.Length == 8 && lower.Substring(0, 8) == "password")
						{
							if (Netplay.ServerPassword != "")
							{
								Console.WriteLine(string.Concat("Password: ", Netplay.ServerPassword));
							}
							else
							{
								Console.WriteLine("No password set.");
							}
						}
						else if (lower.Length >= 9 && lower.Substring(0, 9) == "password ")
						{
							string str3 = str.Substring(9);
							if (str3 != "")
							{
								Netplay.ServerPassword = str3;
								Console.WriteLine(string.Concat("Password: ", Netplay.ServerPassword));
							}
							else
							{
								Netplay.ServerPassword = "";
								Console.WriteLine("Password disabled.");
							}
						}
						else if (lower == "say")
						{
							Console.WriteLine("Usage: say <words>");
						}
						else if (lower.Length >= 4 && lower.Substring(0, 4) == "say ")
						{
							string str4 = str.Substring(4);
							if (str4 != "")
							{
								Console.WriteLine(string.Concat("<Server> ", str4));
								NetMessage.SendData(25, -1, -1, string.Concat("<Server> ", str4), 255, 255f, 240f, 20f, 0, 0, 0);
							}
							else
							{
								Console.WriteLine("Usage: say <words>");
							}
						}
						else if (lower.Length == 4 && lower.Substring(0, 4) == "kick")
						{
							Console.WriteLine("Usage: kick <player>");
						}
						else if (lower.Length >= 5 && lower.Substring(0, 5) == "kick ")
						{
							string lower1 = lower.Substring(5);
							lower1 = lower1.ToLower();
							if (lower1 != "")
							{
								for (int j = 0; j < 255; j++)
								{
									if (Main.player[j].active && Main.player[j].name.ToLower() == lower1)
									{
										NetMessage.SendData(2, j, -1, "Kicked from server.", 0, 0f, 0f, 0f, 0, 0, 0);
									}
								}
							}
							else
							{
								Console.WriteLine("Usage: kick <player>");
							}
						}
						else if (lower.Length == 3 && lower.Substring(0, 3) == "ban")
						{
							Console.WriteLine("Usage: ban <player>");
						}
						else if (lower.Length < 4 || !(lower.Substring(0, 4) == "ban "))
						{
							Console.WriteLine("Invalid command.");
						}
						else
						{
							string lower2 = lower.Substring(4);
							lower2 = lower2.ToLower();
							if (lower2 != "")
							{
								for (int k = 0; k < 255; k++)
								{
									if (Main.player[k].active && Main.player[k].name.ToLower() == lower2)
									{
										Netplay.AddBan(k);
										NetMessage.SendData(2, k, -1, "Banned from server.", 0, 0f, 0f, 0f, 0, 0, 0);
									}
								}
							}
							else
							{
								Console.WriteLine("Usage: ban <player>");
							}
						}
					}
				}
				catch
				{
					Console.WriteLine("Invalid command.");
				}
			}
		}

		public static void StartInvasion(int type = 1)
		{
			if (Main.invasionType == 0 && Main.invasionDelay == 0)
			{
				int num = 0;
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && Main.player[i].statLifeMax >= 200)
					{
						num++;
					}
				}
				if (num > 0)
				{
					Main.invasionType = type;
					Main.invasionSize = 80 + 40 * num;
					if (type == 3)
					{
						Main.invasionSize = Main.invasionSize + 40 + 20 * num;
					}
					if (type == 4)
					{
						Main.invasionSize = 160 + 40 * num;
					}
					Main.invasionSizeStart = Main.invasionSize;
					Main.invasionProgress = 0;
					Main.invasionProgressIcon = type + 2;
					Main.invasionProgressWave = 0;
					Main.invasionProgressMax = Main.invasionSizeStart;
					Main.invasionWarn = 0;
					if (type == 4)
					{
						Main.invasionX = (double)(Main.spawnTileX - 1);
						Main.invasionWarn = 2;
						return;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.invasionX = 0;
						return;
					}
					Main.invasionX = (double)Main.maxTilesX;
				}
			}
		}

		public static void startPumpkinMoon()
		{
			Main.pumpkinMoon = true;
			Main.snowMoon = false;
			Main.bloodMoon = false;
			if (Main.netMode != 1)
			{
				NPC.waveKills = 0f;
				NPC.waveCount = 1;
				string str = string.Concat("First Wave: ", Main.npcName[305]);
				if (Main.netMode == 0)
				{
					Main.NewText(str, 175, 75, 255, false);
					return;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, str, 255, 175f, 75f, 255f, 0, 0, 0);
				}
			}
		}

		private static void StartRain()
		{
			int num = 86400;
			int num1 = num / 24;
			Main.rainTime = Main.rand.Next(num1 * 8, num);
			if (Main.rand.Next(3) == 0)
			{
				Main.rainTime = Main.rainTime + Main.rand.Next(0, num1);
			}
			if (Main.rand.Next(4) == 0)
			{
				Main.rainTime = Main.rainTime + Main.rand.Next(0, num1 * 2);
			}
			if (Main.rand.Next(5) == 0)
			{
				Main.rainTime = Main.rainTime + Main.rand.Next(0, num1 * 2);
			}
			if (Main.rand.Next(6) == 0)
			{
				Main.rainTime = Main.rainTime + Main.rand.Next(0, num1 * 3);
			}
			if (Main.rand.Next(7) == 0)
			{
				Main.rainTime = Main.rainTime + Main.rand.Next(0, num1 * 4);
			}
			if (Main.rand.Next(8) == 0)
			{
				Main.rainTime = Main.rainTime + Main.rand.Next(0, num1 * 5);
			}
			float single = 1f;
			if (Main.rand.Next(2) == 0)
			{
				single = single + 0.05f;
			}
			if (Main.rand.Next(3) == 0)
			{
				single = single + 0.1f;
			}
			if (Main.rand.Next(4) == 0)
			{
				single = single + 0.15f;
			}
			if (Main.rand.Next(5) == 0)
			{
				single = single + 0.2f;
			}
			Main.rainTime = (int)((float)Main.rainTime * single);
			Main.ChangeRain();
			Main.raining = true;
		}

		public static void StartSlimeRain(bool announce = true)
		{
			if (Main.slimeRain)
			{
				return;
			}
			if (Main.netMode == 1)
			{
				Main.slimeRainTime = 54000;
				Main.slimeRain = true;
				SkyManager instance = SkyManager.Instance;
				Vector2 vector2 = new Vector2();
				instance.Activate("Slime", vector2, new object[0]);
				return;
			}
			if (Main.raining)
			{
				return;
			}
			Main.slimeRainTime = (double)Main.rand.Next(32400, 54000);
			Main.slimeRain = true;
			Main.slimeRainKillCount = 0;
			if (Main.netMode == 0)
			{
				SkyManager skyManager = SkyManager.Instance;
				Vector2 vector21 = new Vector2();
				skyManager.Activate("Slime", vector21, new object[0]);
				if (announce)
				{
					Main.slimeWarningTime = Main.slimeWarningDelay;
					return;
				}
			}
			else if (announce)
			{
				Main.slimeWarningTime = Main.slimeWarningDelay;
				NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		public static void startSnowMoon()
		{
			Main.snowMoon = true;
			Main.pumpkinMoon = false;
			Main.bloodMoon = false;
			if (Main.netMode != 1)
			{
				NPC.waveKills = 0f;
				NPC.waveCount = 1;
				string str = "First Wave: Zombie Elf and Gingerbread Man";
				if (Main.netMode == 0)
				{
					Main.NewText(str, 175, 75, 255, false);
					return;
				}
				if (Main.netMode == 2)
				{
					NetMessage.SendData(25, -1, -1, str, 255, 175f, 75f, 255f, 0, 0, 0);
				}
			}
		}

		public static void stopMoonEvent()
		{
			if (Main.pumpkinMoon)
			{
				Main.pumpkinMoon = false;
				if (Main.netMode != 1)
				{
					NPC.waveKills = 0f;
					NPC.waveCount = 0;
				}
			}
			if (Main.snowMoon)
			{
				Main.snowMoon = false;
				if (Main.netMode != 1)
				{
					NPC.waveKills = 0f;
					NPC.waveCount = 0;
				}
			}
		}

		private static void StopRain()
		{
			Main.rainTime = 0;
			Main.raining = false;
			Main.maxRaining = 0f;
		}

		public static void StopSlimeRain(bool announce = true)
		{
			if (!Main.slimeRain)
			{
				return;
			}
			if (Main.netMode == 1)
			{
				Main.slimeRainTime = 0;
				Main.slimeRain = false;
				SkyManager.Instance.Deactivate("Slime", new object[0]);
				return;
			}
			int num = 86400 * 7;
			if (Main.hardMode)
			{
				num = num * 2;
			}
			Main.slimeRainTime = (double)(-Main.rand.Next(3024, 6048) * 100);
			Main.slimeRain = false;
			if (Main.netMode == 0)
			{
				if (announce)
				{
					Main.slimeWarningTime = Main.slimeWarningDelay;
				}
				SkyManager.Instance.Deactivate("Slime", new object[0]);
				return;
			}
			if (announce)
			{
				Main.slimeWarningTime = Main.slimeWarningDelay;
				NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		public static void Sundialing()
		{
			if (Main.sundialCooldown == 0)
			{
				if (Main.netMode == 1)
				{
					NetMessage.SendData(51, -1, -1, "", Main.myPlayer, 3f, 0f, 0f, 0, 0, 0);
					return;
				}
				Main.fastForwardTime = true;
				Main.sundialCooldown = 8;
				NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
			}
		}

		public static void SwitchNetMode(int mode)
		{
			if (mode >= 0 && mode <= 2)
			{
				Main._targetNetMode = mode;
				Main._hasPendingNetmodeChange = true;
			}
		}

		public static void SyncAnInvasion(int toWho)
		{
			if (Main.snowMoon)
			{
				int num = (new int[] { 0, 25, 15, 10, 30, 100, 160, 180, 200, 250, 300, 375, 450, 525, 675, 850, 1025, 1325, 1550, 2000, 0 })[NPC.waveCount];
				NetMessage.SendData(78, toWho, -1, "", (int)NPC.waveKills, (float)num, 1f, (float)NPC.waveCount, 0, 0, 0);
				return;
			}
			if (Main.pumpkinMoon)
			{
				int num1 = (new int[] { 0, 25, 40, 50, 80, 100, 160, 180, 200, 250, 300, 375, 450, 525, 675, 0 })[NPC.waveCount];
				NetMessage.SendData(78, toWho, -1, "", (int)NPC.waveKills, (float)num1, 2f, (float)NPC.waveCount, 0, 0, 0);
				return;
			}
			if (Main.invasionType > 0)
			{
				int num2 = 1;
				if (Main.invasionType != 0 && Main.invasionSizeStart != 0)
				{
					num2 = Main.invasionSizeStart;
				}
				NetMessage.SendData(78, toWho, -1, "", Main.invasionSizeStart - Main.invasionSize, (float)num2, (float)(Main.invasionType + 2), 0f, 0, 0, 0);
			}
		}

		public static void TeleportEffect(Microsoft.Xna.Framework.Rectangle effectRect, int Style, int extraInfo = 0)
		{
			if (Style == 0)
			{
				Main.PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 6);
				int width = effectRect.Width * effectRect.Height / 5;
				for (int i = 0; i < width; i++)
				{
					Vector2 vector2 = new Vector2((float)effectRect.X, (float)effectRect.Y);
					int num = effectRect.Width;
					int height = effectRect.Height;
					Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color();
					int num1 = Dust.NewDust(vector2, num, height, 159, 0f, 0f, 0, color, 1f);
					Main.dust[num1].scale = (float)Main.rand.Next(20, 70) * 0.01f;
					if (i < 10)
					{
						Dust dust = Main.dust[num1];
						dust.scale = dust.scale + 0.25f;
					}
					if (i < 5)
					{
						Dust dust1 = Main.dust[num1];
						dust1.scale = dust1.scale + 0.25f;
					}
				}
				return;
			}
			if (Style == 1)
			{
				Main.PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 8);
				int width1 = effectRect.Width * effectRect.Height / 5;
				for (int j = 0; j < width1; j++)
				{
					Vector2 vector21 = new Vector2((float)effectRect.X, (float)effectRect.Y);
					int width2 = effectRect.Width;
					int height1 = effectRect.Height;
					Microsoft.Xna.Framework.Color color1 = new Microsoft.Xna.Framework.Color();
					int num2 = Dust.NewDust(vector21, width2, height1, 164, 0f, 0f, 0, color1, 1f);
					Main.dust[num2].scale = (float)Main.rand.Next(20, 70) * 0.01f;
					if (j < 10)
					{
						Dust dust2 = Main.dust[num2];
						dust2.scale = dust2.scale + 0.25f;
					}
					if (j < 5)
					{
						Dust dust3 = Main.dust[num2];
						dust3.scale = dust3.scale + 0.25f;
					}
				}
				return;
			}
			if (Style == 2)
			{
				for (int k = 0; k < 50; k++)
				{
					Dust dust4 = Main.dust[Dust.NewDust(new Vector2((float)effectRect.X, (float)effectRect.Y), effectRect.Width, effectRect.Height, 58, 0f, 0f, 150, Microsoft.Xna.Framework.Color.GhostWhite, 1.2f)];
					dust4.velocity = dust4.velocity * 0.5f;
				}
				return;
			}
			if (Style != 3)
			{
				if (Style == 4)
				{
					Main.PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 8);
					int width3 = effectRect.Width * effectRect.Height / 5;
					for (int l = 0; l < width3; l++)
					{
						Dust[] dustArray = Main.dust;
						Vector2 vector22 = effectRect.TopLeft();
						int num3 = effectRect.Width;
						int height2 = effectRect.Height;
						Microsoft.Xna.Framework.Color color2 = new Microsoft.Xna.Framework.Color();
						Dust portalColor = dustArray[Dust.NewDust(vector22, num3, height2, 263, 0f, 0f, 0, color2, 1f)];
						portalColor.color = PortalHelper.GetPortalColor(extraInfo);
						portalColor.noLight = true;
						portalColor.noGravity = true;
						portalColor.scale = 1.2f;
						portalColor.fadeIn = 0.4f;
						portalColor.color.A = 255;
					}
				}
				return;
			}
			Main.PlaySound(2, effectRect.X + effectRect.Width / 2, effectRect.Y + effectRect.Height / 2, 6);
			for (int m = 0; m < 50; m++)
			{
				Vector2 vector23 = new Vector2((float)effectRect.X, (float)effectRect.Y);
				int width4 = effectRect.Width;
				int height3 = effectRect.Height;
				Microsoft.Xna.Framework.Color color3 = new Microsoft.Xna.Framework.Color();
				int num4 = Dust.NewDust(vector23, width4, height3, 180, 0f, 0f, 0, color3, 1f);
				Main.dust[num4].noGravity = true;
				for (int n = 0; n < 5; n++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust dust5 = Main.dust[num4];
						dust5.velocity = dust5.velocity * 0.75f;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					Dust dust6 = Main.dust[num4];
					dust6.velocity = dust6.velocity * 2f;
					Dust dust7 = Main.dust[num4];
					dust7.scale = dust7.scale * 1.2f;
				}
				if (Main.rand.Next(3) == 0)
				{
					Dust dust8 = Main.dust[num4];
					dust8.velocity = dust8.velocity * 2f;
					Dust dust9 = Main.dust[num4];
					dust9.scale = dust9.scale * 1.2f;
				}
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num4].fadeIn = (float)Main.rand.Next(75, 100) * 0.01f;
					Main.dust[num4].scale = (float)Main.rand.Next(25, 75) * 0.01f;
				}
				Dust dust10 = Main.dust[num4];
				dust10.scale = dust10.scale * 0.8f;
			}
		}

		protected void tileColorCheck(int t, int c)
		{
			this.LoadTiles(t);
			if (c >= Main.numTileColors)
			{
				return;
			}
			if (!Main.tileAltTextureInit[t, c])
			{
				Main.tileAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.tileTexture[t].Width, Main.tileTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.tileAltTextureInit[t, c] = true;
			}
			if (Main.tileAltTexture[t, c].IsContentLost)
			{
				Main.tileAltTextureDrawn[t, c] = false;
			}
			if (!Main.tileAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(Main.tileAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int num = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[num].Apply();
				}
				else if (c <= 0 || c >= 13 || t != 0 && t != 2 && t != 5 && t != 23 && t != 59 && t != 60 && t != 70 && t != 109 && t != 199)
				{
					Main.tileShader.CurrentTechnique.Passes[c].Apply();
				}
				else
				{
					int num1 = c + 27;
					Main.tileShader.CurrentTechnique.Passes[num1].Apply();
				}
				Main.spriteBatch.Draw(Main.tileTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.tileTexture[t].Width, Main.tileTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				Main.tileAltTextureDrawn[t, c] = true;
			}
		}

		public static void ToggleFullScreen()
		{
			Main.SetFullScreen(!Main.graphics.IsFullScreen);
		}

		protected void treeColorCheck(int t, int c)
		{
			if (!Main.treeAltTextureInit[t, c])
			{
				Main.treeTopAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.treeTopTexture[t].Width, Main.treeTopTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.treeBranchAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.treeBranchTexture[t].Width, Main.treeBranchTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.treeAltTextureInit[t, c] = true;
			}
			if (Main.treeTopAltTexture[t, c].IsContentLost || Main.treeBranchAltTexture[t, c].IsContentLost)
			{
				Main.treeAltTextureDrawn[t, c] = false;
			}
			if (!Main.treeAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(Main.treeTopAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int num = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[num].Apply();
				}
				else if (c <= 0 || c >= 13)
				{
					Main.tileShader.CurrentTechnique.Passes[c].Apply();
				}
				else
				{
					int num1 = c + 27;
					Main.tileShader.CurrentTechnique.Passes[num1].Apply();
				}
				Main.spriteBatch.Draw(Main.treeTopTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.treeTopTexture[t].Width, Main.treeTopTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				base.GraphicsDevice.SetRenderTarget(Main.treeBranchAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int num2 = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[num2].Apply();
				}
				else if (c <= 0 || c >= 13)
				{
					Main.tileShader.CurrentTechnique.Passes[c].Apply();
				}
				else
				{
					int num3 = c + 27;
					Main.tileShader.CurrentTechnique.Passes[num3].Apply();
				}
				Main.spriteBatch.Draw(Main.treeBranchTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.treeBranchTexture[t].Width, Main.treeBranchTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				Main.treeAltTextureDrawn[t, c] = true;
			}
		}

		protected override void UnloadContent()
		{
		}

		protected override void Update(GameTime gameTime)
		{
			if (Main._largeMethodFix)
			{
				Main._largeMethodFix = false;
				(new Projectile()).AI();
				(new NPC()).AI();
			}
			if (Main._hasPendingNetmodeChange)
			{
				Main.netMode = Main._targetNetMode;
				Main._hasPendingNetmodeChange = false;
			}
			Main.tileNoFail[384] = true;
			if (CaptureManager.Instance.IsCapturing)
			{
				return;
			}
			if (Main.ActivePlayerFileData != null)
			{
				Main.ActivePlayerFileData.UpdatePlayTimer();
			}
			Main.ignoreErrors = true;
			if (!Main.expertMode)
			{
				Main.damageMultiplier = 1f;
				Main.knockBackMultiplier = 1f;
			}
			else
			{
				Main.damageMultiplier = Main.expertDamage;
				Main.knockBackMultiplier = Main.expertKnockBack;
			}
			if (!Main.GlobalTimerPaused)
			{
				Main.GlobalTime = Main.GlobalTime + 0.0166666675f;
				if (Main.GlobalTime > 3600f)
				{
					Main.GlobalTime = Main.GlobalTime - 3600f;
				}
			}
			Main.gameInactive = !base.IsActive;
			if (Main.netMode == 2)
			{
				Main.cloudAlpha = Main.maxRaining;
			}
			if (base.IsActive && Main.cloudAlpha > 0f)
			{
				Rain.MakeRain();
			}
			if (Main.netMode != 1)
			{
				this.updateCloudLayer();
			}
			this.UpdateWeather();
			Main.Ambience();
			if (Main.netMode != 2)
			{
				if (!Main.ignoreErrors)
				{
					Main.snowing();
				}
				else
				{
					try
					{
						Main.snowing();
					}
					catch (Exception ex)
					{
#if DEBUG
						Console.WriteLine(ex);
						System.Diagnostics.Debugger.Break();

#endif
					}
				}
			}
			if (Main.chTitle)
			{
				Main.chTitle = false;
				this.SetTitle();
			}
			Stopwatch stopwatch = new Stopwatch();
			stopwatch.Start();
			WorldGen.destroyObject = false;
			if (Main.gameMenu)
			{
				Main.mapFullscreen = false;
			}
			if (Main.dedServ)
			{
				if (!Main.dedServFPS)
				{
					if (Main.fpsTimer.IsRunning)
					{
						Main.fpsTimer.Stop();
					}
					Main.updateTime = 0;
				}
				else
				{
					Main.updateTime = Main.updateTime + 1;
					if (!Main.fpsTimer.IsRunning)
					{
						Main.fpsTimer.Restart();
					}
					if (Main.fpsTimer.ElapsedMilliseconds >= (long)1000)
					{
						Main.dedServCount1 = Main.dedServCount1 + Main.updateTime;
						Main.dedServCount2 = Main.dedServCount2 + 1;
						float single = (float)Main.dedServCount1 / (float)Main.dedServCount2;
						object[] objArray = new object[] { Main.updateTime, "  (", single, ")" };
						Console.WriteLine(string.Concat(objArray));
						Main.updateTime = 0;
						Main.fpsTimer.Restart();
					}
				}
			}
			if (!Main.dedServ)
			{
				if (!Main.superFast)
				{
					if (!Main.fixedTiming)
					{
						base.IsFixedTimeStep = true;
						Main.graphics.SynchronizeWithVerticalRetrace = true;
					}
					else if (!base.IsActive)
					{
						base.IsFixedTimeStep = true;
					}
					else
					{
						base.IsFixedTimeStep = false;
					}
					Main.graphics.SynchronizeWithVerticalRetrace = true;
				}
				else
				{
					base.IsFixedTimeStep = false;
					Main.graphics.SynchronizeWithVerticalRetrace = false;
				}
				if (Main.treeMntBG[1] == 94 || Main.treeMntBG[1] >= 114 && Main.treeMntBG[1] <= 116)
				{
					Main.bgFrameCounter[0] = Main.bgFrameCounter[0] + 1;
					if (Main.bgFrameCounter[0] >= 6)
					{
						Main.bgFrameCounter[0] = 0;
						Main.bgFrame[0] = Main.bgFrame[0] + 1;
						if (Main.bgFrame[0] >= 4)
						{
							Main.bgFrame[0] = 0;
						}
					}
					if (Main.bgFrame[0] == 0)
					{
						Main.treeMntBG[1] = 94;
					}
					else if (Main.bgFrame[0] == 1)
					{
						Main.treeMntBG[1] = 114;
					}
					else if (Main.bgFrame[0] != 2)
					{
						Main.treeMntBG[1] = 116;
					}
					else
					{
						Main.treeMntBG[1] = 115;
					}
					if (Main.bgFrame[0] == 0)
					{
						Main.treeMntBG[0] = 93;
					}
					else if (Main.bgFrame[0] == 1)
					{
						Main.treeMntBG[0] = 168;
					}
					else if (Main.bgFrame[0] != 2)
					{
						Main.treeMntBG[0] = 170;
					}
					else
					{
						Main.treeMntBG[0] = 169;
					}
				}
				if (Main.treeMntBG[1] >= 180 && Main.treeMntBG[1] <= 183)
				{
					Main.bgFrameCounter[0] = Main.bgFrameCounter[0] + 1;
					if (Main.bgFrameCounter[0] >= 6)
					{
						Main.bgFrameCounter[0] = 0;
						Main.bgFrame[0] = Main.bgFrame[0] + 1;
						if (Main.bgFrame[0] >= 4)
						{
							Main.bgFrame[0] = 0;
						}
					}
					if (Main.bgFrame[0] == 0)
					{
						Main.treeMntBG[1] = 180;
					}
					else if (Main.bgFrame[0] == 1)
					{
						Main.treeMntBG[1] = 181;
					}
					else if (Main.bgFrame[0] != 2)
					{
						Main.treeMntBG[1] = 183;
					}
					else
					{
						Main.treeMntBG[1] = 182;
					}
				}
				Animation.UpdateAll();
				AchievementCompleteUI.Update();
				this.UpdateMusic();
				if (Main.showSplash)
				{
					return;
				}
				if (!Main.gameMenu && Main.netMode == 1)
				{
					if (!Main.saveTime.IsRunning)
					{
						Main.saveTime.Start();
					}
					if (Main.saveTime.ElapsedMilliseconds > (long)300000)
					{
						Main.saveTime.Reset();
						WorldGen.saveToonWhilePlaying();
					}
				}
				else if (!Main.gameMenu && Main.autoSave)
				{
					if (!Main.saveTime.IsRunning)
					{
						Main.saveTime.Start();
					}
					if (Main.saveTime.ElapsedMilliseconds > (long)600000)
					{
						Main.saveTime.Reset();
						WorldGen.saveToonWhilePlaying();
						WorldGen.saveAndPlay();
					}
				}
				else if (Main.saveTime.IsRunning)
				{
					Main.saveTime.Stop();
				}
				if (Main.teamCooldown > 0)
				{
					Main.teamCooldown = Main.teamCooldown - 1;
				}
				Main.updateTime = Main.updateTime + 1;
				if (Main.fpsTimer.ElapsedMilliseconds >= (long)1000)
				{
					if ((float)Main.fpsCount >= 30f + 30f * Main.gfxQuality)
					{
						Main.gfxQuality = Main.gfxQuality + Main.gfxRate;
						Main.gfxRate = Main.gfxRate + 0.005f;
					}
					else if ((float)Main.fpsCount < 29f + 30f * Main.gfxQuality)
					{
						Main.gfxRate = 0.01f;
						Main.gfxQuality = Main.gfxQuality - 0.1f;
					}
					if (Main.gfxQuality < 0f)
					{
						Main.gfxQuality = 0f;
					}
					if (Main.gfxQuality > 1f)
					{
						Main.gfxQuality = 1f;
					}
					if (Main.maxQ && base.IsActive)
					{
						Main.gfxQuality = 1f;
						Main.maxQ = false;
					}
					Main.updateRate = Main.uCount;
					Main.frameRate = Main.fpsCount;
					Main.fpsCount = 0;
					Main.fpsTimer.Restart();
					Main.updateTime = 0;
					Main.drawTime = 0;
					Main.uCount = 0;
					if ((double)Main.gfxQuality >= 0.8)
					{
						Main.mapTimeMax = 0;
					}
					else
					{
						Main.mapTimeMax = (int)((1f - Main.gfxQuality) * 60f);
					}
					int num = Main.netMode;
				}
				if (Main.fixedTiming)
				{
					float single1 = 16f;
					float elapsedMilliseconds = (float)Main.updateTimer.ElapsedMilliseconds;
					if (elapsedMilliseconds + Main.uCarry < single1 && !Main.superFast)
					{
						Main.drawSkip = true;
						return;
					}
					Main.uCarry = Main.uCarry + (elapsedMilliseconds - single1);
					if (Main.uCarry > 1000f)
					{
						Main.uCarry = 1000f;
					}
					Main.updateTimer.Restart();
				}
				Main.uCount = Main.uCount + 1;
				Main.drawSkip = false;
				if (Main.qaStyle == 1)
				{
					Main.gfxQuality = 1f;
				}
				else if (Main.qaStyle == 2)
				{
					Main.gfxQuality = 0.5f;
				}
				else if (Main.qaStyle == 3)
				{
					Main.gfxQuality = 0f;
				}
				Main.numDust = (int)(6000f * (Main.gfxQuality * 0.7f + 0.3f));
				if ((double)Main.gfxQuality < 0.9)
				{
					Main.numDust = (int)((float)Main.numDust * Main.gfxQuality);
				}
				if (Main.numDust < 1000)
				{
					Main.numDust = 1000;
				}
				Gore.goreTime = (int)(600f * Main.gfxQuality);
				Liquid.maxLiquid = (int)(2500f + 2500f * Main.gfxQuality);
				Liquid.cycles = (int)(17f - 10f * Main.gfxQuality);
				if (Main.superFast)
				{
					Main.graphics.SynchronizeWithVerticalRetrace = false;
					Main.drawSkip = false;
				}
				if ((double)Main.gfxQuality < 0.2)
				{
					Lighting.maxRenderCount = 8;
				}
				else if ((double)Main.gfxQuality < 0.4)
				{
					Lighting.maxRenderCount = 7;
				}
				else if ((double)Main.gfxQuality < 0.6)
				{
					Lighting.maxRenderCount = 6;
				}
				else if ((double)Main.gfxQuality >= 0.8)
				{
					Lighting.maxRenderCount = 4;
				}
				else
				{
					Lighting.maxRenderCount = 5;
				}
				if (Liquid.quickSettle)
				{
					Liquid.maxLiquid = Liquid.resLiquid;
					Liquid.cycles = 1;
				}
				Main.hasFocus = base.IsActive;
				if (!Main.gameMenu || Main.netMode == 2)
				{
					WorldFile.tempRaining = Main.raining;
					WorldFile.tempRainTime = Main.rainTime;
					WorldFile.tempMaxRain = Main.maxRaining;
				}
				if (!base.IsActive && Main.netMode == 0)
				{
					base.IsMouseVisible = true;
					if (Main.netMode != 2 && Main.myPlayer >= 0)
					{
						Main.player[Main.myPlayer].delayUseItem = true;
					}
					Main.mouseLeftRelease = false;
					Main.mouseRightRelease = false;
					if (Main.gameMenu)
					{
						Main.UpdateMenu();
					}
					Main.gamePaused = true;
					return;
				}
				base.IsMouseVisible = false;
				EmoteBubble.UpdateAll();
				ScreenObstruction.Update();
				ScreenDarkness.Update();
				MoonlordDeathDrama.Update();
				Main.CursorColor();
				Main.mouseTextColor = (byte)(Main.mouseTextColor + (byte)Main.mouseTextColorChange);
				if (Main.mouseTextColor >= 250)
				{
					Main.mouseTextColorChange = -4;
				}
				if (Main.mouseTextColor <= 175)
				{
					Main.mouseTextColorChange = 4;
				}
				Main.demonTorch = Main.demonTorch + (float)Main.demonTorchDir * 0.01f;
				if (Main.demonTorch > 1f)
				{
					Main.demonTorch = 1f;
					Main.demonTorchDir = -1;
				}
				if (Main.demonTorch < 0f)
				{
					Main.demonTorch = 0f;
					Main.demonTorchDir = 1;
				}
				Main.martianLight = Main.martianLight + (float)Main.martianLightDir * 0.015f;
				if (Main.martianLight > 1f)
				{
					Main.martianLight = 1f;
					Main.martianLightDir = -1;
				}
				if (Main.martianLight < 0f)
				{
					Main.martianLight = 0f;
					Main.martianLightDir = 1;
				}
				int num1 = 7;
				if (this.DiscoStyle == 0)
				{
					Main.DiscoG = Main.DiscoG + num1;
					if (Main.DiscoG >= 255)
					{
						Main.DiscoG = 255;
						Main discoStyle = this;
						discoStyle.DiscoStyle = discoStyle.DiscoStyle + 1;
					}
				}
				if (this.DiscoStyle == 1)
				{
					Main.DiscoR = Main.DiscoR - num1;
					if (Main.DiscoR <= 0)
					{
						Main.DiscoR = 0;
						Main main = this;
						main.DiscoStyle = main.DiscoStyle + 1;
					}
				}
				if (this.DiscoStyle == 2)
				{
					Main.DiscoB = Main.DiscoB + num1;
					if (Main.DiscoB >= 255)
					{
						Main.DiscoB = 255;
						Main discoStyle1 = this;
						discoStyle1.DiscoStyle = discoStyle1.DiscoStyle + 1;
					}
				}
				if (this.DiscoStyle == 3)
				{
					Main.DiscoG = Main.DiscoG - num1;
					if (Main.DiscoG <= 0)
					{
						Main.DiscoG = 0;
						Main main1 = this;
						main1.DiscoStyle = main1.DiscoStyle + 1;
					}
				}
				if (this.DiscoStyle == 4)
				{
					Main.DiscoR = Main.DiscoR + num1;
					if (Main.DiscoR >= 255)
					{
						Main.DiscoR = 255;
						Main discoStyle2 = this;
						discoStyle2.DiscoStyle = discoStyle2.DiscoStyle + 1;
					}
				}
				if (this.DiscoStyle == 5)
				{
					Main.DiscoB = Main.DiscoB - num1;
					if (Main.DiscoB <= 0)
					{
						Main.DiscoB = 0;
						this.DiscoStyle = 0;
					}
				}
				if (Main.gFadeDir != 1)
				{
					Main.gFader = Main.gFader - 0.1f;
					Main.gFade = (byte)Main.gFader;
					if (Main.gFade < 100)
					{
						Main.gFadeDir = 1;
					}
				}
				else
				{
					Main.gFader = Main.gFader + 0.1f;
					Main.gFade = (byte)Main.gFader;
					if (Main.gFade > 150)
					{
						Main.gFadeDir = 0;
					}
				}
				Main.wFrCounter = Main.wFrCounter + Main.windSpeed * 2f;
				if (Main.wFrCounter > 4f)
				{
					Main.wFrCounter = 0f;
					Main.wFrame = Main.wFrame + 1f;
				}
				if (Main.wFrCounter < 0f)
				{
					Main.wFrCounter = 4f;
					Main.wFrame = Main.wFrame - 1f;
				}
				if (Main.wFrame > 16f)
				{
					Main.wFrame = 1f;
				}
				if (Main.wFrame < 1f)
				{
					Main.wFrame = 16f;
				}
				this.waterfallManager.UpdateFrame();
				Main.wallFrameCounter[136] = (byte)(Main.wallFrameCounter[136] + 1);
				if (Main.wallFrameCounter[136] >= 5)
				{
					Main.wallFrameCounter[136] = 0;
					Main.wallFrame[136] = (byte)(Main.wallFrame[136] + 1);
					if (Main.wallFrame[136] > 7)
					{
						Main.wallFrame[136] = 0;
					}
				}
				Main.wallFrameCounter[137] = (byte)(Main.wallFrameCounter[137] + 1);
				if (Main.wallFrameCounter[137] >= 10)
				{
					Main.wallFrameCounter[137] = 0;
					Main.wallFrame[137] = (byte)(Main.wallFrame[137] + 1);
					if (Main.wallFrame[137] > 7)
					{
						Main.wallFrame[137] = 0;
					}
				}
				Main.wallFrameCounter[172] = (byte)(Main.wallFrameCounter[172] + 1);
				if (Main.wallFrameCounter[172] >= 10)
				{
					Main.wallFrameCounter[172] = 0;
					Main.wallFrame[172] = (byte)(Main.wallFrame[172] + 1);
					if (Main.wallFrame[172] > 7)
					{
						Main.wallFrame[172] = 0;
					}
				}
				Main.wallFrameCounter[168] = (byte)(Main.wallFrameCounter[168] + 1);
				if (Main.wallFrameCounter[168] >= 5)
				{
					Main.wallFrameCounter[168] = 0;
					Main.wallFrame[168] = (byte)(Main.wallFrame[168] + 1);
					if (Main.wallFrame[168] > 7)
					{
						Main.wallFrame[168] = 0;
					}
				}
				Main.wallFrameCounter[169] = (byte)(Main.wallFrameCounter[169] + 1);
				if (Main.wallFrameCounter[169] >= 5)
				{
					Main.wallFrameCounter[169] = 0;
					Main.wallFrame[169] = (byte)(Main.wallFrame[169] + 1);
					if (Main.wallFrame[169] > 7)
					{
						Main.wallFrame[169] = 0;
					}
				}
				Main.wallFrameCounter[144] = (byte)(Main.wallFrameCounter[144] + 1);
				int num2 = 5;
				int num3 = 10;
				if (Main.wallFrameCounter[144] < num2)
				{
					Main.wallFrame[144] = 0;
				}
				else if (Main.wallFrameCounter[144] < num2)
				{
					Main.wallFrame[144] = 1;
				}
				else if (Main.wallFrameCounter[144] < num2 * 2)
				{
					Main.wallFrame[144] = 2;
				}
				else if (Main.wallFrameCounter[144] < num2 * 3)
				{
					Main.wallFrame[144] = 3;
				}
				else if (Main.wallFrameCounter[144] < num2 * 4)
				{
					Main.wallFrame[144] = 4;
				}
				else if (Main.wallFrameCounter[144] < num2 * 5)
				{
					Main.wallFrame[144] = 5;
				}
				else if (Main.wallFrameCounter[144] < num2 * 6)
				{
					Main.wallFrame[144] = 6;
				}
				else if (Main.wallFrameCounter[144] < num2 * 7)
				{
					Main.wallFrame[144] = 7;
				}
				else if (Main.wallFrameCounter[144] < num2 * (8 + num3))
				{
					Main.wallFrame[144] = 8;
				}
				else if (Main.wallFrameCounter[144] < num2 * (9 + num3))
				{
					Main.wallFrame[144] = 7;
				}
				else if (Main.wallFrameCounter[144] < num2 * (10 + num3))
				{
					Main.wallFrame[144] = 6;
				}
				else if (Main.wallFrameCounter[144] < num2 * (11 + num3))
				{
					Main.wallFrame[144] = 5;
				}
				else if (Main.wallFrameCounter[144] < num2 * (12 + num3))
				{
					Main.wallFrame[144] = 4;
				}
				else if (Main.wallFrameCounter[144] < num2 * (13 + num3))
				{
					Main.wallFrame[144] = 3;
				}
				else if (Main.wallFrameCounter[144] < num2 * (14 + num3))
				{
					Main.wallFrame[144] = 2;
				}
				else if (Main.wallFrameCounter[144] >= num2 * (15 + num3))
				{
					Main.wallFrame[144] = 0;
					if (Main.wallFrameCounter[144] > num2 * (16 + num3 * 2))
					{
						Main.wallFrameCounter[144] = 0;
					}
				}
				else
				{
					Main.wallFrame[144] = 1;
				}
				Main.tileFrameCounter[12] = Main.tileFrameCounter[12] + 1;
				if (Main.tileFrameCounter[12] > 5)
				{
					Main.tileFrameCounter[12] = 0;
					Main.tileFrame[12] = Main.tileFrame[12] + 1;
					if (Main.tileFrame[12] >= 10)
					{
						Main.tileFrame[12] = 0;
					}
				}
				Main.tileFrameCounter[17] = Main.tileFrameCounter[17] + 1;
				if (Main.tileFrameCounter[17] > 5)
				{
					Main.tileFrameCounter[17] = 0;
					Main.tileFrame[17] = Main.tileFrame[17] + 1;
					if (Main.tileFrame[17] >= 12)
					{
						Main.tileFrame[17] = 0;
					}
				}
				int num4 = Main.tileFrameCounter[133] + 1;
				int num5 = num4;
				Main.tileFrameCounter[133] = num4;
				if (num5 >= 4)
				{
					Main.tileFrameCounter[133] = 0;
					int num6 = Main.tileFrame[133] + 1;
					int num7 = num6;
					Main.tileFrame[133] = num6;
					if (num7 >= 6)
					{
						Main.tileFrame[133] = 0;
					}
				}
				Main.tileFrameCounter[31] = Main.tileFrameCounter[31] + 1;
				if (Main.tileFrameCounter[31] > 10)
				{
					Main.tileFrameCounter[31] = 0;
					Main.tileFrame[31] = Main.tileFrame[31] + 1;
					if (Main.tileFrame[31] > 1)
					{
						Main.tileFrame[31] = 0;
					}
				}
				Main.tileFrameCounter[77] = Main.tileFrameCounter[77] + 1;
				if (Main.tileFrameCounter[77] > 5)
				{
					Main.tileFrameCounter[77] = 0;
					Main.tileFrame[77] = Main.tileFrame[77] + 1;
					if (Main.tileFrame[77] >= 12)
					{
						Main.tileFrame[77] = 0;
					}
				}
				Main.tileFrameCounter[106] = Main.tileFrameCounter[106] + 1;
				if (Main.tileFrameCounter[106] > 4)
				{
					Main.tileFrameCounter[106] = 0;
					Main.tileFrame[106] = Main.tileFrame[106] + 1;
					if (Main.tileFrame[106] >= 2)
					{
						Main.tileFrame[106] = 0;
					}
				}
				Main.tileFrameCounter[207] = Main.tileFrameCounter[207] + 1;
				if (Main.tileFrameCounter[207] > 4)
				{
					Main.tileFrameCounter[207] = 0;
					Main.tileFrame[207] = Main.tileFrame[207] + 1;
					if (Main.tileFrame[207] >= 6)
					{
						Main.tileFrame[207] = 0;
					}
				}
				Main.tileFrameCounter[215] = Main.tileFrameCounter[215] + 1;
				if (Main.tileFrameCounter[215] >= 4)
				{
					Main.tileFrameCounter[215] = 0;
					Main.tileFrame[215] = Main.tileFrame[215] + 1;
					if (Main.tileFrame[215] >= 8)
					{
						Main.tileFrame[215] = 0;
					}
				}
				Main.tileFrameCounter[217] = Main.tileFrameCounter[217] + 1;
				if (Main.tileFrameCounter[217] > 4)
				{
					Main.tileFrameCounter[217] = 0;
					Main.tileFrame[217] = Main.tileFrame[217] + 1;
					if (Main.tileFrame[217] >= 5)
					{
						Main.tileFrame[217] = 0;
					}
				}
				Main.tileFrameCounter[218] = Main.tileFrameCounter[218] + 1;
				if (Main.tileFrameCounter[218] > 4)
				{
					Main.tileFrameCounter[218] = 0;
					Main.tileFrame[218] = Main.tileFrame[218] + 1;
					if (Main.tileFrame[218] >= 2)
					{
						Main.tileFrame[218] = 0;
					}
				}
				Main.tileFrameCounter[219] = Main.tileFrameCounter[219] + 1;
				if (Main.tileFrameCounter[219] > 4)
				{
					Main.tileFrameCounter[219] = 0;
					Main.tileFrame[219] = Main.tileFrame[219] + 1;
					if (Main.tileFrame[219] >= 10)
					{
						Main.tileFrame[219] = 0;
					}
				}
				Main.tileFrameCounter[220] = Main.tileFrameCounter[220] + 1;
				if (Main.tileFrameCounter[220] > 4)
				{
					Main.tileFrameCounter[220] = 0;
					Main.tileFrame[220] = Main.tileFrame[220] + 1;
					if (Main.tileFrame[220] >= 4)
					{
						Main.tileFrame[220] = 0;
					}
				}
				Main.tileFrameCounter[231] = Main.tileFrameCounter[231] + 1;
				if (Main.tileFrameCounter[231] > 16)
				{
					Main.tileFrameCounter[231] = 0;
					Main.tileFrame[231] = Main.tileFrame[231] + 1;
					if (Main.tileFrame[231] >= 7)
					{
						Main.tileFrame[231] = 0;
					}
				}
				Main.tileFrameCounter[235] = Main.tileFrameCounter[235] + 1;
				if (Main.tileFrameCounter[235] > 20)
				{
					Main.tileFrameCounter[235] = 0;
					Main.tileFrame[235] = Main.tileFrame[235] + 1;
					if (Main.tileFrame[235] >= 4)
					{
						Main.tileFrame[235] = 0;
					}
					if (Main.tileFrame[235] <= 1)
					{
						Main.tileLighted[235] = false;
					}
					else
					{
						Main.tileLighted[235] = true;
					}
				}
				Main.tileFrameCounter[238] = Main.tileFrameCounter[238] + 1;
				if (Main.tileFrameCounter[238] > 20)
				{
					Main.tileFrameCounter[238] = 0;
					Main.tileFrame[238] = Main.tileFrame[238] + 1;
					if (Main.tileFrame[238] >= 4)
					{
						Main.tileFrame[238] = 0;
					}
				}
				Main.tileFrameCounter[243] = Main.tileFrameCounter[243] + 1;
				if (Main.tileFrameCounter[243] > 4)
				{
					Main.tileFrameCounter[243] = 0;
					Main.tileFrame[243] = Main.tileFrame[243] + 1;
					if (Main.tileFrame[243] >= 6)
					{
						Main.tileFrame[243] = 0;
					}
				}
				Main.tileFrameCounter[244] = Main.tileFrameCounter[244] + 1;
				if (Main.tileFrameCounter[244] > 4)
				{
					Main.tileFrameCounter[244] = 0;
					Main.tileFrame[244] = Main.tileFrame[244] + 1;
					if (Main.tileFrame[244] >= 6)
					{
						Main.tileFrame[244] = 0;
					}
				}
				Main.tileFrameCounter[247] = Main.tileFrameCounter[247] + 1;
				if (Main.tileFrameCounter[247] > 4)
				{
					Main.tileFrameCounter[247] = 0;
					Main.tileFrame[247] = Main.tileFrame[247] + 1;
					if (Main.tileFrame[247] > 7)
					{
						Main.tileFrame[247] = 0;
					}
				}
				Main.tileFrameCounter[96] = Main.tileFrameCounter[96] + 1;
				if (Main.tileFrameCounter[96] > 4)
				{
					Main.tileFrameCounter[96] = 0;
					Main.tileFrame[96] = Main.tileFrame[96] + 1;
					if (Main.tileFrame[96] > 3)
					{
						Main.tileFrame[96] = 0;
					}
				}
				Main.tileFrameCounter[171] = Main.tileFrameCounter[171] + 1;
				if (Main.tileFrameCounter[171] > 16)
				{
					Main.tileFrameCounter[171] = 0;
					Main.tileFrame[171] = Main.tileFrame[171] + 1;
					if (Main.tileFrame[171] > 3)
					{
						Main.tileFrame[171] = 0;
					}
				}
				Main.tileFrameCounter[270] = Main.tileFrameCounter[270] + 1;
				if (Main.tileFrameCounter[270] > 8)
				{
					Main.tileFrameCounter[270] = 0;
					Main.tileFrame[270] = Main.tileFrame[270] + 1;
					if (Main.tileFrame[270] > 5)
					{
						Main.tileFrame[270] = 0;
					}
				}
				Main.tileFrame[271] = Main.tileFrame[270];
				Main.tileFrameCounter[272] = Main.tileFrameCounter[272] + 1;
				if (Main.tileFrameCounter[272] >= 10)
				{
					Main.tileFrameCounter[272] = 0;
					Main.tileFrame[272] = Main.tileFrame[272] + 1;
					if (Main.tileFrame[272] > 1)
					{
						Main.tileFrame[272] = 0;
					}
				}
				Main.tileFrameCounter[300] = Main.tileFrameCounter[300] + 1;
				if (Main.tileFrameCounter[300] >= 5)
				{
					Main.tileFrameCounter[300] = 0;
					Main.tileFrame[300] = Main.tileFrame[300] + 1;
					if (Main.tileFrame[300] > 6)
					{
						Main.tileFrame[300] = 0;
					}
				}
				Main.tileFrameCounter[301] = Main.tileFrameCounter[301] + 1;
				if (Main.tileFrameCounter[301] >= 5)
				{
					Main.tileFrameCounter[301] = 0;
					Main.tileFrame[301] = Main.tileFrame[301] + 1;
					if (Main.tileFrame[301] > 7)
					{
						Main.tileFrame[301] = 0;
					}
				}
				Main.tileFrameCounter[302] = Main.tileFrameCounter[302] + 1;
				if (Main.tileFrameCounter[302] >= 5)
				{
					Main.tileFrameCounter[302] = 0;
					Main.tileFrame[302] = Main.tileFrame[302] + 1;
					if (Main.tileFrame[302] > 3)
					{
						Main.tileFrame[302] = 0;
					}
				}
				Main.tileFrameCounter[303] = Main.tileFrameCounter[303] + 1;
				if (Main.tileFrameCounter[303] >= 5)
				{
					Main.tileFrameCounter[303] = 0;
					Main.tileFrame[303] = Main.tileFrame[303] + 1;
					if (Main.tileFrame[303] > 4)
					{
						Main.tileFrame[303] = 0;
					}
				}
				Main.tileFrameCounter[305] = Main.tileFrameCounter[305] + 1;
				if (Main.tileFrameCounter[305] >= 5)
				{
					Main.tileFrameCounter[305] = 0;
					Main.tileFrame[305] = Main.tileFrame[305] + 1;
					if (Main.tileFrame[305] > 11)
					{
						Main.tileFrame[305] = 0;
					}
				}
				Main.tileFrameCounter[306] = Main.tileFrameCounter[306] + 1;
				if (Main.tileFrameCounter[306] >= 5)
				{
					Main.tileFrameCounter[306] = 0;
					Main.tileFrame[306] = Main.tileFrame[306] + 1;
					if (Main.tileFrame[306] > 11)
					{
						Main.tileFrame[306] = 0;
					}
				}
				Main.tileFrameCounter[307] = Main.tileFrameCounter[307] + 1;
				if (Main.tileFrameCounter[307] >= 5)
				{
					Main.tileFrameCounter[307] = 0;
					Main.tileFrame[307] = Main.tileFrame[307] + 1;
					if (Main.tileFrame[307] > 1)
					{
						Main.tileFrame[307] = 0;
					}
				}
				Main.tileFrameCounter[308] = Main.tileFrameCounter[308] + 1;
				if (Main.tileFrameCounter[308] >= 5)
				{
					Main.tileFrameCounter[308] = 0;
					Main.tileFrame[308] = Main.tileFrame[308] + 1;
					if (Main.tileFrame[308] > 7)
					{
						Main.tileFrame[308] = 0;
					}
				}
				Main.tileFrameCounter[314] = Main.tileFrameCounter[314] + 1;
				if (Main.tileFrameCounter[314] >= 10)
				{
					Main.tileFrameCounter[314] = 0;
					Main.tileFrame[314] = Main.tileFrame[314] + 1;
					if (Main.tileFrame[314] > 4)
					{
						Main.tileFrame[314] = 0;
					}
				}
				Main.tileFrameCounter[326] = Main.tileFrameCounter[326] + 1;
				if (Main.tileFrameCounter[326] >= 5)
				{
					Main.tileFrameCounter[326] = 0;
					Main.tileFrame[326] = Main.tileFrame[326] + 1;
					if (Main.tileFrame[326] > 7)
					{
						Main.tileFrame[326] = 0;
					}
				}
				Main.tileFrameCounter[327] = Main.tileFrameCounter[327] + 1;
				if (Main.tileFrameCounter[327] >= 10)
				{
					Main.tileFrameCounter[327] = 0;
					Main.tileFrame[327] = Main.tileFrame[327] + 1;
					if (Main.tileFrame[327] > 7)
					{
						Main.tileFrame[327] = 0;
					}
				}
				Main.tileFrameCounter[345] = Main.tileFrameCounter[345] + 1;
				if (Main.tileFrameCounter[345] >= 10)
				{
					Main.tileFrameCounter[345] = 0;
					Main.tileFrame[345] = Main.tileFrame[345] + 1;
					if (Main.tileFrame[345] > 7)
					{
						Main.tileFrame[345] = 0;
					}
				}
				Main.tileFrameCounter[336] = Main.tileFrameCounter[336] + 1;
				if (Main.tileFrameCounter[336] >= 5)
				{
					Main.tileFrameCounter[336] = 0;
					Main.tileFrame[336] = Main.tileFrame[336] + 1;
					if (Main.tileFrame[336] > 3)
					{
						Main.tileFrame[336] = 0;
					}
				}
				Main.tileFrameCounter[328] = Main.tileFrameCounter[328] + 1;
				if (Main.tileFrameCounter[328] >= 5)
				{
					Main.tileFrameCounter[328] = 0;
					Main.tileFrame[328] = Main.tileFrame[328] + 1;
					if (Main.tileFrame[328] > 7)
					{
						Main.tileFrame[328] = 0;
					}
				}
				Main.tileFrameCounter[329] = Main.tileFrameCounter[329] + 1;
				if (Main.tileFrameCounter[329] >= 5)
				{
					Main.tileFrameCounter[329] = 0;
					Main.tileFrame[329] = Main.tileFrame[329] + 1;
					if (Main.tileFrame[329] > 7)
					{
						Main.tileFrame[329] = 0;
					}
				}
				for (int i = 340; i <= 344; i++)
				{
					Main.tileFrameCounter[i] = Main.tileFrameCounter[i] + 1;
					if (Main.tileFrameCounter[i] >= 5)
					{
						Main.tileFrameCounter[i] = 0;
						Main.tileFrame[i] = Main.tileFrame[i] + 1;
						if (Main.tileFrame[i] > 3)
						{
							Main.tileFrame[i] = 0;
						}
					}
				}
				Main.tileFrameCounter[351] = Main.tileFrameCounter[351] + 1;
				if (Main.tileFrameCounter[351] >= 5)
				{
					Main.tileFrameCounter[351] = 0;
					Main.tileFrame[351] = Main.tileFrame[351] + 1;
					if (Main.tileFrame[351] > 2)
					{
						Main.tileFrame[351] = 0;
					}
				}
				Main.tileFrameCounter[354] = Main.tileFrameCounter[354] + 1;
				if (Main.tileFrameCounter[354] >= 5)
				{
					Main.tileFrameCounter[354] = 0;
					Main.tileFrame[354] = Main.tileFrame[354] + 1;
					if (Main.tileFrame[354] >= 8)
					{
						Main.tileFrame[354] = 0;
					}
				}
				Main.tileFrame[355] = Main.tileFrame[354];
				Main.tileFrameCounter[377] = Main.tileFrameCounter[377] + 1;
				if (Main.tileFrameCounter[377] >= 5)
				{
					Main.tileFrameCounter[377] = 0;
					Main.tileFrame[377] = Main.tileFrame[377] + 1;
					if (Main.tileFrame[377] >= 4)
					{
						Main.tileFrame[377] = 0;
					}
				}
				Main.tileFrameCounter[379] = Main.tileFrameCounter[379] + 1;
				if (Main.tileFrameCounter[379] >= 10)
				{
					Main.tileFrameCounter[379] = 0;
					Main.tileFrame[379] = Main.tileFrame[379] + 1;
					if (Main.tileFrame[379] >= 4)
					{
						Main.tileFrame[379] = 0;
					}
				}
				int num8 = Main.tileFrameCounter[390] + 1;
				int num9 = num8;
				Main.tileFrameCounter[390] = num8;
				if (num9 >= 8)
				{
					Main.tileFrameCounter[390] = 0;
					int num10 = Main.tileFrame[390] + 1;
					int num11 = num10;
					Main.tileFrame[390] = num10;
					if (num11 >= 7)
					{
						Main.tileFrame[390] = 0;
					}
				}
				int num12 = Main.tileFrameCounter[228] + 1;
				int num13 = num12;
				Main.tileFrameCounter[228] = num12;
				if (num13 >= 5)
				{
					Main.tileFrameCounter[228] = 0;
					int num14 = Main.tileFrame[228] + 1;
					int num15 = num14;
					Main.tileFrame[228] = num14;
					if (num15 >= 3)
					{
						Main.tileFrame[228] = 0;
					}
				}
				int num16 = Main.tileFrameCounter[405] + 1;
				int num17 = num16;
				Main.tileFrameCounter[405] = num16;
				if (num17 >= 5)
				{
					Main.tileFrameCounter[405] = 0;
					int num18 = Main.tileFrame[405] + 1;
					int num19 = num18;
					Main.tileFrame[405] = num18;
					if (num19 >= 8)
					{
						Main.tileFrame[405] = 0;
					}
				}
				int num20 = Main.tileFrameCounter[406] + 1;
				int num21 = num20;
				Main.tileFrameCounter[406] = num20;
				if (num21 >= 8)
				{
					Main.tileFrameCounter[406] = 0;
					int num22 = Main.tileFrame[406] + 1;
					int num23 = num22;
					Main.tileFrame[406] = num22;
					if (num23 >= 6)
					{
						Main.tileFrame[406] = 0;
					}
				}
				int num24 = Main.tileFrame[412] + 1;
				int num25 = num24;
				Main.tileFrame[412] = num24;
				if (num25 >= 240)
				{
					Main.tileFrame[412] = 0;
				}
				int num26 = Main.tileFrameCounter[410] + 1;
				num5 = num26;
				Main.tileFrameCounter[410] = num26;
				if (num5 >= 8)
				{
					Main.tileFrameCounter[410] = 0;
					int num27 = Main.tileFrame[410] + 1;
					num5 = num27;
					Main.tileFrame[410] = num27;
					if (num5 >= 8)
					{
						Main.tileFrame[410] = 0;
					}
				}
				Main.CritterCages();
				Main.UpdateDrawAnimations();
				if (!Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F10) || Main.chatMode || Main.editSign || Main.editChest)
				{
					Main.frameRelease = true;
				}
				else
				{
					if (Main.frameRelease)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (!Main.showFrameRate)
						{
							Main.showFrameRate = true;
						}
						else
						{
							Main.showFrameRate = false;
						}
					}
					Main.frameRelease = false;
				}
				if (!Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F9) || Main.chatMode || Main.editSign || Main.editChest)
				{
					Main.RGBRelease = true;
				}
				else
				{
					if (Main.RGBRelease)
					{
						Main.PlaySound(12, -1, -1, 1);
						Lighting.NextLightMode();
					}
					Main.RGBRelease = false;
				}
				if (!Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F8) || Main.chatMode || Main.editSign || Main.editChest)
				{
					Main.netRelease = true;
				}
				else
				{
					if (Main.netRelease)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (!Main.netDiag)
						{
							Main.netDiag = true;
						}
						else
						{
							Main.netDiag = false;
						}
					}
					Main.netRelease = false;
				}
				if (!Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F7) || Main.chatMode || Main.editSign || Main.editChest)
				{
					Main.drawRelease = true;
				}
				else
				{
					if (Main.drawRelease)
					{
						Main.PlaySound(12, -1, -1, 1);
						if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt))
						{
							TimeLogger.Start();
						}
						else if (!Main.drawDiag)
						{
							Main.drawDiag = true;
						}
						else
						{
							Main.drawDiag = false;
						}
					}
					Main.drawRelease = false;
				}
				if (!Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F11))
				{
					Main.releaseUI = true;
				}
				else
				{
					if (Main.releaseUI)
					{
						if (!Main.hideUI)
						{
							Main.hideUI = true;
						}
						else
						{
							Main.hideUI = false;
						}
					}
					Main.releaseUI = false;
				}
				if ((Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt)) && Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Main.hasFocus)
				{
					if (Main.toggleFullscreen)
					{
						Main.ToggleFullScreen();
						Main.chatRelease = false;
					}
					Main.toggleFullscreen = false;
				}
				else
				{
					Main.toggleFullscreen = true;
				}
				if (!Main.gamePad || Main.gameMenu)
				{
					Main.oldMouseState = Main.mouseState;
					Main.oldMouseWheel = Main.mouseState.ScrollWheelValue;
					Main.mouseState = Mouse.GetState();
					Main.lastMouseX = Main.mouseX;
					Main.lastMouseY = Main.mouseY;
					Main.mouseX = Main.mouseState.X;
					Main.mouseY = Main.mouseState.Y;
					Main.mouseLeft = false;
					Main.mouseRight = false;
					if (base.IsActive)
					{
						if (!UserInterface.ActiveInstance.IsElementUnderMouse())
						{
							if (Main.mouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Released)
							{
								Main._isMouseLeftConsumedByUI = false;
							}
							if (!Main._isMouseLeftConsumedByUI)
							{
								if (Main.mouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
								{
									Main.mouseLeft = true;
								}
								if (Main.mouseState.RightButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed)
								{
									Main.mouseRight = true;
								}
							}
						}
						else
						{
							Main.oldMouseWheel = Main.mouseState.ScrollWheelValue;
							Main._isMouseLeftConsumedByUI = true;
						}
					}
				}
				Main.keyState = Keyboard.GetState();
				if (Main.editSign)
				{
					Main.chatMode = false;
				}
				if (!Main.chatMode)
				{
					Main.startChatLine = 0;
				}
				if (Main.chatMode)
				{
					Main.showCount = (int)((float)(Main.screenHeight / 3) / Main.fontMouseText.MeasureString("1").Y) - 1;
					if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Up))
					{
						Main.startChatLine = Main.startChatLine + 1;
						if (Main.startChatLine + Main.showCount >= Main.numChatLines - 1)
						{
							Main.startChatLine = Main.numChatLines - Main.showCount - 1;
						}
						if (Main.chatLine[Main.startChatLine + Main.showCount].text == "")
						{
							Main.startChatLine = Main.startChatLine - 1;
						}
					}
					else if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Down))
					{
						Main.startChatLine = Main.startChatLine - 1;
						if (Main.startChatLine < 0)
						{
							Main.startChatLine = 0;
						}
					}
					if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
					{
						Main.chatMode = false;
					}
					string str = Main.chatText;
					Main.chatText = Main.GetInputText(Main.chatText);
					int num28 = 470;
					num28 = Main.screenWidth - 330;
					if (str != Main.chatText)
					{
						while (ChatManager.GetStringSize(Main.fontMouseText, Main.chatText, Vector2.One, -1f).X > (float)num28)
						{
							Main.chatText = Main.chatText.Substring(0, Main.chatText.Length - 1);
						}
					}
					if (str != Main.chatText)
					{
						Main.PlaySound(12, -1, -1, 1);
					}
					if (Main.inputTextEnter && Main.chatRelease)
					{
						if (Main.chatText != "")
						{
							NetMessage.SendData(25, -1, -1, Main.chatText, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
						}
						if (Main.netMode == 0 && Main.chatText != "")
						{
							Microsoft.Xna.Framework.Color white = Microsoft.Xna.Framework.Color.White;
							if (Main.player[Main.myPlayer].difficulty == 2)
							{
								white = Main.hcColor;
							}
							else if (Main.player[Main.myPlayer].difficulty == 1)
							{
								white = Main.mcColor;
							}
							string str1 = Main.chatText;
							str1 = string.Concat(NameTagHandler.GenerateTag(Main.player[Main.myPlayer].name), " ", Main.chatText);
							Main.player[Main.myPlayer].chatOverhead.NewMessage(Main.chatText, Main.chatLength / 2);
							Main.NewText(str1, white.R, white.G, white.B, false);
						}
						Main.chatText = "";
						Main.chatMode = false;
						Main.chatRelease = false;
						Main.player[Main.myPlayer].releaseHook = false;
						Main.player[Main.myPlayer].releaseThrow = false;
						Main.PlaySound(11, -1, -1, 1);
					}
				}
				if (!Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) || Main.netMode != 1 || Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) || Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) || !Main.hasFocus)
				{
					Main.chatRelease = true;
				}
				else
				{
					if (Main.chatRelease && !Main.chatMode && !Main.editSign && !Main.editChest && !Main.gameMenu && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
					{
						Main.PlaySound(10, -1, -1, 1);
						Main.chatMode = true;
						Main.clrInput();
						Main.chatText = "";
					}
					Main.chatRelease = false;
				}
				if (Main.gameMenu)
				{
					Main.UpdateMenu();
					if (Main.netMode != 2)
					{
						return;
					}
					Main.gamePaused = false;
				}
				Main.CheckInvasionProgressDisplay();
			}
			if (Main.netMode == 1)
			{
				for (int j = 0; j < 59; j++)
				{
					if (Main.player[Main.myPlayer].inventory[j].IsNotTheSameAs(Main.clientPlayer.inventory[j]))
					{
						NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].inventory[j].name, Main.myPlayer, (float)j, (float)Main.player[Main.myPlayer].inventory[j].prefix, 0f, 0, 0, 0);
					}
				}
				for (int k = 0; k < (int)Main.player[Main.myPlayer].armor.Length; k++)
				{
					if (Main.player[Main.myPlayer].armor[k].IsNotTheSameAs(Main.clientPlayer.armor[k]))
					{
						NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].armor[k].name, Main.myPlayer, (float)(59 + k), (float)Main.player[Main.myPlayer].armor[k].prefix, 0f, 0, 0, 0);
					}
				}
				for (int l = 0; l < (int)Main.player[Main.myPlayer].miscEquips.Length; l++)
				{
					if (Main.player[Main.myPlayer].miscEquips[l].IsNotTheSameAs(Main.clientPlayer.miscEquips[l]))
					{
						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + (int)Main.player[Main.myPlayer].armor.Length + (int)Main.player[Main.myPlayer].dye.Length + 1 + l), (float)Main.player[Main.myPlayer].miscEquips[l].prefix, 0f, 0, 0, 0);
					}
				}
				for (int m = 0; m < (int)Main.player[Main.myPlayer].miscDyes.Length; m++)
				{
					if (Main.player[Main.myPlayer].miscDyes[m].IsNotTheSameAs(Main.clientPlayer.miscDyes[m]))
					{
						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + (int)Main.player[Main.myPlayer].armor.Length + (int)Main.player[Main.myPlayer].dye.Length + (int)Main.player[Main.myPlayer].miscEquips.Length + 1 + m), (float)Main.player[Main.myPlayer].miscDyes[m].prefix, 0f, 0, 0, 0);
					}
				}
				for (int n = 0; n < (int)Main.player[Main.myPlayer].bank.item.Length; n++)
				{
					if (Main.player[Main.myPlayer].bank.item[n].IsNotTheSameAs(Main.clientPlayer.bank.item[n]))
					{
						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + (int)Main.player[Main.myPlayer].armor.Length + (int)Main.player[Main.myPlayer].dye.Length + (int)Main.player[Main.myPlayer].miscEquips.Length + (int)Main.player[Main.myPlayer].miscDyes.Length + 1 + n), (float)Main.player[Main.myPlayer].bank.item[n].prefix, 0f, 0, 0, 0);
					}
				}
				for (int o = 0; o < (int)Main.player[Main.myPlayer].bank2.item.Length; o++)
				{
					if (Main.player[Main.myPlayer].bank2.item[o].IsNotTheSameAs(Main.clientPlayer.bank2.item[o]))
					{
						NetMessage.SendData(5, -1, -1, "", Main.myPlayer, (float)(58 + (int)Main.player[Main.myPlayer].armor.Length + (int)Main.player[Main.myPlayer].dye.Length + (int)Main.player[Main.myPlayer].miscEquips.Length + (int)Main.player[Main.myPlayer].miscDyes.Length + (int)Main.player[Main.myPlayer].bank.item.Length + 1 + o), (float)Main.player[Main.myPlayer].bank2.item[o].prefix, 0f, 0, 0, 0);
					}
				}
				for (int p = 0; p < (int)Main.player[Main.myPlayer].dye.Length; p++)
				{
					if (Main.player[Main.myPlayer].dye[p].IsNotTheSameAs(Main.clientPlayer.dye[p]))
					{
						NetMessage.SendData(5, -1, -1, Main.player[Main.myPlayer].dye[0].name, Main.myPlayer, (float)(58 + (int)Main.player[Main.myPlayer].armor.Length + 1 + p), (float)Main.player[Main.myPlayer].dye[p].prefix, 0f, 0, 0, 0);
					}
				}
				if (Main.player[Main.myPlayer].chest != Main.clientPlayer.chest && Main.player[Main.myPlayer].chest < 0)
				{
					if (!Main.player[Main.myPlayer].editedChestName)
					{
						NetMessage.SendData(33, -1, -1, "", Main.player[Main.myPlayer].chest, 0f, 0f, 0f, 0, 0, 0);
					}
					else
					{
						if (Main.chest[Main.clientPlayer.chest] == null)
						{
							NetMessage.SendData(33, -1, -1, "", Main.player[Main.myPlayer].chest, 0f, 0f, 0f, 0, 0, 0);
						}
						else
						{
							NetMessage.SendData(33, -1, -1, Main.chest[Main.clientPlayer.chest].name, Main.player[Main.myPlayer].chest, 1f, 0f, 0f, 0, 0, 0);
						}
						Main.player[Main.myPlayer].editedChestName = false;
					}
				}
				if (Main.player[Main.myPlayer].talkNPC != Main.clientPlayer.talkNPC)
				{
					NetMessage.SendData(40, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
				bool flag = false;
				if (Main.player[Main.myPlayer].zone1 != Main.clientPlayer.zone1)
				{
					flag = true;
				}
				if (Main.player[Main.myPlayer].zone2 != Main.clientPlayer.zone2)
				{
					flag = true;
				}
				if (flag)
				{
					NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
				if (Main.player[Main.myPlayer].statLife != Main.clientPlayer.statLife || Main.player[Main.myPlayer].statLifeMax != Main.clientPlayer.statLifeMax)
				{
					Main.player[Main.myPlayer].netLife = true;
				}
				if (Main.player[Main.myPlayer].netLifeTime > 0)
				{
					Player player = Main.player[Main.myPlayer];
					player.netLifeTime = player.netLifeTime - 1;
				}
				else if (Main.player[Main.myPlayer].netLife)
				{
					Main.player[Main.myPlayer].netLife = false;
					Main.player[Main.myPlayer].netLifeTime = 60;
					NetMessage.SendData(16, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
				if (Main.player[Main.myPlayer].statMana != Main.clientPlayer.statMana || Main.player[Main.myPlayer].statManaMax != Main.clientPlayer.statManaMax)
				{
					Main.player[Main.myPlayer].netMana = true;
				}
				if (Main.player[Main.myPlayer].netManaTime > 0)
				{
					Player player1 = Main.player[Main.myPlayer];
					player1.netManaTime = player1.netManaTime - 1;
				}
				else if (Main.player[Main.myPlayer].netMana)
				{
					Main.player[Main.myPlayer].netMana = false;
					Main.player[Main.myPlayer].netManaTime = 60;
					NetMessage.SendData(42, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
				bool flag1 = false;
				for (int q = 0; q < 22; q++)
				{
					if (Main.player[Main.myPlayer].buffType[q] != Main.clientPlayer.buffType[q])
					{
						flag1 = true;
					}
				}
				if (flag1)
				{
					NetMessage.SendData(50, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
					NetMessage.SendData(13, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
				bool flag2 = false;
				if (Main.player[Main.myPlayer].MinionTargetPoint != Main.clientPlayer.MinionTargetPoint)
				{
					flag2 = true;
				}
				if (flag2)
				{
					NetMessage.SendData(99, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				}
			}
			if (Main.netMode == 1)
			{
				Main.clientPlayer = (Player)Main.player[Main.myPlayer].clientClone();
			}
			if (Main.netMode != 0 || !Main.playerInventory && !(Main.npcChatText != "") && Main.player[Main.myPlayer].sign < 0 && !Main.ingameOptionsWindow && !Main.achievementsWindow || !Main.autoPause)
			{
				Main.gamePaused = false;
				if (!Main.dedServ && (double)Main.screenPosition.Y < Main.worldSurface * 16 + 16 && Main.netMode != 2)
				{
					Star.UpdateStars();
					Cloud.UpdateClouds();
				}
				PortalHelper.UpdatePortalPoints();
				Main.tileSolid[379] = false;
				Main.numPlayers = 0;
				for (int r = 0; r < 255; r++)
				{
					if (!Main.ignoreErrors)
					{
						Main.player[r].Update(r);
					}
					else
					{
						try
						{
							Main.player[r].Update(r);
						}
						catch (Exception ex)
						{
#if DEBUG
							Console.WriteLine(ex);
							System.Diagnostics.Debugger.Break();

#endif
						}
					}
				}
				if (Main.netMode != 1)
				{
					try
					{
						NPC.SpawnNPC();
					}
					catch (Exception ex)
					{
#if DEBUG
						Console.WriteLine(ex);
						System.Diagnostics.Debugger.Break();

#endif
					}
				}
				for (int s = 0; s < 255; s++)
				{
					Main.player[s].activeNPCs = 0f;
					Main.player[s].townNPCs = 0f;
				}
				if (Main.wof >= 0 && !Main.npc[Main.wof].active)
				{
					Main.wof = -1;
				}
				if (NPC.golemBoss >= 0 && !Main.npc[NPC.golemBoss].active)
				{
					NPC.golemBoss = -1;
				}
				if (NPC.plantBoss >= 0 && !Main.npc[NPC.plantBoss].active)
				{
					NPC.plantBoss = -1;
				}
				if (NPC.crimsonBoss >= 0 && !Main.npc[NPC.crimsonBoss].active)
				{
					NPC.crimsonBoss = -1;
				}
				NPC.taxCollector = false;
				for (int t = 0; t < 200; t++)
				{
					if (!Main.ignoreErrors)
					{
						Main.npc[t].UpdateNPC(t);
					}
					else
					{
						try
						{
							Main.npc[t].UpdateNPC(t);
						}
						catch (Exception)
						{
							Main.npc[t] = new NPC();
						}
					}
				}
				for (int u = 0; u < 500; u++)
				{
					if (!Main.ignoreErrors)
					{
						Main.gore[u].Update();
					}
					else
					{
						try
						{
							Main.gore[u].Update();
						}
						catch
						{
							Main.gore[u] = new Gore();
						}
					}
				}
				for (int v = 0; v < 1000; v++)
				{
					Main.ProjectileUpdateLoopIndex = v;
					if (!Main.ignoreErrors)
					{
						Main.projectile[v].Update(v);
					}
					else
					{
						try
						{
							Main.projectile[v].Update(v);
						}
						catch
						{
							Main.projectile[v] = new Projectile();
						}
					}
				}
				Main.ProjectileUpdateLoopIndex = -1;
				for (int w = 0; w < 400; w++)
				{
					if (!Main.ignoreErrors)
					{
						Main.item[w].UpdateItem(w);
					}
					else
					{
						try
						{
							Main.item[w].UpdateItem(w);
						}
						catch
						{
							Main.item[w] = new Item();
						}
					}
				}
				if (!Main.ignoreErrors)
				{
					Dust.UpdateDust();
				}
				else
				{
					try
					{
						Dust.UpdateDust();
					}
					catch
					{
						for (int x = 0; x < 6000; x++)
						{
							Main.dust[x] = new Dust();
						}
					}
				}
				if (Main.netMode != 2)
				{
					CombatText.UpdateCombatText();
					ItemText.UpdateItemText();
				}
				if (!Main.ignoreErrors)
				{
					Main.UpdateTime();
				}
				else
				{
					try
					{
						Main.UpdateTime();
					}
					catch
					{
						Main.checkForSpawns = 0;
					}
				}
				Main.tileSolid[379] = true;
				if (Main.netMode != 1)
				{
					if (!Main.ignoreErrors)
					{
						WorldGen.UpdateWorld();
						Main.UpdateInvasion();
					}
					else
					{
						try
						{
							WorldGen.UpdateWorld();
							Main.UpdateInvasion();
						}
						catch (Exception ex)
						{
#if DEBUG
							Console.WriteLine(ex);
							System.Diagnostics.Debugger.Break();

#endif
						}
					}
				}
				if (!Main.ignoreErrors)
				{
					if (Main.netMode == 2)
					{
						Main.UpdateServer();
					}
					if (Main.netMode == 1)
					{
						Main.UpdateClient();
					}
				}
				else
				{
					try
					{
						if (Main.netMode == 2)
						{
							Main.UpdateServer();
						}
						if (Main.netMode == 1)
						{
							Main.UpdateClient();
						}
					}
					catch
					{
						int num29 = Main.netMode;
					}
				}
				if (!Main.ignoreErrors)
				{
					for (int y = 0; y < Main.numChatLines; y++)
					{
						if (Main.chatLine[y].showTime > 0)
						{
							ChatLine chatLine = Main.chatLine[y];
							chatLine.showTime = chatLine.showTime - 1;
						}
					}
				}
				else
				{
					try
					{
						for (int a = 0; a < Main.numChatLines; a++)
						{
							if (Main.chatLine[a].showTime > 0)
							{
								ChatLine chatLine1 = Main.chatLine[a];
								chatLine1.showTime = chatLine1.showTime - 1;
							}
						}
					}
					catch
					{
						for (int b = 0; b < Main.numChatLines; b++)
						{
							Main.chatLine[b] = new ChatLine();
						}
					}
				}
				Main.upTimer = (float)stopwatch.Elapsed.TotalMilliseconds;
				if (Main.upTimerMaxDelay <= 0f)
				{
					Main.upTimerMax = 0f;
				}
				else
				{
					Main.upTimerMaxDelay = Main.upTimerMaxDelay - 1f;
				}
				if (Main.upTimer > Main.upTimerMax)
				{
					Main.upTimerMax = Main.upTimer;
					Main.upTimerMaxDelay = 400f;
				}
				Chest.UpdateChestFrames();
				base.Update(gameTime);
				return;
			}
			if (!Main.chatMode && !Main.editSign && !Main.editChest && !Main.blockInput)
			{
				Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.keyState.GetPressedKeys();
				if (Main.blockKey != Microsoft.Xna.Framework.Input.Keys.None)
				{
					bool flag3 = false;
					for (int c = 0; c < (int)pressedKeys.Length; c++)
					{
						if (pressedKeys[c] == Main.blockKey)
						{
							pressedKeys[c] = Microsoft.Xna.Framework.Input.Keys.None;
							flag3 = true;
						}
					}
					if (!flag3)
					{
						Main.blockKey = Microsoft.Xna.Framework.Input.Keys.None;
					}
				}
				Main.player[Main.myPlayer].controlInv = false;
				for (int d = 0; d < (int)pressedKeys.Length; d++)
				{
					if (string.Concat(pressedKeys[d]) == Main.cInv)
					{
						Main.player[Main.myPlayer].controlInv = true;
					}
				}
				if (!Main.player[Main.myPlayer].controlInv)
				{
					Main.player[Main.myPlayer].releaseInventory = true;
				}
				else
				{
					if (Main.player[Main.myPlayer].releaseInventory)
					{
						Main.player[Main.myPlayer].ToggleInv();
					}
					Main.player[Main.myPlayer].releaseInventory = false;
				}
			}
			if (Main.playerInventory)
			{
				int scrollWheelValue = (Main.mouseState.ScrollWheelValue - Main.oldMouseWheel) / 120;
				bool flag4 = true;
				if (Main.recBigList)
				{
					int num30 = 42;
					int num31 = 340;
					int num32 = 310;
					int num33 = (Main.screenWidth - num32 - 280) / num30;
					if ((new Microsoft.Xna.Framework.Rectangle(num32, num31, num33 * num30, (Main.screenHeight - num31 - 20) / num30 * num30)).Contains(Main.MouseScreen.ToPoint()))
					{
						int num34 = Math.Sign(scrollWheelValue);
						while (scrollWheelValue != 0)
						{
							if (scrollWheelValue >= 0)
							{
								Main.recStart = Main.recStart + num33;
								Main.PlaySound(12, -1, -1, 1);
								if (Main.recStart > Main.numAvailableRecipes - num33)
								{
									Main.recStart = Main.numAvailableRecipes - num33;
								}
							}
							else
							{
								Main.recStart = Main.recStart - num33;
								if (Main.recStart < 0)
								{
									Main.recStart = 0;
								}
							}
							scrollWheelValue = scrollWheelValue - num34;
						}
					}
				}
				if (flag4)
				{
					Main.focusRecipe = Main.focusRecipe + scrollWheelValue;
					if (Main.focusRecipe > Main.numAvailableRecipes - 1)
					{
						Main.focusRecipe = Main.numAvailableRecipes - 1;
					}
					if (Main.focusRecipe < 0)
					{
						Main.focusRecipe = 0;
					}
				}
				Main.player[Main.myPlayer].dropItemCheck();
			}
			Main.player[Main.myPlayer].head = Main.player[Main.myPlayer].armor[0].headSlot;
			Main.player[Main.myPlayer].body = Main.player[Main.myPlayer].armor[1].bodySlot;
			Main.player[Main.myPlayer].legs = Main.player[Main.myPlayer].armor[2].legSlot;
			if (!Main.player[Main.myPlayer].hostile)
			{
				if (Main.player[Main.myPlayer].armor[10].headSlot >= 0)
				{
					Main.player[Main.myPlayer].head = Main.player[Main.myPlayer].armor[10].headSlot;
				}
				if (Main.player[Main.myPlayer].armor[11].bodySlot >= 0)
				{
					Main.player[Main.myPlayer].body = Main.player[Main.myPlayer].armor[11].bodySlot;
				}
				if (Main.player[Main.myPlayer].armor[12].legSlot >= 0)
				{
					Main.player[Main.myPlayer].legs = Main.player[Main.myPlayer].armor[12].legSlot;
				}
			}
			if (Main.editSign)
			{
				if (Main.player[Main.myPlayer].sign != -1)
				{
					Main.npcChatText = Main.GetInputText(Main.npcChatText);
					if (Main.inputTextEnter)
					{
						byte[] numArray = new byte[] { 10 };
						Main.npcChatText = string.Concat(Main.npcChatText, Encoding.ASCII.GetString(numArray));
					}
					else if (Main.inputTextEscape)
					{
						Main.PlaySound(12, -1, -1, 1);
						Main.editSign = false;
						Main.blockKey = Microsoft.Xna.Framework.Input.Keys.Escape;
						Main.npcChatText = Main.sign[Main.player[Main.myPlayer].sign].text;
					}
				}
				else
				{
					Main.editSign = false;
				}
			}
			else if (Main.editChest)
			{
				string inputText = Main.GetInputText(Main.npcChatText);
				if (Main.inputTextEnter)
				{
					Main.PlaySound(12, -1, -1, 1);
					Main.editChest = false;
					int num35 = Main.player[Main.myPlayer].chest;
					if (Main.npcChatText == Main.defaultChestName)
					{
						Main.npcChatText = "";
					}
					if (Main.chest[num35].name != Main.npcChatText)
					{
						Main.chest[num35].name = Main.npcChatText;
						if (Main.netMode == 1)
						{
							Main.player[Main.myPlayer].editedChestName = true;
						}
					}
				}
				else if (Main.inputTextEscape)
				{
					Main.PlaySound(12, -1, -1, 1);
					Main.editChest = false;
					Main.npcChatText = string.Empty;
					Main.blockKey = Microsoft.Xna.Framework.Input.Keys.Escape;
				}
				else if (inputText.Length <= 20)
				{
					Main.npcChatText = inputText;
				}
			}
			Main.gamePaused = true;
		}

		private static void UpdateClient()
		{
			if (Main.myPlayer == 255)
			{
				Netplay.disconnect = true;
			}
			Main.netPlayCounter = Main.netPlayCounter + 1;
			if (Main.netPlayCounter > 3600)
			{
				Main.netPlayCounter = 0;
			}
			if (Main.netPlayCounter % 420 == 0)
			{
				NetMessage.SendData(13, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Main.netPlayCounter % 900 == 0)
			{
				NetMessage.SendData(36, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				NetMessage.SendData(16, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
				NetMessage.SendData(40, -1, -1, "", Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
			}
			if (Netplay.Connection.IsActive)
			{
				RemoteServer connection = Netplay.Connection;
				connection.TimeOutTimer = connection.TimeOutTimer + 1;
				if (!Main.stopTimeOuts && Netplay.Connection.TimeOutTimer > 7200)
				{
					Main.statusText = Lang.inter[43];
					Netplay.disconnect = true;
				}
			}
			for (int i = 0; i < 400; i++)
			{
				if (Main.item[i].active && Main.item[i].owner == Main.myPlayer)
				{
					Main.item[i].FindOwner(i);
				}
			}
		}

		public void updateCloudLayer()
		{
			if (Main.netMode == 1)
			{
				return;
			}
			if (Main.netMode == 0 && Main.gameMenu)
			{
				return;
			}
			int num = 86400;
			int num1 = num / 24;
			float single = Math.Max(1f, 1f + 4f * Main.cloudAlpha);
			if (Main.cloudBGActive <= 0f)
			{
				if (Main.cloudBGActive < 0f)
				{
					Main.cloudBGActive = Main.cloudBGActive + (float)Main.dayRate * single;
					if (Main.raining)
					{
						Main.cloudBGActive = Main.cloudBGActive + (float)(2 * Main.dayRate) * single;
					}
				}
				if (Main.cloudBGActive > 0f)
				{
					Main.cloudBGActive = 0f;
				}
				if (Main.cloudBGActive == 0f)
				{
					if (Main.rand.Next((int)((float)(num1 * 8 / (Main.dayRate == 0 ? 1 : Main.dayRate)) / single)) == 0)
					{
						Main.cloudBGActive = (float)Main.rand.Next(num1 * 3, num * 2);
						if (Main.netMode == 2)
						{
							NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
						}
					}
				}
			}
			else
			{
				if (Main.cloudBGActive > 1f)
				{
					Main.cloudBGActive = Main.cloudBGActive - (float)Main.dayRate / single;
				}
				if (Main.cloudBGActive < 1f)
				{
					Main.cloudBGActive = 1f;
				}
				if (Main.cloudBGActive == 1f && Main.rand.Next((int)((float)(num1 * 2 / Math.Max(Main.dayRate, 1)) * single)) == 0)
				{
					Main.cloudBGActive = (float)(-Main.rand.Next(num1 * 4, num * 4));
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
						return;
					}
				}
			}
		}

		public void UpdateDisplaySettings()
		{
			Viewport viewport = base.GraphicsDevice.Viewport;
			Main.SetResolution(viewport.Width, base.GraphicsDevice.Viewport.Height);
		}

		public static void UpdateDrawAnimations()
		{
			for (int i = 0; i < Main.itemAnimationsRegistered.Count; i++)
			{
				int item = Main.itemAnimationsRegistered[i];
				if (Main.itemAnimations[item] != null)
				{
					Main.itemAnimations[item].Update();
				}
			}
		}

		private static void UpdateInvasion()
		{
			if (Main.invasionType > 0)
			{
				if (Main.invasionSize <= 0)
				{
					if (Main.invasionType == 1)
					{
						NPC.downedGoblins = true;
						if (Main.netMode == 2)
						{
							NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
						}
						AchievementsHelper.NotifyProgressionEvent(10);
					}
					else if (Main.invasionType == 2)
					{
						NPC.downedFrost = true;
						AchievementsHelper.NotifyProgressionEvent(12);
					}
					else if (Main.invasionType == 3)
					{
						NPC.downedPirates = true;
						AchievementsHelper.NotifyProgressionEvent(11);
					}
					else if (Main.invasionType == 4)
					{
						NPC.downedMartians = true;
						AchievementsHelper.NotifyProgressionEvent(13);
					}
					Main.InvasionWarning();
					Main.invasionType = 0;
					Main.invasionDelay = 0;
				}
				if (Main.invasionX == (double)Main.spawnTileX)
				{
					return;
				}
				float single = (float)Main.dayRate;
				if (Main.invasionX > (double)Main.spawnTileX)
				{
					Main.invasionX = Main.invasionX - (double)single;
					if (Main.invasionX > (double)Main.spawnTileX)
					{
						Main.invasionWarn = Main.invasionWarn - 1;
					}
					else
					{
						Main.invasionX = (double)Main.spawnTileX;
						Main.InvasionWarning();
					}
				}
				else if (Main.invasionX < (double)Main.spawnTileX)
				{
					Main.invasionX = Main.invasionX + (double)single;
					if (Main.invasionX < (double)Main.spawnTileX)
					{
						Main.invasionWarn = Main.invasionWarn - 1;
					}
					else
					{
						Main.invasionX = (double)Main.spawnTileX;
						Main.InvasionWarning();
					}
				}
				if (Main.invasionWarn <= 0)
				{
					Main.invasionWarn = 3600;
					Main.InvasionWarning();
				}
			}
		}

		private static void UpdateMenu()
		{
			AchievementCompleteUI.Clear();
			Main.playerInventory = false;
			Main.exitScale = 0.8f;
			if (Main.netMode == 0)
			{
				Main.maxRaining = 0f;
				Main.raining = false;
				if (!Main.grabSky)
				{
					Main.time = Main.time + 86.4;
					if (!Main.dayTime)
					{
						if (Main.time > 32400)
						{
							Main.bloodMoon = false;
							Main.time = 0;
							Main.dayTime = true;
							Main.moonPhase = Main.moonPhase + 1;
							if (Main.moonPhase >= 8)
							{
								Main.moonPhase = 0;
								return;
							}
						}
					}
					else if (Main.time > 54000)
					{
						Main.time = 0;
						Main.dayTime = false;
						return;
					}
				}
			}
			else if (Main.netMode == 1)
			{
				Main.UpdateTime();
			}
		}

		protected void UpdateMusic()
		{
			int num;
			if (Main.musicVolume == 0f)
			{
				Main.curMusic = 0;
			}
			try
			{
				if (!Main.dedServ)
				{
					if (Main.curMusic > 0)
					{
						if (base.IsActive)
						{
							for (int i = 0; i < (int)Main.music.Length; i++)
							{
								if (Main.music[i] != null && Main.music[i].IsPaused && Main.musicFade[i] > 0f)
								{
									try
									{
										Main.music[i].Resume();
									}
									catch (Exception ex)
									{
#if DEBUG
										Console.WriteLine(ex);
										System.Diagnostics.Debugger.Break();

#endif
									}
								}
							}
						}
						else
						{
							for (int j = 0; j < (int)Main.music.Length; j++)
							{
								if (Main.music[j] != null && !Main.music[j].IsPaused && Main.music[j].IsPlaying && Main.musicFade[j] > 0f)
								{
									try
									{
										Main.music[j].Pause();
									}
									catch (Exception ex)
									{
#if DEBUG
										Console.WriteLine(ex);
										System.Diagnostics.Debugger.Break();

#endif
									}
								}
							}
						}
					}
					bool flag = false;
					bool flag1 = false;
					bool flag2 = false;
					bool flag3 = false;
					bool flag4 = false;
					bool flag5 = false;
					bool flag6 = false;
					bool flag7 = false;
					bool flag8 = false;
					bool flag9 = false;
					bool flag10 = false;
					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
					int num1 = 5000;
					for (int k = 0; k < 200; k++)
					{
						if (Main.npc[k].active)
						{
							num = 0;
							int num2 = Main.npc[k].type;
							if (num2 > 245)
							{
								if (num2 <= 439)
								{
									if (num2 > 398)
									{
										if (num2 == 422)
										{
											goto Label4;
										}
										switch (num2)
										{
											case 438:
												{
													if (Main.npc[k].ai[1] != 1f)
													{
														goto Label3;
													}
													num = 4;
													goto Label3;
												}
											case 439:
												{
													num = 4;
													goto Label3;
												}
											default:
												{
													goto Label3;
												}
										}
									}
									else
									{
										switch (num2)
										{
											case 262:
											case 263:
											case 264:
												{
													num = 6;
													goto Label3;
												}
											case 265:
												{
													goto Label3;
												}
											case 266:
												{
													num = 3;
													goto Label3;
												}
											case 381:
											case 382:
											case 383:
											case 385:
											case 386:
											case 388:
											case 389:
											case 390:
											case 391:
											case 395:
												{
													num = 9;
													goto Label3;
												}
											case 398:
												{
													num = 7;
													goto Label3;
												}
											default:
												{
													goto Label3;
												}
										}
									}
								}
								else if (num2 > 507)
								{
									if (num2 == 517)
									{
										goto Label4;
									}
									if (num2 == 520)
									{
										num = 9;
									}
									goto Label3;
								}
								else
								{
									switch (num2)
									{
										case 491:
											{
												num = 8;
												goto Label3;
											}
										case 492:
											{
												goto Label3;
											}
										case 493:
											{
												break;
											}
										case 507:
											{
												break;
											}
										default:
											{
												goto Label3;
											}
									}
								}
							Label4:
								num = 10;
							}
							else if (num2 <= 126)
							{
								if (num2 > 29)
								{
									switch (num2)
									{
										case 111:
											{
												break;
											}
										case 112:
											{
												goto Label3;
											}
										case 113:
										case 114:
											{
												num = 2;
												goto Label3;
											}
										case 125:
										case 126:
											{
												goto case 113;
											}
										default:
											{
												goto Label3;
											}
									}
								}
								else
								{
									switch (num2)
									{
										case 13:
										case 14:
										case 15:
											{
												num = 1;
												goto Label3;
											}
										case 26:
										case 27:
										case 28:
										case 29:
											{
												break;
											}
										default:
											{
												goto Label3;
											}
									}
									break;
								}
								num = 11;
							}
							else if (num2 > 145)
							{
								switch (num2)
								{
									case 212:
									case 213:
									case 214:
									case 215:
									case 216:
										{
											num = 8;
											goto Label3;
										}
									case 217:
									case 218:
									case 219:
									case 220:
									case 221:
										{
											break;
										}
									case 222:
										{
											num = 5;
											break;
										}
									case 245:
										{
											num = 4;
											break;
										}
									default:
										{
											break;
										}
								}
							}
							else if (num2 != 134)
							{
								switch (num2)
								{
									case 143:
									case 144:
									case 145:
										{
											num = 3;
											goto Label3;
										}
								}
							}
							else
							{
								num = 3;
								goto Label3;
							}
						Label3:
							if (num == 0 && Main.npc[k].boss)
							{
								num = 1;
							}
							if (num != 0)
							{
								Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int)(Main.npc[k].position.X + (float)(Main.npc[k].width / 2)) - num1, (int)(Main.npc[k].position.Y + (float)(Main.npc[k].height / 2)) - num1, num1 * 2, num1 * 2);
								if (rectangle.Intersects(rectangle1))
								{
									if (num == 1)
									{
										flag = true;
										break;
									}
									else if (num == 2)
									{
										flag1 = true;
										break;
									}
									else if (num == 3)
									{
										flag2 = true;
										break;
									}
									else if (num == 4)
									{
										flag3 = true;
										break;
									}
									else if (num == 5)
									{
										flag4 = true;
										break;
									}
									else if (num == 6)
									{
										flag5 = true;
										break;
									}
									else if (num == 7)
									{
										flag6 = true;
										break;
									}
									else if (num == 8)
									{
										flag7 = true;
										break;
									}
									else if (num == 9)
									{
										flag8 = true;
										break;
									}
									else if (num != 10)
									{
										if (num != 11)
										{
											break;
										}
										flag10 = true;
										break;
									}
									else
									{
										flag9 = true;
										break;
									}
								}
							}
						}
					}
					int x = (int)((Main.screenPosition.X + (float)(Main.screenWidth / 2)) / 16f);
					if (Main.musicVolume == 0f)
					{
						this.newMusic = 0;
					}
					else if (!Main.gameMenu)
					{
						float single = (float)(Main.maxTilesX / 4200);
						single = single * single;
						float y = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * single)) / (Main.worldSurface / 5));
						if (flag6)
						{
							this.newMusic = 38;
						}
						else if (flag8)
						{
							this.newMusic = 37;
						}
						else if (flag9)
						{
							this.newMusic = 34;
						}
						else if (flag5)
						{
							this.newMusic = 24;
						}
						else if (flag1)
						{
							this.newMusic = 12;
						}
						else if (flag)
						{
							this.newMusic = 5;
						}
						else if (flag2)
						{
							this.newMusic = 13;
						}
						else if (flag3)
						{
							this.newMusic = 17;
						}
						else if (flag4)
						{
							this.newMusic = 25;
						}
						else if (flag7)
						{
							this.newMusic = 35;
						}
						else if (flag10)
						{
							this.newMusic = 39;
						}
						else if (Main.player[Main.myPlayer].position.Y > (float)((Main.maxTilesY - 200) * 16))
						{
							this.newMusic = 36;
						}
						else if (Main.eclipse && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16 + (double)(Main.screenHeight / 2))
						{
							this.newMusic = 27;
						}
						else if (y < 1f)
						{
							this.newMusic = 15;
						}
						else if (Main.tile[(int)(Main.player[Main.myPlayer].Center.X / 16f), (int)(Main.player[Main.myPlayer].Center.Y / 16f)].wall == 87)
						{
							this.newMusic = 26;
						}
						else if (Main.bgStyle == 9 && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16 + (double)(Main.screenHeight / 2) || Main.ugBack == 2)
						{
							this.newMusic = 29;
						}
						else if (Main.player[Main.myPlayer].ZoneCorrupt)
						{
							if ((double)Main.player[Main.myPlayer].position.Y <= Main.worldSurface * 16 + (double)(Main.screenHeight / 2))
							{
								this.newMusic = 8;
							}
							else
							{
								this.newMusic = 10;
							}
						}
						else if (Main.player[Main.myPlayer].ZoneCrimson)
						{
							if ((double)Main.player[Main.myPlayer].position.Y <= Main.worldSurface * 16 + (double)(Main.screenHeight / 2))
							{
								this.newMusic = 16;
							}
							else
							{
								this.newMusic = 33;
							}
						}
						else if (Main.player[Main.myPlayer].ZoneDungeon)
						{
							this.newMusic = 23;
						}
						else if (Main.player[Main.myPlayer].ZoneMeteor)
						{
							this.newMusic = 2;
						}
						else if (Main.player[Main.myPlayer].ZoneJungle)
						{
							this.newMusic = 7;
						}
						else if (Main.player[Main.myPlayer].ZoneSnow)
						{
							if ((double)Main.player[Main.myPlayer].position.Y <= Main.worldSurface * 16 + (double)(Main.screenHeight / 2))
							{
								this.newMusic = 14;
							}
							else
							{
								this.newMusic = 20;
							}
						}
						else if ((double)Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16 + (double)(Main.screenHeight / 2))
						{
							if (Main.player[Main.myPlayer].ZoneHoly)
							{
								this.newMusic = 11;
							}
							else if (Main.sandTiles <= 2200)
							{
								if (Main.ugMusic == 0)
								{
									Main.ugMusic = 4;
								}
								if (!Main.music[4].IsPlaying && !Main.music[31].IsPlaying)
								{
									if (Main.musicFade[4] == 1f)
									{
										Main.musicFade[31] = 1f;
									}
									if (Main.musicFade[31] == 1f)
									{
										Main.musicFade[4] = 1f;
									}
									int num3 = Main.rand.Next(2);
									if (num3 == 0)
									{
										Main.ugMusic = 4;
										Main.musicFade[31] = 0f;
									}
									else if (num3 == 1)
									{
										Main.ugMusic = 31;
										Main.musicFade[4] = 0f;
									}
								}
								this.newMusic = Main.ugMusic;
							}
							else
							{
								this.newMusic = 21;
							}
						}
						else if (Main.dayTime && Main.player[Main.myPlayer].ZoneHoly)
						{
							if (Main.cloudAlpha <= 0f || Main.gameMenu)
							{
								this.newMusic = 9;
							}
							else
							{
								this.newMusic = 19;
							}
						}
						else if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10 && (x < 380 || x > Main.maxTilesX - 380))
						{
							this.newMusic = 22;
						}
						else if (Main.sandTiles > 1000)
						{
							this.newMusic = 21;
						}
						else if (Main.dayTime)
						{
							if (Main.cloudAlpha <= 0f || Main.gameMenu)
							{
								if (Main.dayMusic == 0)
								{
									Main.dayMusic = 1;
								}
								if (!Main.music[1].IsPlaying && !Main.music[18].IsPlaying)
								{
									int num4 = Main.rand.Next(2);
									if (num4 == 0)
									{
										Main.dayMusic = 1;
									}
									else if (num4 == 1)
									{
										Main.dayMusic = 18;
									}
								}
								this.newMusic = Main.dayMusic;
							}
							else
							{
								this.newMusic = 19;
							}
						}
						else if (!Main.dayTime)
						{
							if (Main.bloodMoon)
							{
								this.newMusic = 2;
							}
							else if (Main.cloudAlpha <= 0f || Main.gameMenu)
							{
								this.newMusic = 3;
							}
							else
							{
								this.newMusic = 19;
							}
						}
						if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10 && Main.pumpkinMoon)
						{
							this.newMusic = 30;
						}
						if ((double)(Main.screenPosition.Y / 16f) < Main.worldSurface + 10 && Main.snowMoon)
						{
							this.newMusic = 32;
						}
					}
					else if (Main.netMode == 2)
					{
						this.newMusic = 0;
					}
					else
					{
						this.newMusic = 6;
					}
					if (Main.gameMenu || Main.musicVolume == 0f)
					{
						Main.musicBox2 = -1;
						Main.musicBox = -1;
					}
					if (Main.musicBox2 >= 0)
					{
						Main.musicBox = Main.musicBox2;
					}
					if (Main.musicBox >= 0)
					{
						if (Main.musicBox == 0)
						{
							this.newMusic = 1;
						}
						if (Main.musicBox == 1)
						{
							this.newMusic = 2;
						}
						if (Main.musicBox == 2)
						{
							this.newMusic = 3;
						}
						if (Main.musicBox == 4)
						{
							this.newMusic = 4;
						}
						if (Main.musicBox == 5)
						{
							this.newMusic = 5;
						}
						if (Main.musicBox == 3)
						{
							this.newMusic = 6;
						}
						if (Main.musicBox == 6)
						{
							this.newMusic = 7;
						}
						if (Main.musicBox == 7)
						{
							this.newMusic = 8;
						}
						if (Main.musicBox == 9)
						{
							this.newMusic = 9;
						}
						if (Main.musicBox == 8)
						{
							this.newMusic = 10;
						}
						if (Main.musicBox == 11)
						{
							this.newMusic = 11;
						}
						if (Main.musicBox == 10)
						{
							this.newMusic = 12;
						}
						if (Main.musicBox == 12)
						{
							this.newMusic = 13;
						}
						if (Main.musicBox == 13)
						{
							this.newMusic = 14;
						}
						if (Main.musicBox == 14)
						{
							this.newMusic = 15;
						}
						if (Main.musicBox == 15)
						{
							this.newMusic = 16;
						}
						if (Main.musicBox == 16)
						{
							this.newMusic = 17;
						}
						if (Main.musicBox == 17)
						{
							this.newMusic = 18;
						}
						if (Main.musicBox == 18)
						{
							this.newMusic = 19;
						}
						if (Main.musicBox == 19)
						{
							this.newMusic = 20;
						}
						if (Main.musicBox == 20)
						{
							this.newMusic = 21;
						}
						if (Main.musicBox == 21)
						{
							this.newMusic = 22;
						}
						if (Main.musicBox == 22)
						{
							this.newMusic = 23;
						}
						if (Main.musicBox == 23)
						{
							this.newMusic = 24;
						}
						if (Main.musicBox == 24)
						{
							this.newMusic = 25;
						}
						if (Main.musicBox == 25)
						{
							this.newMusic = 26;
						}
						if (Main.musicBox == 26)
						{
							this.newMusic = 27;
						}
						if (Main.musicBox == 27)
						{
							this.newMusic = 29;
						}
						if (Main.musicBox == 28)
						{
							this.newMusic = 30;
						}
						if (Main.musicBox == 29)
						{
							this.newMusic = 31;
						}
						if (Main.musicBox == 30)
						{
							this.newMusic = 32;
						}
						if (Main.musicBox == 31)
						{
							this.newMusic = 33;
						}
						if (Main.musicBox == 32)
						{
							this.newMusic = 38;
						}
						if (Main.musicBox == 33)
						{
							this.newMusic = 37;
						}
						if (Main.musicBox == 34)
						{
							this.newMusic = 35;
						}
						if (Main.musicBox == 35)
						{
							this.newMusic = 36;
						}
						if (Main.musicBox == 36)
						{
							this.newMusic = 34;
						}
						if (Main.musicBox == 37)
						{
							this.newMusic = 39;
						}
					}
					Main.curMusic = this.newMusic;
					float moonLordCountdown = 1f;
					if (NPC.MoonLordCountdown > 0)
					{
						moonLordCountdown = (float)NPC.MoonLordCountdown / 3600f;
						moonLordCountdown = moonLordCountdown * moonLordCountdown;
						if (NPC.MoonLordCountdown <= 720)
						{
							moonLordCountdown = 0f;
							Main.curMusic = 0;
						}
						else
						{
							moonLordCountdown = MathHelper.Lerp(0f, 1f, moonLordCountdown);
						}
						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < 40)
						{
							Main.musicFade[Main.curMusic] = 0f;
						}
					}
					for (int l = 1; l < 40; l++)
					{
						if (l != 28)
						{
							if (l == Main.curMusic)
							{
								if (Main.music[l].IsPlaying)
								{
									Main.musicFade[l] = Main.musicFade[l] + 0.005f;
									if (Main.musicFade[l] > 1f)
									{
										Main.musicFade[l] = 1f;
									}
									Main.music[l].SetVariable("Volume", Main.musicFade[l] * Main.musicVolume * moonLordCountdown);
								}
								else
								{
									Main.music[l] = Main.soundBank.GetCue(string.Concat("Music_", l));
									Main.music[l].Play();
									Main.music[l].SetVariable("Volume", Main.musicFade[l] * Main.musicVolume * moonLordCountdown);
								}
							}
							else if (!Main.music[l].IsPlaying)
							{
								Main.musicFade[l] = 0f;
							}
							else
							{
								if (Main.musicFade[Main.curMusic] > 0.25f)
								{
									Main.musicFade[l] = Main.musicFade[l] - 0.005f;
								}
								else if (Main.curMusic == 0)
								{
									Main.musicFade[l] = 0f;
								}
								if (Main.musicFade[l] > 0f)
								{
									Main.music[l].SetVariable("Volume", Main.musicFade[l] * Main.musicVolume * moonLordCountdown);
								}
								else
								{
									Main.musicFade[l] = Main.musicFade[l] - 0f;
									Main.music[l].Stop(AudioStopOptions.Immediate);
								}
							}
						}
						else if (Main.cloudAlpha <= 0f || (double)Main.player[Main.myPlayer].position.Y >= Main.worldSurface * 16 + (double)(Main.screenHeight / 2) || Main.player[Main.myPlayer].ZoneSnow)
						{
							if (!Main.music[l].IsPlaying)
							{
								Main.musicFade[l] = 0f;
							}
							else
							{
								if (Main.musicFade[Main.curMusic] > 0.25f)
								{
									Main.musicFade[l] = Main.musicFade[l] - 0.005f;
								}
								else if (Main.curMusic == 0)
								{
									Main.musicFade[l] = 0f;
								}
								if (Main.musicFade[l] > 0f)
								{
									Main.music[l].SetVariable("Volume", Main.musicFade[l] * Main.ambientVolume);
								}
								else
								{
									Main.musicFade[l] = Main.musicFade[l] - 0f;
									Main.music[l].Stop(AudioStopOptions.Immediate);
								}
							}
						}
						else if (Main.ambientVolume == 0f)
						{
							if (Main.music[l].IsPlaying)
							{
								Main.music[l].Stop(AudioStopOptions.Immediate);
							}
						}
						else if (!Main.music[l].IsPlaying)
						{
							Main.music[l] = Main.soundBank.GetCue(string.Concat("Music_", l));
							Main.music[l].Play();
							Main.music[l].SetVariable("Volume", Main.musicFade[l] * Main.ambientVolume);
						}
						else if (!Main.music[l].IsPaused)
						{
							Main.musicFade[l] = Main.musicFade[l] + 0.005f;
							if (Main.musicFade[l] > 1f)
							{
								Main.musicFade[l] = 1f;
							}
							Main.music[l].SetVariable("Volume", Main.musicFade[l] * Main.ambientVolume);
						}
						else
						{
							Main.music[l].Resume();
						}
					}
					if (Main.musicError > 0)
					{
						Main.musicError = Main.musicError - 1;
					}
				}
			}
			catch
			{
				Main.musicError = Main.musicError + 1;
				if (Main.musicError >= 100)
				{
					Main.musicError = 0;
					Main.musicVolume = 0f;
				}
			}
			return;
		}

		private static void UpdateServer()
		{
			Main.netPlayCounter = Main.netPlayCounter + 1;
			if (Main.netPlayCounter > 3600)
			{
				NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
				NetMessage.syncPlayers();
				Main.netPlayCounter = 0;
			}
			for (int i = 0; i < Main.maxNetPlayers; i++)
			{
				if (Main.player[i].active && Netplay.Clients[i].IsActive)
				{
					Netplay.Clients[i].SpamUpdate();
				}
			}
			if (Math.IEEERemainder((double)Main.netPlayCounter, 900) == 0)
			{
				bool flag = true;
				int num = Main.lastItemUpdate;
				int num1 = 0;
				while (flag)
				{
					num++;
					if (num >= 400)
					{
						num = 0;
					}
					num1++;
					if (!Main.item[num].active || Main.item[num].owner == 255)
					{
						NetMessage.SendData(21, -1, -1, "", num, 0f, 0f, 0f, 0, 0, 0);
					}
					if (num1 < Main.maxItemUpdates && num != Main.lastItemUpdate)
					{
						continue;
					}
					flag = false;
				}
				Main.lastItemUpdate = num;
			}
			for (int j = 0; j < 400; j++)
			{
				if (Main.item[j].active && (Main.item[j].owner == 255 || !Main.player[Main.item[j].owner].active))
				{
					Main.item[j].FindOwner(j);
				}
			}
			for (int k = 0; k < 255; k++)
			{
				if (Netplay.Clients[k].IsActive)
				{
					RemoteClient clients = Netplay.Clients[k];
					clients.TimeOutTimer = clients.TimeOutTimer + 1;
					if (!Main.stopTimeOuts && Netplay.Clients[k].TimeOutTimer > 7200)
					{
						Netplay.Clients[k].PendingTermination = true;
					}
				}
				if (Main.player[k].active)
				{
					RemoteClient.CheckSection(k, Main.player[k].position, 1);
				}
			}
		}

		public static void UpdateSundial()
		{
			if (Main.fastForwardTime)
			{
				Main.dayRate = 60;
				return;
			}
			Main.dayRate = 1;
		}

		private static void UpdateTime()
		{
			if (Main.pumpkinMoon)
			{
				Main.bloodMoon = false;
				Main.snowMoon = false;
			}
			if (Main.snowMoon)
			{
				Main.bloodMoon = false;
			}
			if (Main.netMode != 1 && !Main.gameMenu || Main.netMode == 2)
			{
				if (Main.slimeRainTime > 0)
				{
					Main.slimeRainTime = Main.slimeRainTime - (double)Main.dayRate;
					if (Main.slimeRainTime <= 0)
					{
						Main.StopSlimeRain(true);
					}
				}
				else if (Main.slimeRainTime < 0)
				{
					Main.slimeRainTime = Main.slimeRainTime + (double)Main.dayRate;
					if (Main.slimeRainTime > 0)
					{
						Main.slimeRainTime = 0;
					}
				}
				if (Main.raining)
				{
					Main.rainTime = Main.rainTime - Main.dayRate;
					if (Main.dayRate > 0)
					{
						int num = 86400 / Main.dayRate / 24;
						if (Main.rainTime <= 0)
						{
							Main.StopRain();
						}
						else if (Main.rand.Next(num * 2) == 0)
						{
							Main.ChangeRain();
						}
					}
				}
				else if (!Main.slimeRain)
				{
					int num1 = 86400;
					num1 = num1 / (Main.dayRate != 0 ? Main.dayRate : 1);
					if (Main.rand.Next((int)((double)num1 * 5.5)) == 0)
					{
						Main.StartRain();
					}
					else if (Main.cloudBGActive >= 1f && Main.rand.Next(num1 * 4) == 0)
					{
						Main.StartRain();
					}
					if (!Main.raining && Main.slimeRainTime == 0 && !Main.bloodMoon && !Main.eclipse && !Main.snowMoon && !Main.pumpkinMoon && Main.invasionType == 0)
					{
						int num2 = (int)(1728000 / (double)Main.dayRate);
						if (!NPC.downedSlimeKing)
						{
							num2 = num2 / 2;
						}
						if (Main.hardMode)
						{
							num2 = (int)((double)num2 * 1.5);
						}
						bool flag = false;
						for (int i = 0; i < 255; i++)
						{
							if (Main.player[i].active && Main.player[i].statLifeMax > 140 && Main.player[i].statDefense > 8)
							{
								flag = true;
							}
						}
						if (!flag)
						{
							num2 = num2 * 5;
						}
						if (Main.dayRate > 0 && num2 > 0 && (flag || Main.expertMode) && Main.rand.Next(num2) == 0)
						{
							Main.StartSlimeRain(true);
						}
					}
				}
			}
			if (Main.maxRaining != Main.oldMaxRaining)
			{
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
				}
				Main.oldMaxRaining = Main.maxRaining;
			}
			Main.UpdateSundial();
			Main.time = Main.time + (double)Main.dayRate;
			CultistRitual.UpdateTime();
			if (NPC.MoonLordCountdown > 0)
			{
				NPC.MoonLordCountdown = NPC.MoonLordCountdown - 1;
				if (NPC.MoonLordCountdown <= 0 && Main.netMode != 1)
				{
					NPC.SpawnOnPlayer((int)Player.FindClosest(new Vector2((float)(Main.maxTilesX / 2), (float)Main.worldSurface / 2f) * 16f, 0, 0), 398);
				}
			}
			if (NPC.taxCollector && Main.netMode != 2 && !Main.gameMenu)
			{
				Player player = Main.player[Main.myPlayer];
				player.taxTimer = player.taxTimer + Main.dayRate;
				if (Main.player[Main.myPlayer].taxTimer >= Player.taxRate)
				{
					Player player1 = Main.player[Main.myPlayer];
					player1.taxTimer = player1.taxTimer - Player.taxRate;
					Main.player[Main.myPlayer].CollectTaxes();
				}
			}
			if (Main.netMode != 1 && Main.slimeWarningTime > 0)
			{
				Main.slimeWarningTime = Main.slimeWarningTime - 1;
				if (Main.slimeWarningTime <= 0)
				{
					if (Main.netMode == 0)
					{
						if (Main.slimeRainTime <= 0)
						{
							Main.NewText(Lang.gen[75], 50, 255, 130, false);
						}
						else
						{
							Main.NewText(Lang.gen[74], 50, 255, 130, false);
						}
					}
					else if (Main.slimeRainTime <= 0)
					{
						NetMessage.SendData(25, -1, -1, Lang.gen[75], 255, 50f, 255f, 130f, 0, 0, 0);
					}
					else
					{
						NetMessage.SendData(25, -1, -1, Lang.gen[74], 255, 50f, 255f, 130f, 0, 0, 0);
					}
				}
			}
			if (Main.netMode != 1)
			{
				if (NPC.travelNPC)
				{
					if (!Main.dayTime || Main.time > 48600)
					{
						WorldGen.UnspawnTravelNPC();
					}
				}
				else if (!Main.fastForwardTime && Main.dayTime && Main.time < 27000)
				{
					int num3 = (int)(27000 / (double)Main.dayRate);
					if (Main.rand.Next(num3 * 4) == 0)
					{
						int num4 = 0;
						for (int j = 0; j < 200; j++)
						{
							if (Main.npc[j].active && Main.npc[j].townNPC && Main.npc[j].type != 37 && Main.npc[j].type != 453)
							{
								num4++;
							}
						}
						if (num4 >= 2)
						{
							WorldGen.SpawnTravelNPC();
						}
					}
				}
				NPC.travelNPC = false;
			}
			if (Main.dayTime)
			{
				Main.bloodMoon = false;
				Main.stopMoonEvent();
				if (Main.time > 54000)
				{
					NPC.setFireFlyChance();
					WorldGen.spawnNPC = 0;
					Main.checkForSpawns = 0;
					if (Main.rand.Next(50) == 0 && Main.netMode != 1 && WorldGen.shadowOrbSmashed)
					{
						WorldGen.spawnMeteor = true;
					}
					if (Main.eclipse && Main.netMode != 1)
					{
						AchievementsHelper.NotifyProgressionEvent(3);
					}
					Main.eclipse = false;
					if (Main.netMode != 1)
					{
						AchievementsHelper.NotifyProgressionEvent(0);
					}
					if (!Main.fastForwardTime)
					{
						if (!NPC.downedBoss1 && Main.netMode != 1)
						{
							bool flag1 = false;
							int num5 = 0;
							while (num5 < 255)
							{
								if (!Main.player[num5].active || Main.player[num5].statLifeMax < 200 || Main.player[num5].statDefense <= 10)
								{
									num5++;
								}
								else
								{
									flag1 = true;
									break;
								}
							}
							if (flag1 && Main.rand.Next(3) == 0)
							{
								int num6 = 0;
								for (int k = 0; k < 200; k++)
								{
									if (Main.npc[k].active && Main.npc[k].townNPC)
									{
										num6++;
									}
								}
								if (num6 >= 4)
								{
									WorldGen.spawnEye = true;
									if (Main.netMode == 0)
									{
										Main.NewText(Lang.misc[9], 50, 255, 130, false);
									}
									else if (Main.netMode == 2)
									{
										NetMessage.SendData(25, -1, -1, Lang.misc[9], 255, 50f, 255f, 130f, 0, 0, 0);
									}
								}
							}
						}
						if (Main.netMode != 1 && !Main.pumpkinMoon && !Main.snowMoon && WorldGen.altarCount > 0 && Main.hardMode && !WorldGen.spawnEye && Main.rand.Next(10) == 0)
						{
							bool flag2 = false;
							for (int l = 0; l < 200; l++)
							{
								if (Main.npc[l].active && Main.npc[l].boss)
								{
									flag2 = true;
								}
							}
							if (!flag2 && (!NPC.downedMechBoss1 || !NPC.downedMechBoss2 || !NPC.downedMechBoss3))
							{
								int num7 = 0;
								while (num7 < 1000)
								{
									int num8 = Main.rand.Next(3) + 1;
									if (num8 == 1 && !NPC.downedMechBoss1)
									{
										WorldGen.spawnHardBoss = num8;
										if (Main.netMode != 0)
										{
											if (Main.netMode != 2)
											{
												break;
											}
											NetMessage.SendData(25, -1, -1, Lang.misc[28], 255, 50f, 255f, 130f, 0, 0, 0);
											break;
										}
										else
										{
											Main.NewText(Lang.misc[28], 50, 255, 130, false);
											break;
										}
									}
									else if (num8 == 2 && !NPC.downedMechBoss2)
									{
										WorldGen.spawnHardBoss = num8;
										if (Main.netMode != 0)
										{
											if (Main.netMode != 2)
											{
												break;
											}
											NetMessage.SendData(25, -1, -1, Lang.misc[29], 255, 50f, 255f, 130f, 0, 0, 0);
											break;
										}
										else
										{
											Main.NewText(Lang.misc[29], 50, 255, 130, false);
											break;
										}
									}
									else if (num8 != 3 || NPC.downedMechBoss3)
									{
										num7++;
									}
									else
									{
										WorldGen.spawnHardBoss = num8;
										if (Main.netMode != 0)
										{
											if (Main.netMode != 2)
											{
												break;
											}
											NetMessage.SendData(25, -1, -1, Lang.misc[30], 255, 50f, 255f, 130f, 0, 0, 0);
											break;
										}
										else
										{
											Main.NewText(Lang.misc[30], 50, 255, 130, false);
											break;
										}
									}
								}
							}
						}
						if (!WorldGen.spawnEye && Main.moonPhase != 4 && Main.rand.Next(9) == 0 && Main.netMode != 1)
						{
							int num9 = 0;
							while (num9 < 255)
							{
								if (!Main.player[num9].active || Main.player[num9].statLifeMax <= 120)
								{
									num9++;
								}
								else
								{
									Main.bloodMoon = true;
									break;
								}
							}
							if (Main.bloodMoon)
							{
								AchievementsHelper.NotifyProgressionEvent(4);
								if (Main.netMode == 0)
								{
									Main.NewText(Lang.misc[8], 50, 255, 130, false);
								}
								else if (Main.netMode == 2)
								{
									NetMessage.SendData(25, -1, -1, Lang.misc[8], 255, 50f, 255f, 130f, 0, 0, 0);
								}
							}
						}
					}
					Main.time = 0;
					Main.dayTime = false;
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
					}
				}
				if (Main.netMode != 1 && Main.worldRate > 0)
				{
					Main.checkForSpawns = Main.checkForSpawns + 1;
					if (Main.checkForSpawns >= 7200 / Main.worldRate)
					{
						int num10 = 0;
						for (int m = 0; m < 255; m++)
						{
							if (Main.player[m].active)
							{
								num10++;
							}
						}
						for (int n = 0; n < 540; n++)
						{
							Main.nextNPC[n] = false;
						}
						Main.checkForSpawns = 0;
						WorldGen.spawnNPC = 0;
						int num11 = 0;
						int num12 = 0;
						int num13 = 0;
						int num14 = 0;
						int num15 = 0;
						int num16 = 0;
						int num17 = 0;
						int num18 = 0;
						int num19 = 0;
						int num20 = 0;
						int num21 = 0;
						int num22 = 0;
						int num23 = 0;
						int num24 = 0;
						int num25 = 0;
						int num26 = 0;
						int num27 = 0;
						int num28 = 0;
						int num29 = 0;
						int num30 = 0;
						int num31 = 0;
						int num32 = 0;
						int num33 = 0;
						int num34 = 0;
						for (int o = 0; o < 200; o++)
						{
							if (Main.npc[o].active && Main.npc[o].townNPC)
							{
								if (Main.npc[o].type != 368 && Main.npc[o].type != 37 && Main.npc[o].type != 453 && !Main.npc[o].homeless)
								{
									WorldGen.QuickFindHome(o);
								}
								if (Main.npc[o].type == 37)
								{
									num16++;
								}
								if (Main.npc[o].type == 17)
								{
									num11++;
								}
								if (Main.npc[o].type == 18)
								{
									num12++;
								}
								if (Main.npc[o].type == 19)
								{
									num14++;
								}
								if (Main.npc[o].type == 20)
								{
									num13++;
								}
								if (Main.npc[o].type == 22)
								{
									num15++;
								}
								if (Main.npc[o].type == 38)
								{
									num17++;
								}
								if (Main.npc[o].type == 54)
								{
									num18++;
								}
								if (Main.npc[o].type == 107)
								{
									num20++;
								}
								if (Main.npc[o].type == 108)
								{
									num19++;
								}
								if (Main.npc[o].type == 124)
								{
									num21++;
								}
								if (Main.npc[o].type == 142)
								{
									num22++;
								}
								if (Main.npc[o].type == 160)
								{
									num23++;
								}
								if (Main.npc[o].type == 178)
								{
									num24++;
								}
								if (Main.npc[o].type == 207)
								{
									num25++;
								}
								if (Main.npc[o].type == 208)
								{
									num26++;
								}
								if (Main.npc[o].type == 209)
								{
									num27++;
								}
								if (Main.npc[o].type == 227)
								{
									num28++;
								}
								if (Main.npc[o].type == 228)
								{
									num29++;
								}
								if (Main.npc[o].type == 229)
								{
									num30++;
								}
								if (Main.npc[o].type == 353)
								{
									num31++;
								}
								if (Main.npc[o].type == 369)
								{
									num32++;
								}
								if (Main.npc[o].type == 441)
								{
									num33++;
								}
								num34++;
							}
						}
						if (WorldGen.spawnNPC == 0)
						{
							int num35 = 0;
							bool flag3 = false;
							int num36 = 0;
							bool flag4 = false;
							bool flag5 = false;
							bool flag6 = false;
							bool flag7 = false;
							for (int p = 0; p < 255; p++)
							{
								if (Main.player[p].active)
								{
									for (int q = 0; q < 58; q++)
									{
										if (Main.player[p].inventory[q] != null & Main.player[p].inventory[q].stack > 0)
										{
											if (num35 < 2000000000)
											{
												if (Main.player[p].inventory[q].type == 71)
												{
													num35 = num35 + Main.player[p].inventory[q].stack;
												}
												if (Main.player[p].inventory[q].type == 72)
												{
													num35 = num35 + Main.player[p].inventory[q].stack * 100;
												}
												if (Main.player[p].inventory[q].type == 73)
												{
													num35 = num35 + Main.player[p].inventory[q].stack * 10000;
												}
												if (Main.player[p].inventory[q].type == 74)
												{
													num35 = num35 + Main.player[p].inventory[q].stack * 1000000;
												}
											}
											if (Main.player[p].inventory[q].ammo == 14 || Main.player[p].inventory[q].useAmmo == 14)
											{
												flag4 = true;
											}
											if (Main.player[p].inventory[q].type == 166 || Main.player[p].inventory[q].type == 167 || Main.player[p].inventory[q].type == 168 || Main.player[p].inventory[q].type == 235 || Main.player[p].inventory[q].type == 2896 || Main.player[p].inventory[q].type == 3547)
											{
												flag5 = true;
											}
											if (Main.player[p].inventory[q].dye > 0 || Main.player[p].inventory[q].type >= 1107 && Main.player[p].inventory[q].type <= 1120 || Main.player[p].inventory[q].type >= 3385 && Main.player[p].inventory[q].type <= 3388)
											{
												if (Main.player[p].inventory[q].type >= 3385 && Main.player[p].inventory[q].type <= 3388)
												{
													flag7 = true;
												}
												flag6 = true;
											}
										}
									}
									int num37 = Main.player[p].statLifeMax / 20;
									if (num37 > 5)
									{
										flag3 = true;
									}
									num36 = num36 + num37;
									if (!flag6)
									{
										for (int r = 0; r < 3; r++)
										{
											if (Main.player[p].dye[r] != null && Main.player[p].dye[r].stack > 0 && Main.player[p].dye[r].dye > 0)
											{
												flag6 = true;
											}
										}
									}
								}
							}
							if (!NPC.downedBoss3 && num16 == 0)
							{
								int num38 = NPC.NewNPC(Main.dungeonX * 16 + 8, Main.dungeonY * 16, 37, 0, 0f, 0f, 0f, 0f, 255);
								Main.npc[num38].homeless = false;
								Main.npc[num38].homeTileX = Main.dungeonX;
								Main.npc[num38].homeTileY = Main.dungeonY;
							}
							bool flag8 = false;
							if (Main.rand.Next(50) == 0)
							{
								flag8 = true;
							}
							if (num15 < 1)
							{
								Main.nextNPC[22] = true;
							}
							if ((double)num35 > 5000 && num11 < 1)
							{
								Main.nextNPC[17] = true;
							}
							if (flag3 && num12 < 1 && num11 > 0)
							{
								Main.nextNPC[18] = true;
							}
							if (flag4 && num14 < 1)
							{
								Main.nextNPC[19] = true;
							}
							if ((NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num13 < 1)
							{
								Main.nextNPC[20] = true;
							}
							if (flag5 && num11 > 0 && num17 < 1)
							{
								Main.nextNPC[38] = true;
							}
							if (NPC.savedStylist && num31 < 1)
							{
								Main.nextNPC[353] = true;
							}
							if (NPC.savedAngler && num32 < 1)
							{
								Main.nextNPC[369] = true;
							}
							if (NPC.downedBoss3 && num18 < 1)
							{
								Main.nextNPC[54] = true;
							}
							if (NPC.savedGoblin && num20 < 1)
							{
								Main.nextNPC[107] = true;
							}
							if (NPC.savedTaxCollector && num33 < 1)
							{
								Main.nextNPC[441] = true;
							}
							if (NPC.savedWizard && num19 < 1)
							{
								Main.nextNPC[108] = true;
							}
							if (NPC.savedMech && num21 < 1)
							{
								Main.nextNPC[124] = true;
							}
							if (NPC.downedFrost && num22 < 1 && Main.xMas)
							{
								Main.nextNPC[142] = true;
							}
							if (NPC.downedMechBossAny && num24 < 1)
							{
								Main.nextNPC[178] = true;
							}
							if (flag6 && num25 < 1 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3 || flag7))
							{
								Main.nextNPC[207] = true;
							}
							if (NPC.downedQueenBee && num29 < 1)
							{
								Main.nextNPC[228] = true;
							}
							if (NPC.downedPirates && num30 < 1)
							{
								Main.nextNPC[229] = true;
							}
							if (num23 < 1 && Main.hardMode)
							{
								Main.nextNPC[160] = true;
							}
							if (Main.hardMode && NPC.downedPlantBoss && num27 < 1)
							{
								Main.nextNPC[209] = true;
							}
							if (num34 >= 8 && num28 < 1)
							{
								Main.nextNPC[227] = true;
							}
							if (flag8 && num26 < 1 && num34 >= 14)
							{
								Main.nextNPC[208] = true;
							}
							if (WorldGen.spawnNPC == 0 && num15 < 1)
							{
								WorldGen.spawnNPC = 22;
							}
							if (WorldGen.spawnNPC == 0 && (double)num35 > 5000 && num11 < 1)
							{
								WorldGen.spawnNPC = 17;
							}
							if (WorldGen.spawnNPC == 0 && flag3 && num12 < 1 && num11 > 0)
							{
								WorldGen.spawnNPC = 18;
							}
							if (WorldGen.spawnNPC == 0 && flag4 && num14 < 1)
							{
								WorldGen.spawnNPC = 19;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedGoblin && num20 < 1)
							{
								WorldGen.spawnNPC = 107;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedTaxCollector && num33 < 1)
							{
								WorldGen.spawnNPC = 441;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedWizard && num19 < 1)
							{
								WorldGen.spawnNPC = 108;
							}
							if (WorldGen.spawnNPC == 0 && Main.hardMode && num23 < 1)
							{
								WorldGen.spawnNPC = 160;
							}
							if (WorldGen.spawnNPC == 0 && (NPC.downedBoss1 || NPC.downedBoss2 || NPC.downedBoss3) && num13 < 1)
							{
								WorldGen.spawnNPC = 20;
							}
							if (WorldGen.spawnNPC == 0 && flag5 && num11 > 0 && num17 < 1)
							{
								WorldGen.spawnNPC = 38;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedQueenBee && num29 < 1)
							{
								WorldGen.spawnNPC = 228;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedMechBossAny && num24 < 1)
							{
								WorldGen.spawnNPC = 178;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedMech && num21 < 1)
							{
								WorldGen.spawnNPC = 124;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedAngler && num32 < 1)
							{
								WorldGen.spawnNPC = 369;
							}
							if (WorldGen.spawnNPC == 0 && Main.hardMode && NPC.downedPlantBoss && num27 < 1)
							{
								WorldGen.spawnNPC = 209;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedPirates && num30 < 1)
							{
								WorldGen.spawnNPC = 229;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedBoss3 && num18 < 1)
							{
								WorldGen.spawnNPC = 54;
							}
							if (WorldGen.spawnNPC == 0 && NPC.savedStylist && num31 < 1)
							{
								WorldGen.spawnNPC = 353;
							}
							if (WorldGen.spawnNPC == 0 && flag6 && num25 < 1)
							{
								WorldGen.spawnNPC = 207;
							}
							if (WorldGen.spawnNPC == 0 && num34 >= 8 && num28 < 1)
							{
								WorldGen.spawnNPC = 227;
							}
							if (WorldGen.spawnNPC == 0 && flag8 && num34 >= 14 && num26 < 1)
							{
								WorldGen.spawnNPC = 208;
							}
							if (WorldGen.spawnNPC == 0 && NPC.downedFrost && num22 < 1 && Main.xMas)
							{
								WorldGen.spawnNPC = 142;
							}
						}
					}
				}
			}
			else
			{
				Main.eclipse = false;
				if (!Main.fastForwardTime)
				{
					if (WorldGen.spawnEye && Main.netMode != 1 && Main.time > 4860)
					{
						int num39 = 0;
						while (num39 < 255)
						{
							if (!Main.player[num39].active || Main.player[num39].dead || (double)Main.player[num39].position.Y >= Main.worldSurface * 16)
							{
								num39++;
							}
							else
							{
								NPC.SpawnOnPlayer(num39, 4);
								WorldGen.spawnEye = false;
								break;
							}
						}
					}
					if (WorldGen.spawnHardBoss > 0 && Main.netMode != 1 && Main.time > 4860)
					{
						bool flag9 = false;
						for (int s = 0; s < 200; s++)
						{
							if (Main.npc[s].active && Main.npc[s].boss)
							{
								flag9 = true;
							}
						}
						if (!flag9)
						{
							int num40 = 0;
							while (num40 < 255)
							{
								if (!Main.player[num40].active || Main.player[num40].dead || (double)Main.player[num40].position.Y >= Main.worldSurface * 16)
								{
									num40++;
								}
								else if (WorldGen.spawnHardBoss == 1)
								{
									NPC.SpawnOnPlayer(num40, 134);
									break;
								}
								else if (WorldGen.spawnHardBoss != 2)
								{
									if (WorldGen.spawnHardBoss != 3)
									{
										break;
									}
									NPC.SpawnOnPlayer(num40, 127);
									break;
								}
								else
								{
									NPC.SpawnOnPlayer(num40, 125);
									NPC.SpawnOnPlayer(num40, 126);
									break;
								}
							}
						}
						WorldGen.spawnHardBoss = 0;
					}
				}
				if (Main.time > 32400)
				{
					if (Main.fastForwardTime)
					{
						Main.fastForwardTime = false;
						Main.UpdateSundial();
					}
					Main.checkXMas();
					Main.checkHalloween();
					Main.AnglerQuestSwap();
					if (Main.invasionDelay > 0)
					{
						Main.invasionDelay = Main.invasionDelay - 1;
					}
					WorldGen.spawnNPC = 0;
					Main.checkForSpawns = 0;
					Main.time = 0;
					if (Main.bloodMoon && Main.netMode != 1)
					{
						AchievementsHelper.NotifyProgressionEvent(5);
					}
					Main.bloodMoon = false;
					Main.stopMoonEvent();
					Main.dayTime = true;
					if (Main.sundialCooldown > 0)
					{
						Main.sundialCooldown = Main.sundialCooldown - 1;
					}
					Main.moonPhase = Main.moonPhase + 1;
					if (Main.moonPhase >= 8)
					{
						Main.moonPhase = 0;
					}
					if (Main.netMode == 2)
					{
						NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
						WorldGen.saveAndPlay();
					}
					if (Main.netMode != 1)
					{
						AchievementsHelper.NotifyProgressionEvent(1);
						if (Main.hardMode && NPC.downedMechBossAny && Main.rand.Next(14) == 0)
						{
							Main.eclipse = true;
							AchievementsHelper.NotifyProgressionEvent(2);
							if (Main.eclipse)
							{
								if (Main.netMode == 0)
								{
									Main.NewText(Lang.misc[20], 50, 255, 130, false);
								}
								else if (Main.netMode == 2)
								{
									NetMessage.SendData(25, -1, -1, Lang.misc[20], 255, 50f, 255f, 130f, 0, 0, 0);
								}
							}
							if (Main.netMode == 2)
							{
								NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
							}
						}
						else if (!Main.snowMoon && !Main.pumpkinMoon)
						{
							if (WorldGen.shadowOrbSmashed)
							{
								if (!NPC.downedGoblins)
								{
									if (Main.rand.Next(3) == 0)
									{
										Main.StartInvasion(1);
									}
								}
								else if (Main.hardMode && Main.rand.Next(60) == 0 || !Main.hardMode && Main.rand.Next(30) == 0)
								{
									Main.StartInvasion(1);
								}
							}
							if (Main.invasionType == 0 && Main.hardMode && WorldGen.altarCount > 0 && (NPC.downedPirates && Main.rand.Next(50) == 0 || !NPC.downedPirates && Main.rand.Next(30) == 0))
							{
								Main.StartInvasion(3);
							}
						}
					}
				}
				if (Main.time > 16200 && WorldGen.spawnMeteor)
				{
					WorldGen.spawnMeteor = false;
					WorldGen.dropMeteor();
					return;
				}
			}
		}

		public void UpdateWeather()
		{
			if (SkyManager.Instance != null)
			{
				SkyManager.Instance.Update();
			}
			Main.cloudLimit = 200;
			if (Main.windSpeed < Main.windSpeedSet)
			{
				Main.windSpeed = Main.windSpeed + 0.001f * (float)Main.dayRate;
				if (Main.windSpeed > Main.windSpeedSet)
				{
					Main.windSpeed = Main.windSpeedSet;
				}
			}
			else if (Main.windSpeed > Main.windSpeedSet)
			{
				Main.windSpeed = Main.windSpeed - 0.001f * (float)Main.dayRate;
				if (Main.windSpeed < Main.windSpeedSet)
				{
					Main.windSpeed = Main.windSpeedSet;
				}
			}
			if (Main.netMode == 1)
			{
				return;
			}
			if (Main.netMode != 2 && Main.gameMenu)
			{
				return;
			}
			Main.windSpeedSpeed = Main.windSpeedSpeed + (float)Main.rand.Next(-10, 11) * 0.0001f;
			if (!Main.dayTime)
			{
				Main.windSpeedSpeed = Main.windSpeedSpeed + (float)Main.rand.Next(-10, 11) * 0.0002f;
			}
			if ((double)Main.windSpeedSpeed < -0.002)
			{
				Main.windSpeedSpeed = -0.002f;
			}
			if ((double)Main.windSpeedSpeed > 0.002)
			{
				Main.windSpeedSpeed = 0.002f;
			}
			Main.windSpeedTemp = Main.windSpeedTemp + Main.windSpeedSpeed;
			if (Main.raining)
			{
				Main.windSpeedTemp = Main.windSpeedTemp + Main.windSpeedSpeed * 2f;
			}
			float single = 0.3f + 0.5f * Main.cloudAlpha;
			if (Main.windSpeedTemp < -single)
			{
				Main.windSpeedTemp = -single;
			}
			if (Main.windSpeedTemp > single)
			{
				Main.windSpeedTemp = single;
			}
			if (Main.rand.Next(60) == 0)
			{
				Main.numCloudsTemp = Main.numCloudsTemp + Main.rand.Next(-1, 2);
			}
			if ((float)Main.rand.Next(1000) < 50f * Main.cloudBGAlpha)
			{
				Main.numCloudsTemp = Main.numCloudsTemp + 1;
			}
			if ((float)Main.rand.Next(1000) < 25f * (1f - Main.cloudBGAlpha))
			{
				Main.numCloudsTemp = Main.numCloudsTemp - 1;
			}
			if ((float)Main.rand.Next(1000) < 200f * Main.cloudAlpha && Main.numCloudsTemp < Main.cloudLimit / 2)
			{
				Main.numCloudsTemp = Main.numCloudsTemp + 1;
			}
			if ((float)Main.rand.Next(1000) < 50f * Main.cloudAlpha)
			{
				Main.numCloudsTemp = Main.numCloudsTemp + 1;
			}
			if (Main.numCloudsTemp > Main.cloudLimit / 4 && Main.rand.Next(100) == 0)
			{
				Main.numCloudsTemp = Main.numCloudsTemp - Main.rand.Next(1, 3);
			}
			if (Main.numCloudsTemp < Main.cloudLimit / 4 && Main.rand.Next(100) == 0)
			{
				Main.numCloudsTemp = Main.numCloudsTemp + Main.rand.Next(1, 3);
			}
			if (Main.cloudBGActive <= 0f && Main.numCloudsTemp > Main.cloudLimit / 2 && Main.cloudAlpha == 0f)
			{
				Main.numCloudsTemp = Main.cloudLimit / 2;
			}
			if (Main.numCloudsTemp < 0)
			{
				Main.numCloudsTemp = 0;
			}
			if (Main.numCloudsTemp > Main.cloudLimit)
			{
				Main.numCloudsTemp = Main.cloudLimit;
			}
			Main.weatherCounter = Main.weatherCounter - Main.dayRate;
			if (Main.weatherCounter <= 0)
			{
				Main.numClouds = Main.numCloudsTemp;
				Main.windSpeedSet = Main.windSpeedTemp;
				Main.weatherCounter = Main.rand.Next(3600, 18000);
				if (Main.netMode == 2)
				{
					NetMessage.SendData(7, -1, -1, "", 0, 0f, 0f, 0f, 0, 0, 0);
				}
			}
		}

		public static string ValueToCoins(int value)
		{
			int num = value;
			int num1 = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			while (num >= 1000000)
			{
				num = num - 1000000;
				num1++;
			}
			while (num >= 10000)
			{
				num = num - 10000;
				num2++;
			}
			while (num >= 100)
			{
				num = num - 100;
				num3++;
			}
			num4 = num;
			string str = "";
			if (num1 > 0)
			{
				str = string.Concat(str, num1, " platinum ");
			}
			if (num2 > 0)
			{
				str = string.Concat(str, num2, " gold ");
			}
			if (num3 > 0)
			{
				str = string.Concat(str, num3, " silver ");
			}
			if (num4 > 0)
			{
				str = string.Concat(str, num4, " copper ");
			}
			if (str.Length > 0)
			{
				str = str.Substring(0, str.Length - 1);
			}
			return str;
		}

		protected void wallColorCheck(int t, int c)
		{
			this.LoadWall(t);
			if (!Main.wallAltTextureInit[t, c])
			{
				Main.wallAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.wallTexture[t].Width, Main.wallTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				Main.wallAltTextureInit[t, c] = true;
			}
			if (Main.wallAltTexture[t, c].IsContentLost)
			{
				Main.wallAltTextureDrawn[t, c] = false;
			}
			if (!Main.wallAltTextureDrawn[t, c])
			{
				base.GraphicsDevice.SetRenderTarget(Main.wallAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c == 30)
				{
					Main.tileShader.CurrentTechnique.Passes[43].Apply();
				}
				else if (c < 28)
				{
					Main.tileShader.CurrentTechnique.Passes[c].Apply();
				}
				else
				{
					int num = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[num].Apply();
				}
				Main.spriteBatch.Draw(Main.wallTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.wallTexture[t].Width, Main.wallTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
				Main.wallAltTextureDrawn[t, c] = true;
			}
		}

		protected void woodColorCheck(int t, int c)
		{
			this.LoadTiles(5);
			if (c >= Main.numTileColors)
			{
				return;
			}
			bool flag = false;
			if (Main.woodAltTexture[t, c] == null)
			{
				Main.woodAltTexture[t, c] = new RenderTarget2D(base.GraphicsDevice, Main.woodTexture[t].Width, Main.woodTexture[t].Height, false, base.GraphicsDevice.PresentationParameters.BackBufferFormat, DepthFormat.Depth24, 0, RenderTargetUsage.PreserveContents);
				flag = true;
			}
			if (Main.woodAltTexture[t, c].IsContentLost)
			{
				flag = true;
			}
			if (flag)
			{
				base.GraphicsDevice.SetRenderTarget(Main.woodAltTexture[t, c]);
				base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
				Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);
				if (c >= 28)
				{
					int num = 40 + c - 28;
					Main.tileShader.CurrentTechnique.Passes[num].Apply();
				}
				else if (c <= 0 || c >= 13)
				{
					Main.tileShader.CurrentTechnique.Passes[c].Apply();
				}
				else
				{
					int num1 = c + 27;
					Main.tileShader.CurrentTechnique.Passes[num1].Apply();
				}
				Main.spriteBatch.Draw(Main.woodTexture[t], new Microsoft.Xna.Framework.Rectangle(0, 0, Main.woodTexture[t].Width, Main.woodTexture[t].Height), Microsoft.Xna.Framework.Color.White);
				Main.spriteBatch.End();
				base.GraphicsDevice.SetRenderTarget(null);
			}
		}

		private static int WorldListSortMethod(WorldFileData data1, WorldFileData data2)
		{
			return data1.Name.CompareTo(data2.Name);
		}

		public static event Action OnEngineLoad;

		public delegate void OnPlayerSelected(PlayerFileData player);
	}
}